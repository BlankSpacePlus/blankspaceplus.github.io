<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>欢迎使用Hexo</title>
      <link href="/2023/07/14/huan-ying-shi-yong-hexo/"/>
      <url>/2023/07/14/huan-ying-shi-yong-hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法解决矩阵中的路径问题</title>
      <link href="/2023/03/30/suan-fa-fen-xi-yu-she-ji/hui-su-suan-fa-jie-jue-ju-zhen-zhong-de-lu-jing-wen-ti/"/>
      <url>/2023/03/30/suan-fa-fen-xi-yu-she-ji/hui-su-suan-fa-jie-jue-ju-zhen-zhong-de-lu-jing-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p>例如，在下面的 3×4 的矩阵中包含单词 “ABCCED”（单词中的字母已标出）。</p><p><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/1.png"></p><p>示例 1：<br>输入：board = [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word = “ABCCED”<br>输出：true</p><p>示例 2：<br>输入：board = [[“a”,”b”],[“c”,”d”]], word = “abcd”<br>输出：false</p><p>提示：<br>$\rm m = board.length$<br>$\rm n = board[i].length$<br>$\rm 1 ≤ m, n ≤ 6$<br>$\rm1 ≤ word.length ≤ 15$<br>$\rm board$ 和 $\rm word$ 仅由大小写英文字母组成</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof">https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h1 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h1><p>本题可以用回溯算法深度优先遍历矩阵求解，本算法可以递归实现。</p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/102224364">递归与非递归</a><br>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/115131649">DFS与BFS</a></p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>对于涉及递归的算法，我们一般要将递归部分与入口分开，因此可以定义为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>dfs()</code>方法的入参列表暂不定义，在设计中慢慢明确。</p><p>为了方便处理字符串，我们将Java字符串先转为char[]：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wordChars <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="选择初始状态"><a href="#选择初始状态" class="headerlink" title="选择初始状态"></a>选择初始状态</h2><p>本题的基本求解思路是：遍历矩阵的每一个数据元素尝试作为起始点，向四周寻找符合要求的下一个数据元素，直至达到目标长度。</p><p>为此，需要先遍历此矩阵，尝试寻找适合作为起始点的数据元素。什么是合适的起始数据元素？当然是<code>board[][]</code>中与<code>wordChars[0]</code>相等的数据元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>符合起始条件的数据元素可以被当做DFS的初始状态。<code>//TODO</code>处是我们调用递归函数的起点。</p><h2 id="设计递归方法"><a href="#设计递归方法" class="headerlink" title="设计递归方法"></a>设计递归方法</h2><p>递归树的深度应该是<code>word</code>字符串的长度，因此递归的终止条件也与此有关。可以返回true的情况是：在<code>wordChars[][]</code>中选出了长度等于<code>word</code>长度的序列，并且此序列与<code>word</code>字符串序列的每个元素的值一一对应相等。这两个条件中，前者适合作为递归的终止条件，而后者更适合作为每一次继续递归的准入条件。</p><p>递归函数的返回值的boolean。我们想要的是存在一个符合要求的序列，因此要把结果求或，因为或运算的规则是：<strong>有真即为真</strong>。</p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/129391439">布尔逻辑</a></p><p>考虑到遍历应该是四个方向的，因此<code>dfs()</code>的程序结构应该是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wordChars<span class="token punctuation">.</span>length <span class="token operator">==</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们仍然没有添加<code>dfs()</code>的参数，但此时可以考虑一下了。<br><code>dfs()</code>需要的参数是当前的坐标（一个$\rm x$、一个$\rm y$）、<code>board</code>二维数组、字符串的字符数组序列<code>wordChars</code>、当前新序列的长度（要与<code>wordChars.length</code>比较）。<br><code>wordChars</code>可以以成员变量的形式充当全局变量，无需反复传递；<code>x</code>、<code>y</code>、<code>length</code>是不断改变状态的，没必要作为全局变量；<code>board</code>作为全局变量的话还需要额外开辟一块空间，没有必要，因此可以当做参数传递。</p><p>因此，<code>dfs()</code>的函数头是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于数组、矩阵的问题，至关重要的问题是越界检查。上下左右四个边界不能越界。因此四个判断条件分别修改为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// TODO</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// TODO</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// TODO</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// TODO</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，还缺少了对“回头路”的检查。通常，解决方法是单独开辟一个二维<code>visited</code>数组。<code>visited</code>被定义为成员变量，其元素是布尔类型的，在每次访问前后发生状态改变。</p><p>至此，我们完成了程序设计的过程。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wordChars<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        n <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        wordChars <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wordChars<span class="token punctuation">.</span>length <span class="token operator">==</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            visited<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            visited<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> wordChars<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/2.png"></p><p>即便能够通过，但这段代码仍然是臃肿的，我们还可以进一步完善它。</p><p>遗憾的是，想要改变就必须从整体结构改变。</p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wordChars<span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        n <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        wordChars <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">&gt;=</span> m <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">&gt;=</span> n <span class="token operator">||</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> wordChars<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">||</span> visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> wordChars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/cca250d8e8024fe0a5aa1add335c5324.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密算法</title>
      <link href="/2023/03/25/ji-suan-ji-ke-xue-ji-chu/jia-mi-suan-fa/"/>
      <url>/2023/03/25/ji-suan-ji-ke-xue-ji-chu/jia-mi-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="常见加密算法"><a href="#常见加密算法" class="headerlink" title="常见加密算法"></a>常见加密算法</h1><ul><li>AES算法（Advanced Encryption Standard 高级加密标准）是一种常用的对称加密算法，以密码分组链接方式，依次对明文进行处理，采用了多重代换、多重转换等复杂运算，极大地增加了密码的复杂度。AES算法具有高安全性、运算速度快、适应性强等特点。</li><li>DES算法（Data Encryption Standard 数据加密标准）是一种比较基础的对称加密算法，工作模式为密码块链。DES算法使用56位密钥，将明文按8个字节一组进行加密，通过16轮之后得到密文。但是由于DES的密钥长度过短，已经不再安全。</li><li>MD5算法（Message-Digest Algorithm 5）是一种常用的哈希函数，可以将任意长度的消息摘要成固定长度（128位）的摘要信息。MD5算法具有加密速度快、输出结果长度固定等特点，主要用于数据完整性校验和数字签名等领域。</li><li>RSA算法是一种公钥加密算法，基于数学上的大质数分解问题，广泛用于数字证书、VPN等通信领域。RSA算法的关键在于找到两个足够长且不同质的素数，随机生成一个大数n为这两个素数的积，然后选择一个整数e为公钥，使得e和(n)互质。再计算出另一个整数d，使得e和d模n同余，则d为私钥，可以生成数字签名和解密加密数据。</li><li>SHA-256算法（Secure Hash Algorithm 256）是一种常用的哈希函数，与MD5相似，但输出结果更长（256位）。SHA256算法具有加密强度高、抗攻击能力强、输出结果长度长等特点，被广泛应用于密码学领域和网络安全领域。</li></ul><h1 id="AES算法"><a href="#AES算法" class="headerlink" title="AES算法"></a>AES算法</h1><p>AES（Advanced Encryption Standard）是一种对称加密算法，它是目前应用最广泛的加密算法之一，常被用于数据的加密和解密。</p><p>AES算法可以采用不同的密钥长度，包括128位、192位和256位。密钥越长，加密强度越高，但也会增加加解密的时间和计算资源的消耗。</p><p>AES算法的加密过程是通过一系列的数学运算来实现的。它使用一个密钥来对数据进行加密，然后使用同样的密钥来对加密后的数据进行解密。加密和解密过程中使用的密钥必须是相同的，因此称为对称加密算法。</p><p>AES算法中的加密和解密过程都是基于矩阵操作的。数据会被分成一系列的块，并且每个块都会被转换成一个矩阵。这些矩阵会通过一系列的变换来进行加密或解密，包括字节替换、行移位、列混淆和轮密钥加。</p><p>AES算法的加密强度很高，因为它使用的是对称加密算法，且在处理每个块时都使用了多个变换和不同的密钥。它已经成为了广泛使用的加密算法，被应用于数据传输、数据存储和加密通信等场景。</p><h2 id="AES算法实现"><a href="#AES算法实现" class="headerlink" title="AES算法实现"></a>AES算法实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_LEN</span> <span class="token expression"><span class="token number">1000</span></span></span><span class="token keyword">const</span> <span class="token keyword">char</span> str16<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0123456789abcdef"</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> S<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x7c</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7b</span><span class="token punctuation">,</span> <span class="token number">0xf2</span><span class="token punctuation">,</span> <span class="token number">0x6b</span><span class="token punctuation">,</span> <span class="token number">0x6f</span><span class="token punctuation">,</span> <span class="token number">0xc5</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xd7</span><span class="token punctuation">,</span> <span class="token number">0xab</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span>                                <span class="token number">0xca</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0xc9</span><span class="token punctuation">,</span> <span class="token number">0x7d</span><span class="token punctuation">,</span> <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xf0</span><span class="token punctuation">,</span> <span class="token number">0xad</span><span class="token punctuation">,</span> <span class="token number">0xd4</span><span class="token punctuation">,</span> <span class="token number">0xa2</span><span class="token punctuation">,</span> <span class="token number">0xaf</span><span class="token punctuation">,</span> <span class="token number">0x9c</span><span class="token punctuation">,</span> <span class="token number">0xa4</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span>                                <span class="token number">0xb7</span><span class="token punctuation">,</span> <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0xf7</span><span class="token punctuation">,</span> <span class="token number">0xcc</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0xa5</span><span class="token punctuation">,</span> <span class="token number">0xe5</span><span class="token punctuation">,</span> <span class="token number">0xf1</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0xd8</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span>                                <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xc7</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xc3</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x9a</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xe2</span><span class="token punctuation">,</span> <span class="token number">0xeb</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0xb2</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span>                                <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x2c</span><span class="token punctuation">,</span> <span class="token number">0x1a</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span> <span class="token number">0x6e</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">,</span> <span class="token number">0xd6</span><span class="token punctuation">,</span> <span class="token number">0xb3</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xe3</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span>                                <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xd1</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xed</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0xb1</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span> <span class="token number">0x6a</span><span class="token punctuation">,</span> <span class="token number">0xcb</span><span class="token punctuation">,</span> <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x4a</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xcf</span><span class="token punctuation">,</span>                                <span class="token number">0xd0</span><span class="token punctuation">,</span> <span class="token number">0xef</span><span class="token punctuation">,</span> <span class="token number">0xaa</span><span class="token punctuation">,</span> <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x4d</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x3c</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span> <span class="token number">0xa8</span><span class="token punctuation">,</span>                                <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x8f</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x9d</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xf5</span><span class="token punctuation">,</span> <span class="token number">0xbc</span><span class="token punctuation">,</span> <span class="token number">0xb6</span><span class="token punctuation">,</span> <span class="token number">0xda</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xf3</span><span class="token punctuation">,</span> <span class="token number">0xd2</span><span class="token punctuation">,</span>                                <span class="token number">0xcd</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xec</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xc4</span><span class="token punctuation">,</span> <span class="token number">0xa7</span><span class="token punctuation">,</span> <span class="token number">0x7e</span><span class="token punctuation">,</span> <span class="token number">0x3d</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x5d</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span>                                <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0xee</span><span class="token punctuation">,</span> <span class="token number">0xb8</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xde</span><span class="token punctuation">,</span> <span class="token number">0x5e</span><span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">,</span> <span class="token number">0xdb</span><span class="token punctuation">,</span>                                <span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x3a</span><span class="token punctuation">,</span> <span class="token number">0x0a</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x5c</span><span class="token punctuation">,</span> <span class="token number">0xc2</span><span class="token punctuation">,</span> <span class="token number">0xd3</span><span class="token punctuation">,</span> <span class="token number">0xac</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xe4</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span>                                <span class="token number">0xe7</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6d</span><span class="token punctuation">,</span> <span class="token number">0x8d</span><span class="token punctuation">,</span> <span class="token number">0xd5</span><span class="token punctuation">,</span> <span class="token number">0x4e</span><span class="token punctuation">,</span> <span class="token number">0xa9</span><span class="token punctuation">,</span> <span class="token number">0x6c</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0xf4</span><span class="token punctuation">,</span> <span class="token number">0xea</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x7a</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>                                <span class="token number">0xba</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x2e</span><span class="token punctuation">,</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">0xa6</span><span class="token punctuation">,</span> <span class="token number">0xb4</span><span class="token punctuation">,</span> <span class="token number">0xc6</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">,</span> <span class="token number">0xdd</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0x4b</span><span class="token punctuation">,</span> <span class="token number">0xbd</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x8a</span><span class="token punctuation">,</span>                                <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x3e</span><span class="token punctuation">,</span> <span class="token number">0xb5</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xb9</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0xc1</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x9e</span><span class="token punctuation">,</span>                                <span class="token number">0xe1</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0xd9</span><span class="token punctuation">,</span> <span class="token number">0x8e</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x9b</span><span class="token punctuation">,</span> <span class="token number">0x1e</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xe9</span><span class="token punctuation">,</span> <span class="token number">0xce</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xdf</span><span class="token punctuation">,</span>                                <span class="token number">0x8c</span><span class="token punctuation">,</span> <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">,</span> <span class="token number">0xbf</span><span class="token punctuation">,</span> <span class="token number">0xe6</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0xb0</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0xbb</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> SR<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x6a</span><span class="token punctuation">,</span> <span class="token number">0xd5</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0xa5</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xbf</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x9e</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xf3</span><span class="token punctuation">,</span> <span class="token number">0xd7</span><span class="token punctuation">,</span> <span class="token number">0xfb</span><span class="token punctuation">,</span>                                 <span class="token number">0x7c</span><span class="token punctuation">,</span> <span class="token number">0xe3</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x9b</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x8e</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0xc4</span><span class="token punctuation">,</span> <span class="token number">0xde</span><span class="token punctuation">,</span> <span class="token number">0xe9</span><span class="token punctuation">,</span> <span class="token number">0xcb</span><span class="token punctuation">,</span>                                 <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x7b</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0xa6</span><span class="token punctuation">,</span> <span class="token number">0xc2</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x3d</span><span class="token punctuation">,</span> <span class="token number">0xee</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0xc3</span><span class="token punctuation">,</span> <span class="token number">0x4e</span><span class="token punctuation">,</span>                                 <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x2e</span><span class="token punctuation">,</span> <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xd9</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0xb2</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span> <span class="token number">0xa2</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x6d</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0xd1</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span>                                 <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0xd4</span><span class="token punctuation">,</span> <span class="token number">0xa4</span><span class="token punctuation">,</span> <span class="token number">0x5c</span><span class="token punctuation">,</span> <span class="token number">0xcc</span><span class="token punctuation">,</span> <span class="token number">0x5d</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xb6</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span>                                 <span class="token number">0x6c</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0xed</span><span class="token punctuation">,</span> <span class="token number">0xb9</span><span class="token punctuation">,</span> <span class="token number">0xda</span><span class="token punctuation">,</span> <span class="token number">0x5e</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xa7</span><span class="token punctuation">,</span> <span class="token number">0x8d</span><span class="token punctuation">,</span> <span class="token number">0x9d</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span>                                 <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0xd8</span><span class="token punctuation">,</span> <span class="token number">0xab</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x8c</span><span class="token punctuation">,</span> <span class="token number">0xbc</span><span class="token punctuation">,</span> <span class="token number">0xd3</span><span class="token punctuation">,</span> <span class="token number">0x0a</span><span class="token punctuation">,</span> <span class="token number">0xf7</span><span class="token punctuation">,</span> <span class="token number">0xe4</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0xb8</span><span class="token punctuation">,</span> <span class="token number">0xb3</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span>                                 <span class="token number">0xd0</span><span class="token punctuation">,</span> <span class="token number">0x2c</span><span class="token punctuation">,</span> <span class="token number">0x1e</span><span class="token punctuation">,</span> <span class="token number">0x8f</span><span class="token punctuation">,</span> <span class="token number">0xca</span><span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0xc1</span><span class="token punctuation">,</span> <span class="token number">0xaf</span><span class="token punctuation">,</span> <span class="token number">0xbd</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x8a</span><span class="token punctuation">,</span> <span class="token number">0x6b</span><span class="token punctuation">,</span>                                 <span class="token number">0x3a</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0xea</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0xf2</span><span class="token punctuation">,</span> <span class="token number">0xcf</span><span class="token punctuation">,</span> <span class="token number">0xce</span><span class="token punctuation">,</span> <span class="token number">0xf0</span><span class="token punctuation">,</span> <span class="token number">0xb4</span><span class="token punctuation">,</span> <span class="token number">0xe6</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span>                                 <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0xac</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xe7</span><span class="token punctuation">,</span> <span class="token number">0xad</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xe2</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">,</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xdf</span><span class="token punctuation">,</span> <span class="token number">0x6e</span><span class="token punctuation">,</span>                                 <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xf1</span><span class="token punctuation">,</span> <span class="token number">0x1a</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xc5</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x6f</span><span class="token punctuation">,</span> <span class="token number">0xb7</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0xaa</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span>                                 <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x3e</span><span class="token punctuation">,</span> <span class="token number">0x4b</span><span class="token punctuation">,</span> <span class="token number">0xc6</span><span class="token punctuation">,</span> <span class="token number">0xd2</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x9a</span><span class="token punctuation">,</span> <span class="token number">0xdb</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0xcd</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0xf4</span><span class="token punctuation">,</span>                                 <span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0xdd</span><span class="token punctuation">,</span> <span class="token number">0xa8</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0xc7</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xb1</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xec</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span>                                 <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0xa9</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xb5</span><span class="token punctuation">,</span> <span class="token number">0x4a</span><span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">,</span> <span class="token number">0xe5</span><span class="token punctuation">,</span> <span class="token number">0x7a</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0xc9</span><span class="token punctuation">,</span> <span class="token number">0x9c</span><span class="token punctuation">,</span> <span class="token number">0xef</span><span class="token punctuation">,</span>                                 <span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">,</span> <span class="token number">0x4d</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">,</span> <span class="token number">0xf5</span><span class="token punctuation">,</span> <span class="token number">0xb0</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">,</span> <span class="token number">0xeb</span><span class="token punctuation">,</span> <span class="token number">0xbb</span><span class="token punctuation">,</span> <span class="token number">0x3c</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span>                                 <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x7e</span><span class="token punctuation">,</span> <span class="token number">0xba</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0xd6</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0xe1</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x7d</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Rcon<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x01000000</span><span class="token punctuation">,</span> <span class="token number">0x02000000</span><span class="token punctuation">,</span>                               <span class="token number">0x04000000</span><span class="token punctuation">,</span> <span class="token number">0x08000000</span><span class="token punctuation">,</span>                               <span class="token number">0x10000000</span><span class="token punctuation">,</span> <span class="token number">0x20000000</span><span class="token punctuation">,</span>                               <span class="token number">0x40000000</span><span class="token punctuation">,</span> <span class="token number">0x80000000</span><span class="token punctuation">,</span>                               <span class="token number">0x1b000000</span><span class="token punctuation">,</span> <span class="token number">0x36000000</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> colM<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                        <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                        <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>                        <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> colMR<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span>                         <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>                         <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>                         <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">substitute</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp <span class="token operator">=</span> state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        state<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>tmp <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tmp <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">substituteR</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp <span class="token operator">=</span> state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        state<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> SR<span class="token punctuation">[</span>tmp <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tmp <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">row_shift</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            state<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> j <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">row_shiftR</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> j <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            state<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> j <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">multi</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans <span class="token operator">^=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        v <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">7</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a <span class="token operator">^=</span> <span class="token number">0x1b</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        b <span class="token operator">=</span> b <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">col_mix</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp<span class="token punctuation">,</span> statep<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                tmp <span class="token operator">^=</span> <span class="token function">multi</span><span class="token punctuation">(</span>colM<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            statep<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp <span class="token operator">&amp;</span> <span class="token number">0x00ff</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        state<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> statep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">col_mixR</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp<span class="token punctuation">,</span> statep<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                tmp <span class="token operator">=</span> tmp <span class="token operator">^</span> <span class="token function">multi</span><span class="token punctuation">(</span>colMR<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            statep<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp <span class="token operator">&amp;</span> <span class="token number">0x00ff</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        state<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> statep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        c <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>        x <span class="token operator">&gt;&gt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>        x <span class="token operator">&gt;&gt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>        tmp <span class="token operator">|=</span> S<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    tmp <span class="token operator">^=</span> Rcon<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">generate_w</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>strk<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp<span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>strk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        w<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|=</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">44</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">^</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token function">T</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>state<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp <span class="token operator">|=</span> state<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp <span class="token operator">^=</span> w<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> t <span class="token operator">+</span> i <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                state<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>                tmp <span class="token operator">&gt;&gt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">int_to_str_en</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>ct<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> ans<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ans<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp <span class="token operator">=</span> ct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> str16<span class="token punctuation">[</span><span class="token punctuation">(</span>tmp <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> str16<span class="token punctuation">[</span>tmp <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">int_to_str_de</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>ct<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> anst<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    anst<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp <span class="token operator">=</span> ct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        anst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> anst<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">aes_encode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>strx<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>strk<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>strx<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">16</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>strk<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"invalid length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bit<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        bit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>strx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">generate_w</span><span class="token punctuation">(</span>strk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">substitute</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">row_shift</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">col_mix</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">substitute</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">row_shift</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">int_to_str_en</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">aes_decode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>strx<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>strk<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>strx<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>strk<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"invalid length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    m<span class="token punctuation">[</span><span class="token char">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'4'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'5'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'6'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'7'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'8'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'9'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'c'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'d'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'e'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'f'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bit<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        bit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">[</span>strx<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        bit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> m<span class="token punctuation">[</span>strx<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">generate_w</span><span class="token punctuation">(</span>strk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> t <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">row_shiftR</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">substituteR</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">col_mixR</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">row_shiftR</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">substituteR</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">int_to_str_de</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>option<span class="token punctuation">,</span> <span class="token operator">*</span>text<span class="token punctuation">,</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token operator">*</span>out<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: aes &lt;--encode | --decode&gt; &lt;text&gt; &lt;key&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        option <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        text <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        key <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> <span class="token string">"--encode"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            out <span class="token operator">=</span> <span class="token function">aes_encode</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">puts</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> <span class="token string">"--decode"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            out <span class="token operator">=</span> <span class="token function">aes_decode</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">puts</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: aes &lt;--encode | --decode&gt; &lt;text&gt; &lt;key&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DES算法"><a href="#DES算法" class="headerlink" title="DES算法"></a>DES算法</h1><p>DES（Data Encryption Standard）算法是一种对称加密算法，也是一种古老的加密算法。它使用一个密钥来对数据进行加密和解密，密钥长度为56位。</p><p>DES算法的加密和解密过程都是通过一系列的替换、置换和混淆等操作来实现的。加密过程中，数据会被分成64位的块，然后通过16轮的迭代来进行加密。每轮加密中，数据会经过初始置换、Feistel网络、轮密钥加和逆置换等步骤。其中Feistel网络是DES算法的核心部分，它通过迭代的方式来对数据进行加密和解密。在每轮加密中，会使用不同的子密钥进行处理，子密钥是从主密钥中派生出来的。</p><p>DES算法虽然曾经是广泛使用的加密算法，但由于密钥长度过短，加密强度较弱，易受到暴力破解攻击，因此已经逐渐被更安全的加密算法所取代，如AES算法等。为了提高DES算法的安全性，后来又出现了3DES算法，它是通过对数据进行三次DES加密来提高加密强度。</p><h2 id="DES算法实现"><a href="#DES算法实现" class="headerlink" title="DES算法实现"></a>DES算法实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_LEN</span> <span class="token expression"><span class="token number">1000</span></span></span><span class="token keyword">const</span> <span class="token keyword">char</span> str16<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0123456789abcdef"</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//置换IP表</span><span class="token keyword">const</span> <span class="token keyword">int</span> IP<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span>    <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//逆置换IP-1表</span><span class="token keyword">const</span> <span class="token keyword">int</span> IPR<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span>    <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span>    <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span>    <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// E位选择表(扩展置换表)</span><span class="token keyword">const</span> <span class="token keyword">int</span> E<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span>    <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span>    <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span>    <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// P换位表(单纯换位表)</span><span class="token keyword">const</span> <span class="token keyword">int</span> P<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// PC1选位表(密钥生成置换表1)</span><span class="token keyword">const</span> <span class="token keyword">int</span> PC1<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span>    <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span>    <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// PC2选位表(密钥生成置换表2)</span><span class="token keyword">const</span> <span class="token keyword">int</span> PC2<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span>    <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//左移位数表</span><span class="token keyword">const</span> <span class="token keyword">int</span> LOOP<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// S盒</span><span class="token keyword">const</span> <span class="token keyword">int</span> S<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// S1</span>    <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>    <span class="token comment">// S2</span>    <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>    <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span>    <span class="token comment">// S3</span>    <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span>    <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token comment">// S4</span>    <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>    <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span>    <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>    <span class="token comment">// S5</span>    <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span>    <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>    <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token comment">// S6</span>    <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>    <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span>    <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>    <span class="token comment">// S7</span>    <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token comment">// S8</span>    <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> L<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> R<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span> D<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span> K<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">,</span> FT<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">padding</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>rep<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rep<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">-</span> i <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ip_permutate</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>X<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        L<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span>IP<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        R<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span>IP<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">key_generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>X<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">28</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        C<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span>PC1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        D<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span>PC1<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">28</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> LOOP<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> D<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> LOOP<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>PC2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">28</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                K<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>PC2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                K<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>PC2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>X<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>Y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> e<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span>E<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> Y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x01</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        r <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> e<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> e<span class="token punctuation">[</span><span class="token number">6</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> res <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>            res <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">calculate_en</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">F</span><span class="token punctuation">(</span>R<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> K<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        L<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        R<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">calculate_de</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">F</span><span class="token punctuation">(</span>R<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> K<span class="token punctuation">[</span><span class="token number">17</span> <span class="token operator">-</span> t<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        L<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        R<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ip_reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>X<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>Y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>IPR<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">32</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            FT<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> X<span class="token punctuation">[</span>IPR<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            FT<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Y<span class="token punctuation">[</span>IPR<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">int_to_str_en</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ct<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> ans<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ans<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> tmp <span class="token operator">+</span> ct<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str16<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">int_to_str_de</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ct<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> anst<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    anst<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> tmp <span class="token operator">+</span> ct<span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">*</span> i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        anst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> anst<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">des_encode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>strx<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>strk<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>strx<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>strk<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"invalid length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> bit<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">padding</span><span class="token punctuation">(</span>strx<span class="token punctuation">,</span> bit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">padding</span><span class="token punctuation">(</span>strk<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ip_permutate</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">key_generate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">calculate_en</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ip_reverse</span><span class="token punctuation">(</span>R<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> L<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">int_to_str_en</span><span class="token punctuation">(</span>FT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">des_decode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>strx<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>strk<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>strx<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">16</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>strk<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"invalid length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    m<span class="token punctuation">[</span><span class="token char">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'4'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'5'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'6'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'7'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'8'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'9'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'c'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'d'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'e'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>    m<span class="token punctuation">[</span><span class="token char">'f'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> bit<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> res<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>strx<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        res <span class="token operator">=</span> m<span class="token punctuation">[</span>strx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            bit<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> res <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>            res <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">padding</span><span class="token punctuation">(</span>strk<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ip_permutate</span><span class="token punctuation">(</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">key_generate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">calculate_de</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ip_reverse</span><span class="token punctuation">(</span>R<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> L<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">int_to_str_de</span><span class="token punctuation">(</span>FT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>option<span class="token punctuation">,</span> <span class="token operator">*</span>text<span class="token punctuation">,</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token operator">*</span>out<span class="token punctuation">;</span>    <span class="token comment">// 64bit - 8char</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: des &lt;--encode | --decode&gt; &lt;text&gt; &lt;key&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        option <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        text <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        key <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> <span class="token string">"--encode"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            out <span class="token operator">=</span> <span class="token function">des_encode</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">puts</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> <span class="token string">"--decode"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            out <span class="token operator">=</span> <span class="token function">des_decode</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">puts</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: des &lt;--encode | --decode&gt; &lt;text&gt; &lt;key&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="MD5算法"><a href="#MD5算法" class="headerlink" title="MD5算法"></a>MD5算法</h1><p>MD5是一种广泛使用的加密算法，它将任意长度的消息作为输入，并生成一个128位的哈希值作为输出。MD5的哈希值通常表示为32个十六进制数。</p><p>MD5这个名字是“Message-Digest Algorithm 5”的缩写，它由Ron Rivest于1991年创建。MD5采用了一系列数据处理步骤来生成哈希值。</p><p>首先，MD5会对输入消息进行填充（padding），使其长度为64的倍数。填充方式是在消息末尾添加一些比特，以使其长度达到64的倍数，同时保留原始消息的内容。填充后的消息被划分成512比特（64字节）的块，每个块再进行一系列运算，最终得到一个哈希值。</p><p>具体来说，MD5会将每个512比特的块划分成16个32比特的子块。然后，MD5会执行四轮处理，每轮处理包括以下四个步骤：</p><ol><li>置换（Substitution）：MD5会对每个子块进行一系列置换操作，将输入框中的32位二进制数转换为另一组32位数。</li><li>排序（Permutation）：MD5会根据一定规则对子块进行排序。</li><li>循环移位（Shift）：MD5会对子块进行一定的左移操作。</li><li>加（Addition）：MD5会将子块与上一轮处理后的结果相加，生成一个新的结果。</li></ol><p>经过四轮处理，最终可以得到一个128比特的哈希值。这个哈希值是唯一的，并且对于不同的输入数据，它也会生成不同的哈希值。因此，MD5可以用于验证数据的完整性，以及密码的安全性等方面。</p><p>尽管MD5在密码学中拥有广泛的应用，但它已经被证明存在一些漏洞，使其变得不太安全。在现代密码学中，通常使用更强大的算法，如SHA-256等来代替MD5。</p><h2 id="MD5算法实现"><a href="#MD5算法实现" class="headerlink" title="MD5算法实现"></a>MD5算法实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">A</span> <span class="token expression"><span class="token number">0x67452301</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">B</span> <span class="token expression"><span class="token number">0xefcdab89</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">C</span> <span class="token expression"><span class="token number">0x98badcfe</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">D</span> <span class="token expression"><span class="token number">0x10325476</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_LEN</span> <span class="token expression"><span class="token number">1000</span></span></span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> strlength<span class="token punctuation">,</span> num<span class="token punctuation">,</span> FA<span class="token punctuation">,</span> FB<span class="token punctuation">,</span> FC<span class="token punctuation">,</span> FD<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> str16<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0123456789abcdef"</span><span class="token punctuation">;</span><span class="token comment">// 4*16</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0xd76aa478</span><span class="token punctuation">,</span> <span class="token number">0xe8c7b756</span><span class="token punctuation">,</span> <span class="token number">0x242070db</span><span class="token punctuation">,</span> <span class="token number">0xc1bdceee</span><span class="token punctuation">,</span> <span class="token number">0xf57c0faf</span><span class="token punctuation">,</span> <span class="token number">0x4787c62a</span><span class="token punctuation">,</span><span class="token number">0xa8304613</span><span class="token punctuation">,</span> <span class="token number">0xfd469501</span><span class="token punctuation">,</span> <span class="token number">0x698098d8</span><span class="token punctuation">,</span> <span class="token number">0x8b44f7af</span><span class="token punctuation">,</span> <span class="token number">0xffff5bb1</span><span class="token punctuation">,</span> <span class="token number">0x895cd7be</span><span class="token punctuation">,</span><span class="token number">0x6b901122</span><span class="token punctuation">,</span> <span class="token number">0xfd987193</span><span class="token punctuation">,</span> <span class="token number">0xa679438e</span><span class="token punctuation">,</span> <span class="token number">0x49b40821</span><span class="token punctuation">,</span> <span class="token number">0xf61e2562</span><span class="token punctuation">,</span> <span class="token number">0xc040b340</span><span class="token punctuation">,</span><span class="token number">0x265e5a51</span><span class="token punctuation">,</span> <span class="token number">0xe9b6c7aa</span><span class="token punctuation">,</span> <span class="token number">0xd62f105d</span><span class="token punctuation">,</span> <span class="token number">0x02441453</span><span class="token punctuation">,</span> <span class="token number">0xd8a1e681</span><span class="token punctuation">,</span> <span class="token number">0xe7d3fbc8</span><span class="token punctuation">,</span><span class="token number">0x21e1cde6</span><span class="token punctuation">,</span> <span class="token number">0xc33707d6</span><span class="token punctuation">,</span> <span class="token number">0xf4d50d87</span><span class="token punctuation">,</span> <span class="token number">0x455a14ed</span><span class="token punctuation">,</span> <span class="token number">0xa9e3e905</span><span class="token punctuation">,</span> <span class="token number">0xfcefa3f8</span><span class="token punctuation">,</span><span class="token number">0x676f02d9</span><span class="token punctuation">,</span> <span class="token number">0x8d2a4c8a</span><span class="token punctuation">,</span> <span class="token number">0xfffa3942</span><span class="token punctuation">,</span> <span class="token number">0x8771f681</span><span class="token punctuation">,</span> <span class="token number">0x6d9d6122</span><span class="token punctuation">,</span> <span class="token number">0xfde5380c</span><span class="token punctuation">,</span><span class="token number">0xa4beea44</span><span class="token punctuation">,</span> <span class="token number">0x4bdecfa9</span><span class="token punctuation">,</span> <span class="token number">0xf6bb4b60</span><span class="token punctuation">,</span> <span class="token number">0xbebfbc70</span><span class="token punctuation">,</span> <span class="token number">0x289b7ec6</span><span class="token punctuation">,</span> <span class="token number">0xeaa127fa</span><span class="token punctuation">,</span><span class="token number">0xd4ef3085</span><span class="token punctuation">,</span> <span class="token number">0x04881d05</span><span class="token punctuation">,</span> <span class="token number">0xd9d4d039</span><span class="token punctuation">,</span> <span class="token number">0xe6db99e5</span><span class="token punctuation">,</span> <span class="token number">0x1fa27cf8</span><span class="token punctuation">,</span> <span class="token number">0xc4ac5665</span><span class="token punctuation">,</span><span class="token number">0xf4292244</span><span class="token punctuation">,</span> <span class="token number">0x432aff97</span><span class="token punctuation">,</span> <span class="token number">0xab9423a7</span><span class="token punctuation">,</span> <span class="token number">0xfc93a039</span><span class="token punctuation">,</span> <span class="token number">0x655b59c3</span><span class="token punctuation">,</span> <span class="token number">0x8f0ccc92</span><span class="token punctuation">,</span><span class="token number">0xffeff47d</span><span class="token punctuation">,</span> <span class="token number">0x85845dd1</span><span class="token punctuation">,</span> <span class="token number">0x6fa87e4f</span><span class="token punctuation">,</span> <span class="token number">0xfe2ce6e0</span><span class="token punctuation">,</span> <span class="token number">0xa3014314</span><span class="token punctuation">,</span> <span class="token number">0x4e0811a1</span><span class="token punctuation">,</span><span class="token number">0xf7537e82</span><span class="token punctuation">,</span> <span class="token number">0xbd3af235</span><span class="token punctuation">,</span> <span class="token number">0x2ad7d2bb</span><span class="token punctuation">,</span> <span class="token number">0xeb86d391</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span>  <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>X <span class="token operator">&amp;</span> Y<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">~</span>X <span class="token operator">&amp;</span> Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">G</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>X <span class="token operator">&amp;</span> Z<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>Y <span class="token operator">&amp;</span> <span class="token operator">~</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">H</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> X <span class="token operator">^</span> Y <span class="token operator">^</span> Z<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">I</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> Y <span class="token operator">^</span> <span class="token punctuation">(</span>X <span class="token operator">|</span> <span class="token operator">~</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> slen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token punctuation">(</span>slen <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">512</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>strlength <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> vec<span class="token punctuation">[</span>MAX_LEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//小端 256进制</span>vec<span class="token punctuation">[</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//补充1000..000</span>vec<span class="token punctuation">[</span>slen <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">0x80</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>slen <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> slen <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>vec<span class="token punctuation">[</span>strlength <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token keyword">return</span> vec<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">uin_to_str</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> z<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">char</span> ans<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ans<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> str16<span class="token punctuation">[</span><span class="token punctuation">(</span>tmp <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ans<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> str16<span class="token punctuation">[</span>tmp <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> str16<span class="token punctuation">[</span><span class="token punctuation">(</span>tmp <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ans<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> str16<span class="token punctuation">[</span>tmp <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>z <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> str16<span class="token punctuation">[</span><span class="token punctuation">(</span>tmp <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ans<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> str16<span class="token punctuation">[</span>tmp <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> str16<span class="token punctuation">[</span><span class="token punctuation">(</span>tmp <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ans<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> str16<span class="token punctuation">[</span>tmp <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">rotateL</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>md<span class="token punctuation">,</span> <span class="token keyword">int</span> res<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>md<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> md<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>md<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> md<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">rotateL</span><span class="token punctuation">(</span>md<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> res <span class="token operator">+</span> t <span class="token operator">+</span> T<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>md<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> md<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>X<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> md<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> k<span class="token punctuation">;</span>md<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">;</span>md<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">;</span>md<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">;</span>md<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> D<span class="token punctuation">;</span>md<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>g <span class="token operator">=</span> <span class="token function">F</span><span class="token punctuation">(</span>md<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> md<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> md<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token function">update</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> g<span class="token punctuation">,</span> X<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>g <span class="token operator">=</span> <span class="token function">G</span><span class="token punctuation">(</span>md<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> md<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> md<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token function">update</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> g<span class="token punctuation">,</span> X<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>g <span class="token operator">=</span> <span class="token function">H</span><span class="token punctuation">(</span>md<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> md<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> md<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token function">update</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> g<span class="token punctuation">,</span> X<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>g <span class="token operator">=</span> <span class="token function">I</span><span class="token punctuation">(</span>md<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> md<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> md<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token function">update</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> g<span class="token punctuation">,</span> X<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>FA <span class="token operator">=</span> A <span class="token operator">+</span> md<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>FB <span class="token operator">=</span> B <span class="token operator">+</span> md<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>FC <span class="token operator">=</span> C <span class="token operator">+</span> md<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>FD <span class="token operator">=</span> D <span class="token operator">+</span> md<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">md5_encode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>vect<span class="token punctuation">;</span>vect <span class="token operator">=</span> <span class="token function">padding</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> vect<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">*</span> i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">calculate</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">uin_to_str</span><span class="token punctuation">(</span>FA<span class="token punctuation">,</span> FB<span class="token punctuation">,</span> FC<span class="token punctuation">,</span> FD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> <span class="token operator">*</span>option<span class="token punctuation">,</span> <span class="token operator">*</span>text<span class="token punctuation">,</span> <span class="token operator">*</span>out<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: md5 &lt;--encode&gt; &lt;text&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>option <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>text <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> <span class="token string">"--encode"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>out <span class="token operator">=</span> <span class="token function">md5_encode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: md5 &lt;--encode&gt; &lt;text&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h1><p>RSA算法是一种非对称加密算法，是目前最广泛使用的加密算法之一。它的安全性基于质因数分解难题，即将一个大的合数分解为其素数因子的乘积是一个困难的数学问题。</p><p>RSA算法中，每个用户都有一对密钥：公钥和私钥。公钥可以公开，用于加密数据，私钥用于解密数据。因此，RSA算法也被称为公钥加密算法。</p><p>RSA算法的加密过程如下：首先，将接收者的公钥发送给发送者。发送者使用该公钥对数据进行加密，得到密文，并将密文发送给接收者。接收者使用自己的私钥对密文进行解密，得到原始数据。</p><p>RSA算法的安全性主要取决于密钥的长度。通常，密钥长度越长，加密强度越高，但加密和解密的速度也越慢。在实际应用中，一般会采用2048位或更长的密钥来保证安全性。</p><p>RSA算法不仅可以用于加密数据，还可以用于数字签名和密钥协商等领域。因此，它被广泛应用于电子商务、金融、电子邮件等领域。</p><h2 id="RSA算法实现"><a href="#RSA算法实现" class="headerlink" title="RSA算法实现"></a>RSA算法实现</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;gmpxx.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>mpz_t p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> n<span class="token punctuation">,</span> phi<span class="token punctuation">,</span> pub_key<span class="token punctuation">,</span> pri_key<span class="token punctuation">;</span>string pub_keystr<span class="token punctuation">,</span> pri_keystr<span class="token punctuation">,</span> nstr<span class="token punctuation">,</span> m<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>pub_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>pri_key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">generate_pq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    gmp_randstate_t seed<span class="token punctuation">;</span>    <span class="token function">gmp_randinit_default</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gmp_randseed_ui</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_urandomb</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> seed<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_urandomb</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> seed<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_nextprime</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_nextprime</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">mpz_mul</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> q<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_sub_ui</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_sub_ui</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_mul</span><span class="token punctuation">(</span>phi<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">generate_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">mpz_set_ui</span><span class="token punctuation">(</span>pub_key<span class="token punctuation">,</span> <span class="token number">65537</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_invert</span><span class="token punctuation">(</span>pri_key<span class="token punctuation">,</span> pub_key<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token punctuation">;</span>    mpz_class <span class="token function">temp_n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    mpz_class <span class="token function">temp_pub</span><span class="token punctuation">(</span>pub_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    mpz_class <span class="token function">temp_pri</span><span class="token punctuation">(</span>pri_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    nstr <span class="token operator">=</span> temp_n<span class="token punctuation">.</span><span class="token function">get_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pub_keystr <span class="token operator">=</span> temp_pub<span class="token punctuation">.</span><span class="token function">get_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pri_keystr <span class="token operator">=</span> temp_pri<span class="token punctuation">.</span><span class="token function">get_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string <span class="token function">rsa_encode</span><span class="token punctuation">(</span>string strm<span class="token punctuation">)</span><span class="token punctuation">{</span>    mpz_t m<span class="token punctuation">,</span> temp_pub<span class="token punctuation">,</span> temp_n<span class="token punctuation">;</span>    string ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>temp_pub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>temp_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_set_str</span><span class="token punctuation">(</span>temp_pub<span class="token punctuation">,</span> pub_keystr<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_set_str</span><span class="token punctuation">(</span>temp_n<span class="token punctuation">,</span> nstr<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strm<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">mpz_set_ui</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>strm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mpz_powm</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> m<span class="token punctuation">,</span> temp_pub<span class="token punctuation">,</span> temp_n<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpz_class <span class="token function">t</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">+=</span> t<span class="token punctuation">.</span><span class="token function">get_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">+=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">mpz_clear</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_clear</span><span class="token punctuation">(</span>temp_pub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_clear</span><span class="token punctuation">(</span>temp_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>string <span class="token function">rsa_decode</span><span class="token punctuation">(</span>string strc<span class="token punctuation">)</span><span class="token punctuation">{</span>    mpz_t c<span class="token punctuation">,</span> temp_pri<span class="token punctuation">,</span> temp_n<span class="token punctuation">;</span>    string ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>temp_pri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_init</span><span class="token punctuation">(</span>temp_n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_set_str</span><span class="token punctuation">(</span>temp_pri<span class="token punctuation">,</span> pri_keystr<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mpz_set_str</span><span class="token punctuation">(</span>temp_n<span class="token punctuation">,</span> nstr<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strc<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">mpz_set_str</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> temp<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">mpz_powm</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">,</span> temp_pri<span class="token punctuation">,</span> temp_n<span class="token punctuation">)</span><span class="token punctuation">;</span>            mpz_class <span class="token function">t</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">unsigned</span> <span class="token keyword">long</span> x <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">get_ui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>            temp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            temp <span class="token operator">+=</span> strc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string option<span class="token punctuation">,</span> text<span class="token punctuation">,</span> out1<span class="token punctuation">,</span> out2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: rsa &lt;--run&gt; &lt;text&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        string <span class="token function">option</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string <span class="token function">text</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>option <span class="token operator">==</span> <span class="token string">"--run"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">generate_pq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">generate_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out1 <span class="token operator">=</span> <span class="token function">rsa_encode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Encode: "</span> <span class="token operator">&lt;&lt;</span> out1<span class="token punctuation">;</span>            out2 <span class="token operator">=</span> <span class="token function">rsa_decode</span><span class="token punctuation">(</span>out1<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Decode: "</span> <span class="token operator">&lt;&lt;</span> out2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: rsa &lt;--run&gt; &lt;text&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SHA-256算法"><a href="#SHA-256算法" class="headerlink" title="SHA-256算法"></a>SHA-256算法</h1><p>SHA-256是一种密码学哈希函数，可以接受任何大小的数据，并输出固定长度为256位的散列值。SHA代表安全哈希算法（Secure Hash Algorithm）。SHA-256是SHA家族算法的最新版本之一，在许多密码学应用程序中广泛使用，包括数字签名、身份验证和消息加密等。</p><p>SHA-256是一个单向函数，不能像加密算法那样解密。它将输入文本作为消息，然后通过运算生成一系列唯一的固定字长输出，即散列值。要进行SHA-256哈希，可以使用各种编程语言内置的库或开源实现，例如OpenSSL、Crypto++等。以下是SHA-256哈希的几个重要特点：</p><ul><li>不可逆性：SHA-256是一个不可逆的算法，因此无法通过散列值反推出原始输入文本。</li><li>单向性：SHA-256是一个单向函数，只能从输入文本生成散列值，但不能从散列值还原出输入文本。</li><li>唯一性：不同的输入文本将生成不同的散列值。SHA-256散列值分布范围很广，即使输入文本的微小改变也会产生完全不同的散列值。</li><li>长度固定：无论输入文本有多长，都将生成长度为256位的散列值。这个长度是确定的，不受输入文本长度的影响。</li></ul><p>SHA-256主要优点在于安全性强， 生成摘要时产生的冲突概率小，具有不可逆、单向性和唯一性等特性。因此，SHA-256广泛用于数据完整性校验、数字签名、认证等领域。但是，SHA-256的计算速度相对较慢，因此，在实际应用中需要综合考虑时间效率和安全性。</p><h2 id="SHA-256算法实现"><a href="#SHA-256算法实现" class="headerlink" title="SHA-256算法实现"></a>SHA-256算法实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_LEN</span> <span class="token expression"><span class="token number">1000</span></span></span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> strlength<span class="token punctuation">,</span> num<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> str16<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0123456789abcdef"</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> h<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0x6a09e667</span><span class="token punctuation">,</span> <span class="token number">0xbb67ae85</span><span class="token punctuation">,</span> <span class="token number">0x3c6ef372</span><span class="token punctuation">,</span> <span class="token number">0xa54ff53a</span><span class="token punctuation">,</span>    <span class="token number">0x510e527f</span><span class="token punctuation">,</span> <span class="token number">0x9b05688c</span><span class="token punctuation">,</span> <span class="token number">0x1f83d9ab</span><span class="token punctuation">,</span> <span class="token number">0x5be0cd19</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> K<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0x428a2f98</span><span class="token punctuation">,</span> <span class="token number">0x71374491</span><span class="token punctuation">,</span> <span class="token number">0xb5c0fbcf</span><span class="token punctuation">,</span> <span class="token number">0xe9b5dba5</span><span class="token punctuation">,</span> <span class="token number">0x3956c25b</span><span class="token punctuation">,</span> <span class="token number">0x59f111f1</span><span class="token punctuation">,</span> <span class="token number">0x923f82a4</span><span class="token punctuation">,</span> <span class="token number">0xab1c5ed5</span><span class="token punctuation">,</span>    <span class="token number">0xd807aa98</span><span class="token punctuation">,</span> <span class="token number">0x12835b01</span><span class="token punctuation">,</span> <span class="token number">0x243185be</span><span class="token punctuation">,</span> <span class="token number">0x550c7dc3</span><span class="token punctuation">,</span> <span class="token number">0x72be5d74</span><span class="token punctuation">,</span> <span class="token number">0x80deb1fe</span><span class="token punctuation">,</span> <span class="token number">0x9bdc06a7</span><span class="token punctuation">,</span> <span class="token number">0xc19bf174</span><span class="token punctuation">,</span>    <span class="token number">0xe49b69c1</span><span class="token punctuation">,</span> <span class="token number">0xefbe4786</span><span class="token punctuation">,</span> <span class="token number">0x0fc19dc6</span><span class="token punctuation">,</span> <span class="token number">0x240ca1cc</span><span class="token punctuation">,</span> <span class="token number">0x2de92c6f</span><span class="token punctuation">,</span> <span class="token number">0x4a7484aa</span><span class="token punctuation">,</span> <span class="token number">0x5cb0a9dc</span><span class="token punctuation">,</span> <span class="token number">0x76f988da</span><span class="token punctuation">,</span>    <span class="token number">0x983e5152</span><span class="token punctuation">,</span> <span class="token number">0xa831c66d</span><span class="token punctuation">,</span> <span class="token number">0xb00327c8</span><span class="token punctuation">,</span> <span class="token number">0xbf597fc7</span><span class="token punctuation">,</span> <span class="token number">0xc6e00bf3</span><span class="token punctuation">,</span> <span class="token number">0xd5a79147</span><span class="token punctuation">,</span> <span class="token number">0x06ca6351</span><span class="token punctuation">,</span> <span class="token number">0x14292967</span><span class="token punctuation">,</span>    <span class="token number">0x27b70a85</span><span class="token punctuation">,</span> <span class="token number">0x2e1b2138</span><span class="token punctuation">,</span> <span class="token number">0x4d2c6dfc</span><span class="token punctuation">,</span> <span class="token number">0x53380d13</span><span class="token punctuation">,</span> <span class="token number">0x650a7354</span><span class="token punctuation">,</span> <span class="token number">0x766a0abb</span><span class="token punctuation">,</span> <span class="token number">0x81c2c92e</span><span class="token punctuation">,</span> <span class="token number">0x92722c85</span><span class="token punctuation">,</span>    <span class="token number">0xa2bfe8a1</span><span class="token punctuation">,</span> <span class="token number">0xa81a664b</span><span class="token punctuation">,</span> <span class="token number">0xc24b8b70</span><span class="token punctuation">,</span> <span class="token number">0xc76c51a3</span><span class="token punctuation">,</span> <span class="token number">0xd192e819</span><span class="token punctuation">,</span> <span class="token number">0xd6990624</span><span class="token punctuation">,</span> <span class="token number">0xf40e3585</span><span class="token punctuation">,</span> <span class="token number">0x106aa070</span><span class="token punctuation">,</span>    <span class="token number">0x19a4c116</span><span class="token punctuation">,</span> <span class="token number">0x1e376c08</span><span class="token punctuation">,</span> <span class="token number">0x2748774c</span><span class="token punctuation">,</span> <span class="token number">0x34b0bcb5</span><span class="token punctuation">,</span> <span class="token number">0x391c0cb3</span><span class="token punctuation">,</span> <span class="token number">0x4ed8aa4a</span><span class="token punctuation">,</span> <span class="token number">0x5b9cca4f</span><span class="token punctuation">,</span> <span class="token number">0x682e6ff3</span><span class="token punctuation">,</span>    <span class="token number">0x748f82ee</span><span class="token punctuation">,</span> <span class="token number">0x78a5636f</span><span class="token punctuation">,</span> <span class="token number">0x84c87814</span><span class="token punctuation">,</span> <span class="token number">0x8cc70208</span><span class="token punctuation">,</span> <span class="token number">0x90befffa</span><span class="token punctuation">,</span> <span class="token number">0xa4506ceb</span><span class="token punctuation">,</span> <span class="token number">0xbef9a3f7</span><span class="token punctuation">,</span> <span class="token number">0xc67178f2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">rotateR</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">Ch</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Z<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>X <span class="token operator">&amp;</span> Y<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>X<span class="token punctuation">)</span> <span class="token operator">&amp;</span> Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">Ma</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Z<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>X <span class="token operator">&amp;</span> Y<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>X <span class="token operator">&amp;</span> Z<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>Y <span class="token operator">&amp;</span> Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">sigma0</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">rotateR</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">rotateR</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">rotateR</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">sigma1</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">rotateR</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">rotateR</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">rotateR</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">round0</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">rotateR</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">rotateR</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>X <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">round1</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> X<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">rotateR</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">rotateR</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>X <span class="token operator">&gt;&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> slen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span>slen <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">512</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    strlength <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> vec<span class="token punctuation">[</span>MAX_LEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//大端 256进制</span>        vec<span class="token punctuation">[</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//补充1000..000</span>    vec<span class="token punctuation">[</span>slen <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">0x80</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> slen <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vec<span class="token punctuation">[</span>strlength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>slen <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> vec<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>ha<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> res0<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> res1<span class="token punctuation">)</span><span class="token punctuation">{</span>    ha<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> res0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ha<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ha<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ha<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> res0 <span class="token operator">+</span> res1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ha<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res0<span class="token punctuation">,</span> res1<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> sig1<span class="token punctuation">,</span> sig0<span class="token punctuation">,</span> ma<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ha<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ch <span class="token operator">=</span> <span class="token function">Ch</span><span class="token punctuation">(</span>ha<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ha<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ha<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sig1 <span class="token operator">=</span> <span class="token function">sigma1</span><span class="token punctuation">(</span>ha<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ma <span class="token operator">=</span> <span class="token function">Ma</span><span class="token punctuation">(</span>ha<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ha<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ha<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sig0 <span class="token operator">=</span> <span class="token function">sigma0</span><span class="token punctuation">(</span>ha<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res0 <span class="token operator">=</span> <span class="token punctuation">(</span>ha<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> sig1 <span class="token operator">+</span> ch <span class="token operator">+</span> K<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res1 <span class="token operator">=</span> <span class="token punctuation">(</span>sig0 <span class="token operator">+</span> ma<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>ha<span class="token punctuation">,</span> res0<span class="token punctuation">,</span> res1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        h<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> ha<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">uin_to_str</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> ans<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ans<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> x <span class="token operator">=</span> h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> str16<span class="token punctuation">[</span><span class="token punctuation">(</span>tmp <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> str16<span class="token punctuation">[</span>tmp <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">sha256_encode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>vect <span class="token operator">=</span> <span class="token function">padding</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span>                w<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> vect<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">*</span> i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                w<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">round1</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">round0</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">calculate</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">uin_to_str</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>option<span class="token punctuation">,</span> <span class="token operator">*</span>text<span class="token punctuation">,</span> <span class="token operator">*</span>out<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: sha256 &lt;--encode&gt; &lt;text&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        option <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        text <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> <span class="token string">"--encode"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            out <span class="token operator">=</span> <span class="token function">sha256_encode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">puts</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: sha256 &lt;--encode&gt; &lt;text&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于搜索引擎的信息检索</title>
      <link href="/2023/02/21/ji-suan-ji-ke-xue-ji-chu/ji-yu-sou-suo-yin-qing-de-xin-xi-jian-suo/"/>
      <url>/2023/02/21/ji-suan-ji-ke-xue-ji-chu/ji-yu-sou-suo-yin-qing-de-xin-xi-jian-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><p>搜索引擎(Search Engine)旨在为用户提供在Web动态页面的海洋中导航，有效地检索网络信息资源的途径。搜索引擎的目的是帮助用户寻找网络资源、检索网上信息，在Internet计算机网络环境下，其实现是基于关键词匹配的信息检索机制。</p><p>搜索引擎的基本检索功能是布尔逻辑检索。</p><h1 id="布尔逻辑检索技巧"><a href="#布尔逻辑检索技巧" class="headerlink" title="布尔逻辑检索技巧"></a>布尔逻辑检索技巧</h1><h2 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h2><p>逻辑与也称与、and、AND、&amp;。</p><p>搜索时，<code>计算机 病毒</code>等价于<code>计算机+病毒</code>等价于<code>计算机and病毒</code>，<code>计算机</code>和<code>病毒</code>的布尔逻辑关系是逻辑与。</p><h2 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或"></a>逻辑或</h2><p>逻辑或也称或、or、OR、|。</p><p>搜索时，<code>计算机or电脑</code>等价于<code>计算机|电脑</code>，<code>计算机</code>和<code>电脑</code>的布尔逻辑关系是逻辑或。</p><h2 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a>逻辑非</h2><p>逻辑非也称非、not、NOT、-。</p><p>搜索时，<code>数据not数值</code>等价于<code>数据-数值</code>，<code>数据</code>和<code>数值</code>的布尔逻辑关系是逻辑非。</p><h1 id="字符串检索技巧"><a href="#字符串检索技巧" class="headerlink" title="字符串检索技巧"></a>字符串检索技巧</h1><h2 id="模糊字符串检索技巧"><a href="#模糊字符串检索技巧" class="headerlink" title="模糊字符串检索技巧"></a>模糊字符串检索技巧</h2><p>当输入一个检索词时，搜索引擎会把与该检索词相关的词一并反馈，列出供用户选择。</p><p>相关性检索的检索结果通常是根据相关程度按从大到小的顺序降序排列的模糊搜索。这是一种具有模糊性、引导性的检索方法。</p><p>现在主流的搜索引擎默认的字符串搜索规则是模糊匹配，而非精准匹配。</p><h2 id="完全字符串检索技巧"><a href="#完全字符串检索技巧" class="headerlink" title="完全字符串检索技巧"></a>完全字符串检索技巧</h2><p>完全字符串检索方法是将一个字符串(通常用双引号括起)当作一个独立的运算单元，进行严格匹配，以提高检索的精度和准确度。</p><p>搜索时，<code>"计算机"</code>会精准匹配<code>计算机</code>的相关内容，搜索到的内容一定要包括<code>计算机</code>。</p><h2 id="前缀字符串检索技巧"><a href="#前缀字符串检索技巧" class="headerlink" title="前缀字符串检索技巧"></a>前缀字符串检索技巧</h2><p>前缀字符串检索方法是将一个字符串(后面加上<code>*</code>)进行右截法字符串匹配，搜索结果取并集，可以扩大检索范围。</p><p>例如，<code>nutri*</code>可以搜索到<code>nutria</code>、<code>nutrient</code>、<code>nutrilitei</code>、<code>nutriment</code>、<code>nutrition</code>。</p><h1 id="自然语言检索技巧"><a href="#自然语言检索技巧" class="headerlink" title="自然语言检索技巧"></a>自然语言检索技巧</h1><p>自然语言检索直接采用自然语言中的字、词甚至整个句子作提问式进行检索。</p><p>同样含义的自然语言语句可能搜索到不同的结果集。</p><h1 id="常见的搜索引擎"><a href="#常见的搜索引擎" class="headerlink" title="常见的搜索引擎"></a>常见的搜索引擎</h1><p>现如今最主流的搜索引擎主要有Google、Bing、Baidu等。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9F%BA%E4%BA%8E%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2/1.png"></p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9F%BA%E4%BA%8E%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2/2.png"></p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9F%BA%E4%BA%8E%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2/3.png"></p><h1 id="影响检索结果相关性的因素"><a href="#影响检索结果相关性的因素" class="headerlink" title="影响检索结果相关性的因素"></a>影响检索结果相关性的因素</h1><ol><li>检索词的个数：检索出的记录中含有的检索词个数越多，相关性越大。</li><li>检索词在数据库记录中出现的位置：检索出的记录中含有的检索词出现在题名字段的，比出现在其他(如正文或URL)字段的相关性更大。</li><li>检索词所属的类目级别：检索出的记录中含有的检索词所属的类目级别越高，相关性越大。</li><li>检索词的权值：检索出的记录中含有的检索词权值比重越大，相关性越大(词的专指度越高，权值越大)。</li></ol><h1 id="搜索技巧"><a href="#搜索技巧" class="headerlink" title="搜索技巧"></a>搜索技巧</h1><p>最有效的搜索技巧是选择尽可能好的搜索关键词。</p><ol><li>查询要求应具体明确。</li><li>不要使用常用词，即不要使用太泛的词。如“保险”可细化为“健康保险报价”、“自动保险报价”、“人寿保险报价”等。</li><li>调整查询。如果查询返回太多的结果，就要使检索词更具体。如果查询没有产生足够多的结果，就要使它更一般。不要认为第一次选择的关键字是最好的。</li><li>使用单词的词尾变化。例如，如果要查找有关running的Web页，则可使用“run”、“runs”和“running”等。</li><li>使用同义词。如果用户正在使用的搜索引擎是支持关键词组配的搜索工具，一定要使用“OR”将各个同义词配合起来。</li><li>尽可能多使用字符串检索。如果用户想准确地匹配一个短语或标题，一定要用引号将它括起来，即进行字符串检索。例如，如果想在Internet上查找“information retrieval”，在搜索表单中应键入“information retrieval”。</li><li>熟悉正在使用的搜索工具。掌握一些搜索工具有很特殊的功能，使得查找相关内容更加容易。</li><li>任何信息搜索工具都有其局限性。当用户使用某种工具的搜索效果不理想时，换一种工具再试。一些工具在查询某类信息时的搜索领域宽于查询另一类信息的搜索领域，也可以考虑使用元搜索引擎或专业搜索引擎进行检索。</li><li>当获得的搜索结果十分有价值时，将它作为一个HTML文本存储在本地计算机中，以便再次使用。</li><li>查找专业性较强的信息时，应优先考虑使用专业搜索引擎。国内目前就有多种专业搜索引擎，如公路交通信息搜索引擎、医学搜索引擎、水产搜索引擎、暖通空调搜索引擎等。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息检索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载与重写</title>
      <link href="/2023/02/04/ruan-jian-gong-cheng/mian-xiang-dui-xiang/chong-zai-yu-chong-xie/"/>
      <url>/2023/02/04/ruan-jian-gong-cheng/mian-xiang-dui-xiang/chong-zai-yu-chong-xie/</url>
      
        <content type="html"><![CDATA[<h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>Java确定一个方法需要三个要素：所有权、方法名、形参列表。Java允许同一个类里定义多个形参不同的同名方法，这被称为方法重载(Overload)。返回值类型、访问权限类型不在此讨论范畴。</p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/114701507">可见性</a></p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/123169198">函数和方法</a></p><p>同名、同参、不同返回值的方法间是重复的，而不是Overload的：</p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%87%8D%E8%BD%BD%E4%B8%8E%E9%87%8D%E5%86%99/1.png"></p><p>同名、不同参、不同返回值的方法是Overload的：</p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%87%8D%E8%BD%BD%E4%B8%8E%E9%87%8D%E5%86%99/2.png"></p><p>对于Overload遇到可变参数的情况：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverloadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">overloadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">overloadMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">overloadMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> infos<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入单字符串实参调用overloadMethod()，实际运行的是方法2，而不是方法3。只有传入超过一个字符串实参的时候，调用overloadMethod()才会运行方法3。尽管这种规则是应该掌握的，但实际操作中并不推荐这样做。</p><h2 id="构造方法重载"><a href="#构造方法重载" class="headerlink" title="构造方法重载"></a>构造方法重载</h2><p>构造方法虽然也称“方法”，但与方法不同。尽管不同，但构造方法也可以重载。</p><p>同一个类中具有多个构造方法，多个构造方法的形参列表不同，这被称为构造方法重载(Overload)。构造方法重载的Java类可以提供多种初始化逻辑，允许通过不同的构造方法来初始化该类。</p><p>构造方法的名称必须与类名相同。为了能识别出不同的构造方法，形参列表必须不同。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverloadDemo</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">OverloadDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">OverloadDemo</span><span class="token punctuation">(</span><span class="token class-name">String</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">overloadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">overloadMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">overloadMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> infos<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造方法1和构造方法2就是Overload的。</p><h1 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h1><p>重写与继承相关，有继承才有重写。尽管Java不直接支持多继承，而是通过实现多个接口实现多继承，但是implements接口不过是extends基类的一种变体。</p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/114697596">面向对象中的继承</a></p><p>派生类(子类)继承基类(父类)后，可以扩展基类，也可以部分重写(Override)基类方法。</p><p>Override可以称为方法重写，也可以称为方法覆盖。派生类Override方法的返回值类型不能比基类该方法的返回值类型更大，派生类Override方法声明抛出(throws)的异常不能比基类该方法声明抛出的异常更大，派生类Override方法的访问权限(可见性)不能比基类该方法的访问权限更小。</p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/123164216">程序错误与异常处理</a></p><p>派生类Override基类方法后，可以通过super关键词调用基类该方法。父类的private方法子类不能通过super调用，因为对子类没有可见性，此时子类定义相同方法不是Override。</p><p>继承关系下，Override对实现多态非常重要。想要同基类的不同派生类实例调用同一方法表现出不同的特征，必须要有Override的支持。</p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/114697596">面向对象中的封装、继承和多态</a></p><p>对于Java，基本注解(Annotation)支持@Override，该注解强制一个派生类必须重写基类的方法。被Override标记的派生类方法必须与基类被重写方法匹配，否则编译错误。</p><p>IntelliJ IDEA在非抽象类implements接口后会帮助用@Override标记所有接口方法，这是一个非常好的规范。</p><p>请看如下案例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">OverrideBaseClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">overrideMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OverrideBaseClass's overrideMethod "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OverrideSubClass1</span> <span class="token keyword">extends</span> <span class="token class-name">OverrideBaseClass</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">overrideMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OverrideSubClass1's overrideMethod "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OverrideSubClass2</span> <span class="token keyword">extends</span> <span class="token class-name">OverrideBaseClass</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">overrideMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OverrideSubClass2's overrideMethod "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverrideDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">OverrideBaseClass</span> object1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OverrideSubClass1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OverrideBaseClass</span> object2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OverrideSubClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        object1<span class="token punctuation">.</span><span class="token function">overrideMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        object2<span class="token punctuation">.</span><span class="token function">overrideMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">OverrideSubClass1's overrideMethod OverrideSubClass2's overrideMethod <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该段代码印证了extends、override、polymorphism的关系。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>重载和重写根本就没什么关系，之所以被拉出来讨论，不过是因为二者的中文翻译看起来比较相似，初学者容易弄混。重载发生于同一个类的多个同名不同参方法间，而重写发生在具有继承关系的类的同名方法间。</p><table><thead><tr><th align="center">区别</th><th align="center">重载方法</th><th align="center">重写方法</th></tr></thead><tbody><tr><td align="center">发生范围</td><td align="center">同一个类</td><td align="center">子类</td></tr><tr><td align="center">参数列表</td><td align="center">必须修改</td><td align="center">不能修改</td></tr><tr><td align="center">返回类型</td><td align="center">可修改子类方法返回值</td><td align="center">类型不能比父类方法返回值类型更高</td></tr><tr><td align="center">异常类型</td><td align="center">可修改子类方法声明抛出的异常类</td><td align="center">类型不能比父类方法声明抛出的异常类型更高</td></tr><tr><td align="center">访问修饰符</td><td align="center">可修改</td><td align="center">不能比原方法限制更大</td></tr><tr><td align="center">发生阶段</td><td align="center">编译期</td><td align="center">运行期</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序的编译与运行</title>
      <link href="/2023/01/25/ji-suan-ji-ke-xue-ji-chu/cheng-xu-de-bian-yi-yu-yun-xing/"/>
      <url>/2023/01/25/ji-suan-ji-ke-xue-ji-chu/cheng-xu-de-bian-yi-yu-yun-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><p>C语言源程序要依据语法规则编写。</p><p>C语言源程序主要包括以下部分：</p><ul><li>预处理器指令</li><li>函数</li><li>变量</li><li>语句和表达式</li><li>注释</li></ul><p>C语言源程序样板：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐阅读：<a href="https://www.runoob.com/cprogramming/c-tutorial.html">菜鸟教程 - C语言教程</a></p><p>推荐阅读：<a href="https://blog.csdn.net/weixin_43896318/category_11653076.html">程序设计的基本理论和常识</a></p><p>开发流程：</p><ol><li>打开文本编辑器或集成开发工具，创建C语言工程和C程序源文件，编写C语言代码。</li><li>保存C程序源文件。</li><li>打开命令终端，进入到保存文件所在的目录。</li><li>键入<code>gcc main.c</code>，输入回车，编译代码。</li><li>如果代码中没有错误，命令提示符会跳到下一行，并生成<code>a.out</code>可执行文件，通过<code>-o</code>选项可以改编可执行文件名称。</li><li>键入可执行文件的名称，例如<code>./main</code>或<code>./a.out</code>。</li><li>看到屏幕上显示输出结果。</li></ol><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/1.png"></p><h1 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h1><p>常用编辑器：Visual Studio Code</p><p>常用IDE：Code Blocks、Dev C++、Visual Studio、CLion</p><h2 id="CLion"><a href="#CLion" class="headerlink" title="CLion"></a>CLion</h2><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/2.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/3.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/4.png"></p><p>建议从<a href="https://www.jetbrains.com/clion/">官网</a>下载程序，或者通过ToolBox安装。</p><p>刚刚安装的CLion需要配置后才能Run程序：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/5.png"></p><p>我们可以下载并安装MinGW编译器：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/6.jpg"></p><p>如上图，点击download，会跳转网页，这里推荐另一个网页可<a href="https://sourceforge.net/projects/mingw-w64/">下载MinGW</a>：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/7.png"></p><p>不要直接点击绿色的Download，而是往下找：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/8.png"></p><p>选上图这个版本即可。然后开始下载：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/9.png"></p><p>然后找到需要的位置，解压：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/10.png"></p><p>此时需要找到文件路径添加到CLion的Settings里（注意：路径要写到mingw64，建议直接复制粘贴）：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/11.png"></p><p>稍作等待，待全部出现上图的绿色对勾就OK了，点击“OK”这个Button：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/12.png"></p><p>等配置完成，Run一下HelloWorld试试吧：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/13.png"></p><h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><p>想要更好地学习和掌握C语言，还是要掌握Linux操作系统。</p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/104792128">VMware安装CentOS7系统</a></p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/119749522">翻译、编译、解释、汇编</a></p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/102681464">C语言源程序的编译与执行</a></p><p>推荐阅读：<a href="https://www.cnblogs.com/wang_yb/p/3990952.html">Makefile使用总结 </a></p><p>通常，程序以二进制可执行文件的形式驻留在磁盘上。例如，<code>a.out</code>或<code>hello.exe</code>。为了在CPU上运行，程序必须进入内存并置于进程的上下文中。</p><p>C语言源文件将被<strong>编译器(compiler)</strong> 编译成目标文件，这些目标文件旨在加载到任何物理内存位置，这种格式称为<strong>可重定位目标文件</strong>。</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><strong>链接器(linker)</strong> 将这些可重定位目标文件整合成一个<strong>二进制可执行文件</strong>。在链接阶段，也可能包含其他目标文件或库，通过-lm指定。</p><p>实际上，不见得所有库都链接到可执行文件并加载到内存中，大多数操作系统都允许程序在加载程序时动态链接库。例如，Windows支持动态链接库(DLL)。这种方法的好处是它避免了链接和加载可能最终不会被用于可执行文件的库。动态链接库是有条件地链接的，如果在程序运行时需要它，它就会被加载。链接器会插入重定向信息，允许它在程序加载时动态链接和加载。</p><p>目标文件和可执行文件通常具有标准格式，包括编译后的机器代码和符号表，其中包含有关程序中引用的函数和变量的元数据。对于UNIX和Linux系统，这种标准格式称为可执行和可链接格式(ELF)。可重定位文件和可执行文件有不同的ELF格式。可执行文件的ELF文件中有一条信息是程序的入口点，它包含程序运行时要执行的第一条指令的地址。Windows系统使用PE(Portable Executable)格式，MacOS使用Mach-O格式。</p><p><strong>动态链接</strong>类似于下文提到的动态加载，通常用于系统库，如语言的子程序库。动态链接库为系统库，可链接到用户程序，以便运行。有的操作系统只支持静态链接，它的系统库与其他目标模块一样，通过加载程序，被整合到二进制程序映像。如果不支持动态链接，系统内的所有程序都需要一份语言库的副本或那些被程序所引用的子程序，极大地浪费了磁盘空间和内存空间。</p><p>如果支持动态链接，在二进制映像内，每个库程序的引用都有一个存根(stub)。该存根是一小段代码，用来指出如何定位适当的内存驻留库程序，或者当程序不在内存里时应如何加载库。当执行存根时，它首先检查所需程序是否已在内存中。如果不在，就将程序加载到内存。不管如何，存根会用程序地址来替换自己，并开始执行程序。因此，下次再执行该程序代码时，就可以直接进行，而不会因动态链接产生任何开销。采用这种方案，使用语言库的所有进程只需要一个库代码副本就可以了。</p><p>动态链接也可用于库的更新。一个库可以被新的版本所替代，而且使用该库的所有程序会自动使用新的版本。没有动态链接，所有这些程序应当重新链接以便访问新的库。为了不让程序意外执行新的、不兼容版本的库，版本信息包括在程序和库中。一个库的多个版本可以都加载到内存，程序将通过版本信息来确定使用哪个库的副本。版本更迭会导致版本号的增加。因此，只有采用新库编译的程序才会受新库的不兼容改动的影响。在新库安装之前链接的其他程序将继续使用较旧的库。这种系统也称为共享库。</p><p>与动态加载不同，动态链接通常需要操作系统的帮助。如果内存中的进程是彼此保护的，那么只有操作系统才可以检查所需程序是否在某个进程的内存空间内，或是允许多个进程访问同样的内存地址。</p><h1 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h1><p><strong>加载器(loader)</strong> 用于将二进制可执行文件加载到内存中，使其有资格在CPU上运行。链接和加载需要经过<strong>重定向</strong>，它将实际地址分配给程序部分并调整程序中的代码和数据以匹配这些地址。例如，代码可以调用库函数并在执行时访问其变量。</p><p>如果一个进程的整个程序和所有数据都应在物理内存中，进程的大小受限于内存的大小。为了获得更高的内存空间利用率，可以使用<strong>动态加载</strong>。采用动态加载时，一个程序只有在调用时才会加载。所有程序都以可重定位加载格式保存在磁盘上，等到主程序被加载到内存即可执行。</p><p>当一个程序需要调用另一个程序时，调用程序首先检查另一个程序是否已加载。如果没有加载，可重定位链接程序会加载所需的程序到内存，并更新程序的地址表以反映这一变化。接着，控制传递给新加载的程序。</p><p>动态加载的优点是，当程序被需要时，它才会被加载。当大多数代码需要用来处理异常情况时，这种方法特别有效。在这种情况下，虽然整个程序可能很大，但是所用到的和加载的部分可能很小。</p><p>与动态链接不同，动态加载不需要操作系统提供特别支持。用户只需要认真设计程序以利用这种方法的优点，而操作系统可以通过实现动态加载的程序库来帮助程序员更好地编程。</p><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><p>推荐阅读：<a href="https://www.cnblogs.com/chip/articles/4289623.html">程序在内存中运行的奥秘</a></p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/128744560">操作系统</a></p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/128746107">操作系统的进程管理</a></p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/128747625">操作系统的内存管理</a></p><p>完成上述过程后，如果想要运行程序，只需在命令行中输入可执行文件的名称即可，例如<code>./main</code>。</p><p>利用UNIX/Linux系统执行程序的可执行文件，可以通过命令终端或GUI界面。<br>在终端中输入程序名称运行程序时，Shell首先<strong>创建一个新进程</strong>以使用fork()系统调用运行该程序。然后Shell使用exec()系统调用<strong>调用加载程序</strong>，将可执行文件的名称传递给 exec()。加载程序然后使用新创建的进程的地址空间将指定的程序加载到内存中。<br>在GUI界面操作时，<strong>双击</strong>与可执行文件关联的图标会使用类似的机制调用加载程序。</p><p>多个进程可以共享动态链接库，从而显著节省内存使用。</p><p>printf()的执行也要执行系统调用。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown核心语法</title>
      <link href="/2023/01/23/ji-suan-ji-ke-xue-ji-chu/markdown-he-xin-yu-fa/"/>
      <url>/2023/01/23/ji-suan-ji-ke-xue-ji-chu/markdown-he-xin-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><blockquote><p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p></blockquote><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>CSDN写法(非Markdown标准语法，其他Markdown编辑器不解析)：</p><pre class="line-numbers language-none"><code class="language-none">@[TOC]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-none"><code class="language-none">@[TOC](文章目录标题)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>GitHub写法(自定义)：</p><pre class="line-numbers language-none"><code class="language-none">- [分级标题](#分级标题)- [分隔线](#分隔线)- [超链接](#超链接)  - [行内式](#行内式)  - [参考式](#参考式)  - [自动链接](#自动链接)- [区块引用](#区块引用)  - [引用的多层嵌套](#引用的多层嵌套)  - [引用其它要素](#引用其它要素)- [锚点](#锚点)- [强调](#强调)  - [斜体](#斜体)  - [粗体](#粗体)  - [删除线](#删除线)- [列表](#列表)  - [无序列表](#无序列表)  - [有序列表](#有序列表)  - [包含引用的列表](#包含引用的列表)- [插入图片](#插入图片)  - [图片行内式](#图片行内式)  - [图片参考式](#图片参考式)- [表格](#表格)- [代码](#代码)  - [代码行内式](#代码行内式)  - [缩进式多行代码](#缩进式多行代码)  - [用六个`包裹多行代码](#用六个--包裹多行代码)  - [HTML 原始码](#html-原始码)- [内容目录](#内容目录)- [注脚](#注脚)- [LaTeX 公式](#latex-公式)  - [$ 表示行内公式](#-表示行内公式)  - [$$ 表示整行公式](#-表示整行公式)- [流程图](#流程图)- [时序图](#时序图)- [待办事宜列表](#待办事宜列表)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h1><p>方法1：</p><pre class="line-numbers language-none"><code class="language-none">这是一个一级标题============================这是一个二级标题--------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h1 id="这是一个一级标题"><a href="#这是一个一级标题" class="headerlink" title="这是一个一级标题"></a>这是一个一级标题</h1><h2 id="这是一个二级标题"><a href="#这是一个二级标题" class="headerlink" title="这是一个二级标题"></a>这是一个二级标题</h2></blockquote><p>方法2：</p><pre class="line-numbers language-none"><code class="language-none"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h1 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h1><p>分割线可以用一行内三个以上的星号、减号、底线来标注，此行内不能有其他内容。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre class="line-numbers language-none"><code class="language-none">* * *********- - ----------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><hr><hr></blockquote><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>Markdown支持两种形式的链接语法：行内式和参考式。</p><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><p><code>[]</code>里写链接文字，<code>()</code>里写链接地址，<code>()</code>中的 <code>""</code>中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的title文字。<code>[链接文字](链接地址 "链接标题")</code>这样的形式。链接地址与链接标题前有一个空格。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">Google</span>](<span class="token url">https://www.google.com</span>)</span><span class="token url">[<span class="token content">Google</span>](<span class="token url">https://www.google.com</span> <span class="token string">"google"</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.google.com/">Google</a><br><br></p><p><a href="https://www.google.com/" title="google">Google</a></p></blockquote><h3 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h3><p>参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p><p>参考式链接分为两部分，文中的写法 <code>[链接文字][链接标记]</code>，在文本的任意位置添加 <code>[链接标记]:链接地址 "链接标题"</code>，链接地址与链接标题前有一个空格。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">全球最大的搜索引擎网站是<span class="token url">[<span class="token content">Google</span>][<span class="token variable">1</span>]</span>。[1]:http://www.google.com "Google"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>全球最大的搜索引擎网站是 <a href="http://www.google.com/" title="Google">Google</a>。<br><br></p></blockquote><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>Markdown支持以比较简短的自动链接形式来处理网址和电子邮件信箱, 只要是用<code>&lt;&gt;</code>包起来，Markdown就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&lt;https://google.com&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hahaha@gmail.com</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://google.com/">https://google.com</a><br><br></p><p><a href="mailto:hahaha@gmail.com">hahaha@gmail.com</a></p></blockquote><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>区块引用需要在被引用的文本前加上<code>&gt;</code>符号。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span> 这是一个区块引用实例，<span class="token blockquote punctuation">&gt;</span> Markdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>这是一个区块引用实例，</p></blockquote><blockquote><p>Markdown</p></blockquote><p>Markdown也允许你偷懒只在整个段落的第一行最前面加上<code>&gt;</code>:</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span> 练得身形似鹤形，千株松下两函经。我来问道无余说，云在青天水在瓶。<span class="token blockquote punctuation">&gt;</span> 飘飘乎如遗世独立，羽化而登仙。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>练得身形似鹤形，<br>千株松下两函经。<br>我来问道无余说，<br>云在青天水在瓶。</p></blockquote><blockquote><p>飘飘乎如遗世独立，<br>羽化而登仙。</p></blockquote><h3 id="引用的多层嵌套"><a href="#引用的多层嵌套" class="headerlink" title="引用的多层嵌套"></a>引用的多层嵌套</h3><p>区块引用可以嵌套，只要根据层次加上不同数量的<code>&gt;</code>即可：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;&gt;&gt;</span> 飘飘乎如遗世独立，羽化而登仙。 - 苏轼<span class="token blockquote punctuation">&gt;&gt;</span> 我来问道无余说，云在青天水在瓶。 - 李翱<span class="token blockquote punctuation">&gt;</span> 仿佛兮若轻云之蔽月，飘飘兮若流风之回雪。 - 曹植<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><blockquote><p>飘飘乎如遗世独立，羽化而登仙。 - 苏轼</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>我来问道无余说，云在青天水在瓶。 - 李翱</p></blockquote></blockquote><blockquote><p>仿佛兮若轻云之蔽月，飘飘兮若流风之回雪。 - 曹植</p></blockquote><h3 id="引用其它要素"><a href="#引用其它要素" class="headerlink" title="引用其它要素"></a>引用其它要素</h3><p>引用的区块内也可以使用其他的Markdown语法，包括标题、列表、代码区块等:</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">-</span> 仿佛兮若轻云之蔽月，飘飘兮若流风之回雪。<span class="token blockquote punctuation">&gt;</span><span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">-</span> 飘飘乎如遗世独立，羽化而登仙。<span class="token blockquote punctuation">&gt;</span><span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">-</span> 下面是一段代码：<span class="token blockquote punctuation">&gt;</span>     ```java<span class="token blockquote punctuation">&gt;</span>     public class Main {<span class="token blockquote punctuation">&gt;</span>         public static void main(String[] args) {<span class="token blockquote punctuation">&gt;</span>             System.out.println("Hello, World!");<span class="token blockquote punctuation">&gt;</span>         }<span class="token blockquote punctuation">&gt;</span>     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&gt; - 仿佛兮若轻云之蔽月，飘飘兮若流风之回雪。&gt;&gt; - 飘飘乎如遗世独立，羽化而登仙。&gt;&gt; - 下面是一段代码：&gt;     ```java&gt;     public class Main {&gt;         public static void main(String[] args) {&gt;             System.out.println("Hello, World!");&gt;         }&gt;     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p>网页中, 锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如写下一个锚点，点击回到目录，就能跳转到目录。在目录中点击这一节，就能跳转。还有下一节的注脚。这些根本上都是用锚点来实现的。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token url">[<span class="token content">⬆ top</span>](<span class="token url">#什么是-markdown-</span>)</span></span><span class="token punctuation">**</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-markdown-">⬆ top</a></strong></p><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>Markdown 使用星号<code>*</code>和下划线<code>_</code>作为标记强调字词的符号。</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">霁光浮瓦碧参差</span><span class="token punctuation">*</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><em>霁光浮瓦碧参差</em></p></blockquote><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">霁光浮瓦碧参差</span><span class="token punctuation">**</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>霁光浮瓦碧参差</strong></p></blockquote><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token strike"><span class="token punctuation">~~</span><span class="token content">霁光浮瓦碧参差</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><del>霁光浮瓦碧参差</del></p></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>使用<code>*</code>、<code>+</code>、<code>-</code>表示无序列表。</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 虹起烟宵<span class="token list punctuation">-</span> 驰光绝景<span class="token list punctuation">-</span> 重明万方<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><p>虹起烟宵</p></li><li><p>驰光绝景</p></li><li><p>重明万方</p></li></ul></blockquote><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表则使用数字接着一个英文句点。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 虹起烟宵<span class="token list punctuation">2.</span> 驰光绝景<span class="token list punctuation">3.</span> 重明万方<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><ol><li><p>虹起烟宵</p></li><li><p>驰光绝景</p></li><li><p>重明万方</p></li></ol></blockquote><h3 id="包含引用的列表"><a href="#包含引用的列表" class="headerlink" title="包含引用的列表"></a>包含引用的列表</h3><p>如果要在列表项目内放进引用，那<code>&gt;</code>就需要缩进：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 问道诗:  &gt; 练得身形似鹤形，千株松下两函经。  &gt; 我来问道无余说，云在青天水在瓶。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>问道诗:</p><blockquote><p>练得身形似鹤形，千株松下两函经。<br>我来问道无余说，云在青天水在瓶。</p></blockquote></li></ul><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。</p><p>语法中图片alt的意思是如果图片因为某些原因不能显示，就用定义的图片alt文字来代替图片。 图片title则和链接中的title一样，表示鼠标悬停与图片上时出现的文字。alt和title都不是必须的，可以省略，但建议写上。</p><h3 id="图片行内式"><a href="#图片行内式" class="headerlink" title="图片行内式"></a>图片行内式</h3><p><code>![图片Alt](图片地址 "图片Title")</code></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">google</span>](<span class="token url">https://ucc.alicdn.com/pic/developer-ecology/ftm5ivdcrcte4_aa409bbafcbc408eaf283c5fdf6d970d.png</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/af1fea8eed9d419ad6b0ccb7383645f0.png" alt="google"></p><h3 id="图片参考式"><a href="#图片参考式" class="headerlink" title="图片参考式"></a>图片参考式</h3><p>在文档要插入图片的地方写 <code>![图片alt][标记]</code>。</p><p>在文档的最后写上 <code>[标记]:图片地址 "title"</code>。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">google</span>][<span class="token variable">_google</span>]</span>[_google]:https://img-blog.csdnimg.cn/img_convert/af1fea8eed9d419ad6b0ccb7383645f0.png "google"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/af1fea8eed9d419ad6b0ccb7383645f0.png" alt="google" title="google"></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown表格中，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。列于列之间用管道符<code>|</code>隔开。原生方式的表格每一行的两边也要有管道符。第二行还可以为不同的列指定对齐方向。默认为左对齐, 在<code>-</code>右边加上<code>:</code>就右对齐。</p><p>简单方式：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">诗名|作者|朝代-|-|-赤壁赋|苏轼|宋代锦瑟|李商隐|唐代洛神赋|曹植|三国<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>诗名</th><th>作者</th><th>朝代</th></tr></thead><tbody><tr><td>赤壁赋</td><td>苏轼</td><td>宋代</td></tr><tr><td>锦瑟</td><td>李商隐</td><td>唐代</td></tr><tr><td>洛神赋</td><td>曹植</td><td>三国</td></tr></tbody></table><p>原生方式：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">|诗名|作者|朝代||-|-|-||赤壁赋|苏轼|宋代||锦瑟|李商隐|唐代||洛神赋|曹植|三国|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>诗名</th><th>作者</th><th>朝代</th></tr></thead><tbody><tr><td>赤壁赋</td><td>苏轼</td><td>宋代</td></tr><tr><td>锦瑟</td><td>李商隐</td><td>唐代</td></tr><tr><td>洛神赋</td><td>曹植</td><td>三国</td></tr></tbody></table><p>为表格第二列指定方向：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">诗名|名句-|-:长恨歌|云鬓花颜金步摇，芙蓉帐暖度春宵。梦游天姥吟留别|云青青兮欲雨，水澹澹兮生烟。陋室铭|无丝竹之乱耳，无案牍之劳形。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>诗名</th><th align="right">名句</th></tr></thead><tbody><tr><td>长恨歌</td><td align="right">云鬓花颜金步摇，芙蓉帐暖度春宵。</td></tr><tr><td>梦游天姥吟留别</td><td align="right">云青青兮欲雨，水澹澹兮生烟。</td></tr><tr><td>陋室铭</td><td align="right">无丝竹之乱耳，无案牍之劳形。</td></tr></tbody></table><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">诗名|名句-|:-长恨歌|云鬓花颜金步摇，芙蓉帐暖度春宵。梦游天姥吟留别|云青青兮欲雨，水澹澹兮生烟。陋室铭|无丝竹之乱耳，无案牍之劳形。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>诗名</th><th align="left">名句</th></tr></thead><tbody><tr><td>长恨歌</td><td align="left">云鬓花颜金步摇，芙蓉帐暖度春宵。</td></tr><tr><td>梦游天姥吟留别</td><td align="left">云青青兮欲雨，水澹澹兮生烟。</td></tr><tr><td>陋室铭</td><td align="left">无丝竹之乱耳，无案牍之劳形。</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种：利用缩进(Tab)，或利用”`”符号(一般在ESC键下方)包裹代码。</p><ul><li>插入行内代码，即插入一个单词或者一句代码的情况，使用 `code` 这样的形式插入。</li><li>插入多行代码，可以使用缩进或者 ``` code ```。</li></ul><h3 id="代码行内式"><a href="#代码行内式" class="headerlink" title="代码行内式"></a>代码行内式</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">Java打印堆栈信息<span class="token code-snippet code keyword">`e.printStackTrace()`</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Java打印堆栈信息<code>e.printStackTrace()</code>。</p></blockquote><h3 id="缩进式多行代码"><a href="#缩进式多行代码" class="headerlink" title="缩进式多行代码"></a>缩进式多行代码</h3><p>缩进4个空格或是1个制表符。</p><p>一个代码区块会一直持续到没有缩进的那一行(或是文件结尾)。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">public static void main(String[] args) {    System.out.println("Hello, World!");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>public static void main(String[] args) {    System.out.println("Hello, World!");}</code></pre><h3 id="用六个-96-包裹多行代码"><a href="#用六个-96-包裹多行代码" class="headerlink" title="用六个`包裹多行代码"></a>用六个`包裹多行代码</h3><p>```java<br>public class Main {<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args) {<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(“Hello, World!”);<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}<br>}<br>```</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTML原始码"><a href="#HTML原始码" class="headerlink" title="HTML原始码"></a>HTML原始码</h3><p>在代码区块里面，<code>&amp;</code> 、<code>&lt;</code>和<code>&gt;</code>会自动转成HTML实体，这样的方式让你非常容易使用Markdown插入范例用的HTML原始码，只需要复制贴上，剩下的Markdown都会帮你处理，例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>星期一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>星期二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>星期三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>李强<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>王刚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>张涛<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table>    <tbody><tr>        <th>星期一</th>        <th>星期二</th>        <th>星期三</th>    </tr>    <tr>        <td>李强</td>        <td>王刚</td>        <td>张涛</td>    </tr></tbody></table><h3 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p><h2 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h2><p>在需要添加注脚的文字后加上脚注名字<code>[^注脚名字]</code>，称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2]。<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">^1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Markdown</span> 是一种纯文本标记语言<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">^2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> HyperText</span> Markup Language 超文本标记语言<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LaTeX公式"><a href="#LaTeX公式" class="headerlink" title="LaTeX公式"></a>LaTeX公式</h2><h3 id="LaTeX公式规范"><a href="#LaTeX公式规范" class="headerlink" title="LaTeX公式规范"></a>LaTeX公式规范</h3><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/104517063">LaTeX符号语法总结</a></p><h3 id="表示行内公式"><a href="#表示行内公式" class="headerlink" title="$表示行内公式"></a>$表示行内公式</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">质能守恒方程可以用一个很简洁的方程式$E=mc^2$来表达。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>质能守恒方程可以用一个很简洁的方程式$E=mc^2$来表达。</p><h3 id="表示整行公式"><a href="#表示整行公式" class="headerlink" title="$$ 表示整行公式"></a>$$ 表示整行公式</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">$$\sum_{i=1}^n a_i=0$$$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$$$\sum^{j-1}<span class="token italic"><span class="token punctuation">_</span><span class="token content">{k=0}{\widehat{\gamma}</span><span class="token punctuation">_</span></span>{kj} z_k}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>过去GitHub等网站的等Markdown解释器不支持LaTeX公式，但是有个折中的解决方案，使用 codecogs，例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">![](https://latex.csdn.net/eq?\sum_{i=1}^n%20a_i=0)![](https://latex.csdn.net/eq?f\(x_1,x_x,\ldots,x_n\)%20=%20x_1^2%20+%20x_2^2%20+%20\cdots%20+%20x_n^2%20)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://latex.csdn.net/eq?%5Csum_%7Bi=1%7D%5En%20a_i=0"></p><p><img src="https://latex.csdn.net/eq?f(x_1,x_x,%5Cldots,x_n)%20=%20x_1%5E2%20+%20x_2%5E2%20+%20%5Ccdots%20+%20x_n%5E2%20"></p><p>现在GitHub已经支持LaTeX公式：</p><p>$$\sum_{i=1}^n a_i=0$$<br>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>流程图大致分为两段，第一段是定义元素，第二段是定义元素之间的走向。</p><p>定义元素的语法<code>tag=&gt;type: content:&gt;url</code>。</p><ul><li>tag就是元素名字。</li><li>type是这个元素的类型，有6中类型，分别为：</li></ul><table><thead><tr><th>type</th><th>含义</th></tr></thead><tbody><tr><td>start</td><td>开始</td></tr><tr><td>end</td><td>结束</td></tr><tr><td>operation</td><td>操作</td></tr><tr><td>subroutine</td><td>子程序</td></tr><tr><td>condition</td><td>条件</td></tr><tr><td>inputoutput</td><td>输入或产出</td></tr></tbody></table><p>content 就是在框框中要写的内容，注意type后的冒号与文本之间一定要有个空格。</p><p>用<code>-&gt;</code>来连接两个元素，需要注意的是condition类型，因为他有yes和no两个分支，所以要写成：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">c2(yes)-&gt;io-&gt;ec2(no)-&gt;op2-&gt;e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>```mermaid<br>flowchat<br>st=&gt;start: Start:&gt;<a href="https://www.markdown-syntax.com/">https://www.markdown-syntax.com</a><br>io=&gt;inputoutput: verification<br>op=&gt;operation: Your Operation<br>cond=&gt;condition: Yes or No?<br>sub=&gt;subroutine: Your Subroutine<br>e=&gt;end<br>st-&gt;io-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;sub-&gt;io<br>```</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">flowchatst=&gt;start<span class="token operator">:</span> Start<span class="token operator">:</span>&gt;https<span class="token operator">:</span>//www.markdown-syntax.comio=&gt;inputoutput<span class="token operator">:</span> verificationop=&gt;operation<span class="token operator">:</span> Your Operationcond=&gt;condition<span class="token operator">:</span> Yes or No?sub=&gt;subroutine<span class="token operator">:</span> Your Subroutinee=&gt;endst<span class="token arrow operator">-&gt;</span>io<span class="token arrow operator">-&gt;</span>op<span class="token arrow operator">-&gt;</span>condcond<span class="token text string">(yes)</span>-&gt;econd<span class="token text string">(no)</span>-&gt;sub<span class="token arrow operator">-&gt;</span>io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p>```mermaid<br>sequenceDiagram<br>Alice-&gt;&gt;Bob: Hello Bob, how are you ?<br>Note right of Bob: Bob thinks<br>Bob–&gt;&gt;Alice: I am good thanks!<br>```</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">sequenceDiagram</span>Alice<span class="token arrow operator">-&gt;&gt;</span>Bob<span class="token operator">:</span> Hello Bob, how are you ?<span class="token keyword">Note right of</span> Bob<span class="token operator">:</span> Bob thinksBob<span class="token arrow operator">--&gt;&gt;</span>Alice<span class="token operator">:</span> I am good thanks!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="待办事宜列表"><a href="#待办事宜列表" class="headerlink" title="待办事宜列表"></a>待办事宜列表</h2><p>使用带有<code>[ ]</code>或<code>[x]</code>(未完成或已完成)项的列表语法撰写一个待办事宜列表，例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> [ ] 早起跑步<span class="token list punctuation">-</span> [x] 看书<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><input disabled="" type="checkbox"> 早起跑步</li><li><input checked="" disabled="" type="checkbox"> 看书</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略和机制分离</title>
      <link href="/2023/01/22/ji-suan-ji-ke-xue-ji-chu/ce-lue-he-ji-zhi-fen-chi/"/>
      <url>/2023/01/22/ji-suan-ji-ke-xue-ji-chu/ce-lue-he-ji-zhi-fen-chi/</url>
      
        <content type="html"><![CDATA[<h1 id="策略和机制"><a href="#策略和机制" class="headerlink" title="策略和机制"></a>策略和机制</h1><p>计算机科学和软件工程实践中，“策略和机制分离”是一条重要经验。为了弄明白这句话的含义，首先要理解什么是策略，什么是机制。</p><p>想要做一件事达成一个目标，要知道为什么做(Why)，做什么(What)，如何做(How)。研究目的或工程需求明确了“为什么做”，策略决定了“做什么”，机制决定了“如何做”。</p><p>策略与机制的分离对于灵活性的保持很重要。在实际操作中，明确了“为什么做”以后，就该明确“做什么”，此后的“如何做”可能有多种方案；而对于明确的“为什么做”，前期开发出充足的底层机制，可以为后续提供更多的策略选择。例如，面对给定的任务目标和输入输出需求，我们可以更换许多可选的模型去尝试调参，我们可以尝试更换许多不同的算法实现去比较，算法的可替换性就显得十分重要。如果不能实现低成本的替换，则不利于任务目标的达成。</p><p>对于固定的顶层策略，底层实现应该提供多种选择，并且做到低成本切换和替换。对于固定的底层机制，策略可能随时间或地点而改变，对策略改变不敏感的通用底层机制将是更可取的。</p><h1 id="操作系统中的策略和机制"><a href="#操作系统中的策略和机制" class="headerlink" title="操作系统中的策略和机制"></a>操作系统中的策略和机制</h1><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/128744560">操作系统</a></p><p>例如，操作系统存在某种机制，可赋予某些类型的程序相对更高的优先权。如果这种机制能与策略分离开，那么它可用于支持I/O密集型程序应比CPU密集型程序具有更高优先级的策略，或者支持相反策略。</p><p>微内核操作系统也是一个典型的例子。微内核操作系统通过实现一组基本且简单的模块，将机制与策略的分离用到了极致。这些模块几乎与策略无关，通过用户创建的内核模块或用户程序本身，可以增加更高级的机制与策略。</p><h1 id="软件工程中的策略模式"><a href="#软件工程中的策略模式" class="headerlink" title="软件工程中的策略模式"></a>软件工程中的策略模式</h1><p>策略模式是GoF23种设计模式中的一种，是软件工程的重要实践。通过策略模式，借助委托，我们可以更方便地替换算法，甚至是动态替换算法。</p><p>策略模式涉及三个角色：</p><ul><li><strong>Strategy</strong>：该角色负责决定实现策略所必需的接口。</li><li><strong>ConcreteStrategy</strong>：该角色负责实现Strategy角色所定义的接口。</li><li><strong>Context</strong>：该角色保存了ConcreteStrategy角色的实例，并调用ConcreteStrategy的角色去实现需求。</li></ul><p>基于<a href="https://www.processon.com/">ProcessOn</a>绘制的策略模式的类图如下所示：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%AD%96%E7%95%A5%E5%92%8C%E6%9C%BA%E5%88%B6%E5%88%86%E7%A6%BB/1.png"></p><h2 id="策略模式的排序应用"><a href="#策略模式的排序应用" class="headerlink" title="策略模式的排序应用"></a>策略模式的排序应用</h2><p>Maven依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-params<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Strategy类定义为<code>SortStrategy.java</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提供选择排序实现机制<code>InsertSortStrategy.java</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertSortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">SortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> position<span class="token punctuation">,</span> length <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">T</span> temp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>position <span class="token operator">=</span> i<span class="token punctuation">;</span> position <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span> position<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            data<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提供冒泡排序实现机制<code>BubbleSortStrategy.java</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">SortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> position<span class="token punctuation">,</span> bound<span class="token punctuation">,</span> length <span class="token operator">=</span> record<span class="token punctuation">.</span>length<span class="token punctuation">,</span> exchange <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">T</span> temp<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>exchange <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bound <span class="token operator">=</span> exchange<span class="token punctuation">;</span>            exchange <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> position <span class="token operator">&lt;</span> bound<span class="token punctuation">;</span> position<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> record<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>                    record<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    record<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    exchange <span class="token operator">=</span> position<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单元测试<code>SortStrategyTest .java</code>（省略Context角色）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>blankspace<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">BubbleSortStrategy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>blankspace<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">InsertSortStrategy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>blankspace<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortStrategy</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortStrategyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertSortStrategyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InsertSortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> expectedData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>actualData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expectedData<span class="token punctuation">,</span> actualData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bubbleSortStrategyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BubbleSortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> expectedData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>actualData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expectedData<span class="token punctuation">,</span> actualData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>度量前缀与性能指标</title>
      <link href="/2023/01/18/ji-suan-ji-ke-xue-ji-chu/du-liang-qian-zhui-yu-xing-neng-zhi-biao/"/>
      <url>/2023/01/18/ji-suan-ji-ke-xue-ji-chu/du-liang-qian-zhui-yu-xing-neng-zhi-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="度量前缀"><a href="#度量前缀" class="headerlink" title="度量前缀"></a>度量前缀</h1><p>每个领域都有自己衡量事物的方式，计算机领域也不例外。计算机人员要互相告诉对方某物有多大或有多快，他们必须使用相同的度量单位。</p><p>下表给出了计算机科学中可能会大量用到的前缀及其数值含义。</p><table><thead><tr><th align="center">前缀</th><th align="center">符号</th><th align="center">10进制</th><th align="center">2进制</th></tr></thead><tbody><tr><td align="center">Kilo</td><td align="center">K</td><td align="center">${10}^{3}$</td><td align="center">${2}^{10}$</td></tr><tr><td align="center">Mega</td><td align="center">M</td><td align="center">${10}^{6}$</td><td align="center">${2}^{20}$</td></tr><tr><td align="center">Giga</td><td align="center">G</td><td align="center">${10}^{9}$</td><td align="center">${2}^{30}$</td></tr><tr><td align="center">Tera</td><td align="center">T</td><td align="center">${10}^{12}$</td><td align="center">${2}^{40}$</td></tr><tr><td align="center">Peta</td><td align="center">P</td><td align="center">${10}^{15}$</td><td align="center">${2}^{50}$</td></tr><tr><td align="center">Exa</td><td align="center">E</td><td align="center">${10}^{18}$</td><td align="center">${2}^{60}$</td></tr><tr><td align="center">Zetta</td><td align="center">Z</td><td align="center">${10}^{21}$</td><td align="center">${2}^{70}$</td></tr><tr><td align="center">Yotta</td><td align="center">Y</td><td align="center">${10}^{24}$</td><td align="center">${2}^{80}$</td></tr><tr><td align="center">Mili</td><td align="center">m</td><td align="center">${10}^{-3}$</td><td align="center">${2}^{-10}$</td></tr><tr><td align="center">Micro</td><td align="center">μ</td><td align="center">${10}^{-6}$</td><td align="center">${2}^{-20}$</td></tr><tr><td align="center">Nano</td><td align="center">n</td><td align="center">${10}^{-9}$</td><td align="center">${2}^{-30}$</td></tr><tr><td align="center">Pico</td><td align="center">p</td><td align="center">${10}^{-12}$</td><td align="center">${2}^{-40}$</td></tr><tr><td align="center">Femto</td><td align="center">f</td><td align="center">${10}^{-15}$</td><td align="center">${2}^{-50}$</td></tr><tr><td align="center">Atto</td><td align="center">a</td><td align="center">${10}^{-18}$</td><td align="center">${2}^{-60}$</td></tr><tr><td align="center">Zepto</td><td align="center">z</td><td align="center">${10}^{-21}$</td><td align="center">${2}^{-70}$</td></tr><tr><td align="center">Yocto</td><td align="center">y</td><td align="center">${10}^{-24}$</td><td align="center">${2}^{-80}$</td></tr></tbody></table><p>这些前缀可以与具体的度量单位组成新的度量单位。例如，对于bps这个单位，可以加上k组成kbps，可以加上M组成Mbps。</p><p>K、M等前缀都不是单位，只有数值含义。例如，2GB可以表示存储量，但2G只能表示以1B为存储单位的数量。</p><p>以K为例，看起来${10}^{3}$和${2}^{10}$分别是其十进制和二进制表示，但大家都知道${2}^{10}=1024≠1000={10}^{3}$。<br>遗憾的是，二者明明不同，却常常被混用。了解这些前缀的具体含义很重要。<br>例如，一千字节 (1KB) 的内存通常是 $1024$ 字节的内存，而不是 $1000$ 字节的内存。但是，一个 1GB 的磁盘驱动器实际上可能是 10 亿字节而不是 ${2}^{30}$，这意味着实际获得的存储空间比想象的要少。所有 3.5 英寸软盘都被描述为存储 1.44MB 的数据，而实际上它们存储 1440KB（或 $1440 ×{2}^{10} = 1474560$ 字节）。<br>具体应用的时候，要认真了解前缀的具体含义，以确保确切知道 1K、1KB 或 1G 代表什么。</p><p>另外，$2$的幂次也要记住：</p><ul><li>${2}^{0}=1$</li><li>${2}^{1}=2$</li><li>${2}^{2}=4$</li><li>${2}^{3}=8$</li><li>${2}^{4}=16$</li><li>${2}^{5}=32$</li><li>${2}^{6}=64$</li><li>${2}^{7}=128$</li><li>${2}^{8}=256$</li><li>${2}^{9}=512$</li><li>${2}^{10}=1024$</li><li>${2}^{11}=2048$</li><li>${2}^{12}=4096$</li><li>${2}^{13}=8192$</li><li>${2}^{14}=16384$</li><li>${2}^{15}=32768$</li><li>$……$</li></ul><h1 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h1><p>下面是一些重要的计算机性能指标：</p><ol><li>吞吐量：吞吐量指信息流入、处理和流出系统的速率。它取决于CPU能多快地取指令，数据能够多快地从内存取出或存入，以及所得结果能够多快地从内存送到输出设备。这些决定因素中的任一步骤都与主存紧密相关，因此吞吐量主要取决于主存的存取周期。</li><li>响应时间：响应时间指从提交作业到得到CPU响应所经历的时间。响应时间越短，吞吐量越大。</li><li>主频：主频是机器内部主时钟的频率，是衡量机器速度的重要参数，其常用单位是Hz、MHz等。</li><li>CPU周期：CPU周期又称为机器周期，通常用从内存读取一条指令字的最短时间来定义。一个指令周期常由若干个CPU周期构成。</li><li>CPU时钟周期：主频的倒数，CPU最小的时间单位。</li><li>CPI、MIPS、FLOPS：<ol><li>CPI：执行一条指令所需要的时钟周期数。</li><li>MIPS：每秒钟可执行的百万条指令数。</li><li>FLOPS：每秒钟执行的浮点运算次数。<ol><li>MFLOPS：每秒钟执行的百万次浮点运算数。</li><li>GFLOPS：每秒钟执行的十亿次浮点运算数。</li><li>TFLOPS：每秒钟执行的万亿次浮点运算数。</li><li>PFLOPS：每秒钟执行的千万亿次浮点运算数。</li></ol></li></ol></li><li>CPU执行时间：CPU执行时间指CPU对特定程序的执行时间。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法解决树的遍历问题</title>
      <link href="/2023/01/14/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-shu-de-bian-li-wen-ti/"/>
      <url>/2023/01/14/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-shu-de-bian-li-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h1><p>树的遍历分为四种：前序遍历、中序遍历、后序遍历、层序遍历。</p><p>前三种遍历方式的实现都用到了分治算法，且都有递归实现和非递归实现两种。</p><p>结构定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> left<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> right<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> left<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给你二叉树的根节点 root ，返回它节点值的 前序/中序/后序/层序 遍历。</p><p><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E9%97%AE%E9%A2%98/1.jpg"></p><h1 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h1><p>非递归实现：借助栈结构，出栈节点的右儿子节点先入栈，左儿子节点后入栈。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">TreeNode</span> tempNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tempNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tempNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码提交：<a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">LeetCode144. 二叉树的前序遍历</a></p><h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><p>非递归实现：借助栈结构，先将出栈节点的右儿子节点入栈，再考虑出栈节点的左儿子节点。如果出栈节点存在左儿子节点，则出栈节点和其左儿子节点入栈；如果其不存在左儿子节点，则输出当前出栈节点。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">TreeNode</span> tempNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tempNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tempNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tempNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                    stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tempNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tempNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码提交：<a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">LeetCode 94. 二叉树的中序遍历</a></p><h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h1><p>非递归实现：借助栈结构，同时考虑出栈节点是否存在左右儿子节点。如果左右儿子节点都不存在，则输出当前节点；如果有存在，则先右后左入栈。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">TreeNode</span> tempNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tempNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                    stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tempNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tempNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tempNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tempNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tempNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码提交：<a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">LeetCode 145. 二叉树的后序遍历</a></p><h1 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h1><p>层序遍历是BFS，与前面三个DFS不同，要借助队列结构而不是栈结构，具体区别参考：<a href="https://blankspace.blog.csdn.net/article/details/115131649">DFS与BFS的区别</a>。</p><p>每一次处理完一层的节点。层内每个节点先左儿子后右儿子追加进入队列。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> tempList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">TreeNode</span> tempNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    tempList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tempList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码提交：<a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">LeetCode102. 二叉树的层序遍历</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法解决合并果子问题</title>
      <link href="/2023/01/14/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-he-bing-guo-zi-wen-ti/"/>
      <url>/2023/01/14/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-he-bing-guo-zi-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。</p><p>每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 $n-1$ 次合并之后， 就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p><p>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 $1$ ，并且已知果子的种类 数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。</p><p>例如有 $3$ 种果子，数目依次为 $1$ ， $2$ ， $9$ 。可以先将 $1$ 、 $2$ 堆合并，新堆数目为 $3$ ，耗费体力为 $3$ 。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 $12$ ，耗费体力为 $12$ 。所以多多总共耗费体力 $=3+12=15$ 。可以证明 $15$ 为最小的体力耗费值。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>共两行。<br>第一行是一个整数 $n(1\leq n\leq 10000)$ ，表示果子的种类数。  </p><p>第二行包含 $n$ 个整数，用空格分隔，第 $i$ 个整数 $a_i(1\leq a_i\leq 20000)$ 是第 $i$ 种果子的数目。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 $2^{31}$ 。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">3 1 2 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>对于 $30%$ 的数据，保证有 $n \le 1000$：</p><p>对于 $50%$ 的数据，保证有 $n \le 5000$；</p><p>对于全部的数据，保证有 $n \le 10000$。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>合并不同权重的果子堆，想要最节约力量，每次都合并当前最小权重的两堆即可，合并后的果子堆也要重新纳入选择队列。</p><p>这就是一种贪心思想，本题是经典的贪心算法题目。</p><p>实现的时候可以借助PriorityQueue，每次poll()两个，合并后add()回去。</p><h1 id="Java实现代码"><a href="#Java实现代码" class="headerlink" title="Java实现代码"></a>Java实现代码</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h1><p><a href="https://www.luogu.com.cn/problem/P1090">洛谷 P1090 [NOIP2004 提高组] 合并果子 / [USACO06NOV] Fence Repair G</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法解决部分背包问题</title>
      <link href="/2023/01/14/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-bu-fen-bei-bao-wen-ti/"/>
      <url>/2023/01/14/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-bu-fen-bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>阿里巴巴走进了装满宝藏的藏宝洞。藏宝洞里面有 $N(N \le 100)$ 堆金币，第 $i$ 堆金币的总重量和总价值分别是 $m_i,v_i(1\le m_i,v_i \le 100)$。阿里巴巴有一个承重量为 $T(T \le 1000)$ 的背包，但并不一定有办法将全部的金币都装进去。他想装走尽可能多价值的金币。所有金币都可以随意分割，分割完的金币重量价值比（也就是单位价格）不变。请问阿里巴巴最多可以拿走多少价值的金币？</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>第一行两个整数 $N,T$。</p><p>接下来 $N$ 行，每行两个整数 $m_i,v_i$。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>一个实数表示答案，输出两位小数</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">4 5010 6020 10030 12015 45<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">240.00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>本题是属于背包问题。题意关键句是“<strong>所有金币都可以随意分割，分割完的金币重量价值比不变</strong>”，这意味着这是一个<strong>部分背包问题</strong>，只要按照性价比最高的取一定得到的价值最大，可以用<br><strong>贪心算法</strong>解决，不必采用<strong>动态规划算法</strong>。</p><p>贪心往往与排序相关。取的是性价比最高的，性价比就是这堆金币的价值除以重量。因此，只要把所有的金币堆按性价比降序排列，遍历，应拿尽拿，直至拿满背包。</p><h1 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Coin</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> m<span class="token punctuation">,</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span> <span class="token punctuation">(</span>Coin a<span class="token punctuation">,</span> Coin b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>v<span class="token operator">/</span>a<span class="token punctuation">.</span>m <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>v<span class="token operator">/</span>b<span class="token punctuation">.</span>m<span class="token punctuation">;</span><span class="token punctuation">}</span>Coin coins<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>m <span class="token operator">&gt;&gt;</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span> coins<span class="token operator">+</span>n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> t <span class="token operator">&gt;</span> <span class="token number">1e-6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>t<span class="token punctuation">,</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">/</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">-=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>t<span class="token punctuation">,</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h1><p><a href="https://www.luogu.com.cn/problem/P2240">洛谷 P2240 【深基12.例1】部分背包问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正确利用Java解决OJ题目</title>
      <link href="/2023/01/13/suan-fa-fen-xi-yu-she-ji/zheng-que-li-yong-java-jie-jue-oj-ti-mu/"/>
      <url>/2023/01/13/suan-fa-fen-xi-yu-she-ji/zheng-que-li-yong-java-jie-jue-oj-ti-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java作为后端开发的主流语言，应用广泛。尽管如此，在解决OJ问题上，Java难以与C++相比，尤其是算法比赛的题目。</p><p>ICPC/CCPC比赛上用Java处理大数运算、LeetCode用Java刷题准备面试、非ICPC/CCPC选手避开C++组选择Java组参加蓝桥杯……事实上，Java解算法题也有很大的需求。</p><p>本人长期采用Java刷题，也曾用Java获得蓝桥杯国赛实质奖励，试给出自己的学习实践心得。</p><h1 id="Java的运行效率"><a href="#Java的运行效率" class="headerlink" title="Java的运行效率"></a>Java的运行效率</h1><p>Java程序的运行效率远低于C++程序，这是不争的事实。博主的朋友曾获得ICPC/CCPC的银牌，其参加比赛时，偶尔也会用Java来简化代码，可见Java也没有慢到不可接受。</p><p>Java算法程序执行的运行时间快慢，跟算不算JVM进程启动、销毁时间关系很大。博主读研的时候选修过一门高级数据结构与算法课程，那门课的OJ系统对Java程序的性能评估就不是很友好。等效的代码，Java竟然比Python还要慢上许多。这种时候，Java就变成了不可能的选项。</p><p>Java的输入输出也特别慢，还不方便。输入输出的性能问题，也是一个痛点。</p><p>对于不限制语言、重视算法优化细节的题目，一般会按照C/C++的性能来考虑，Java只能TLE。</p><h1 id="Java的优势"><a href="#Java的优势" class="headerlink" title="Java的优势"></a>Java的优势</h1><p>Java又慢又臃肿，还面向对象，都对解题不利。那为什么还要考虑Java？</p><p>Java最大的优势就是集合、大数、字符串。</p><p>java.util包下的集合类、java.math下的BigInteger和BigDecimal、丰富的字符串处理函数，都对快速实现任务目标非常有利。</p><h1 id="Java的输入输出"><a href="#Java的输入输出" class="headerlink" title="Java的输入输出"></a>Java的输入输出</h1><p>本节内容摘自本人文章：<a href="https://blankspace.blog.csdn.net/article/details/104216294">深入剖析Java输入输出的那些细节</a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p><strong>java.util.Scanner</strong>类可以直接读取特定类型的数据：</p><ul><li><strong>public String next()</strong> → 读取下一个字符串（默认分隔符为Space or Tab or Enter）</li><li><strong>public String next​(String pattern)</strong> → 读取下一个字符串（匹配到的串符合指定的正则表达式）</li><li><strong>public String next​(Pattern pattern)</strong> → 读取下一个字符串（匹配到的串符合指定的正则表达式）</li><li><strong>public BigDecimal nextBigDecimal(</strong>) → 读取下一个高精小数（默认十进制）</li><li><strong>public BigInteger nextBigInteger()</strong> → 读取下一个高精整数（默认十进制）</li><li><strong>public BigInteger nextBigInteger​(int radix)</strong> → 读取下一个高精整数（指定进制）</li><li><strong>public boolean nextBoolean()</strong> → 读取下一个布尔值</li><li><strong>public byte nextByte()</strong> → 读取下一个byte整型数值（超容会报错，默认十进制）</li><li><strong>public byte nextByte​(int radix)</strong> → 读取下一个byte整型数值（超容会报错，指定进制）</li><li><strong>public double nextDouble()</strong> → 读取下一个双精度浮点数值（默认十进制）</li><li><strong>public float nextFloat()</strong> → 读取下一个单精度浮点数值（默认十进制）</li><li><strong>public int nextInt()</strong> → 读取下一个int整型数值（超容会报错，默认十进制）</li><li><strong>public int nextInt​(int radix)</strong> → 读取下一个int整型数值（超容会报错，指定进制）</li><li><strong>public String nextLine()</strong> → 读取下一行内容以字符串类型返回（分隔符为Enter）</li><li><strong>public long nextLong()</strong> → 读取下一个long整型数值（超容会报错，默认十进制）</li><li><strong>public long nextLong​(int radix)</strong> → 读取下一个long整型数值（超容会报错，指定进制）</li><li><strong>public short nextShort()</strong> → 读取下一个short整型数值（超容会报错，默认十进制）</li><li><strong>public short nextShort​(int radix)</strong> → 读取下一个short整型数值（超容会报错，指定进制）</li></ul><p>案例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// do something</span><span class="token punctuation">}</span>sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Scanner之所以能如此全能，依赖于Java支持的正则表达式。<strong>反反复复的IO操作，每次都要判断和处理，会拉低效率。</strong></p><p>比如说在洛谷刷算法题的时候，博主一般是用Java，但很多次都TLE，不管怎么优化也不行。最后发现问题就在Scanner身上，此时可以换java.io.BufferedReader，性能大幅提升。</p><p>案例代码(方法声明throws java.io.IOException)：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更极端的情况，需要手写快读代码。其实，此时已经可以考虑放弃Java改用C++了。</p><p>说明：</p><ol><li>性能实在不达标，看不对就换BufferedReader，再不行就手写快读或换更快的语言。</li><li>切记scanner.nextInt()之后没换行，此时如果读一行scanner.nextLine()可能只读到空字符串<code>""</code>，导致后续RE或WA。所以遇到单行单个数值+单行多数值的情况，就直接先用<code>Integer.parseInt(scanner.nextLine())</code>再用<code>String[] array = scanner.nextLine().split("\\s+")</code>，把String[]转成int[]即可（切记不可直接强转，二者毫无关系）。</li><li>I/O非常慢，要减少I/O次数。</li><li>使用完输入流后记得关闭，这是一个好习惯。用scanner，就写<code>scanner.close()</code>，用reader，就写<code>reader.close()</code>。</li><li>输入流关闭之后就不能再用了，这点要注意，在最后用完之后关闭就好。</li><li>java.util.Scanner不需要处理异常，java.io.BufferedReader需要处理java.io.IOException，要么try…catch…finally，要么throws，不处理是不能通过编译的。当然啦，自动关闭资源的try语句也挺好的。</li></ol><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><strong>普通输出流</strong>有<strong>三种</strong>输出方式：</p><p>第一种是<strong>不换行输出</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第二种是<strong>换行输出</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三种是<strong>格式化输出</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有<strong>错误输出流</strong>，与上述内容类似：</p><p>第一种是<strong>不换行输出</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二种是<strong>换行输出</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三种是<strong>格式化输出</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><ol><li>如果<code>printf()</code>的格式化不正确，就会爆<code>java.util.IllegalFormatConversionException</code>异常。</li><li>为什么Eclipse/IDEA这样的IDE在爆异常的时候都可能红字和普通字混合？<br>异常是err错误流，普通输出是out普通输出流，可能会在IDE里由于线程的问题而混合在一起。</li><li>System.in/System.out/System.err是什么？<br>根据下面的源码（java.lang.System），可知分别是InputStream、PrintStream对象，err流和out流是同一个类的不同对象。<pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> in<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> out<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> err<span class="token punctuation">;</span>`<span class="token number">4.</span> 打印输出的时候会启动<span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span>，所以不建议直接输出，可以用<span class="token class-name">StringBuilder</span>把答案“组织好”再统一输出。<span class="token number">5.</span> 循环里每次都cout的时候能不输出最后的空格，不需要额外的调整，但<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>输出的时候没有这种考虑，必须自己处理最后一次的结果。我建议可以用`builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>`和`builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>`，最后消去末尾的一个空格，即可完成所需要的输出。<span class="token number">6.</span> 格式化打印指定位数小数是常见操作，可用<span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>完成任务目标。比如，如果<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.5f"</span><span class="token punctuation">)</span>如果就是保留五位小数打印浮点数。# JDK工具API## <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Math</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Math</span>中的关键方法都是静态的，需要通过<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的格式调用。全部API：<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">tan</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">asin</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">acos</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">atan</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">toRadians</span><span class="token punctuation">(</span><span class="token keyword">double</span> angdeg<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">toDegrees</span><span class="token punctuation">(</span><span class="token keyword">double</span> angrad<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">log10</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token class-name">IEEEremainder</span><span class="token punctuation">(</span><span class="token keyword">double</span> f1<span class="token punctuation">,</span> <span class="token keyword">double</span> f2<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">rint</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">atan2</span><span class="token punctuation">(</span><span class="token keyword">double</span> y<span class="token punctuation">,</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">addExact</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">addExact</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">subtractExact</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">subtractExact</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">multiplyExact</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">multiplyExact</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">multiplyExact</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">divideExact</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">divideExact</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">floorDivExact</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">floorDivExact</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ceilDivExact</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">ceilDivExact</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">incrementExact</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">incrementExact</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">decrementExact</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">decrementExact</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">negateExact</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">negateExact</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">toIntExact</span><span class="token punctuation">(</span><span class="token keyword">long</span> value<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">multiplyFull</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">multiplyHigh</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">unsignedMultiplyHigh</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">floorDiv</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">floorDiv</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">floorDiv</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">floorMod</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">floorMod</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">floorMod</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ceilDiv</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">ceilDiv</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">ceilDiv</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ceilMod</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ceilMod</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">ceilMod</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">absExact</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">absExact</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">fma</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> c<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">fma</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">,</span> <span class="token keyword">float</span> c<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">ulp</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">ulp</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">signum</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">signum</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sinh</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">cosh</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">tanh</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">hypot</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">expm1</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">log1p</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">copySign</span><span class="token punctuation">(</span><span class="token keyword">double</span> magnitude<span class="token punctuation">,</span> <span class="token keyword">double</span> sign<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">copySign</span><span class="token punctuation">(</span><span class="token keyword">float</span> magnitude<span class="token punctuation">,</span> <span class="token keyword">float</span> sign<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getExponent</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getExponent</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">nextAfter</span><span class="token punctuation">(</span><span class="token keyword">double</span> start<span class="token punctuation">,</span> <span class="token keyword">double</span> direction<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">nextAfter</span><span class="token punctuation">(</span><span class="token keyword">float</span> start<span class="token punctuation">,</span> <span class="token keyword">double</span> direction<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">nextUp</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">nextUp</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">nextDown</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">nextDown</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">scalb</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">,</span> <span class="token keyword">int</span> scaleFactor<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">scalb</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> scaleFactor<span class="token punctuation">)</span>## <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span>BigInteger</span>全部API：<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BigInteger</span> <span class="token function">probablePrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> bitLength<span class="token punctuation">,</span> <span class="token class-name">Random</span> rnd<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">nextProbablePrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BigInteger</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">long</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">parallelMultiply</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">divideAndRemainder</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">remainder</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">int</span> exponent<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sqrtAndRemainder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">signum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> m<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">modPow</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> exponent<span class="token punctuation">,</span> <span class="token class-name">BigInteger</span> m<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">modInverse</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> m<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">shiftLeft</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">shiftRight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">or</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">xor</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">andNot</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">testBit</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">setBit</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">clearBit</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">flipBit</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLowestSetBit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">bitLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">bitCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isProbablePrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> certainty<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> x<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span> radix<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">longValueExact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">intValueExact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">short</span> <span class="token function">shortValueExact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">byte</span> <span class="token function">byteValueExact</span><span class="token punctuation">(</span><span class="token punctuation">)</span>## <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span>全部API：<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">codePointBefore</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">codePointCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">offsetByCodePoints</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> codePointOffset<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getChars</span><span class="token punctuation">(</span><span class="token keyword">int</span> srcBegin<span class="token punctuation">,</span> <span class="token keyword">int</span> srcEnd<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dst<span class="token punctuation">,</span> <span class="token keyword">int</span> dstBegin<span class="token punctuation">)</span><span class="token annotation punctuation">@Deprecated</span><span class="token punctuation">(</span>since<span class="token operator">=</span><span class="token string">"1.1"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> srcBegin<span class="token punctuation">,</span> <span class="token keyword">int</span> srcEnd<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dst<span class="token punctuation">,</span> <span class="token keyword">int</span> dstBegin<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">String</span> charsetName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">Charset</span> charset<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token class-name">StringBuffer</span> sb<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> cs<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">regionMatches</span><span class="token punctuation">(</span><span class="token keyword">int</span> toffset<span class="token punctuation">,</span> <span class="token class-name">String</span> other<span class="token punctuation">,</span> <span class="token keyword">int</span> ooffset<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">regionMatches</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> ignoreCase<span class="token punctuation">,</span> <span class="token keyword">int</span> toffset<span class="token punctuation">,</span> <span class="token class-name">String</span> other<span class="token punctuation">,</span> <span class="token keyword">int</span> ooffset<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token keyword">int</span> toffset<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffix<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CharSequence</span> <span class="token function">subSequence</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span> oldChar<span class="token punctuation">,</span> <span class="token keyword">char</span> newChar<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> s<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">String</span> replacement<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">String</span> replacement<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> target<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> replacement<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> delimiter<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> elements<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> delimiter<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CharSequence</span><span class="token punctuation">&gt;</span></span> elements<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span> locale<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span> locale<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">stripLeading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">stripTrailing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">indent</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">stripIndent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">translateEscapes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">R</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">IntStream</span> <span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">IntStream</span> <span class="token function">codePoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Locale</span> l<span class="token punctuation">,</span> <span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">formatted</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">copyValueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">copyValueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">describeConstable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">resolveConstantDesc</span><span class="token punctuation">(</span><span class="token class-name">MethodHandles<span class="token punctuation">.</span>Lookup</span> lookup<span class="token punctuation">)</span>## 集合框架<span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span>/<span class="token punctuation">.</span><span class="token punctuation">.</span>/images<span class="token operator">/</span>算法分析与设计<span class="token operator">/</span>正确利用<span class="token class-name">Java</span>解决OJ题目<span class="token operator">/</span><span class="token number">1.</span>gif<span class="token punctuation">)</span>常用集合：<span class="token class-name">ArrayList</span>、<span class="token class-name">LinkedList</span>、<span class="token class-name">HashMap</span>、<span class="token class-name">TreeMap</span>、<span class="token class-name">HashSet</span>、<span class="token class-name">TreeSet</span>、<span class="token class-name">Deque</span>、<span class="token class-name">PriorityQueue</span>。迭代器可以用<span class="token keyword">for</span><span class="token punctuation">.</span><span class="token punctuation">.</span>each<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>结构替代：```java<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> collection<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// do something</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">Integer</span> value<span class="token punctuation">;</span>    <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>person_array<span class="token punctuation">,</span> <span class="token punctuation">(</span>person1<span class="token punctuation">,</span> person2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token operator">-</span>person1<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> person1<span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">:</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>数组可以通过<code>java.util.Arrays.sort()</code>实现，集合可以通过<code>java.util.Collections.sort()</code>实现。</p><p>也可以构造<code>java.util.Comparator</code>，复用此Comparator。</p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机专业实用网站</title>
      <link href="/2022/06/25/ji-suan-ji-ke-xue-ji-chu/ji-suan-ji-zhuan-ye-shi-yong-wang-zhan/"/>
      <url>/2022/06/25/ji-suan-ji-ke-xue-ji-chu/ji-suan-ji-zhuan-ye-shi-yong-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="算法OJ"><a href="#算法OJ" class="headerlink" title="算法OJ"></a>算法OJ</h1><ul><li><a href="https://leetcode-cn.com/problemset/all">LeetCode</a></li><li><a href="https://www.lintcode.com/">LintCode</a></li><li><a href="http://ybt.ssoier.cn:8088/index.php">信息学奥赛一本通</a></li><li><a href="http://www.lanqiao.org/">蓝桥</a></li><li><a href="https://www.luogu.com.cn/">洛谷</a></li><li><a href="https://www.patest.cn/">PAT</a></li><li><a href="http://acm.hdu.edu.cn/">HDOJ</a></li><li><a href="http://poj.org/">POJ</a></li><li><a href="https://zoj.pintia.cn/home/news">ZOJ</a></li><li><a href="http://codeforces.com/">Codeforces</a></li><li><a href="https://csp.ccf.org.cn/csp/index.action">CCF</a></li><li><a href="https://oi-wiki.org/">OIWiki</a></li><li><a href="https://www.kancloud.cn/kancloud/pack/70124">背包九讲</a></li><li><a href="https://www3.risc.jku.at/people/ckoutsch/stuff/e_algorithms.html">最重要的32个算法</a></li></ul><h1 id="面试经验"><a href="#面试经验" class="headerlink" title="面试经验"></a>面试经验</h1><ul><li><a href="https://www.nowcoder.com/">牛客</a></li><li><a href="https://leetcode.cn/circle/?query=&amp;page=1">LeetCode</a></li></ul><h1 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h1><ul><li><a href="https://github.com/">GitHub</a></li><li><a href="https://gitee.com/">Gitee</a></li><li><a href="https://about.gitlab.com/">GitLab</a></li><li><a href="https://minhaskamal.github.io/DownGit/#/home">DownGit</a></li></ul><h1 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h1><ul><li><a href="https://www.csdn.net/">CSDN</a></li><li><a href="https://www.cnblogs.com/">博客园</a></li><li><a href="https://www.zhihu.com/">知乎</a></li><li><a href="https://juejin.cn/">掘金</a></li><li><a href="https://www.jianshu.com/">简书</a></li><li><a href="https://developer.aliyun.com/">阿里云开发者社区</a></li><li><a href="https://www.infoq.cn/">InfoQ</a></li><li><a href="https://www.oschina.net/">OSCHINA</a> 开源中国</li><li><a href="http://www.woshipm.com/">人人都是产品经理</a></li><li><a href="https://www.51cto.com/">51CTO</a></li></ul><h1 id="技术问答"><a href="#技术问答" class="headerlink" title="技术问答"></a>技术问答</h1><ul><li><a href="https://stackoverflow.com/">Stack Overflow</a></li><li><a href="https://segmentfault.com/">SegmentFault</a> 思否</li></ul><h1 id="画图工具"><a href="#画图工具" class="headerlink" title="画图工具"></a>画图工具</h1><ul><li><a href="https://naotu.baidu.com/">百度脑图</a></li><li><a href="https://mm.edrawsoft.cn/">MindMaster</a></li><li><a href="https://www.processon.com/">ProcessOn</a></li></ul><h1 id="文档工具"><a href="#文档工具" class="headerlink" title="文档工具"></a>文档工具</h1><ul><li><a href="https://www.feishu.cn/">飞书云文档</a></li></ul><h1 id="翻译工具"><a href="#翻译工具" class="headerlink" title="翻译工具"></a>翻译工具</h1><ul><li><a href="https://translate.google.cn/">Google翻译</a></li><li><a href="https://fanyi.baidu.com/">百度翻译</a></li><li><a href="https://www.deepl.com/translator">DeepL翻译</a></li></ul><h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><ul><li><a href="https://www.google.com/">Google</a></li><li><a href="https://cn.bing.com/">Bing</a></li><li><a href="https://www.baidu.com/">百度</a></li></ul><h1 id="知识百科"><a href="#知识百科" class="headerlink" title="知识百科"></a>知识百科</h1><ul><li><a href="https://www.wikipedia.org/">Wikipedia</a></li><li><a href="https://baike.baidu.com/">百度百科</a></li></ul><h1 id="文档资源"><a href="#文档资源" class="headerlink" title="文档资源"></a>文档资源</h1><ul><li><a href="https://wenku.baidu.com/">百度文库</a></li><li><a href="https://www.docin.com/">豆丁网</a></li><li><a href="https://www.doc88.com/">道客巴巴</a></li></ul><h1 id="论文资源"><a href="#论文资源" class="headerlink" title="论文资源"></a>论文资源</h1><ul><li><a href="https://dblp.org/">DBLP</a></li><li><a href="https://scholar.google.com/">Google Scholar</a> 谷歌学术</li><li><a href="https://www.cnki.net/">中国知网</a></li><li><a href="https://fz.wanfangdata.com.cn/index.do">万方</a></li><li><a href="http://www.chaoxing.com/">超星</a></li><li><a href="http://www.oalib.com/">Open Access Library</a></li><li><a href="https://www.aminer.cn/">AMiner</a></li></ul><h1 id="科研工具"><a href="#科研工具" class="headerlink" title="科研工具"></a>科研工具</h1><ul><li><a href="http://muchong.com/">小木虫</a></li><li><a href="https://www.cncnki.com/">知网查重</a></li><li><a href="http://vpcs.cqvip.com/">维普查重</a></li><li><a href="https://check.wanfangdata.com.cn/">万方查重</a></li><li><a href="https://www.paperyy.com/">Paperyy</a></li><li><a href="https://ccfddl.github.io/">CCF会议截止时间</a></li><li><a href="https://www.overleaf.com/">Overleaf</a> 在线TeX论文编辑</li></ul><h1 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h1><ul><li><a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a></li><li><a href="https://wallhaven.cc/">Awesome Wallpapers</a></li><li><a href="https://giphy.com/">Giphy</a></li><li><a href="https://emojipedia.org/">Emojipedia</a> Emoji图像</li><li><a href="https://pixabay.com/">Pixabay</a></li><li><a href="http://pic.55.la/">图像格式转换工具</a></li><li><a href="https://ezgif.com/">GIF图像生成工具</a></li></ul><h1 id="课程资源"><a href="#课程资源" class="headerlink" title="课程资源"></a>课程资源</h1><ul><li><a href="https://www.icourse163.org/">中国大学MOOC</a></li><li><a href="https://open.163.com/">网易公开课</a></li><li><a href="https://www.icourses.cn/">爱课程</a></li><li><a href="https://www.xuetangx.com/">学堂在线</a></li><li><a href="https://study.163.com/">网易云课堂</a></li><li><a href="https://www.fenbi.com/">粉笔网</a></li><li><a href="https://www.educoder.net/">EduCoder</a></li><li><a href="https://www.bilibili.com/">Bilibili</a></li><li><a href="https://www.youtube.com/">Youtube</a></li><li><a href="https://www.hjenglish.com/">沪江英语网</a></li></ul><h1 id="电子书资源"><a href="#电子书资源" class="headerlink" title="电子书资源"></a>电子书资源</h1><ul><li><a href="https://www.jiumodiary.com/">鸠摩搜书</a></li><li><a href="https://ebook.huzerui.com/">熊猫搜书</a></li></ul><h1 id="升学资源"><a href="#升学资源" class="headerlink" title="升学资源"></a>升学资源</h1><ul><li><a href="http://bbs.kaoyan.com/">考研论坛</a></li><li><a href="https://www.eeban.com/">保研论坛</a></li><li><a href="https://yz.chsi.com.cn/">中国研究生招生信息网</a></li><li><a href="http://csrankings.org/">CSRankings</a></li></ul><h1 id="教程资源"><a href="#教程资源" class="headerlink" title="教程资源"></a>教程资源</h1><ul><li><a href="https://www.runoob.com/">菜鸟教程</a></li><li><a href="https://www.w3cschool.cn/">W3Cschool</a></li><li><a href="https://www.w3school.com.cn/">W3school</a></li><li><a href="https://cloud.tencent.com/developer/devdocs">腾讯云开发者手册</a></li><li><a href="https://www.yiibai.com/">易百教程</a></li></ul><h1 id="镜像资源"><a href="#镜像资源" class="headerlink" title="镜像资源"></a>镜像资源</h1><ul><li><a href="https://mirrors.ustc.edu.cn/">中科大镜像</a></li></ul><h1 id="职场招聘"><a href="#职场招聘" class="headerlink" title="职场招聘"></a>职场招聘</h1><ul><li><a href="https://www.linkedin.cn/">领英</a></li><li><a href="https://maimai.cn/">脉脉</a></li><li><a href="https://landing.zhaopin.com/">智联招聘</a></li><li><a href="https://www.zhipin.com/">BOSS直聘</a></li><li><a href="https://www.wondercv.com/">WonderCV</a> 在线简历制作</li></ul><h1 id="文档工具-1"><a href="#文档工具-1" class="headerlink" title="文档工具"></a>文档工具</h1><ul><li><a href="https://www.notion.so/">Notion</a></li><li><a href="https://docs.feishu.cn/">飞书云文档</a></li><li><a href="https://convertio.co/">Convertio</a> 文档格式转换</li><li><a href="https://www.aconvert.com/">AConvert格式转换</a> 文档格式转换</li><li><a href="https://www.sanpdf.com/pdf-to-word">SanPDF</a> PDF文档格式转换</li></ul><h1 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h1><ul><li><a href="https://fanyi.baidu.com/">实验楼</a></li><li><a href="http://www.mooctest.net/">慕测平台</a> 南京大学</li><li><a href="https://www.kaggle.com/">Kaggle</a> 数据科学竞赛平台</li></ul><h1 id="人工智能学习资源"><a href="#人工智能学习资源" class="headerlink" title="人工智能学习资源"></a>人工智能学习资源</h1><ul><li><a href="https://archive.ics.uci.edu/ml/index.php">UCI机器学习</a></li><li><a href="http://zh.gluon.ai/chapter_preface/preface.html">动手深度学习</a></li><li><a href="https://mo.zju.edu.cn/">Mo人工智能实训建模平台</a> 浙江大学</li></ul><h1 id="博客资源"><a href="#博客资源" class="headerlink" title="博客资源"></a>博客资源</h1><ul><li><a href="http://www.ruanyifeng.com/blog">阮一峰的网络日志</a></li><li><a href="https://cuijiahua.com/blog/spider">JackCui的博客</a></li><li><a href="https://pachong.vip/">梦想橡皮擦的网络爬虫教程</a></li><li><a href="https://kexue.fm/category/Big-Data">科学空间</a></li><li><a href="https://www.linuxidc.com/aboutus.htm">Linux公社</a></li><li><a href="https://www.cnblogs.com/swiftma/p/5631311.html">Java编程的逻辑</a></li></ul><h1 id="模板资源"><a href="#模板资源" class="headerlink" title="模板资源"></a>模板资源</h1><ul><li><a href="https://modao.cc/">墨刀</a></li><li><a href="http://sc.chinaz.com/tag_jiaoben/jquery.html">站长素材</a></li><li><a href="http://ppt.sotary.com/web/wxapp/index.html">PPT超级市场</a></li><li><a href="https://html5up.net/">HTML5UP</a> 博客HTML模板</li><li><a href="http://blinkfox.com/">闪烁之狐</a> 博客Hexo模板</li><li><a href="https://www.tablesgenerator.com/html_tables">Tables Generator</a> Excel/Csv生成网页Table代码</li></ul><h1 id="格式工具"><a href="#格式工具" class="headerlink" title="格式工具"></a>格式工具</h1><ul><li><a href="http://www.jslint.com/">JSLint</a> JSON格式检查工具</li><li><a href="http://xiaoniutxt.com/markdownEditor.html">小牛Markdown文本编辑器</a></li><li><a href="https://www.html.cn/tool/html-escape">HTML转义工具</a></li><li><a href="http://c.runoob.com/front-end/53">JSON语法在线解析器</a></li><li><a href="https://latex.codecogs.com/">CodeCogs</a> LaTeX公式编辑器</li></ul><h1 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h1><ul><li><a href="https://encycolorpedia.cn/">Encycolorpedia</a> 十六进制颜色代码表、图表及调色板</li><li><a href="http://www.ab126.com/web/3552.html">子网划分工具</a></li><li><a href="https://www.sojson.com/convert/subnetmask.html">网络和IP地址计算器</a></li><li><a href="https://cloud.feitsui.com/gcp">谷歌云在线Ping测速工具</a></li><li><a href="http://www.turingapi.com/">图灵机器人接口</a></li><li><a href="https://anvaka.github.io/city-roads">网络地图绘制</a></li><li><a href="https://suulnnka.github.io/BullshitGenerator/index.html">狗屁不通文章生成器</a></li><li><a href="https://adblockplus.org/">Adblock Plus</a> 浏览器广告过滤器</li><li><a href="https://web.baimiaoapp.com/">白描ORC工具</a></li><li><a href="http://lookdiv.com/">JetBrains-Key</a></li><li><a href="http://www.galmoe.com/">Galmoe</a> B站封面提取工具</li><li><a href="https://highlightcode.com/">HighlightCode</a> 代码在线高亮工具</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习</title>
      <link href="/2022/05/04/ji-suan-ji-ke-xue-ji-chu/shen-du-xue-xi/"/>
      <url>/2022/05/04/ji-suan-ji-ke-xue-ji-chu/shen-du-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习用到的常用术语"><a href="#深度学习用到的常用术语" class="headerlink" title="深度学习用到的常用术语"></a>深度学习用到的常用术语</h1><ul><li>特征(<em>feature</em>)：预测时使用的输入变量</li><li>特征集(<em>feature set</em>)：训练深度学习模型时采用的一组特征</li><li>标签(<em>label</em>)：监督学习中样本的“标准答案”</li><li>类别(<em>class</em>)：为标签枚举的一组目标值中的一个</li><li>样本(<em>example</em>)/输入(<em>input</em>)：数据集的一行，分为有标签样本和无标签样本</li><li>权重(<em>weight</em>)：线性模型中特征的系数，或者深度网络中的边</li><li>偏差(<em>bias</em>)：距离原点的截距或偏移</li><li>激活函数(<em>activation function</em>)：一种用于对上一层所有输入加权求和后生成输出值以传递给下一层的函数</li><li>反向传播(<em>back propagation</em>)：在神经网络上执行梯度下降法的主要算法，先前向传播计算并存储每个结点的输出值，再反向传播遍历图去计算损失函数值相对每个参数的偏导数</li><li>批次(<em>batch</em>)：模型训练的一次迭代(一次梯度更新)中使用的样本集</li><li>批次大小(<em>batch size</em>)：一个批次中的样本数</li><li>轮次(<em>epoch</em>)：在训练时，整个数据集的一次完整遍历</li><li>层(<em>layer</em>)：一组神经网络中负责处理一组输入特征或一组神经元的输出的神经元</li><li>全连接层(<em>fully connected layer</em>)：又称密集层，一种每个节点均与下一隐藏层中每个节点相连的隐藏层</li><li>输入层(<em>input layer</em>)：神经网络的第一层</li><li>隐藏层(<em>hidden layer</em>)：神经网络中的合成层，介于输入层和输出层之间</li><li>输出层(<em>output layer</em>)：神经网络的最后一层</li><li>学习率(<em>learning rate</em>)：训练模型时用于梯度下降的一个标量，学习率×梯度＝梯度步长</li><li>指标(<em>metric</em>)：可能在机器学习系统中得到优化的重点关注的指标</li><li>神经网络(<em>neural network</em>)：一种模型，灵感来自脑部结构，由多个层构成，每个层都包含简单相连的单元或神经元(非线性关系)</li><li>神经元(<em>neuron</em>)：神经网络中的节点，接受多个输入，应用激活函数将输入值加权处理后生成输出值</li><li>过拟合(<em>overfitting</em>)：创建的模型与训练数据过于匹配，以致模型无法根据新数据进行正确的预测</li><li>参数(<em>parameter</em>)：深度学习自行训练的模型的变量</li><li>预测(<em>prediction</em>)/输出(<em>output</em>)：模型在收到输入样本后的输出</li><li>回归模型(<em>regression model</em>)：一种能够将输入的连续的值映射到输出的离散的值的模型</li><li>分类模型(<em>classification model</em>)：一种用于区分两种或多种离散类别的模型</li><li>序列模型(<em>sequence model</em>)：一种输入有序列依赖性的模型</li></ul><h1 id="深度学习环境搭建"><a href="#深度学习环境搭建" class="headerlink" title="深度学习环境搭建"></a>深度学习环境搭建</h1><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/126098882">连接远程Linux服务器</a></p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/126534763">Conda安装TensorFlow和PyTorch的GPU支持包</a></p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/127764676">VSCode连接远程Linux服务器</a></p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/127766482">VSCode通过虚拟环境运行Python程序</a></p><h2 id="TensorFlow安装"><a href="#TensorFlow安装" class="headerlink" title="TensorFlow安装"></a>TensorFlow安装</h2><p>可以选择conda安装和pip安装，个人推荐pip安装。</p><p>conda搜索TensorFlow的GPU版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda search tensorflow-gpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>conda安装TensorFlow的GPU版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> tensorflow-gpu<span class="token operator">==</span><span class="token number">2.2</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pip安装TensorFlow的GPU版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> tensorflow-gpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="PyTorch安装"><a href="#PyTorch安装" class="headerlink" title="PyTorch安装"></a>PyTorch安装</h2><p>可以选择conda安装和pip安装，个人推荐pip安装。</p><p>conda搜索PyTorch的GPU版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda search torch-gpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>conda安装PyTorch的GPU版本(版本1.2.0)：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> torch-gpu<span class="token operator">==</span><span class="token number">1.2</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CUDA版本查看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvcc -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/1.png"></p><p>pip安装PyTorch的GPU版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> torch torchvision torchaudio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pip安装PyTorch的命令应该去<a href="https://pytorch.org/">官网</a>查看：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/2.png"></p><p>pip安装不顺可以直接下载<a href="http://download.pytorch.org/whl">.whl</a>文件，本地<code>pip install</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类与模板模式</title>
      <link href="/2022/02/27/ruan-jian-gong-cheng/mian-xiang-dui-xiang/chou-xiang-lei-yu-mo-ban-mo-shi/"/>
      <url>/2022/02/27/ruan-jian-gong-cheng/mian-xiang-dui-xiang/chou-xiang-lei-yu-mo-ban-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>抽象类是一种特殊的类，其特殊性在于抽象类只能用于继承，不能被实例化为具体的对象。</p><p>抽象类存在的合理性在于某些场景下普通类不够用。</p><p>从设计的角度来看，抽象类是更高层次的抽象；从实现的角度来看，抽象类有的存在抽象方法（方法只有声明没有实现），子类必须自己实现这些抽象方法。</p><p>抽象类与接口有一定的区别。<br>抽象类本质还是类，强调一组事物的相似性，包括属性和方法的相似性；而接口只强调方法的相似性，并且仅仅体现在方法声明上的相似性，而没有方法定义上的相似性。</p><p>抽象类是一个介于类和接口之间的概念，同时具备类和接口的部分特性。</p><h1 id="Java抽象类"><a href="#Java抽象类" class="headerlink" title="Java抽象类"></a>Java抽象类</h1><p>Java的抽象类和抽象方法必须用abstract定义，有抽象方法的类只能被定义成抽象类，抽象类里也可以没有抽象方法。</p><p>抽象类必须使用abstract来修饰，抽象方法也必须使用abstract来修饰，抽象方法不能有方法体。</p><p>抽象类不能被实例化，无法使用new关键词来调用抽象类的构造方法创建抽象类的实例。即时抽象类里没有抽象方法，这个抽象类也不能创建实例。</p><p>抽象类可以包含成员变量、方法、构造方法、初始化块、内部类。抽象类的构造方法不能用于创建实例，主要用于被其子类调用。</p><p>含有抽象方法的类不一定是抽象类，也可能是接口。抽象类可能是新定义抽象方法的类，可能是未完全实现其父抽象类或父接口的子类。</p><p>抽象方法不存在方法体，和空方法体<code>{}</code>不一样。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getPerimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="C-抽象类"><a href="#C-抽象类" class="headerlink" title="C++抽象类"></a>C++抽象类</h1><p>纯虚函数是一个在父类中声明的虚函数，它在该基类中没有定义具体的函数体，要求派生类根据实际需要定义自己的实现。</p><p>纯虚函数的标准格式：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">virtual</span> <span class="token operator">&lt;</span>returnType<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>functionName<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>paramList<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>C++抽象类中至少存在一个纯虚函数。与Java不同的是，存在纯虚函数的类一定是抽象类，存在纯虚函数是成为抽象类的充要条件。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">get_perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Square</span><span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">Shape</span></span> <span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">Square</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-&gt;</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">get_perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">4</span> <span class="token operator">*</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h1><p>抽象类体现了模板模式的设计思想，抽象类作为子类的通用抽象模板，子类在抽象父类的基础上进行扩展，大致保留父类的行为方式。模板模式正是一种在父类中定义处理流程的框架，在子类中实现具体处理的设计模式。</p><p>模板模式支持父类提供方法复用。子类中可以使用父类中定义的方法，通过在子类中增加方法可以引入新的功能，在子类中重写父类的方法可以改变程序的行为。虽然具体的处理策略是由子类决定的，但在抽象类阶段确定处理的流程非常重要。</p><p>子类实现父类声明的抽象方法时，必须理解这些抽象方法调用的时机，需要了解父类机制甚至阅读父类源码。</p><p>参考案例类图：</p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/1.jpeg"></p><p>参考案例实现代码：</p><p><code>AbstractDisplay.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractDisplay</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>CharacterDisplay.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterDisplay</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDisplay</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> character<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CharacterDisplay</span><span class="token punctuation">(</span><span class="token keyword">char</span> character<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>character <span class="token operator">=</span> character<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>character<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&gt;&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>StringDisplay.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDisplay</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDisplay</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> string<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StringDisplay</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>string <span class="token operator">=</span> string<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"|"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>string <span class="token operator">+</span> <span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行程序：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AbstractDisplay</span> characterDisplay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterDisplay</span><span class="token punctuation">(</span><span class="token char">'H'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AbstractDisplay</span> stringDisplay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringDisplay</span><span class="token punctuation">(</span><span class="token string">"Hello, World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>characterDisplay<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringDisplay<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元宇宙的最新技术、应用和挑战</title>
      <link href="/2022/01/04/ji-suan-ji-ke-xue-ji-chu/yuan-yu-zhou-de-zui-xin-ji-zhu-ying-yong-he-tiao-zhan/"/>
      <url>/2022/01/04/ji-suan-ji-ke-xue-ji-chu/yuan-yu-zhou-de-zui-xin-ji-zhu-ying-yong-he-tiao-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="0-摘要"><a href="#0-摘要" class="headerlink" title="0 摘要"></a>0 摘要</h1><p>元宇宙是一种融合多种新技术的新型互联网应用和社交形态。 它具有多技术性、社会性、超时空性等特点。 本文介绍了元宇宙的发展现状，从网络基础设施、管理技术、基础共性技术、虚拟现实对象连接、虚拟现实融合五个角度介绍了元宇宙的技术框架。 本文还介绍了元宇宙的社会性和超时空性的本质，讨论了元宇宙的第一个应用领域以及它可能面临的一些问题和挑战。</p><p>关键词: Metaverse(元宇宙)、Multi-technology(多技术)、Sociality(社会性)、Hyper Spatiotemporality(超时空性) </p><h1 id="1-导引"><a href="#1-导引" class="headerlink" title="1 导引"></a>1 导引</h1><p>元宇宙是一种融合多种新技术的新型互联网应用和社交形态。 它提供基于增强现实技术的沉浸式体验，基于数字孪生技术打造现实世界的镜像，基于区块链技术构建经济体系，将虚拟世界和现实世界紧密融合到经济体系中，社会系统和身份系统，允许每个用户生产内容和编辑世界。 元宇宙仍然是一个不断演进的概念，不同的参与者正在以自己的方式丰富其意义。<br>从技术角度来看，人类的交流方式在不断改进（见下图）。相应地，技术创新、多项新技术的融合、互联网的新应用也随之发展。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%85%83%E5%AE%87%E5%AE%99%E7%9A%84%E6%9C%80%E6%96%B0%E6%8A%80%E6%9C%AF%E3%80%81%E5%BA%94%E7%94%A8%E5%92%8C%E6%8C%91%E6%88%98/1.png"></p><p>从商业角度看，元宇宙已经展现出深远的商业前景。作为一种新的资本输出，大公司纷纷投身于元宇宙的建设。从用户的角度来看，对虚拟世界的自由度、互联网的内容和交互方式等的需求不断增加。<br>本文总结了元宇宙的发展现状，从元宇宙的定义入手，提出了技术框架、社会框架和超空间。它还对元宇宙的未来发展进行了预测和讨论。<br>本文的第二节介绍了元宇宙的发展现状；第三节介绍了元宇宙的三个特点：多技术优势、社会性和超空间；第四节基于元宇宙的多技术优势，介绍了元宇宙的多种新技术和框架；第五节根据元宇宙的社会性质，介绍元宇宙作为一种新的社会形态，包括经济制度、文化文明制度、法律制度等方面；第六节基于元宇宙的时空性质，进一步介绍元宇宙的自由、沉浸、多维性质；第七节根据元宇宙目前的发展规划，预测元宇宙的第一个应用领域；第八节讨论了元宇宙需要解决的几个问题；第九节，结论部分，总结了本文和元宇宙的发展。 </p><h1 id="2-元宇宙的发展现状"><a href="#2-元宇宙的发展现状" class="headerlink" title="2 元宇宙的发展现状"></a>2 元宇宙的发展现状</h1><p>本节重点介绍不同国家和国际组织的政策、代表性企业及其典型产品，结合Web of Science数据库和SCOPUS数据库中元宇宙相关出版物数量统计，分析元宇宙的发展历史和现状，分析各国元宇宙政策与本国元宇宙企业设计的关系。</p><h2 id="2-1-国家和国际组织的政策"><a href="#2-1-国家和国际组织的政策" class="headerlink" title="2.1 国家和国际组织的政策"></a>2.1 国家和国际组织的政策</h2><p>不同的国家和国际组织对元宇宙有不同的态度。本节将从政治、经济、政府态度等方面考察不同国家和国际组织的政策，分析元宇宙的发展现状。<br>因为在元宇宙经济体系中，最重要的基础是基于区块链的通证经济。区块链是数字货币最重要的技术。因此，我们将从经济角度分析不同国家和国际组织对区块链和数字货币的政策。人工智能、交互技术、云计算和边缘计算是元宇宙的支撑技术。因此，我们将在技术方面分析不同国家和国际组织对这些技术的发展的政策。<br>具体国家政策见下表：</p><table><thead><tr><th align="center">国家</th><th align="left">政策</th></tr></thead><tbody><tr><td align="center">美国</td><td align="left">美国卫生与公众服务部下属的国家卫生信息技术协调员办公室组织了一场由医疗保健黑客进行的应用程序开发马拉松，将区块链技术应用于医疗保健领域。代表特朗普政府的国会行政部门已经认识到区块链的潜力，并呼吁在公共部门发展区块链技术。<br>美国国会宣布成立国会区块链决策委员会。 美国证券交易委员会（SEC）发布的《关于潜在非法加密资产交易平台的声明》确认数字加密资产属于证券范围，但不具有实际货币的特定属性和法律地位。</td></tr><tr><td align="center">中国</td><td align="left">2016年12月，中国将区块链技术列入“十三五”国家信息化规划。<br>2016年10月，中国工信部发布了《2016中国区块链技术与应用发展白皮书》。<br>2021年5月，中国工信部印发《关于加快区块链技术应用和产业发展的指导意见》。<br>中国工信部发言人表示，2020年5G部署将加快，年内新增5G基站超过60万个。 5G普及率正处于快速提升阶段。预计到2023年，5G个人用户渗透率将超过40%，用户数将超过5.6亿，5G网络接入流量占比将超过50%。<br>中国国务院印发了《云计算服务安全评价办法》政策文件。</td></tr><tr><td align="center">日本</td><td align="left">日本政府成立了第一个区块链行业组织——日本区块链协会（JBA）以及区块链合作联盟。<br>2017年4月1日，日本颁布了《支付服务法》，正式承认比特币是一种合法的支付方式，并对数字、加密资产的交易制定了明确的监管要求。<br>日本经济当局对“元宇宙”进行了定义，但目前还没有将其视为最终的商业形态。 该部计划改进法律和发展指南，并试图在全球虚拟空间行业中占据领先地位。</td></tr><tr><td align="center">韩国</td><td align="left">韩国政府希望在元宇宙产业中发挥主导作用。<br>韩国政府计划到 2022 年拨款9.3万亿韩元（约合516亿元人民币），用于加速数字化转型和培育元宇宙等新兴产业，并帮助中小企业和风险投资公司构建区块链。<br>2025年，预计将有2.6万亿韩元（约合22亿美元）用于元宇宙、区块链和其他技术。<br>2022年至2025年，韩国政府将全面支持韩国企业开发的元宇宙平台。<br>韩国技术与标准办公室正在努力成为元宇宙的世界技术领导者。<br>韩国技术与标准办公室负责人李向红在网上会议上表示，韩国政府将向任何希望制定该领域技术标准的公司提供必要的支持。<br>韩国教育部正在推广元宇宙中的课程。<br>首尔教育局表示，将在全市开设相关课程，为2100名中小学生打开元宇宙世界的大门。首尔教育局局长金恩兵说：“通过运营基于元宇宙的创意科学教室，我们提供虚拟现实和人工智能，努力成为综合科学教育的中心。”</td></tr><tr><td align="center">阿拉伯联合酋长国</td><td align="left">2016 年，迪拜成立了全球区块链委员会。<br>2017 年，迪拜政府宣布，迪拜经济的子公司 Emcredit 将与美国初创公司 Object Tech Grp Ltd 合作，创建一种名为 emCash 的加密数字货币。<br>2020 年底，阿联酋证券和商品管理局 (SCA) 发布了“管理局主席关于加密资产监管的 2020 年决定 (21/RM)”。<br>2021 年 10 月，迪拜政府将举办区块链峰会，这是一项互惠互利的举措，旨在从受监管的加密经济过渡到元宇宙。<br>阿联酋中央银行公布了 2023-2026 年期间的规划路线图，以实现 CBDC 的运作，并使阿联酋成为全球金融业数字化转型的十大国家之一。<br>在第 12 届全球移动宽带论坛（MBBF）上，阿联酋 SAAMENA 通信委员会首席执行官表示，所有海湾国家都已发布商用 5G 网络。</td></tr></tbody></table><p>国际组织的具体指南见下表：</p><table><thead><tr><th align="center">国际组织</th><th align="left">行动</th></tr></thead><tbody><tr><td align="center">ITU</td><td align="left">2020 年 8 月，ITU 发布了第一套区块链国际标准。<br>2021年4月19日至30日，国际电联将召开全体会议。会上，中国信息通信研究院牵头的三项国际区块链标准提案获得通过。<br>2016年2月23日至3月2日，国际电联工作组第23次会议在北京召开。中国信息通信研究院是中方主办方。 ITU 开始评估 5G 技术并探索新的移动通信频谱。</td></tr><tr><td align="center">IEEE</td><td align="left">2017年12月6日，IEEE区块链资产交易委员会正式获批成立。<br>2020年12月23日，IEEE 2418.2-2020《IEEE区块链系统数据格式标准》在中国电子标准化研究院的牵头下正式发布实施。<br>IEEE 发布了《IEEE 全球 CIO 和 CTO 访谈调查：2021 年的机遇与挑战，以及关键技术趋势》，根据调查结果，人工智能和机器学习、5G和物联网技术将成为影响2021年最重要的技术。</td></tr><tr><td align="center">IET</td><td align="left">IET区块链是IET与同济大学和上海区块链应用SERCBAAS合作推出的，旨在发布与区块链基础理论、应用技术和产业发展、技术创新和最新观点相关的前沿成果。</td></tr><tr><td align="center">WWW</td><td align="left">2016年6月8日-9日，第一届去中心化网络峰会在美国旧金山召开。 WWW 的创始人 Tim Berners-Lee 在会议上提到，区块链和 P2P 技术将被用于创建一个去中心化的互联网。<br>万维网联盟W3C召开区块链研讨会，呼吁为区块链技术制定公共标准。</td></tr></tbody></table><h2 id="2-2-不同国家的代表公司及其典型产品或服务"><a href="#2-2-不同国家的代表公司及其典型产品或服务" class="headerlink" title="2.2 不同国家的代表公司及其典型产品或服务"></a>2.2 不同国家的代表公司及其典型产品或服务</h2><p>元宇宙融合了5G、云计算、计算机视觉、区块链、人工智能等最前沿技术，在游戏、艺术、商业等众多领域都有应用。通过上文的阐述，我们初步了解了国际组织和国家在元宇宙上的不同政策。由于元宇宙不同国家的政策不同，不同国家的代表企业及其典型产品和发展规划也不同。比如美国，作为元宇宙的先行者，元宇宙布局比较广泛，应用在商业、游戏、艺术、社会等诸多领域。中国拥有庞大的市场和强大的互联网企业和互联网应用。国内互联网公司相继在元宇宙引入商业、游戏、艺术。日本凭借在ACG产业积累的优势和丰富的IP资源，专注于动漫和电子游戏的应用领域，而韩国则是政府主导和偶像产业驱动。德国和意大利的奢侈品牌正试图通过虚拟产品等方式让更多的人成为他们的客户。其他国家的其他代表公司及其典型产品见下表：</p><table><thead><tr><th align="center">企业</th><th align="left">典型产品或服务</th></tr></thead><tbody><tr><td align="center">Amazon（美国）</td><td align="left">2018年以来，亚马逊一直在开发“新的VR购物体验”，并试图通过在元宇宙中建立一种虚拟的“亚马逊商城”来建立一个购物者可以与数字产品互动的虚拟购物空间，以维护其在市场上的主导地位。</td></tr><tr><td align="center">Roblox（美国）</td><td align="left">玩家可以创建自己的虚拟世界或编写各种游戏，想象力是唯一的限制。 Roblox 支持 VR 设备以增强用户沉浸感。 Roblox已成为全球最大的游戏UGC平台，支持iOS、Android、PC、Mac等平台。 Roblox 目前是最接近元宇宙的“世界”之一。</td></tr><tr><td align="center">Facebook（美国）</td><td align="left">2019年9月，Facebook发布VR社交平台Facebook Horizon，并于2020年8月推出公测。<br>2021 年 7 月，Facebook 宣布将成为元宇宙团队，五年内转型为元宇宙公司，并为其 Reality Labs 投资至少 100 亿美元项目。<br>2021 年 10 月，Facebook 宣布将自己更名为 Meta。</td></tr><tr><td align="center">Epic Games（美国）</td><td align="left">2021 年 4 月，Epic Games 宣布投资 10 亿美元建立一个元宇宙。并收购了最大的3D模型平台Skethfab，吸纳Skethfab平台的用户流量，增加其在元宇宙的市场份额。</td></tr><tr><td align="center">Disney（美国）</td><td align="left">迪士尼首席技术官蒂拉克·曼达迪 (Tilak Mandadi) 表示，打造“主题公园元宇宙”将是迪士尼主题公园发展的下一步。</td></tr><tr><td align="center">Snapchat（美国）</td><td align="left">Snapchat 引入了自定义头像和过滤器，用数字内容填充世界。</td></tr><tr><td align="center">Nvidia（美国）</td><td align="left">2021 年 8 月 11 日，Nvidia 宣布了 Nvidia Omniverse 计划，以创建世界上第一个虚拟协作和模拟平台。</td></tr><tr><td align="center">Microsoft（美国）</td><td align="left">微软对元宇宙持谨慎态度。魏青：“元宇宙”只有回归现实世界才有实用价值。</td></tr><tr><td align="center">Decentraland（美国）</td><td align="left">基于以太坊的VR虚拟世界，第一个由用户拥有的完全去中心化的虚拟世界。<br>Decentraland 的核心内容是艺术品，有一个专门展示数字艺术品的地方。</td></tr><tr><td align="center">Tencent（中国）</td><td align="left">腾讯对元宇宙生态进行了全系列投资，包括AR开发平台、《阿瓦金生活》游戏、Spotify音乐流媒体平台等，并于 2021 年 9 月申请注册 “Kings Metaverse” 和 “TiMi Metaverse” 的商标。</td></tr><tr><td align="center">Alibaba（中国）</td><td align="left">阿里巴巴申请了“阿里元宇宙”、“淘宝元宇宙”等商标注册。<br>XR Lab负责人谭平将元宇宙划分为四层：L1（全息构建）、L2（全息模拟）、L3（虚实融合）、L4（虚实联动）。</td></tr><tr><td align="center">ByteDance（中国）</td><td align="left">字节跳动拥有抖音等高流量平台，还投资了视觉计算和AI计算平台Moore Thread，发布了游戏《重启世界》，并收购了中国VR设备公司PICO。</td></tr><tr><td align="center">NetEase（中国）</td><td align="left">网易对元宇宙的布局以游戏业务为主，为游戏开发提供低门槛的工具。网易投资了 IMPROBABLE 的元计算平台，使第三方能够构建虚拟世界，并投资了 IMVU 虚拟角色平台。</td></tr><tr><td align="center">Shenzhen Zqgame Co.,Ltd（中国）</td><td align="left">Zqgame是一家引领潮流的中国游戏工作室。 2021年9月6日，Zqgame发布了游戏Brew Master的预览。该游戏允许玩家在模拟环境中创业并体验现实生活中的影响。</td></tr><tr><td align="center">Wondershare Technology Group Co.,Ltd（中国）</td><td align="left">万兴科技投资Realibox，加强在AR/VR领域的业务布局，为元宇宙初期部署提供坚实的技术基础。</td></tr><tr><td align="center">Sony, Hassilas（日本）</td><td align="left">Mechaverse 是第一个日本元宇宙平台。企业可以在该平台上快速进行产品发布，并为参与者提供视频介绍和3D模型实验。</td></tr><tr><td align="center">GREE（日本）</td><td align="left">GREE通过其子公司 REALITY 经营元宇宙业务。预计到 2024 年将投资 100 亿日元，在全球开发超过 1 亿用户。</td></tr><tr><td align="center">Avex Business Development、Digital Motion（日本）</td><td align="left">Avex Business Development 和 Digital Motion 成立了“Virtual Avex Group”，计划推广现有的动画或游戏角色，举办虚拟艺术家活动，并将真实艺术家的音乐会和其他活动虚拟化。</td></tr><tr><td align="center">SAMSUNG（韩国）</td><td align="left">三星推出了“三星全球元宇宙基金”。</td></tr><tr><td align="center">SK Telecom（韩国）</td><td align="left">2021年7月，SK电讯推出了名为“ifland”的虚拟世界，用户可以在其中通过卡通人物主持和参与会议。</td></tr><tr><td align="center">Urbanbase（韩国）</td><td align="left">Urbanbase 是一个用于房地产和室内设计开发的 3D 空间数据平台。该公司在 B+ 轮融资中筹集了 130 亿韩元（约合 4.5 亿元人民币）。这笔资金将用于开发 Urbanbase 进入元宇宙所需的 VR/AR 和 3D 技术。</td></tr><tr><td align="center">Metaverse Alliance（韩国）</td><td align="left">韩国信息通信产业振兴院已将25家机构和企业组成“元宇宙联盟”，通过政商合作，构建以私营部门为主导的元宇宙生态系统，实现现实与虚拟各个领域的开放元宇宙平台。</td></tr><tr><td align="center">Sotheby’s（英国）</td><td align="left">英国苏富比拍卖行推出了“苏富比元宇宙”板块，并举办了一场名为“Natively Digital 1.2: The Collectors”的特别拍卖会，一次展出了 53 件来自 NFT 艺术收藏的作品。</td></tr><tr><td align="center">Maze Theory（英国）</td><td align="left">英国著名VR工作室Maze Theory将围绕知名IP和知名粉丝宇宙打造“粉丝元宇宙”。</td></tr><tr><td align="center">MetaDubai（阿联酋）</td><td align="left">MetaDubai 正在迪拜建设一个基于区块链、NFT、AI、去中心化数据存储的元宇宙城市，以开发最完整的虚拟世界形象、经济系统和应用程序。</td></tr><tr><td align="center">Ripple（阿联酋）</td><td align="left">区块链支付公司 Ripple 宣布在迪拜国际金融中心（DIFC）设立地区总部。</td></tr><tr><td align="center">Stage11（法国）</td><td align="left">法国 Metaverse 音乐平台 Stage11 已完成由欧洲风险投资基金 Otium Capital 领投的 500 万欧元融资，旨在打造沉浸式 Metaverse 音乐。</td></tr><tr><td align="center">RIMOWA（德国）</td><td align="left">德国奢侈行李箱品牌 RIMOWA 5 月在 Instagram 上宣布，将与设计工作室 NUOVA 合作推出 4 件 NFT 艺术品，名为“来自元宇宙的蓝图”。</td></tr><tr><td align="center">Gucci（意大利）</td><td align="left">意大利奢侈品牌 Gucci 推出了虚拟运动鞋。<br>购买虚拟运动鞋后，消费者可以在Gucci APP和VR社交平台VR CHAT中使用，或者在游戏平台Roblox上试用。</td></tr></tbody></table><h2 id="2-3-元宇宙相关出版物数量"><a href="#2-3-元宇宙相关出版物数量" class="headerlink" title="2.3 元宇宙相关出版物数量"></a>2.3 元宇宙相关出版物数量</h2><p>Web of Science 是一个基于网络的多学科文献数据库。它是世界上最大的综合性学术信息资源，涵盖了最多的学科。收录了在自然科学、工程技术、生物医学等各个研究领域最具影响力的多种核心学术期刊。因此，我们选择统计该数据库上发布的元宇宙相关出版物的数量来分析元宇宙的发展过程。<br>截至 2021年11月1日，该数据库共发布了211篇与元宇宙相关的出版物。从下图历年的发表数量可以看出，我们可以将元宇宙的发展划分为四个阶段：萌芽阶段、初级阶段、衰退阶段和发展阶段。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%85%83%E5%AE%87%E5%AE%99%E7%9A%84%E6%9C%80%E6%96%B0%E6%8A%80%E6%9C%AF%E3%80%81%E5%BA%94%E7%94%A8%E5%92%8C%E6%8C%91%E6%88%98/2.png"></p><p>元宇宙的最初概念来自尼尔·斯蒂芬森 1992 年的科幻小说《雪崩》，1998 年在 Web of Science 上首次发表了关于元宇宙的文章。该刊物分析了实时虚拟人的现状在小说《雪崩》中，包括外貌、服饰配饰、肢体动作等，为元宇宙的研究拉开了帷幕。1999 年的“黑客帝国”展示了一个由人工智能计算机系统控制的现实世界，称为“黑客帝国”。在缺乏技术工具的情况下，文学和艺术被用作研究萌芽阶段的元宇宙的工具，例如电影、书籍等。<br>21世纪初，虚拟现实技术和计算机图形学的飞速发展，为元宇宙的发展奠定了技术基础。在初级层面，电子游戏已成为探索元宇宙的新工具。Roblox 于 2006 年发布的游戏 Roblox，以及 2009 年瑞典 Mojang Studios 开发的 Minecraft 极大地激发了关于元宇宙的第一波讨论。<br>元宇宙的发展还处于起步阶段，商业模式还不成熟。由于不同世界的交互问题、算力压力、伦理约束、隐私风险和成瘾风险等开放性问题，以及元宇宙发展仍受当前技术限制的事实，元宇宙的研究兴趣2013年之后进入低潮阶段。<br>2021年3月10日，沙盒游戏平台Roblox首次将“元宇宙”的概念纳入招股书，并成功登陆纽交所。该公司上市首日市值超过400亿美元。这一现象让科技界和资本界一片哗然，并重新点燃了关于元宇宙的讨论。今年可以称为元宇宙元年。在发展阶段，元宇宙融合了5G、云计算、计算机视觉、区块链、人工智能等处于快速发展阶段的前沿科技。元宇宙已经应用于医疗、电子游戏、艺术、商业等多个领域，完成了从游戏到游戏之外的转型。元宇宙有着前所未有的爆发力。为了通过本节中 Web of Science 数据库中发布的与元宇宙相关的出版物数量来验证元宇宙开发阶段的分类，我们还检查了在 SCOPUS 数据库中发布的与元宇宙相关的出版物的数量，结果下图所示：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%85%83%E5%AE%87%E5%AE%99%E7%9A%84%E6%9C%80%E6%96%B0%E6%8A%80%E6%9C%AF%E3%80%81%E5%BA%94%E7%94%A8%E5%92%8C%E6%8C%91%E6%88%98/3.png"></p><p>SCOPUS 数据库中共发布了 191 篇有关元宇宙的出版物。这个数据库中调查得到的数据再次印证了我们的想法。根据元宇宙的发表数量，元宇宙的发展可分为四个阶段，分别是1992年-2007年的萌芽阶段、2008年-2013年的初级阶段、2014年-2019年的衰退阶段、2020至今的发展阶段。</p><h1 id="3-元宇宙的特点"><a href="#3-元宇宙的特点" class="headerlink" title="3 元宇宙的特点"></a>3 元宇宙的特点</h1><p>元宇宙作为一种新兴的互联网应用：</p><ul><li>其融合了多种新技术，具有多技术的特点。</li><li>其作为一种新的社会形态，具有社会性特征。</li><li>其作为与现实世界平行且密切相关的虚拟世界，具有超时空性的特点。</li></ul><h2 id="3-1-多技术"><a href="#3-1-多技术" class="headerlink" title="3.1 多技术"></a>3.1 多技术</h2><p>元宇宙融合了多种新技术。它提供基于增强现实技术的沉浸式体验，基于数字孪生技术生成现实世界的镜像，构建基于区块链技术的经济体系。</p><h2 id="3-2-社会性"><a href="#3-2-社会性" class="headerlink" title="3.2 社会性"></a>3.2 社会性</h2><p>正如定义所说，元宇宙是一种新型的社会形态。元宇宙包括经济体系、文化体系和法律体系，它们与现实密切相关，但又各有特点。</p><h2 id="3-3-超时空性"><a href="#3-3-超时空性" class="headerlink" title="3.3 超时空性"></a>3.3 超时空性</h2><p>超时空指的是元宇宙，一个与现实世界平行的虚拟世界。它打破了时间和空间的界限，为用户提供了开放、自由、沉浸式的体验。</p><h1 id="4-元宇宙的多种新技术和框架"><a href="#4-元宇宙的多种新技术和框架" class="headerlink" title="4 元宇宙的多种新技术和框架"></a>4 元宇宙的多种新技术和框架</h1><p>元宇宙是现实世界与虚拟世界的紧密融合、互动、交织，需要多种新技术的融合，创造出新颖的互联网应用和社交形态。在本节中，我们概述了元宇宙所涉及的技术，如下图所示。元宇宙涉及的技术分为五个方面，分别是网络基础设施、管理技术、基础共性技术、虚拟现实对象连接、虚拟现实融合。 </p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%85%83%E5%AE%87%E5%AE%99%E7%9A%84%E6%9C%80%E6%96%B0%E6%8A%80%E6%9C%AF%E3%80%81%E5%BA%94%E7%94%A8%E5%92%8C%E6%8C%91%E6%88%98/4.png"></p><h2 id="4-1-通信和计算机基础设施"><a href="#4-1-通信和计算机基础设施" class="headerlink" title="4.1 通信和计算机基础设施"></a>4.1 通信和计算机基础设施</h2><p>无论是远程执行大规模计算任务、访问大型数据库，还是提供用户之间的共享体验，它们都与网络和通信密不可分。5G和6G是元宇宙的通信基础。5G具有高速、低延迟、网络泛在、低功耗、万物互联的优势，使得元宇宙的实现成为可能。6G将打破时间和虚拟现实的局限，将服务对象从物理世界的人、机、物扩展到虚拟世界的“环境”，实现人-机-物-环境的互联互通。物理世界和虚拟世界，为元宇宙提供网络基础。<br>在5G和6G网络环境下，量子通信保证了元宇宙的通信安全。M. Z. Chowdhury 等人基于量子不可克隆定理和不确定性原理，提出量子通信通过应用量子密钥提供高安全性。此外，由于量子位的叠加特性，量子通信提高了整体安全性。<br>此外，物联网（IoT）在元宇宙的网络基础设施中扮演着至关重要的角色。物联网传感为用户提供连接元宇宙与现实世界的完全真实、持久、流畅的交互体验。但是，仍然存在瓶颈。例如，数据爆炸和有限的传感资源之间的不平衡。F. Shi 等人提出了选择性感知的解决方案。另一个瓶颈是传感器/执行器性能不佳。为了解决这个问题，H. Ning 等人提出纳米技术有能力提高传感器/执行器的性能（例如，更高的灵敏度和选择性、更短的响应时间和更长的使用寿命）。因此，纳米材料（如石墨烯、纳米线等）的应用将为元宇宙传感和通信领域提供选择。<br>构建元宇宙需要强大的计算系统。目前的计算能力架构还不能满足元宇宙的低门槛和体验密集型需求。然而，云计算、边缘计算等计算范式在一定程度上能够促进计算能力的发展，成为元宇宙的主要基础设施。</p><h2 id="4-2-管理技术"><a href="#4-2-管理技术" class="headerlink" title="4.2 管理技术"></a>4.2 管理技术</h2><p>元宇宙的基础管理技术提供了现实世界和虚拟世界的连接和融合所需的环境，主要包括能源管理、资源管理和会话管理。<br>能源管理技术首先考虑的是元宇宙架构和设施对电能的消耗。许多学者提出了能量监测的方法。例如，R. Krishnamoorthy 等人提出了一种基于物联网的方法来监控负载消耗并以一种有效的方式节省能源。G. Bedi 等人开发了 Elman 循环神经网络模型和指数功率预测模型，以减少功率损耗并节省成本。元宇宙的中长期发展需要寻找更稳定、更可持续的能源。能源可持续性不仅是元宇宙的核心约束，也是一个投资机会。<br>如何有效地发现和分配资源是元宇宙资源管理技术背景下亟待解决的问题。研究人员也在不断探索资源管理策略，为元宇宙的实施提供基础。L.N.Nunes等提出了一种基于淘汰选择的资源搜索与发现算法来解决异构环境下的资源搜索与发现问题。R. S. Moorthy 等人提出了一种基于正弦-余弦优化算法的新的云资源发现机制。Y. Han 等人提出了一个动态资源分配框架来同步元宇宙与物联网服务和数据。<br>会话管理是对异构网络中泛在资源与资源用户交互的管理。在元宇宙环境中，管理具有动态特征的持久交互非常重要，尤其是对于具有多个资源用户的会话。此外，会话的实时性可用于增加用户的沉浸式体验。Park K. Y. 等人讨论了如何在5G无线网络环境下实现用户的高性能会话管理。此外，元宇宙还应防止会话被攻击。Nadar V. M. 等研究了一种防御破坏性身份验证和会话管理攻击的方法。M. Marlinspike 等开发了芝麻算法来加密异步消息并提高会话期间的安全系数。</p><h2 id="4-3-基础共性技术"><a href="#4-3-基础共性技术" class="headerlink" title="4.3 基础共性技术"></a>4.3 基础共性技术</h2><p>元宇宙的基础共性技术包括人工智能、时空一致性、安全与隐私等。<br>AI算法（即机器学习、深度学习、强化学习等）是连接虚拟世界和现实世界的“钥匙”。人工智能的三大要素，即数据、算法和算力，在元宇宙的建立和发展中起着至关重要的作用。通过使用人工智能技术，元宇宙可以安全、自由地参与超出现实世界边界的社会和经济活动。利用计算机视觉、智能语音、自然语言处理等技术，让用户拥有与现实世界相同的视觉和听觉感受。<br>时空一致性是元宇宙最基本的特征。元宇宙的最终形态是真实人类社会的平行数字时空连续体，因此一致的时空数据对于现实世界与元宇宙之间的映射至关重要。G. Atluri 等人探索了时空数据挖掘的方法。此外，还需要研究时间同步、目标定位、时间配准、空间配准等时空一致性方法。<br>用户数据的安全和隐私是现实世界中最大的问题之一。随着元宇宙的出现，收集到的个人数据的数量和丰富程度是前所未有的。未来很可能会有多个公司/机构共同建设一个或多个元宇宙，那么如何与公司/机构协调数据，以及不同元宇宙之间如何交互数据，以保证元宇宙的隐私和安全。Z. Zhang 等人对用户访问认证、网络态势感知、危险行为监控、异常流量识别等方面的文献进行了调研，为优化元宇宙的安全和隐私提供参考。B. Falchuk 等人也提出了元宇宙中的隐私问题。</p><h2 id="4-4-虚拟现实对象连接技术"><a href="#4-4-虚拟现实对象连接技术" class="headerlink" title="4.4 虚拟现实对象连接技术"></a>4.4 虚拟现实对象连接技术</h2><p>元宇宙将作为物理世界和数字世界之间的桥梁，与支持身份建模、去中心化技术和社会计算密不可分。<br>元宇宙可以简单地理解为与现实世界平行的网络世界。因此，与现实世界一样，个人进入元宇宙需要身份凭证，无论是否与真实身份相关，采用哪种身份建模技术满足其需求。身份建模和身份寻址是连接现实世界和元宇宙的桥梁，将成为元宇宙时代一个非常重要的研究领域。<br>生活在元宇宙的用户离不开社交计算。元宇宙的出现不会以虚拟的社交关系取代真实的社交关系，而是会带来一种线上线下融合的新型社交关系。社会计算通过研究人类行为和社会关系来预测元宇宙的运行规律和未来发展趋势。此外，更容易在元宇宙收集用户的位置、年龄、喜好等信息并进行详细评估，以更好地支持元宇宙的社会。<br>元宇宙的每一部分都信奉去中心化的理念，需要借助去中心化的底层技术来保障元宇宙的安全和运行。去中心化技术包括区块链、分布式存储、分布式计算等，元宇宙应用最典型的去中心化技术是区块链技术。B. Ryskeldiev 等人针对混合现实应用的虚拟空间提出了一种基于分布式区块链的点对点分发模型。</p><h2 id="4-5-虚拟现实空间融合技术"><a href="#4-5-虚拟现实空间融合技术" class="headerlink" title="4.5 虚拟现实空间融合技术"></a>4.5 虚拟现实空间融合技术</h2><p>元宇宙将通过整合虚拟现实深刻改变现有社会的组织和运作。要实现虚拟世界与现实世界的空间融合，增强现实、脑机接口、视频游戏技术必不可少。<br>AR/VR/MR技术是元宇宙建设的技术支柱之一。增强现实（AR）通过设备识别和评估（二维、三维、GPS、体感、面部等检测到的物体），将基于检测到的物体的虚拟信息叠加在一个位置上，并显示在设备的屏幕上，允许虚拟信息进行实时交互。虚拟现实 (VR) 为用户提供完全身临其境的体验，让他们感觉自己身处现实世界。它是一个先进的、理想化的虚拟现实系统。混合现实 (MR) 是一种新的可视化环境，它结合了现实世界和虚拟世界。在新的可视化环境中，物理和数字对象实时共存和交互。未来VR/AR/MR之间的界限将变得模糊，成为融合产品。目前，元宇宙主要采用的交互技术是为用户打造一个高度交互的虚拟世界。<br>全息图像是一种记录和再现技术，它通过光学手段呈现物体真实的三维图像。它是计算机技术和电子成像技术相结合的结果。它利用相干光干涉记录光波的幅度信息和相位信息，获得物体的所有信息，包括形状、尺寸等。全息图像是真实的三维图像。用户无需佩戴便携设备即可在不同角度用肉眼查看图像。随着技术的发展，物理世界和虚拟世界的界限可以变得模糊，这将为元宇宙的真正实现奠定坚实的基础。<br>脑机接口（BCI）通过准确识别大脑信号，对大脑活动过程中的大脑信号进行编码和解码，供用户进行游戏、打字等操作。外部物理世界通过将个体大脑信号解码为计算设备识别的命令，可以实现虚拟世界和现实世界的空间融合。R. Abiri 等回顾了基于 EEG 的 BCI 方法。目前也有基于AI技术的BCI研究，以加速BCI的发展，为元宇宙的空间融合奠定基础。<br>电子游戏技术是呈现元宇宙最直观的方式。它不仅可以为元宇宙提供一个创意平台，还可以实现互动内容和社交场景的聚合。游戏引擎是视频游戏技术的核心，是指一些已编译的可编辑计算机游戏系统或一些实时交互图像应用程序的核心组件。游戏引擎的出现降低了游戏设计者和开发者的难度，让他们无需从最基本的代码开始。游戏引擎开发驱动元宇宙中的图像开发，为用户提供更接近现实世界的体验。目前比较成熟的游戏引擎见下表。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%85%83%E5%AE%87%E5%AE%99%E7%9A%84%E6%9C%80%E6%96%B0%E6%8A%80%E6%9C%AF%E3%80%81%E5%BA%94%E7%94%A8%E5%92%8C%E6%8C%91%E6%88%98/5.png"></p><h1 id="5-元宇宙的新社会形态"><a href="#5-元宇宙的新社会形态" class="headerlink" title="5 元宇宙的新社会形态"></a>5 元宇宙的新社会形态</h1><p>元宇宙的出现将把传统的社交网络转变为交互式和沉浸式的 3D 虚拟社交世界。</p><h2 id="5-1-虚拟社交世界"><a href="#5-1-虚拟社交世界" class="headerlink" title="5.1 虚拟社交世界"></a>5.1 虚拟社交世界</h2><p>社交网络和虚拟现实的融合使虚拟社交世界的创建成为可能。这些是 3D 沉浸式环境，将传统的面向内容的社交网络扩展为完全交互式的社交模拟。在社交虚拟世界中，用户由在虚拟世界中导航并与其他用户进行社交互动的化身表示。用户可以通过不同的虚拟社交世界进行传送，参与活动，甚至交易真钱。虚拟社会世界是复杂的社会系统，通过网络物理社会系统（CPSS）的无处不在的设计将真实的社会空间与虚拟的社会环境相结合。下图显示了有助于开发社交元宇宙应用程序的使能技术。物理社交空间与虚拟社交空间的融合需要对虚拟社交世界中的社交互动和社交事件进行持续映射。虚拟社交世界必须满足四个设计要求：</p><ul><li>真实感：要求用户感受沉浸在虚拟社交世界中的情感。</li><li>无处不在：要求虚拟社交元宇宙可以从各种设备和位置无处不在，并且用户的虚拟身份或网络角色在虚拟社交世界中的转换过程中保持连接。</li><li>互操作性：虚拟社交世界采用标准的能力，允许用户在元宇宙中的不同虚拟位置之间无缝传送/移动，而不会断开和中断他们的沉浸式体验。</li><li>可扩展性：虚拟社交世界以这样一种方式管理计算能力的能力，即大量用户可以在元宇宙中进行社交互动，而不会在他们的沉浸式体验中遇到断开和中断的情况。</li></ul><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%85%83%E5%AE%87%E5%AE%99%E7%9A%84%E6%9C%80%E6%96%B0%E6%8A%80%E6%9C%AF%E3%80%81%E5%BA%94%E7%94%A8%E5%92%8C%E6%8C%91%E6%88%98/6.png"></p><h2 id="5-2-元宇宙中的社交隐私"><a href="#5-2-元宇宙中的社交隐私" class="headerlink" title="5.2 元宇宙中的社交隐私"></a>5.2 元宇宙中的社交隐私</h2><p>可以通过跟踪社交元宇宙中的数字足迹，发现用户的真实身份和其他敏感信息，例如位置、购物偏好甚至财务细节。隐私的重要性在塑造社交元宇宙方面起着至关重要的作用。在传统社交网络中应用隐私保护方案要容易得多，因为用户可以决定与谁分享他们的社交媒体内容。另一方面，这种隐私控制在社交元宇宙中是不可能的，因为用户不能改变构建的虚拟世界的虚拟属性，这使得用户隐私保护具有挑战性。比如：如果你在社交元宇宙中的一个商场中导航，并且一个头像跟随你的头像并记录你购买的所有东西和你的旅行历史，这些信息可用于执行可能侵犯你隐私的社交工程攻击现实世界。另一方面，我们不能像在传统社交媒体中那样，在元宇宙中关闭谁可以关注我们的头像。元宇宙中的另一个隐私示例：您希望在家中拥有与现实世界中一样多的隐私。然而，当前的虚拟社交网络允许其他化身在地图上自由导航，包括你的房子，你不能报警，就像有人入侵你的房子一样。<br>解决社交元宇宙中隐私问题的建议解决方案之一是社交克隆。这涉及在元宇宙中为每个用户创建多个克隆，以混淆试图在元宇宙中跟踪个人的攻击者。这样的隐私保护方案或许可以解决一些问题，但它通过允许用户在元宇宙中具有多种表示而产生了更大的问题，更不用说数百万个克隆在元宇宙中漫游，这将不仅仅是攻击者混淆。其他隐私保护方案包括通过定期更改头像的外观来伪装用户，使攻击者更难针对特定个人，并使头像在被跟踪时暂时不可见。社交元宇宙的隐私框架可以结合多个隐私方案，用户可以选择为每种情况启用特定的隐私选项。Falchuk 等人提出了一种结合了虚拟克隆、私人复制、人体模型、头像锁定、头像伪装、传送和隐身等各种隐私技术的隐私方案，如下表所示。而其他研究人员则认为，用户所在国家/地区的隐私管辖权也应适用于元宇宙，尤其是在元宇宙中的社会关系方面。Lo 等人主张加拿大的个人信息保护和电子文件法 (PIPEDA) 应该成为像第二人生这样的社交虚拟网络中的州长隐私法。</p><table><thead><tr><th align="center">方案</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">化身克隆</td><td align="center">创建多个看起来相同的虚拟形象克隆以迷惑隐私入侵者。</td></tr><tr><td align="center">伪装</td><td align="center">用户切换多个伪装头像的能力。</td></tr><tr><td align="center">人体模型</td><td align="center">用模仿用户行为的机器人代替头像，并在怀疑跟踪的情况下将用户传送到另一个位置。</td></tr><tr><td align="center">隐形</td><td align="center">允许头像暂时不可见，以防止其被隐私入侵者或机器人跟踪。</td></tr><tr><td align="center">传送</td><td align="center">化身立即传送到元宇宙中其他位置的能力。</td></tr><tr><td align="center">私人世界</td><td align="center">允许元宇宙的某些位置仅被某些用户占用为私人位置。</td></tr><tr><td align="center">锁定</td><td align="center">元宇宙的某些部分被临时锁定以供某些头像私人使用。</td></tr></tbody></table><h1 id="6-元宇宙的超时空观"><a href="#6-元宇宙的超时空观" class="headerlink" title="6 元宇宙的超时空观"></a>6 元宇宙的超时空观</h1><p>超时空的概念在中国古代和国外经常被提及。在中国，超时空最早以古代神话故事的形式出现。道家将超时空提升到了理论水平，经典的道家老庄文学是对传统时空观的异端。</p><ul><li>老子：老子的“道”包含了精炼的时空思想。</li><li>庄子：庄子的“道”以相对论的方式打破了传统的时空束缚。</li><li>列子：列子的“道”与“道”过程中时空的脱离有关。 破碎的时空被直觉地重组为想象世界的形式，直接到达“道”。</li></ul><p>在西方，无论是柏拉图的“三重世界”、亚里士多德的“神学”、黑格尔的“绝对理念”等等，这些古老的西方经典理论也都体现了超时空性。</p><ul><li>柏拉图：柏拉图将世界分为三个部分：理性世界（不可见的永恒真理原型世界）、现实世界（模仿理性世界的可见的、易腐烂的真实物质世界）和艺术世界（模仿理性世界和 现实世界）。</li><li>亚里士多德：亚里士多德的“神学”假定理性是永恒的，没有起源和灭绝。 它是万物运动的原因，具有超时空的特性。</li><li>黑格尔：黑格尔的“绝对理念”假定自然界是“绝对理念”的外化。 “绝对理念”决定了时间和空间的关系。 它是发展到一定阶段的时空形式。 “绝对理念”先于时空或超时空。</li><li>弗洛伊德：弗洛伊德在潜意识理论中提到的梦时空，是一种偏离现实的时空。</li></ul><p>在现实世界中，人类行为发生在物理时间和空间中。时空保证了人类行为的正常进程，但也限制了人类的行为，使其不能偏离时空的真实特征。元宇宙打破了现实世界中时空的限制。元宇宙的超时空可以从两个时空层面来讨论：</p><ul><li>超越时间的限制，回到过去，到达未来。</li><li>在一定时间内超越物理空间，穿越空间，穿越时空。</li></ul><p>元宇宙的超时空性质反映在这样一个事实中，即元宇宙是一个与现实世界不同的时空。它并不仅仅停留在静态数字空间的构建上，而是一个与真实动态世界并行演进的虚拟空间。它为人类开辟了新的栖息地，为用户带来不一样的体验。目前，在互联网、5G、VR等技术的加持下，元宇宙处于稳健发展阶段。元宇宙给了人类创造与传统现实世界平行的全息数字世界的机会。未来将广泛应用于教育、工业等领域，具体应用见下表：</p><table><thead><tr><th align="center">领域</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">教育</td><td align="left">为学生提供身临其境的教育体验。比如在学习行星的时候，展示宇宙星系，可以放大和缩小，这样可以清楚地看到宇宙的纹理和特征。在学习古建筑的时候，你可以回到那个时代，亲身体验建筑的建造过程和细节。</td></tr><tr><td align="center">工业</td><td align="left">实现虚拟验证设计，规划和优化产品全生命周期的制造过程，解决产品试制周期长、制造过程不稳定的问题，使用高度仿真的虚拟产品进行市场和实际现场测试。</td></tr><tr><td align="center">艺术</td><td align="left">越来越多的展品以数字化的形式呈现，让博物馆的展览可以延伸到更多的地区。同时，通过虚实结合的展品展示无法近距离接触的珍贵藏品，实现人与藏品的多种互动方式。</td></tr><tr><td align="center">医疗</td><td align="left">广泛应用于远程医疗、虚拟医疗、远程监护、数据驱动医疗等领域。利用有限的设备资源，为患者诊断、急救、护理等提供高度移动化、数字化、实时化、远程化的医疗服务，提高医疗效率，实现医疗行业信息化。</td></tr><tr><td align="center">社会</td><td align="left">创造一个独立于用户真实社交关系的平行社交世界，增加用户的自由度，让他们摆脱现实世界的束缚，扩大社交圈子。最后，现实世界中存在着约定俗成的时空秩序。中国古代的“道”境界和西方古代超现实主义，彻底消除了理想和虚幻的时空属性。元宇宙介于两者之间。尽管具有超时空特性，但技术人员始终保持用户交互的时空一致性。所以完全不用担心元宇宙造成的时空混乱。</td></tr></tbody></table><h1 id="7-元宇宙的应用落地"><a href="#7-元宇宙的应用落地" class="headerlink" title="7 元宇宙的应用落地"></a>7 元宇宙的应用落地</h1><p>元宇宙首先实现应用落地的比较可能的场景有以下几个。</p><h2 id="7-1-智慧城市"><a href="#7-1-智慧城市" class="headerlink" title="7.1 智慧城市"></a>7.1 智慧城市</h2><p>作为与现实平行的虚拟世界，元宇宙采用了数字孪生技术，这也是构建智慧城市的重要手段。数字孪生技术可以对物理世界进行数字化映射，全面捕捉人、车、物、空间等城市数据，形成可视、可控、可管理的数字孪生城市。可以提高资源利用效率，优化城市管理和服务，提高市民生活质量。</p><h2 id="7-2-游戏"><a href="#7-2-游戏" class="headerlink" title="7.2 游戏"></a>7.2 游戏</h2><p>交互技术的发展极大地提升了游戏玩法的沉浸感，可以有效提升用户体验、可玩性和享受性。</p><h2 id="7-3-远程办公和虚拟会议"><a href="#7-3-远程办公和虚拟会议" class="headerlink" title="7.3 远程办公和虚拟会议"></a>7.3 远程办公和虚拟会议</h2><p>在新冠肺炎疫情的影响下，远程办公的重要性已经显现。元宇宙可以弥补原有远程办公模式的局限性，进一步完善远程办公的功能，为远程办公创造更多机会。</p><h2 id="7-4-数字观光"><a href="#7-4-数字观光" class="headerlink" title="7.4 数字观光"></a>7.4 数字观光</h2><p>元宇宙的建设可以更好地实现数字旅游和数字展览。数字孪生技术和交互技术的发展，让用户突破时间、空间等因素的限制，自由游览世界各地的景点，获得身临其境的体验。</p><h2 id="7-5-心理治疗"><a href="#7-5-心理治疗" class="headerlink" title="7.5 心理治疗"></a>7.5 心理治疗</h2><p>元宇宙可以帮助进行心理治疗。<br>元宇宙可以提供以下帮助：</p><ul><li>构建一个虚拟和放松的环境。</li><li>与虚拟角色交流和互动。</li></ul><h2 id="7-6-教育"><a href="#7-6-教育" class="headerlink" title="7.6 教育"></a>7.6 教育</h2><p>元宇宙的建设有助于促进儿童教育、严肃游戏和学前教育。<br>元宇宙可以为教育做出以下贡献：</p><ul><li>沉浸式、模拟真实场景，促进对学习内容的理解。</li><li>避免现实实验的危害。</li></ul><h2 id="7-7-经济"><a href="#7-7-经济" class="headerlink" title="7.7 经济"></a>7.7 经济</h2><p>区块链技术，去中心化，以及元宇宙内新兴产业的发展和崛起，可以有效带动经济发展。</p><h2 id="7-8-文化和娱乐"><a href="#7-8-文化和娱乐" class="headerlink" title="7.8 文化和娱乐"></a>7.8 文化和娱乐</h2><p>元宇宙作为一种新的社会形态，将催生出新的文化形态和文化创造方式。交互技术的发展和沉浸感的进一步提升，可以有效推动虚拟偶像和虚拟演唱会的发展。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%85%83%E5%AE%87%E5%AE%99%E7%9A%84%E6%9C%80%E6%96%B0%E6%8A%80%E6%9C%AF%E3%80%81%E5%BA%94%E7%94%A8%E5%92%8C%E6%8C%91%E6%88%98/7.jpg"></p><h2 id="7-9-社交互动"><a href="#7-9-社交互动" class="headerlink" title="7.9 社交互动"></a>7.9 社交互动</h2><p>基于场景的社交网络、在线聚会和交友。元宇宙打破了时空的界限，拉近了人与人之间的距离。元宇宙中的人们可以随时随地进行交流。元宇宙可以提供多种形式的社交互动。</p><h1 id="8-元宇宙需要解决的几个问题"><a href="#8-元宇宙需要解决的几个问题" class="headerlink" title="8 元宇宙需要解决的几个问题"></a>8 元宇宙需要解决的几个问题</h1><h2 id="8-1-交互问题"><a href="#8-1-交互问题" class="headerlink" title="8.1 交互问题"></a>8.1 交互问题</h2><p>作为虚拟世界与现实世界之间的媒介，元宇宙的交互技术需要满足以下条件：</p><ul><li>交互设备轻巧、使用方便、可穿戴、便携。</li><li>交互媒体的透明性让用户可以忽略技术的痕迹，更好地沉浸在虚拟世界中。</li></ul><p>现有的常见交互技术包括：体感技术、XR（VR、AR、MR）技术、脑机接口等。XR技术是指由计算机技术和可穿戴设备产生的真实与虚拟相结合的人机交互环境。XR作为融合虚拟和现实世界的沉浸式技术的总称，包括虚拟现实（VR）、增强现实（AR）、混合现实（MR）以及其他可能因技术进步而出现的新型沉浸式技术。体感技术是指人们不使用任何复杂的控制设备，直接用自己的身体动作与周围的设备或环境进行交互，让人们沉浸式地与内容进行交互。<br>目前，这两种技术都存在交互设备不够轻便透明、成本高的问题，难以普及。<br>脑机接口技术可分为侵入性、半侵入性和非侵入性三种。侵入性是指通过外科手术将电极植入大脑皮层。半侵入性是指将电极植入颅腔内，但在大脑皮层外。非侵入性是指通过连接到头皮的可穿戴设备来解读 EEG 信号。侵入性脑电图采集最为准确，但存在手术风险高、排斥人体组织等风险。无创方式避免了复杂手术的安全风险，但信号采集相对较弱。同时，脑机接口也存在难以传播的问题。</p><h2 id="8-2-计算问题"><a href="#8-2-计算问题" class="headerlink" title="8.2 计算问题"></a>8.2 计算问题</h2><p>计算能力是指处理数据的能力，由三个指标决定：数据的计算、存储和传输。算力是数字经济时代的重要生产力，其设施是技术创新的重要支撑。<br>元宇宙意味着更多的用户、更丰富的网络资源和计算资源，算力是元宇宙的重要支撑。新业态的规划和基于云计算技术的元宇宙平台，增加了对算力资源的需求，也为算力的发展提供了空间。元宇宙使用的云存储、云计算、云渲染等技术对客户端设备性能和服务器弹性提出了很高的要求。元宇宙需要不断提高处理速度、复杂度和功耗。</p><h2 id="8-3-道德伦理问题"><a href="#8-3-道德伦理问题" class="headerlink" title="8.3 道德伦理问题"></a>8.3 道德伦理问题</h2><p>元宇宙赋予了人们新的身份，为生活和活动创造了一个新的、非常自由的空间。它包含更复杂的社会关系。元宇宙作为下一代网络，必须控制和约束用户的行为，建立明确的伦理道德规范，维护元宇宙良好有序的生态环境。<br>元宇宙伦理道德问题是指元宇宙因相应道德规范的缺失和混乱而产生的与现实社会的伦理规范相冲突的现象。<br>元宇宙需要解决的伦理道德问题：</p><ul><li>诚信问题——发布和传播虚假信息、欺诈。</li><li>气氛不利的问题。</li><li>侵犯知识产权。</li></ul><p>随着元宇宙交互技术的发展，当大脑的意识可以像计算机信息一样被编辑、存储和复制时，科幻电影中的场景可能不再具有想象力。在这一点上，伦理的作用变得非常重要。原有的道德规范受到影响，新道德规范的制定滞后，跟不上元宇宙的发展。因此，应加强对元宇宙的监管，及时制定和更新相关法律法规。</p><h2 id="8-4-隐私问题"><a href="#8-4-隐私问题" class="headerlink" title="8.4 隐私问题"></a>8.4 隐私问题</h2><p>元宇宙与现实世界紧密相连，对应真实身份。元宇宙作为新一代网络的建设，与以往的网络环境一样，必须充分考虑数据隐私保护问题。</p><h2 id="8-5-网络综合症"><a href="#8-5-网络综合症" class="headerlink" title="8.5 网络综合症"></a>8.5 网络综合症</h2><p>网络综合症是一种由过度使用互联网引起的身体、社会和精神障碍。随着交互方式的不断发展，电子设备变得更小、更便携。设备的精简使人们在互联网上花费的时间越来越多。同时，元宇宙与现实世界紧密相连。虚实融合，以及元宇宙高度的沉浸感，让网络综合症的问题更加严重。</p><h2 id="8-6-标准和兼容性问题"><a href="#8-6-标准和兼容性问题" class="headerlink" title="8.6 标准和兼容性问题"></a>8.6 标准和兼容性问题</h2><p>作为一个与现实紧密相连、具有多维性的虚拟世界，元宇宙需要建立标准。元宇宙的兼容性和标准化问题可以分为两个方面：</p><ul><li>不同公司创建的元宇宙之间的兼容性问题。</li><li>元宇宙与现实世界的兼容性（包括货币兼容性和流通问题，以及法律纠纷的处理）。</li></ul><h1 id="9-总结"><a href="#9-总结" class="headerlink" title="9 总结"></a>9 总结</h1><p>元宇宙具有广阔的发展和应用前景。本文总结了不同国家和企业的工作，收集了与元宇宙相关的论文，介绍了元宇宙的多技术性、社会性和超时空性三个特点，预测了元宇宙的第一个应用领域，并讨论了它的问题和挑战。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 元宇宙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻译、编译、解释、汇编</title>
      <link href="/2021/08/17/ji-suan-ji-ke-xue-ji-chu/fan-yi-bian-yi-jie-shi-hui-bian/"/>
      <url>/2021/08/17/ji-suan-ji-ke-xue-ji-chu/fan-yi-bian-yi-jie-shi-hui-bian/</url>
      
        <content type="html"><![CDATA[<h1 id="翻译程序"><a href="#翻译程序" class="headerlink" title="翻译程序"></a>翻译程序</h1><p>翻译程序是指把高级语言源程序翻译成机器语言程序（目标代码）的软件。</p><p>翻译程序包括编译程序和解释程序。</p><h1 id="编译程序"><a href="#编译程序" class="headerlink" title="编译程序"></a>编译程序</h1><p>编译程序将高级语言源程序一次全部翻译成目标程序，每次执行程序时，只需执行目标程序，因此只要源程序不变，就无须重新编译。</p><p>虽然高级语言号称跨平台、可移植，但是同一种高级语言在不同计算机体系结构下，编译生成的目标程序是不同的。目标程序与体系结构相关，可惜仍不是计算机硬件能够直接执行的程序。</p><h1 id="汇编程序"><a href="#汇编程序" class="headerlink" title="汇编程序"></a>汇编程序</h1><p>汇编程序也是一种语言翻译程序，它把汇编语言源程序翻译成机器语言程序。</p><p>汇编语言是一种面向机器的低级语言，是机器语言的符号表示，与机器语言一一对应。</p><p>需要注意的是，编译后生成的目标文件不是汇编语言源程序，比如Java编译后生成的.class。</p><p>参考代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">section .datamsg db <span class="token string">'Hello, Assembly!'</span>, 0x0a <span class="token punctuation">;</span> 创建字符串变量lenequ$ - msg                 <span class="token punctuation">;</span> 获取字符串的长度 section .textglobal _start                   <span class="token punctuation">;</span> 使用gcc_start:                         <span class="token punctuation">;</span> 汇编程序执行的入口    movedx, len                <span class="token punctuation">;</span> 加载字符串长度    mov ecx, msg                <span class="token punctuation">;</span> 加载.data部分中创建的变量的内存地址    mov ebx, <span class="token number">1</span>                  <span class="token punctuation">;</span> 向stdout中写入字符串    mov eax, <span class="token number">4</span>                  <span class="token punctuation">;</span> 系统调用sys_write    int 0x80                    <span class="token punctuation">;</span> restart_syscall，<span class="token variable"><span class="token variable">`</span>int 80h<span class="token variable">`</span></span>也行    moveax, <span class="token number">1</span>                  <span class="token punctuation">;</span> 系统调用sys_exitint0x80                    <span class="token punctuation">;</span> restart_syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>学习资料：</p><ul><li><a href="https://www.tutorialspoint.com/compile_assembly_online.php">汇编语言在线调试环境</a></li><li><a href="https://asmtutor.com/">汇编语言在线教程</a></li><li><a href="https://chromium.googlesource.com/chromiumos/docs/+/HEAD/constants/syscalls.md">Linux系统调用表</a></li></ul><h1 id="解释程序"><a href="#解释程序" class="headerlink" title="解释程序"></a>解释程序</h1><p>解释程序将源程序的一条语句翻译成对应的机器目标代码，并立即执行，然后翻译下一条源程序语句并执行，直至所有源程序语句全部被执行完，不会生成目标程序。</p><h1 id="编译型语言和解释型语言"><a href="#编译型语言和解释型语言" class="headerlink" title="编译型语言和解释型语言"></a>编译型语言和解释型语言</h1><p>编译型语言的程序执行之前，需要一个编译的过程，把程序编译成为机器语言的文件，例如exe文件，运行时不用重新翻译。由于翻译只进行一次，运行时不需要翻译，所以编译型语言的程序执行效率较高。C、C++、Rust等都是典型的编译型语言。</p><p>解释型语言是相对于编译型语言存在的，其源代码不是直接翻译成机器语言，而是先翻译成中间代码，再由解释器对中间代码进行解释运行。Python、JavaScript、Perl、Shell等脚本语言都是解释型语言。</p><p>解释型语言的程序不需要编译，程序在运行时才翻译成机器语言，每执行一次都要翻译一次。因此效率比较低。</p><p>编译型语言与解释型语言，两者各有利弊。<br>前者由于程序执行速度快，同等条件下对系统要求较低，因此开发操作系统、大型应用程序、数据库系统等时会采用它们。<br>后者由于对速度要求不高、对不同系统平台间的兼容性有一定要求，因此编写网页脚本、服务器脚本及辅助开发接口时会采用它们。</p><p>编译型语言不如解释型语言跨平台性好。<br>编译型语言开发程序后，需要通过编译器把程序编译成机器语言。解释型语言程序进行移植后，要重新编译。<br>Java虽然需要编译，但本质是解释型语言，需要通过编译器编译成class文件，在什么平台运行需要对应平台的解释器。跨平台的前提是平台上必须要有相匹配的JVM。</p><h2 id="C程序编译"><a href="#C程序编译" class="headerlink" title="C程序编译"></a>C程序编译</h2><p>C程序可以在许多不同的机器上运行。这种可移植性是C语言的另一个优点。程序首先在目标机器上使用C编译器编译。存在略有不同的C编译器版本，包括cc（C编译器），或者gcc（GNU C编译器）。</p><p>这里我们用gcc编译并运行一个C程序，该编译器可以免费下载。它可以直接运行在Linux机器上，也可以在Windows机器上通过Cygwin环境访问。它可以用于许多嵌入式系统，如Microchip PIC32微控制器。</p><p>下面描述的C文件创建、编译和执行的一般过程对于任何C程序都是相同的。</p><ol><li>创建文本文件（Windows可用经典的记事本，但是不要用Word这种有格式化的，和Java要求一样）。我们这里取名为hello.c。</li><li>在终端窗口中，切换到hello.c文件的目录，在命令提示符处输入<code>gcc hello.c</code>。</li><li>编译器创建一个可执行文件。默认情况下，可执行文件名为a.out（Windows机器上是a.exe）。</li><li>在命令提示符处，键入 <code>./a.out</code>（Windows为 <code>./a.exe</code>），然后按回车。</li><li>终端窗口显示输出。</li></ol><p>gcc也可以编译一组多个C源文件。这样的一组C文件中只能包含一个main()函数，通常在main.c中，切记切记。<br>编译命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc main.c file2.c file3.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令行中输入<code>gcc --help</code>可以查看编译器选项：</p><table><thead><tr><th>编译器选项</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>-ooutfile</td><td>指定输出文件名</td><td>gcc -o hello hello.c</td></tr><tr><td>-S</td><td>创建汇编语言输出文件（不可执行）</td><td>gcc -S hello.c this produces hello.s</td></tr><tr><td>-v</td><td>详细模式——在完成编译时输出编译结果和过程</td><td>gcc -v hello.c</td></tr><tr><td>-Olevel</td><td>指定优化水平（通常为0~3），生成更快和更小的代码，但是代价是编译时间长</td><td>gcc -O2 hello.c</td></tr><tr><td>–version</td><td>列出编译器版本</td><td>gcc -version</td></tr><tr><td>–help</td><td>列出所有命令行选项</td><td>gcc - -help</td></tr><tr><td>–Wall</td><td>输出所有警告</td><td>gcc -Wall hello.c</td></tr></tbody></table><p>argc表示命令行上参数的个数。argv表示参数向量，为命令行上发现的字符串数组。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"argv[%d]=%s\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>o testargs<span class="token punctuation">.</span>c <span class="token punctuation">.</span><span class="token operator">/</span>testargs arg1 <span class="token number">25</span> lastarg<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>控制台输出：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">/</span>testargsargv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>arg1argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">25</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>lastarg<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要数字参数的程序可以使用stdlib.h中的函数将字符串参数转换为数字。</p><p>编译过程中编译器的整体操作：</p><ol><li>通过包含引用库和扩大宏定义来预处理文件。</li><li>忽略所有的不必要信息，如注释。</li><li>将高级代码转换为用二进制表示的本地处理器的简单指令，即机器语言。</li><li>将所有的指令转换成一个可由计算机读取和执行的简单二进制可执行文件。</li></ol><p>每种机器语言特定于一种给定的机器，因此程序必须专门为其将要运行的系统进行编译。</p><h2 id="Java程序编译和解释"><a href="#Java程序编译和解释" class="headerlink" title="Java程序编译和解释"></a>Java程序编译和解释</h2><p>以Java为例，<code>Hello.java</code>编译成.class字节码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">javac Hello.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释执行<code>Hello.class</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java Hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Java编译的补充知识：</p><ul><li><a href="https://blankspace.blog.csdn.net/article/details/104552096">命令行下的Java包结构编译与执行</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/104555618">命令行下的Java模块化建构、编译与执行</a></li></ul><h2 id="Python程序解释"><a href="#Python程序解释" class="headerlink" title="Python程序解释"></a>Python程序解释</h2><p>以Python为例，执行<code>hello.py</code>脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python hello.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>透明性</title>
      <link href="/2021/08/16/ji-suan-ji-ke-xue-ji-chu/tou-ming-xing/"/>
      <url>/2021/08/16/ji-suan-ji-ke-xue-ji-chu/tou-ming-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="透明性"><a href="#透明性" class="headerlink" title="透明性"></a>透明性</h1><p>自然科学里，透明性是物体透过可见光并散射较少的性质。<br>生活里，我们通常强调“公开透明”，所谓看得见摸得着。</p><p>这种认识会对计算机初学者带来不小的困扰，“XX对XXX是透明的”这种论调经常出现却不能被理解。</p><p>其实，在计算机领域，在某一类人眼中，如果<strong>感受不到</strong>某个事物或属性的存在，则对该类人而言，该事物是<strong>透明</strong>的。</p><p>计算机科学中存在着大量的抽象，特别是对于分层的体系结构，下层对上层屏蔽复杂性并向上层提供服务接口，下层用户知道的某些实现细节对上层隐藏，故上层用户不必知晓某些下层的实现细节，这就是一种下层对上层用户来说的透明性。</p><p>对于高级语言程序员来说，计算机体系结构的复杂内容不是他们关注的内容，他们要基于他们的“跨平台”编程语言完成应用程序的开发，即便不知道底层的复杂性，此时，体系结构对于这些程序员来说就是透明的。</p><p>当然，现实情况是，封装好的东西，应用者不了解其背后的实现原理，也很难达到深刻的理解和掌握。<a href="https://blankspace.blog.csdn.net/article/details/115191951">抽象泄漏</a>自然很难被避免，因为不懂底层，我们也很难走得很远，虽然不是必须懂。</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>协议是控制两个对等实体进行通信的规则的集合，是“水平的”，是控制对等实体之间通信的规则。</p><p>在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下层所提供的服务。<br>本层的服务用户只能看见服务而无法看见下层的协议。下层的协议对上层的服务用户是透明的。</p><p>数据链路层支持<strong>透明传输</strong>：不管所传输数据是什么样的比特组合，都能在链路上传输（哪怕数据中恰好出现了与帧定界符相同的比特组合）。</p><h2 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h2><p><a href="https://blankspace.blog.csdn.net/article/details/113634653">电子计算机的分层抽象</a>，可以将计算机分为九层：应用程序层、操作系统层、体系结构层、微结构层、逻辑层、数字电路层、模拟电路层、器件层、物理层。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%80%8F%E6%98%8E%E6%80%A7/1.png" alt="电子计算机的分层抽象"></p><p><strong>自底向上</strong>各层情况是：</p><ul><li>物理层关注的是电子运动，由麦克斯韦方程组、量子力学等支持。 </li><li>器件层关注的是晶体管、真空管等电子元器件，这些器件都有明确的外部连接点terminal，建立起了每个terminal上电压与电流之间的关系模型。 </li><li>模拟电路层关注的是器件组合在一起构成的放大器等组件，输入输出都是连续的电压值。 </li><li>数字电路层关注的是逻辑门，电压被控制为离散的值表示为0和1。 </li><li>逻辑层关注的是由数字电路层的逻辑门构成的逻辑组件，如加法器等。 </li><li>微结构层将逻辑组件组合在一起以实现体系结构中定义的指令。 </li><li>体系结构描述的是程序员观点的计算机抽象。 </li><li>操作系统是和硬件最为密切的程序，既是资源分配器，又控制各着种I/O设备和用户程序的需求。 </li><li>应用软件基于操作系统实现多种多样的应用功能。</li></ul><p>例如：</p><ul><li>对于器件层，物理层的电子运动是透明的，不可见。 </li><li>对于操作系统层，体系结构的内容是透明的，不可见。</li><li>……</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XaaS</title>
      <link href="/2021/08/11/ji-suan-ji-ke-xue-ji-chu/xaas/"/>
      <url>/2021/08/11/ji-suan-ji-ke-xue-ji-chu/xaas/</url>
      
        <content type="html"><![CDATA[<h1 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h1><p>云计算是一种按使用量付费的模式，这种模式提供可用的、便捷的、按需的网络访问，进入可配置的计算资源共享池（资源包括网络、服务器、存储、应用软件、服务），这些资源能够被快速提供，只需投入很少的管理工作，或与服务提供商进行很少的交互。</p><h1 id="XaaS"><a href="#XaaS" class="headerlink" title="XaaS"></a>XaaS</h1><p>与云计算相匹配的是<strong>XaaS</strong>，X指代各种计算资源，XaaS意为anything as a Service 或者everything as a Service，一切皆服务。<br>XaaS强调的是下游对上游按照契约提供服务，隐藏实现的细节，并且通常是通过网络的形式来提供服务。</p><h1 id="典型XaaS"><a href="#典型XaaS" class="headerlink" title="典型XaaS"></a>典型XaaS</h1><h2 id="SaaS"><a href="#SaaS" class="headerlink" title="SaaS"></a>SaaS</h2><p>SaaS，Software as a Service，软件即服务，软件分发方式中心化，供用户订阅。</p><p>软件安装在中央服务器上，通过网络远程访问，即可使用软件的功能。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/XaaS/1.png"></p><h2 id="PaaS"><a href="#PaaS" class="headerlink" title="PaaS"></a>PaaS</h2><p>PaaS，Platform as a Service，平台即服务，服务提供商提供开发的整体环境。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/XaaS/2.png"></p><h2 id="IaaS"><a href="#IaaS" class="headerlink" title="IaaS"></a>IaaS</h2><p>IaaS，Infrastructure as a Service，基础设施即服务，虚拟化，用户需要配置和部署中间件和应用服务。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/XaaS/3.png"></p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/XaaS/4.png"></p><h1 id="其他XaaS"><a href="#其他XaaS" class="headerlink" title="其他XaaS"></a>其他XaaS</h1><ul><li>存储即服务：(storage as a service)</li><li>安全即服务：SECaaS(security as a service)</li><li>数据库即服务：DaaS(database as a service)</li><li>监控/管理即服务：MaaS(monitoring/management as a service)</li><li>通信、内容和计算即服务：CaaS(communications, content and computing as a service)</li><li>身份即服务：IDaaS(identity as a service)</li><li>备份即服务：BaaS(backup as a service)</li><li>桌面即服务：DaaS(desktop as a service)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统</title>
      <link href="/2021/03/30/ji-suan-ji-ke-xue-ji-chu/ji-suan-ji-xi-tong/"/>
      <url>/2021/03/30/ji-suan-ji-ke-xue-ji-chu/ji-suan-ji-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机系统的组成"><a href="#计算机系统的组成" class="headerlink" title="计算机系统的组成"></a>计算机系统的组成</h1><p>计算机由计算机硬件和计算机软件组成。</p><ol><li>硬件：计算机的实体、如主机、外设等</li><li>软件：<ul><li>系统软件：管理整个计算机系统的软件<ul><li>语言处理程序，如编译器</li><li><a href="https://blog.csdn.net/weixin_43896318/category_9500428.html">操作系统</a></li><li><a href="https://blog.csdn.net/weixin_43896318/category_9673746.html">数据库管理系统</a>，注意不是数据库</li><li><a href="https://blog.csdn.net/weixin_43896318/category_9673744.html">网络软件</a></li></ul></li><li>应用软件： 按任务需要编制成的各种程序</li></ul></li></ol><h1 id="计算机发展历程"><a href="#计算机发展历程" class="headerlink" title="计算机发展历程"></a>计算机发展历程</h1><ol><li>计算机硬件的发展<ul><li>电子管时代(1946~1958)：操作指令是为特定任务而编制的，每种机器有各自不同的机器语言，功能受到限制，速度也慢。另一个明显特征是使用真空电子管和磁鼓储存数据。</li><li>晶体管时代(1956-1963)：晶体管代替了体积庞大电子管，使用磁芯存储器。体积小、速度快、功耗低、性能更稳定。还有现代计算机的一些部件，如打印机、磁带、磁盘、内存、操作系统等。在这一时期出现了更高级的COBOL和FORTRAN等编程语言，使计算机编程更容易。新的职业(程序员、分析员和计算机系统专家)和整个软件产业由此诞生。</li><li>中小规模集成电路(1964-1971)：以中小规模集成电路，来构成计算机的主要功能部件。主存储器采用半导体存储器。运算速度可达每秒几十万次至几百万次基本运算。在软件方面，操作系统日趋完善。</li><li>超大规模集成电路(1971-至今)：从1970年以后采用大规模集成电路(LSI)和超大规模集成电路(VLSI)为主要电子器件制成的计算机，重要分支是以大规模、超大规模集成电路为基础发展起来的微处理器和微型计算机。</li></ul></li><li>计算机编程语言<ul><li>机器语言：二进制代码</li><li>汇编语言：助记符</li><li>高级语言：<a href="https://blog.csdn.net/weixin_43896318/category_9400008.html">C/C++</a>、<a href="https://blog.csdn.net/weixin_43896318/category_9379712.html">Java</a>、……</li><li><a href="https://blankspace.blog.csdn.net/article/details/102681129">编程语言的抽象层次比较</a></li><li>高级语言转化为汇编语言的过程称为编译，汇编语言到机器语言的过程称为汇编，高级语言直接转化为机器语言称为解释</li></ul></li><li>计算机的分类和发展方向<ul><li>分类<ul><li>电子模拟计算机</li><li>电子数字计算机<ul><li>专用机</li><li>通用机</li></ul></li><li>指令流和数据流分类</li></ul></li><li>发展方向(两极分化)</li></ul></li></ol><h1 id="计算机摩尔定律和洛克定律"><a href="#计算机摩尔定律和洛克定律" class="headerlink" title="计算机摩尔定律和洛克定律"></a>计算机摩尔定律和洛克定律</h1><p>超大规模集成电路时代，芯片微型化不断推进，尽头在何处？晶体管能做到多小？芯片可以被包装到多密？没有人可以肯定地回答。</p><p>每年，科学家们都会继续阻挠预言家定义集成极限的尝试。事实上，当1965年英特尔创始人戈登·摩尔声明“<strong>集成电路中晶体管的密度每年都会翻一番</strong>”时，不止一位怀疑者表示怀疑。这一预测的当前版本通常被表述为“<strong>硅芯片的密度每18个月翻一番</strong>”。这一论断被称为<strong>摩尔定律</strong>。根据摩尔的预计，他的论断只能持续10年。然而，芯片制造工艺的进步使这一论断一直持续至今。</p><p>与其说摩尔定律是自然法则，不如说摩尔定律是对创新的期待和芯片设计的重要推动力。摩尔定律自1965年被提出以来一直成立，但为了做到这一点，芯片制造商已经从一种技术跳到另一种技术。</p><p>遗憾的是，根据目前的技术，摩尔定律不可能永远成立。按照现在的微型化速度，要将整个太阳系集成到一块芯片上，大约需要500年的时间。因此，成本可能是最终的制约因素。由英特尔早期资本家亚瑟.洛克提出的<strong>洛克定律</strong>是摩尔定律的必然结果：“<strong>制造半导体的资本设备成本将每四年翻一番</strong>。”洛克定律源于一位金融家的观察，他看到新芯片设施的价格标签从1968年的约12000美元上升到1990年代中期的1200万美元。2005 年，建造新芯片厂的成本接近30亿美元。按照这个速度，到2035年，不仅一个存储单元的大小将小于一个原子，而且还需要全世界的全部财富来构建一个芯片。因此，即使我们继续让芯片变得更小、更快，最终的问题可能还是我们是否有能力制造它们。此外，著名物理学家斯蒂芬霍金称，芯片制造商在寻求“执行”摩尔定律时受到两个基本限制的限制：光速和物质的原子性质。这意味着无论技术如何发展，摩尔定律最终都会失效。</p><p>当然，如果摩尔定律成立，洛克定律就必然失效。若想如此，计算机必须转向一种完全不同的技术。近些年，计算机科学家对新计算范式的研究一直在认真进行。围绕有机计算、超导、分子物理学和量子计算打造的实验室原型已经得到展示。利用量子力学的变幻莫测来解决计算问题的量子计算机尤其令人兴奋。量子系统的计算速度不仅会比以前使用的任何方法快得多，而且还会彻底改变我们定义计算问题的方式。如今被认为是荒谬的、不可行的问题也可能在不久的将来被计算机科学家解决。</p><h1 id="计算机硬件的基本组成"><a href="#计算机硬件的基本组成" class="headerlink" title="计算机硬件的基本组成"></a>计算机硬件的基本组成</h1><ul><li><a href="https://blankspace.blog.csdn.net/article/details/115320818">存储程序原理</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/115312141">冯诺依曼体系结构</a></li><li>CPU=控制器+运算器</li><li>主机=CPU+主存储器</li><li>外设=输入设备+输出设备+辅助存储器</li><li>计算机功能部件<ul><li>存储器<ul><li>主存储器<ul><li>存储字：存储单元存储的一串二进制代码称为存储字</li><li>存储字长：存储字的位数，与MDR的位数相同</li><li>存储单元：存储单元数量=$2^{MAR}$的位数</li><li>存储容量$=$存储单元个数$\times$存储字长</li><li>基本组成<ul><li>存储体：存放二进制信息，由若干存储单元构成</li><li>地址寄存器MAR：存放访存地址</li><li>数据寄存器MDR：暂存要从存储器中读或写的信息</li><li>时序控制逻辑：产生存储器操作所需的各种时序信号</li></ul></li><li>注意：MAR和MDR逻辑上在主存中，实际上在CPU中</li></ul></li><li>辅助存储器</li></ul></li><li>运算器<ul><li>功能<ul><li>算术运算</li><li>逻辑运算</li></ul></li><li>基本组成<ul><li>算术逻辑单元ALU</li><li>乘商寄存器MQ</li><li>操作数寄存器X</li><li>程序状态寄存器PSW</li></ul></li></ul></li><li>控制器<ul><li>功能：指挥各部件自动协调地进行工作</li><li>基本组成<ul><li>控制单元CU：分析指令，给出控制信号</li><li>指令寄存器IR：存放当前的指令，内容来自MDR</li><li>程序计数器PC：用来存放当前欲执行指令的地址，可以自动加1</li></ul></li></ul></li><li>输入设备</li><li>输出设备</li></ul></li></ul><h1 id="计算机工作过程"><a href="#计算机工作过程" class="headerlink" title="计算机工作过程"></a>计算机工作过程</h1><ol><li>把程序和数据装入主存储器</li><li>把源程序转换成可执行文件</li><li>从可执行文件的首地址开始逐条执行指令</li></ol><h1 id="计算机国际标准组织"><a href="#计算机国际标准组织" class="headerlink" title="计算机国际标准组织"></a>计算机国际标准组织</h1><p>一些标准组织拥有正式的章程，并在国际上被公认为电子和计算机某些领域的权威机构。</p><p>电气和电子工程师协会 (IEEE) 是一个致力于促进电子和计算机工程专业发展的组织。 IEEE 通过出版一系列技术文献积极促进全球工程界的利益。 IEEE 还为各种计算机组件、信号协议和数据表示制定了标准，仅举其参与的几个领域。 IEEE 为创建新标准制定了一个民主但复杂的程序。它的最终文件备受尊重，通常在需要修改之前会保留数年。</p><p>国际电信联盟 (ITU) 位于瑞士日内瓦。 ITU 的前身是 ComitéConsultatif InternationalTélégraphiqueetTéléphonique，即国际电话和电报咨询委员会。顾名思义，ITU 关注电信系统的互操作性，包括电话、电报和数据通信系统。 ITU 的电信部门 ITU-T 制定了许多标准，您将在文献中看到这些标准。您会看到这些标准以 ITU-T 或该组织以前的缩写 CCITT 为前缀。</p><p>许多国家，包括欧洲共同体，都委托伞式组织在各种国际团体中代表他们的利益。代表美国的团体是美国国家标准协会 (ANSI)。除了在欧洲标准化委员会 CEN（欧洲标准化委员会）中拥有发言权外，英国还拥有英国标准协会 (BSI)。</p><p>国际标准化组织 (ISO) 是协调全球标准制定的实体，包括 ANSI 与 BSI 等的活动。 ISO 不是首字母缩略词，而是源自希腊语 isos，意思是“平等”。 ISO 由 2800 多个技术委员会组成，每个委员会都负责一些全球标准化问题。它的兴趣范围从摄影胶片的行为到螺纹的螺距，再到计算机工程的复杂世界。国际标准化组织促进了全球贸易的激增。如今，ISO 几乎触及我们生活的方方面面。</p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><ul><li>CPU区分指令和数据的依据：指令周期的不同阶段。</li><li><a href="https://blankspace.blog.csdn.net/article/details/114603270">计算机性能指标</a></li><li>总容量=存储单元个数$\times$存储字长(bit)=存储单元个数$\times$存储字长/8(Byte)=$2^{MAR}$的位数$\times$MDR的位数(bit)</li><li>机器字长：计算机进行一次整数运算所能处理的二进制数据的位数。</li><li>存储字长：一个存储单元存储的二进制代码的长度。</li><li>指令字长：一个指令字中包含的二进制代码的位数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论经典问题</title>
      <link href="/2021/03/30/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/gai-lu-lun-jing-dian-wen-ti/"/>
      <url>/2021/03/30/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/gai-lu-lun-jing-dian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="蒙提霍尔问题"><a href="#蒙提霍尔问题" class="headerlink" title="蒙提霍尔问题"></a>蒙提霍尔问题</h1><p>三门问题（Monty Hall problem）亦称为蒙提霍尔问题、蒙特霍问题、蒙提霍尔悖论，大致出自美国的电视游戏节目Let’s Make a Deal。问题名字来自该节目的主持人蒙提·霍尔（Monty Hall）。参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机率？如果严格按照上述的条件，即主持人清楚地知道，自己打开的那扇门后是羊，那么答案是会。不换门的话，赢得汽车的几率是$\frac{1}{3}$。换门的话，赢得汽车的几率是$\frac{2}{3}$。</p><p>这个问题亦被叫做蒙提霍尔悖论：虽然该问题的答案在逻辑上并不自相矛盾，但十分违反直觉。这问题曾引起一阵热烈的讨论。</p><h2 id="Java模拟"><a href="#Java模拟" class="headerlink" title="Java模拟"></a>Java模拟</h2><p>这次也不能说是什么编程实现了，只能说做个随机化模拟吧，把数据量开的大一些，就$1000000$吧，问题不大。</p><p>这个模拟的思路就是我们用一个Set，装$0$、$1$、$2$三个数字，模拟三扇门，然后先随机生成一下$0\sim{2}$之间的一个随机数（也就是真正的汽车所在位置）。<br>接下来我们随机生成一个参赛者的选择（他没有任何场外信息，只能三猜一），由于我们模拟的是选手更改选择的情况，所以这个就没什么意义了，那就删去它。<br>然后还要随机生成一个主持人打开的门。主持人显然是知道车在哪里的，不论被没被参赛者第一次选中，主持人都只会打开一扇空门（也就是藏有山羊的门）。这个随机序号不能与真正的结果重合，也不能与选手选中的序号重合（这两种情况也可能重合）。这个序列也删去它。<br>一共只有三个数，删了两个，就只剩一个了。我们做的模拟是选手选择换门，所以剩下的门就是他选的答案，看一看与最初的随机答案一不一致就行。</p><p>最后概率竟是$\frac{2}{3}$。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> winNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 车在随机一个门后面</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 从三个门里面猜一个门</span>            <span class="token keyword">int</span> guessNum <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 剔除选项</span>            set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>guessNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> removeNum <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>removeNum <span class="token operator">==</span> result <span class="token operator">||</span> removeNum <span class="token operator">==</span> guessNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                removeNum <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 主持人再删一个</span>            set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>removeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                winNum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总游戏次数是："</span> <span class="token operator">+</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当更改选择的时候，获胜次数是："</span> <span class="token operator">+</span> winNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"更改选择的胜率是：%.3f%%"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>winNum<span class="token operator">/</span>times<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一则结果：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%92%99%E6%8F%90%E9%9C%8D%E5%B0%94%E9%97%AE%E9%A2%98/1.png"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>不能只是知其然，更要知其所以然。<br>这个问题的分析还要回归到概率论上。</p><h3 id="简易分析"><a href="#简易分析" class="headerlink" title="简易分析"></a>简易分析</h3><p>先给一个不规范的分析，更好理解：<br>试想原先三蒙一，概率确实是$\frac{1}{3}$，但反过来考虑，不是第一次选中的概率是$\frac{2}{3}$，那在主持人帮我们排掉一个不可能情况的情况下，我们换成没人动过的门，成功的概率是$\frac{2}{3}$，是大于我们“坚持信仰”概率的。</p><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>主持人其实没啥用，所以可以不看：<br>第一次选的空门（概率$\frac{2}{3}$），之后主持人开另一个空门，换门，得到汽车。<br>第一次选的汽车（概率$\frac{1}{3}$），之后主持人开另一个空门，不换门，得到汽车。</p><p>这里影响到结果的概率问题只发生在第一次选门上，如果条件如上设置，当一开始的门选定后，事件的结果也就决定了，所以这里不存在之后主持人是选择$1$号空门，还是$2$号空门的问题，所以在做概率计算是不考虑主持人的选择。</p><p>如果也要考虑主持人的话：<br>第一次选的空门$1$（概率$\frac{1}{3}$），之后主持人开另一个空门，换门，得到汽车。事件总概率$\frac{1}{3}$。<br>第一次选的空门$2$（概率$\frac{1}{3}$），之后主持人开另一个空门，换门，得到汽车。事件总概率$\frac{1}{3}$。<br>第一次选的汽车（概率$\frac{1}{3}$），之后主持人开另一个空门1（概率$\frac{1}{2}$），不换门，得到汽车 这个事件总概率。<br>第一次选的汽车（概率$\frac{1}{3}$），之后主持人开另一个空门2（概率$\frac{1}{2}$），不换门，得到汽车 这个事件总概率。<br>主持人选$1$号空门还是$2$号空门打开，这里有个主持人的选择概率，我假设的是主持人随机选择（抽签或者随意），所以各给了$\frac{1}{2}$的概率，如果主持人就是喜欢$1$号空门，必开$1$号，那么也就成了$1$号($100%$)，$2$号($0%$)了，最后结果并不影响。<br>所以开始选中汽车，最后换门不得奖的概率是$\frac{1}{3}$，开始选中空门，换门最后得奖的概率是$\frac{2}{3}$。</p><p>当然了，其实分析题意就知道主持人这边与概率根本没有关系，所以真的不必考虑他。</p><h1 id="随机选出一对小于等于N的互异正整数的概率"><a href="#随机选出一对小于等于N的互异正整数的概率" class="headerlink" title="随机选出一对小于等于N的互异正整数的概率"></a>随机选出一对小于等于N的互异正整数的概率</h1><p>计算两个随机选取的、小于或者等于N的互异正整数的概率。</p><p>事实上，当N增大时，结果将趋于$\frac{6}{π^2}$</p><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p>设计概率模拟程序需要考虑以下几点：</p><ul><li>确定问题和目标：首先要明确你的程序要解决哪些问题，以及达成何种目标。</li><li>收集数据并建立模型：如何收集数据是个复杂的过程，一般可以通过实验或者采集历史数据来获取。根据数据的特征，我们可以尝试从中提取出相应的随机变量，并建立模型。</li><li>选择合适的模拟方法：模拟的方法有很多，比如蒙特卡罗方法、拉斯维加斯方法等，在设计程序时应该根据问题的特点选择合适的方法。</li><li>编写代码：确定好数据和模拟方法后，就可以开始编写代码了。在编写代码的时候，需要注意代码的可重复性和可读性。</li><li>进行结果分析：经过一系列的模拟之后，得到了一些结果，需要进行分析，判断结果是否符合预期，如果不符合，则需要重新调整模型或者修改代码。</li></ul><p>总体来说，设计概率模拟程序需要我们掌握一定的数学知识，具备较强的编程能力，并且需要有耐心和毅力来不断地对程序进行优化和改进。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> m<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m <span class="token operator">%</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">probRelPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> rel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tot<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    rel<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>rel <span class="token operator">/</span> tot<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">64000</span><span class="token punctuation">;</span> n <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> prob <span class="token operator">=</span> <span class="token function">probRelPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">long</span> elapsed <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%4d"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"\t%d"</span><span class="token punctuation">,</span> elapsed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"\t%.9f"</span><span class="token punctuation">,</span> elapsed <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>n <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"\t%.12f"</span><span class="token punctuation">,</span> elapsed <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>n <span class="token operator">/</span> n <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"\t%.9f"</span><span class="token punctuation">,</span> elapsed <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>n <span class="token operator">/</span> n <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>1000310.0000310000.0000000310000.000003111<br>2000930.0000232500.0000000116250.000002120<br>40004530.0000283130.0000000070780.000002366<br>800018960.0000296250.0000000037030.000002285<br>1600081990.0000320270.0000000020020.000002293<br>32000355680.0000347340.0000000010850.000002321<br>640001526400.0000372660.0000000005820.000002334</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VonNeumann体系结构和存储程序原理</title>
      <link href="/2021/03/30/ji-suan-ji-ke-xue-ji-chu/vonneumann-ti-xi-jie-gou-he-cun-chu-cheng-xu-yuan-li/"/>
      <url>/2021/03/30/ji-suan-ji-ke-xue-ji-chu/vonneumann-ti-xi-jie-gou-he-cun-chu-cheng-xu-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="VonNeumann体系结构"><a href="#VonNeumann体系结构" class="headerlink" title="VonNeumann体系结构"></a>VonNeumann体系结构</h1><p>直到现在，几乎所有的通用计算机都遵循冯诺依曼的设计，即一个具有CPU、存储器和I/O设备组成的架构，把指令和数据放在一个存储器中，取指令和传送数据使用一个总线。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VonNeumann%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86/1.png"></p><p><strong>冯诺依曼体系结构</strong>的特点：</p><ul><li>由三部分硬件组成：一个带有控制单元、算术逻辑单元ALU、寄存器和程序计数器的CPU，一个主存储器系统，一个I/O系统。</li><li>执行顺序指令处理的能力。</li><li>在主存储器系统和CPU的控制单元之间包含一条单一路径，既可以是物理上的也可以是逻辑上的，强制交替指令周期和执行周期。这一单一路径被称为冯诺依曼瓶颈。</li></ul><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VonNeumann%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86/2.png"></p><p>下图为现代通用计算机组成所包含的组件：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VonNeumann%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86/3.png"></p><p>冯诺依曼执行周期：</p><ol><li>控制单元从存储器中取下一条程序指令，使用程序计数器确定指令所在的位置。</li><li>指令解码为ALU能理解的语言。</li><li>从存储器取出执行这条指令所需要的任何操作数，并且放到CPU的寄存器中。</li><li>ALU执行这条指令并且把结果放到寄存器或存储器中。</li></ol><p>即<kbd>取址→译码→执行</kbd>：</p><ul><li>取指  <pre class="line-numbers language-none"><code class="language-none">(PC)-&gt;MAR;M(MAR)-&gt;MDR;(MDR)-&gt;IR;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>分析指令  <pre class="line-numbers language-none"><code class="language-none">OP(IR)-&gt;CU;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>执行指令  <pre class="line-numbers language-none"><code class="language-none">Ad(IR)-&gt;MAR;M(MAR)-&gt;MDR;(MDR)-&gt;ACC;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>可以将存储在访问速度慢的存储介质中的程序和数据复制到访问速度快、易失性的存储介质执行。据此，冯诺依曼体系结构可以简化为<strong>系统总线模型</strong>。</p><p>系统总线可以响应计算机内部的所有数据传送。</p><ul><li>数据总线：把数据在主存储器和CPU寄存器之间移动。</li><li>地址总线：保存数据总线正在访问数据的地址。</li><li>控制总线：传送信息传输时必要的控制信号。</li></ul><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VonNeumann%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86/4.png"></p><p>冯诺依曼体系结构的其他增强方法包括使用索引寄存器寻址、增加浮点数据、使用中断和异步I/O、增加虚拟存储器以及增加通用寄存器等。</p><p>早期冯诺依曼体系结构要点：</p><ol><li>计算机硬件系统由运算器、存储器、控制器、输入设备、输出设备组成。</li><li>指令和数据以同等地位存于存储器内，并可按地址寻址。</li><li>指令和数据均用二进制代码表示。</li><li>指令由操作码和地址码组成。<ul><li>操作码表示操作的性质。</li><li>地址码表示操作数在存储器中的位置。</li></ul></li><li>指令在存储器内按顺序存放。</li><li>早期的冯诺伊曼以运算器为中心，输入/输出设备通过运算器与存储器传送数据。</li></ol><p>现代计算机的组织结构：以存储器为中心。</p><p>补充：</p><ul><li>冯诺依曼体系结构的基本工作方式是<strong>控制流驱动方式</strong>。</li><li>冯诺依曼体系结构中，CPU区分指令和数据的依据是<strong>指令周期的不同阶段</strong>。</li></ul><h1 id="存储程序原理"><a href="#存储程序原理" class="headerlink" title="存储程序原理"></a>存储程序原理</h1><p>存储程序原理是冯·诺依曼于1946年提出的将程序像数据一样存储到计算机内部存储器中的一种设计原理。</p><p>存储程序原理：将为解决特定问题而编写的程序存放在计算机存储器中，然后按存储器存储程序的首地址执行程序的第一条指令。以后就按照该程序的规定顺序执行其他指令，直至程序结束执行。</p><p>存储程序思想：多种类型的指令和数据均以数字形式存在于存储器中，存储器中既可以存放编辑器程序的源代码，也可以存放相应的编译后的机器码、编译后的程序需要使用的文本，甚至生成机器码的编译器。</p><p>只需将程序和数据加载到存储器中并告诉计算机从给定的存储器地址开始执行即可。将指令和数据以相同的方式处理，极大地简化了计算机系统的存储器硬件和软件。</p><p>该思想导致了存储程序型计算机的诞生。</p><p>计算机采取事先编制程序、存储程序、自动连续运行程序的工作方式，称为存储程序方式。</p><h1 id="突破VonNeumann体系结构"><a href="#突破VonNeumann体系结构" class="headerlink" title="突破VonNeumann体系结构"></a>突破VonNeumann体系结构</h1><p>毫无疑问，冯诺依曼体系结构的提出对计算机科学的发展是跨时代的。时至今日，几乎所有的通用计算机都遵循冯诺依曼体系结构，它们由CPU、存储器和I/O设备组成，它们具有用于指令和数据的单一存储，以及用于获取指令和传输数据的单一总线。遵循冯诺依曼体系结构的计算机顺序执行指令，因此非常适合顺序处理。</p><p>然而，冯诺依曼瓶颈继续困扰着工程师寻找方法来构建快速系统，这些系统既便宜又与大量商用软件兼容。当工程师不必须考虑兼容冯诺依曼体系结构时，他们可以自由使用许多不同的计算模型来完成预期目标。<strong>非冯诺依曼体系结构</strong>是指计算模型与冯诺依曼体系结构所列特征不同的架构。例如，不在内存中存储程序和数据，不按顺序处理程序，具有多条总线。</p><p><strong>哈佛体系结构</strong>是经典的非冯诺依曼体系结构。此类计算机有两条总线，一条用于数据，一条单独用于指令，因此允许数据和指令同时传输。此外，它们的数据和指令也单独存储。许多现代通用计算机使用哈佛体系结构的修改版本，它们具有单独的数据和指令路径但没有单独的存储。纯哈佛体系结构通常用于微控制器(芯片上的完整计算机系统)，例如嵌入式系统、电器、玩具和汽车中的微控制器。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VonNeumann%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86/5.png"></p><p>许多非冯诺依曼体系结构的计算机都是为特殊目的而设计的。第一个公认的非冯诺依曼体系结构处理芯片专为图像处理而设计。规约机也是不遵循冯诺依曼体系结构的代表，它是一种面向函数式语言的非冯诺依曼体系结构的计算机。数字信号处理器DSP和媒体处理器也不遵循冯诺依曼体系结构，它们可以对一组(多个)数据执行单个指令，而不是对单个数据执行单个指令。</p><p>许多不同的子领域属于非冯诺依曼类别，包括在硅中实现的神经网络、元胞自动机、认知计算机(通过经验而不是通过编程学习的机器、量子计算机、数据流计算机、并行计算机。它们的共同特点是：计算分布在并行运行的不同处理单元中。它们的不同之处在于：各个组件之间的连接强弱程度并不相同。其中，并行计算机目前最为流行。</p><h1 id="对VonNeumann体系结构的认识"><a href="#对VonNeumann体系结构的认识" class="headerlink" title="对VonNeumann体系结构的认识"></a>对VonNeumann体系结构的认识</h1><p>计算机出现早期，计算机只是辅助计算的机器。随着计算机变得越来越复杂，计算机变成了通用机器，这就需要将每个系统视为一个层次结构，而不是一个巨大的机器。这样层次结构中，每一层都有特定的用途，所有级别都有助于最大限度地减少高级编程语言或应用程序与构成物理硬件的门和线之间的语义差距。作为程序员，对我们影响最为深远的还是冯诺依曼体系结构下的存储程序原理。尽管还有许多其他的体系结构模型，但冯诺依曼体系结构在当今的通用计算机中仍然稳居主导地位。因此，理解冯诺依曼体系结构和冯诺依曼提出的存储程序原理，是入门计算机的必修课。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数值分析基础理论归纳</title>
      <link href="/2021/03/26/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/shu-zhi-fen-xi-ji-chu-li-lun-gui-na/"/>
      <url>/2021/03/26/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/shu-zhi-fen-xi-ji-chu-li-lun-gui-na/</url>
      
        <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><ol><li>掌握绝对误差、绝对误差限、相对误差、相对误差限及有效数字的概念。掌握误差限和有效数字之间的关系。会计算误差限和有效数字。<br>一般地，凡是由精确值经过四舍五入得到的近似值，其绝对误差限等于该近似值末位的半个单位。<br>设数$x$是数$x^{<em>}$的近似值，如果$x$的绝对误差限是它的某一数位的半个单位，并且从$x$左起第一个非零数字到该数位共有$n$位，则称这$n$个数字为$x$的有效数字，也称用$x$近似$x^{</em>}$时具有$n$位有效数字。</li><li>了解数值计算中应注意的一些问题。</li></ol><h1 id="解线性方程组的直接法"><a href="#解线性方程组的直接法" class="headerlink" title="解线性方程组的直接法"></a>解线性方程组的直接法</h1><ol><li>了解Gauss消元法的基本思想，知道适用范围。<ul><li>顺序Gauss消元法：矩阵$A$的各阶顺序主子式都不为零。</li><li>主元Gauss消元法：矩阵$A$的行列式不为零。</li></ul></li><li>掌握矩阵的直接三角分解法。<br>会对矩阵进行Doolittle分解(LU)、LDM分解、Crout分解(TM)及Cholesky分解(GG^T^)。<br>了解它们之间的关系。熟练掌握用三角分解法求方程组的解。<br>了解平方根法和追赶法的思想。<br>设$n$阶方阵$A$的各阶顺序主子式不为零，则存在唯一单位下三角矩阵$L$和上三角矩阵$U$使$A=LU$。</li><li>了解向量和矩阵的范数的定义，会判定范数（三要素非负性、齐次性、三角不等式）。<br>会计算几个常用的向量和矩阵的范数。<br>了解范数的等价性和向量矩阵极限的概念。</li><li>了解方程组的性态，会计算简单矩阵的条件数。</li></ol><h1 id="解线性方程组的迭代法"><a href="#解线性方程组的迭代法" class="headerlink" title="解线性方程组的迭代法"></a>解线性方程组的迭代法</h1><ol><li>会建立J法、G-S法、SOR法的迭代格式；会判定迭代方法的收敛性。<ul><li>迭代法收敛$\Leftrightarrow$迭代矩阵谱半径小于$1$。</li><li>迭代法收敛的充分条件是迭代矩阵的范数小于$1$。</li><li>$A$严格对角占优，则J法、GS法、SOR法($0&lt;\omega&lt;1$)收敛。</li><li>$A$对称正定，则GS法、SOR法($0&lt;\omega&lt;2$)收敛。</li></ul></li><li>掌握并会应用迭代法的误差估计式：$||x^{(k)}-x^{*}||≤\frac{||M||^{k}}{1-||M||}||x^{(1)}-x^{(0)}||$</li></ol><h1 id="解非线性方程的迭代法"><a href="#解非线性方程的迭代法" class="headerlink" title="解非线性方程的迭代法"></a>解非线性方程的迭代法</h1><ol><li>了解二分法的思想，误差估计式$|x_{k}-\alpha|≤2^{-(k+1)}(b-a)$</li><li>会建立简单迭代法迭代格式；会判定迭代方法的收敛性。<br>若$\varphi(x)$为$I$上的压缩映射， 则对任何$x_{0}\in{I}$，迭代格式$x_{k+1}=\varphi(x_{k})$均收敛于$\varphi(x)$在$I$上的唯一不动点$\alpha$。<br>若$a≤\varphi(x)≤b$，$|\varphi’(x)|≤ L&lt;1$，$∀x\in[a，b]$，则$x_{k+1}=\varphi(x_{k})$，$∀x_{0}\in[a，b]$都收敛于方程的唯一根$\alpha$。<br>若$\varphi(x)$在$\alpha$附近具有一阶连续导数，且$|\varphi’(x)|≤ L&lt;1$， 则对充分接近$\alpha$的初值$x_{0}$，迭代法$x_{k+1}=\varphi(x_{k})$收敛。</li><li>了解迭代法收敛阶的概念，会求迭代法收敛的阶，了解Aitken加速技巧。<ul><li>${x_{k}}$ $p$阶收敛于$\alpha$是指$\lim\limits_{k\to\infty}{\frac{|x_{k+1}-\alpha|}{|x_{k}-\alpha|^{p}}}=C$。</li><li>若$\varphi’(x)≠0$，则迭代法线性收敛。</li></ul></li><li>会建立Newton迭代格式，知道Newton迭代法的优缺点，了解Newton迭代法的变形。<br>$x_{k+1}=x_{k}-\frac{f(x_{k})}{f’(x_{k})}$局部平方收敛。</li></ol><h1 id="矩阵特征值问题"><a href="#矩阵特征值问题" class="headerlink" title="矩阵特征值问题"></a>矩阵特征值问题</h1><ol><li>了解Gerschgorin圆盘定理，会估计特征值。</li><li>了解乘幂法、反幂法的思想及加速技巧。</li><li>了解Jacobi方法的思想以及平面旋转矩阵的构造。</li></ol><h1 id="插值与逼近"><a href="#插值与逼近" class="headerlink" title="插值与逼近"></a>插值与逼近</h1><ol><li>了解差商的概念和性质。</li><li>会建立插值多项式并导出插值余项。<br>Lagrange、Newton、Hermite插值多项式。<br>基函数法及待定系数法。</li><li>了解分段插值及三次样条插值的概念及构造思想。</li><li>了解正交多项式的概念，会求简单的正交多项式。</li><li>掌握最小二乘法的思想，会求拟合曲线及最佳均方误差。</li></ol><h1 id="数值积分"><a href="#数值积分" class="headerlink" title="数值积分"></a>数值积分</h1><ol><li>了解求积公式的一般形式及插值型求积公式的构造，掌握梯形公式和Simpson公式及其误差。<br>$\int_{a}^{b}f(x)dx=\frac{b-a}{2}[f(a)+f(b)]-\frac{(b-a)^{3}}{12}f’’(\eta)$<br>$\int_{a}^{b}f(x)dx=\frac{b-a}{6}[f(a)+4f(\frac{a+b}{2})+f(b)]-\frac{(b-a)^{5}}{2880}f^{(4)}(\eta)$</li><li>掌握求积公式的代数精度的概念，会用待定系数法确定求积公式。</li><li>了解复化求积公式的思想和Romberg公式的构造。</li><li>了解Gauss公式的概念，会建立简单的Gauss公式。</li><li>了解微分公式建立形式，会求简单的微分公式。</li></ol><h1 id="常微分方程数值解法"><a href="#常微分方程数值解法" class="headerlink" title="常微分方程数值解法"></a>常微分方程数值解法</h1><ol><li>了解构造数值解法的基本思想及概念。</li><li>掌握差分公式局部截断误差和阶的概念，会求差分公式的局部截断误差。</li><li>会判断单步方法的收敛性和稳定性，求稳定区间。</li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>求解线性方程组 $Ax=b$ 可以使用顺序高斯消去法和列主元高斯消去法，二者的三个主要不同点：</p><ol><li>使用条件：当系数矩阵 $A$ 的各阶顺序主子式非零时，顺序高斯消去法可以顺利进行；而一般只要系数矩阵 $A$ 的行列式非零，列主元高斯消去法就可以顺利进行。</li><li>计算精度：由于列主元高斯消去法在每步计算之前都增加了选择主元的步骤，提高了数值稳定性，一般来说，计算精度优于顺序高斯消去法。</li><li>计算量：列主元高斯消去法计算量比顺序高斯消去法稍大一些。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数值分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数基础理论归纳</title>
      <link href="/2021/03/25/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/xian-xing-dai-shu-ji-chu-li-lun-gui-na/"/>
      <url>/2021/03/25/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/xian-xing-dai-shu-ji-chu-li-lun-gui-na/</url>
      
        <content type="html"><![CDATA[<h1 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h1><ol><li>行列式的性质：<ul><li>行列互换，行列式的值不变。</li><li>行列式中某行/列元素全为$0$，则行列式为$0$。</li><li>行列式中某行/列元素有公因子$k$，则$k$可提到行列式外面。</li><li>行列式中某行/列元素均是两个元素之和，则可拆成两个行列式之和。</li><li>行列式中两行/列互换，行列式的值取反。</li><li>行列式中的两行/列元素相等或对应成比例，则行列式为零。</li><li>行列式中某行/列的$k$倍加到另一行/列，行列式的值不变。</li></ul></li><li><a href="https://blankspace.blog.csdn.net/article/details/114387043">解行列式的方法</a></li><li>线性方程组的常数项不全为零时，称为<strong>非齐次线性方程组</strong>，而常数项全为零的线性方程组称为<strong>齐次线性方程组</strong>。$x_{1}=x_{2}=\cdots=x_{n}=0$，一定是齐次线性方程组的解，此解也叫做齐次线性方程组的零解。</li><li><strong>Cramer法则</strong>只适用于解方程个数与变量个数相等而且系数行列式不等于零的那些线性方程组。由于应用Cramer法则求解$n$元线性方程组，需要计算$n＋1$个$n$阶行列式。因此，当$n$比较大时，求解的计算量是很大的。所以在实际求解线性方程组时，很少采用此法。</li><li>通俗地讲，从行列式的第一条性质就能看出：行列式的行和列是等价的！</li><li>行列式实际上就是一个数值！</li></ol><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><ol><li>矩阵实际上就是一个数据元素组成的矩形数据表！</li><li>线性代数研究的是实矩阵，即所有元素均为实数。</li><li>只有一行的矩阵称为行矩阵也称为行向量，只有一列的矩阵称为列矩阵也称为列向量。</li><li>特殊矩阵：<ul><li>零矩阵：每个元素均为$0$的矩阵，$O_{m\times{n}}$。</li><li>对角矩阵：非主对角元素均为$0$的矩阵称为对角矩阵，$diag(\lambda_{1},\lambda_{2},\cdots,\lambda_{n})$。</li><li>单位矩阵：主对角元素均为$1$，其余元素均为$0$的$n$阶方阵，称为$n$阶单位矩阵，$I_{n}$或$E_{n}$。</li><li>数量矩阵：数$k$和单位矩阵的乘积称为数量矩阵。</li><li>上/下三角矩阵</li><li>对称矩阵：一个矩阵等于其转置，则称它为对称矩阵，$A=A^{T}$。</li><li>反对称矩阵：一个矩阵加上其转置等于零矩阵，则称它为反对称矩阵，$A=-A^{T}$。</li><li>正交矩阵：矩阵的转置等同于其逆矩阵，换言之，矩阵与其转置的乘积等于单位矩阵，则称该矩阵为正交矩阵，$A=A^{-1}$。$n$阶实矩阵$A$是正交矩阵$\Leftrightarrow$$A$的行(列)向量组是规范正交向量组。</li></ul></li><li>矩阵的基本运算<ul><li>相等</li><li>加法（有加法就有减法）<ul><li>交换律：$A+B=B+A$</li><li>结合律:  $(A+B)+C=A+(B+C)$</li><li>$A+O=A$</li><li>$A+(-A)=O$</li></ul></li><li>数乘矩阵<ul><li>$1A= A$</li><li>结合律：$(kl)A=k(lA)$</li><li>数的分配律：$(k+l) A=kA+lA$</li><li>矩阵的分配律： $k(A+B)=kA+kB$</li></ul></li><li>矩阵乘法<ul><li>矩阵$A$、$B$能够乘积的条件是：矩阵$A$的列数等于矩阵$B$的行数,  且乘积矩阵与$A$行数相同，与$B$列数相同。</li><li>在一般情况下，$AB≠BA$。</li><li>虽然$A≠O$，$B≠O$，但是$BA=O$。从而，由$AB=O$，不能推出$A$和$B$中有一个是零矩阵的结论。</li><li>若$A≠O$，由$AX=AY$也不能得到$X=Y$的结论。</li><li>结合律：$(AB)C= A(BC)$</li><li>分配律：$A(B+C)= AB+AC$、$(B+C)A= BA+CA$</li><li>数的结合律：$k(AB)=(kA)B=A(kB)$</li><li>$A_{m\times{n}}E_{n}= A_{m\times{n}}$、$E_{m}A_{m\times{n}}= A_{m\times{n}}$</li><li>矩阵的幂<ul><li>$A^{0}=E,A^{1}=A,A^{2}= A^{1}A^{1},\cdots,A^{k+1}=A^{k}A^{1}$</li><li>$A^{k}A^{l}=A^{k+l}$</li><li>$(A^{k})^{l}=A^{kl}$</li><li>$AB=BA$时有$(AB)^{k}=A^{k}B^{k}$，反之不一定成立。</li></ul></li></ul></li><li>转置矩阵<ul><li>$(A^{T})^{T}=A$</li><li>$(A+B)^{T}=A^{T}+B^{T}$</li><li>$(kA)^{T}=kA^{T}$</li><li>$(AB)^{T}=B^{T}A^{T}$</li></ul></li><li>方阵行列式<ul><li>$\det{A}=|A|=|a_{ij}|_{n}$</li><li>$\det(A^{T})=\det{A}$</li><li>$\det(kA)=k^{n}\det{A}$</li><li>$\det (AB)=\det{A}\cdot\det{B}$</li><li>两个矩阵和的行列式$\det(A+B)$没有可行运算规律。</li><li>非方阵没有对应行列式。</li></ul></li></ul></li><li>逆矩阵<ul><li>对$n$阶方阵$A$，如果存在$n$阶方阵$B$，使$AB=BA=E$，则称方阵$A$是可逆的，且称$B$是$A$的逆矩阵，记为$B=A^{-1}$。可逆矩阵又称为非异阵或非奇异阵。</li><li>若矩阵$A$是可逆矩阵，则由$BA=C$可得$B=CA^{-1}$；由$AB=C$可得$B=A^{-1}C$，这就解决了矩阵乘法运算的逆运算问题。</li><li>如果$A$不是可逆矩阵,  一般由$AB=C$或$BA=C$不能唯一确定矩阵$B$。</li><li>若矩阵A可逆，则A的逆矩阵是唯一的。</li><li>运算性质：<ul><li>$(A^{-1})^{-1}=A$</li><li>$(kA)^{-1}=\frac{1}{k}{A^{-1}}$</li><li>$(A^{T})^{-1}=(A^{-1})^{T}$</li><li>$(AB)^{-1}=B^{-1}A^{-1}$</li><li>两个矩阵和的逆矩阵$(A+B)^{-1}$没有可行运算规律。</li></ul></li><li>伴随矩阵$adj(A)=A^{*}=\begin{bmatrix} A_{11} &amp; A_{21} &amp; \ldots &amp; A_{n1} \ A_{12} &amp; A_{22} &amp; \ldots &amp; A_{n2} \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \ A_{1n} &amp; A_{2n} &amp; \ldots &amp; A_{nn} \end{bmatrix}$<ul><li>$AA^{<em>}=A^{</em>}A=|A|E$</li><li>矩阵$A$可逆$\Leftrightarrow$$|A|\neq0$且$A^{-1}=\frac{1}{|A|}A^{*}$</li><li>$|A^{*}|=|A|^{n-1}$</li></ul></li></ul></li><li>矩阵初等变换<ul><li>三种矩阵初等变换：<ul><li>倍乘：一个非零常数乘矩阵的某一行/列。</li><li>互换：互换矩阵中某两行/列的位置。</li><li>倍加：将矩阵的某一行/列的$k$倍加到另一行/列。</li></ul></li><li>矩阵的初等行变换和初等列变换统称为初等变换。</li><li>如果矩阵$A$可以经过有限次的初等变换变成矩阵$B$，则称矩阵$A$与$B$<a href="https://blankspace.blog.csdn.net/article/details/113792569">等价</a>，记为$A\sim{B}$。<ul><li>自反性</li><li>对称性</li><li>传递性</li></ul></li><li>各种初等变换都是可逆的,  且逆变换也是同类型的初等变换。</li><li>任何矩阵都可以经过初等行变换化为行阶梯形矩阵和行最简形矩阵。<ul><li>如果一个矩阵的每行第一个非零元素的左下方元素都是$0$，且零行都排在最下面，则称矩阵为行阶梯形矩阵。 </li><li>任何矩阵都可以经过初等行变换化为行阶梯形矩阵和行最简形矩阵。</li></ul></li><li>初等矩阵：对单位矩阵作一次初等变换得到的矩阵。<ul><li>$E\stackrel{c_{i}\leftrightarrow{c_{j}}}{\sim}{E(i,j)}$</li><li>$E\stackrel{kc_{i}}{\sim}{E(i(k))}$</li><li>$E\stackrel{c_{j}+{kc_{i}}}{\sim}{E(i+j(k))}$</li></ul></li><li>矩阵$A$与$B$等价的充分必要条件是存在有限个初等矩阵$P_{1},P_{2},\cdots,P_{l}$和$Q_{1}, Q_{2},\cdots,Q_{t}$，使得$A=P_{l}\cdots{}P_{2}P_{1}BQ_{1}Q_{2}\cdots{}Q_{t}$</li><li>矩阵$A$可逆的充分必要条件是$A$可表示为有限个初等矩阵的乘积。</li><li>矩阵$A$与$B$等价的充分必要条件是存在可逆矩阵$P$和$Q$，使得$PAQ=B$</li></ul></li><li>分块矩阵<ul><li>分块矩阵初等变换：<ul><li>三种初等变换<ul><li>互换分块矩阵的某两个行(列)块。</li><li>某个行/列块左/右乘一个可逆方阵。</li><li>某个行/列块左/右乘一矩阵后加到另一行/列块。</li></ul></li><li>由于矩阵乘法没有交换律，所以分块矩阵做行变换一律是左乘矩阵，做列变换一律是右乘矩阵。</li><li>初等矩阵是可逆的，且其逆矩阵仍然是初等矩阵。</li><li>对矩阵$A$作一次初等行变换所得到的矩阵等于对$A$左乘一个相应的初等矩阵；对矩阵$A$作一次初等列变换所得到的矩阵等于对$A$右乘一个相应的初等矩阵。</li><li>初等分块矩阵</li><li>对分块矩阵做分块矩阵的初等变换不改变分块矩阵的秩。</li></ul></li><li>单位分块矩阵</li></ul></li><li>任意$m\times{n}$矩阵$A$都与形为$\begin{bmatrix} E_{r} &amp; O \ O &amp; O \end{bmatrix}$的矩阵等价，其中$E_{r}$为$r$阶单位矩阵，$0≤r≤\min{m, n}$，并且$r$是唯一的（$r$就是矩阵$A$的秩，仅当$A=O$时，$r=0$，$E_{0}为数0$），该矩阵称为$A$的等价标准形。<br>等价标准型是唯一的。</li><li>矩阵的秩 <ul><li>矩阵中最大的非零的子行列式的阶数称为矩阵的秩。</li><li>初等变换不改变矩阵的秩。</li><li>矩阵的秩不超过矩阵的行数或列数。</li><li>三秩相等：矩阵的秩$=$矩阵的行向量组的秩$=$矩阵的列向量组的秩</li><li>经过初等行变换的两矩阵<ul><li>它们的行向量组是等价向量组</li><li>它们的任何相应的部分列向量组具有相同的线性相关性</li></ul></li><li>矩阵的秩等于其最高阶非零子式$D$的阶数。</li><li>性质：<ul><li>某个$s$阶子式不为0，则$R(A)≥s$</li><li>所有$t$阶子式都为0，则$R(A)&lt;t$</li><li>对任意$m\times{n}$矩阵$A$均有$0≤R(A)≤\min{m,n}$</li><li>$R(A^{T})=R(A)$</li></ul></li><li>可逆矩阵也称满秩矩阵，不可逆矩阵也称降秩矩阵。</li></ul></li><li>矩阵的特征方程、特征值、特征向量<ul><li>特征值的研究对象是方阵。</li><li>实对称矩阵的特征值都是实数，实对称矩阵的特征向量都可以取为实向量。</li><li>$A\xi=\lambda_{0}\xi$</li><li>特征方程$\det(\lambda_{0}{E}-A)=0$的解就是特征值，$n$阶方程有$n$个特征值。</li><li>$(\lambda_{i}E-A)x=0$的所有非零解是特征值$\lambda_{i}$对应的特征向量。</li><li>特征值的和等于矩阵对角线元素的和，即迹$tr$。</li><li>特征值的积等于方阵行列式$\det{A}$。</li><li>$k$重特征值$\lambda_{0}$至多只有$k$个线性无关的特征向量。</li><li>属于不同特征值的特征向量是线性无关的。</li><li>属于同一特征值的特征向量的线性组合，仍然是属于该特征值的特征向量。</li><li>属于不同特征值的特征向量的线性组合，不是原矩阵的特征向量。</li><li>矩阵属于单根特征值有且仅有一个线性无关的特征向量。</li><li>实对称矩阵的属于不同特征值的特征向量是正交的。</li></ul></li><li>矩阵相似$A\sim{B}$要求$P^{-1}AP=B$，这种关系具有自反性、对称性和传递性，所以是一种<a href="https://blankspace.blog.csdn.net/article/details/113792569">等价关系</a>（并不是矩阵等价的意思）。<ul><li>相似矩阵有相同的特征多项式，因此也有相同的特征值。</li><li>若$n$阶方阵$A$与对角矩阵$diag(\lambda_{1},\lambda_{2},\cdots,\lambda_{n})$相似，则$\lambda_{1},\lambda_{2},\cdots,\lambda_{n}$是矩阵的$n$个特征值。</li><li>如果不计主对角线上元素的顺序，则与A相似的对角矩阵是唯一的。</li><li>$n$阶矩阵$A$与对角矩阵相似的充分必要条件是矩阵$A$有$n$个线性无关的特征向量。</li><li>若$n$阶矩阵$A$有$n$个互异特征值，则$A$与对角矩阵相似。</li><li>实对称矩阵正交相似对角化的方法步骤：<ul><li>求出A的全部特征值。</li><li>对每个特征值,  若其重数为k,  求出其k个线性无关的特征向量。</li><li>将求出的k个线性无关的特征向量规范正交化。</li><li>用求出的n个规范正交的特征向量构造正交矩阵。</li><li>写出对角矩阵。</li></ul></li></ul></li><li>共轭矩阵<ul><li>$A$为实矩阵时，$\overline{A}=A$</li><li>共轭矩阵的性质：<ul><li>$\overline{A+B}=\overline{A}+\overline{B}$</li><li>$\overline{\lambda{A}}=\bar{\lambda}\bar{A}$</li><li>$\overline{AB}=\bar{A}\bar{B}$</li><li>$\overline{A^{T}}=\bar{A}^{T}$</li></ul></li></ul></li><li><a href="https://blankspace.blog.csdn.net/article/details/114709217">矩阵微积分学</a></li></ol><h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><ol><li>向量只有行向量和列向量两种，行向量$\alpha^{T}$是$1\times{n}$的矩阵，列向量$\alpha$是$n\times{1}$的矩阵。</li><li>线性代数研究的是实向量，即所有元素均为实数。</li><li>向量的运算性质<ul><li>交换律：$\alpha+\beta=\beta+\alpha$</li><li>结合律：$(\alpha+\beta)+\gamma=\alpha+(\beta+\gamma)$</li><li>$\alpha+0=\alpha$</li><li>$\alpha+(-\alpha)=0$</li><li>$1\alpha=\alpha$</li><li>结合律：$(kl)\alpha=k(l\alpha)$</li><li>数的分配律：$(k+l)\alpha=k\alpha+l\alpha$</li><li>向量的分配律：$k(\alpha+\beta)=k\alpha+k\beta$</li></ul></li><li>向量空间：所有$n$维列/行向量的全体，对其上所定义的加法和乘数两种运算，构成了一个$n$维线性空间，或称向量空间。</li><li>向量的运算：<ul><li>内积：$[\alpha,\beta]=\alpha\cdot\beta=a_{1}b_{1}+a_{2}b_{2}+\cdots+a_{n}b_{n}=\alpha^{T}\beta=\beta^{T}\alpha=|a||b|\cos\theta$<ul><li>$[\alpha,\beta]=[\beta,\alpha]$</li><li>$[\alpha+\beta,\gamma]=[\alpha,\gamma]+[\beta,\gamma]$</li><li>$[k\alpha,\beta]=k[\alpha,\beta]$</li><li>$[\alpha,\alpha]≥0$</li><li>$\theta=&lt;\alpha,\beta&gt;=\frac{[\alpha,\beta]}{|\alpha||\beta|}$</li></ul></li><li>长度：$|\alpha|=||\alpha||=[\alpha,\alpha]=\sqrt{a_{1}^{2}+a_{2}^{2}+\cdots+a_{n}^{2}}$<ul><li>$|\alpha|=1$则$\alpha$是单位向量</li><li>$|\alpha|\neq{0}$时，$\frac{1}{|\alpha|}\alpha$是与$\alpha$同方向的单位向量</li><li>$|\frac{[\alpha,\beta]}{|\alpha||\beta|}|≤1$，要求非零向量</li></ul></li><li>外积：$\alpha\times\beta=|a||b|\sin\theta$<ul><li>$\alpha\times\alpha=0$</li><li>$\alpha\times\beta=-\beta\times\alpha$</li><li>$(\alpha+\beta)\times\gamma=\alpha\times\gamma+\beta\times\gamma$</li><li>$(\lambda\alpha)\times\beta=\alpha\times(\lambda\beta)=\lambda(\alpha\times\beta)$</li></ul></li><li>混合积：$[\alpha,\beta,\gamma]=(\alpha\times\beta)\cdot\gamma$</li></ul></li><li>向量组的线性相关性<ul><li>线性组合：向量组通过一组系数相加所得的向量是该组向量的线性组合。</li><li>线性表出：向量能表示成向量组的各线性组合。</li><li>向量与向量之间的关系，是线性相关或线性无关的.</li><li>线性相关：对一组向量，存在一组不全为$0$的系数使它们的和为零向量，则称该组向量线性相关。</li><li>线性无关：只有当一组向量的系数全为$0$时，才有它们的和向量为零向量，则称这组向量为线性无关。</li><li>若向量组有一个部分组线性相关,  则此向量组线性相关。<ul><li>含有零向量的向量组必线性相关。</li><li>线性无关向量组的任一部分组也线性无关。</li></ul></li><li>向量组线性相关的充分必要条件是其中至少有一个向量可被其余向量线性表示。</li><li>两个向量线性相关的几何意义是这两向量共线，三个向量线性相关的几何意义是这三向量共面，$n$个向量线性相关的几何意义是它们在同一个$n-1$维空间。</li><li>设向量组$\alpha_{1},\alpha_{2},\cdots,\alpha_{r}$线性无关,  而向量组$\alpha_{1},\alpha_{2},\cdots,\alpha_{r},\beta$线性相关,  则$\beta$可由$\alpha_{1},\alpha_{2},\cdots,\alpha_{r}$线性表示,且表示式唯一。</li><li>线性无关向量组的加长向量组也线性无关。</li><li>向量组$1$中的每个向量都可由向量组$2$线性表出，则称向量组$1$可由向量组$2$线性表出。若向量组$1$和向量组$2$可互相线性表出，则称向量组$1$和向量组$2$是等价向量组。</li><li>如果向量组$\alpha_{1},\alpha_{2},\cdots,\alpha_{m}$线性无关, 则有规范正交向量组$e_{1},e_{2},\cdots,e_{m}$与之等价。</li><li>由线性无关向量组得到正交向量组的过程被称为施密特(Schimidt)正交化过程。</li><li>任意$n+1$个$n$维向量线性相关。</li></ul></li><li>向量组的秩<ul><li>向量组的秩等于极大线性无关向量组中的向量个数。</li><li>向量组的极大线性无关组是线性无关的，且向量组中的任意向量可由极大线性无关组的向量线性表出。</li><li>向量组的极大线性无关组一般不唯一。</li><li>含有非零向量的向量组都存在极大线性无关组，只含有零向量的向量组不存在极大线性无关组，一个线性无关的向量组的极大线性无关组就是该向量组本身。</li><li>三秩相等：矩阵的秩$=$矩阵的行向量组的秩$=$矩阵的列向量组的秩</li><li>向量组$2$被向量组$1$线性表出，则向量组$2$的秩不超过向量组$1$。</li><li>等价向量组同秩。</li></ul></li><li>向量组等价和矩阵等价是不同的概念。矩阵等价要同型，行数和列数都要相等；向量组等价要同维，但向量个数可以不同。</li><li>一组两两正交的非零向量称为正交向量组，由单位向量构成的正交向量组称为规范正交向量组。</li><li>加长向量组增加的分量不仅仅可以是一个，也可以是多个；不仅仅可以加在末尾，也可以在任何其他位置。</li></ol><h1 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h1><ol><li>将线性方程组写成向量的形式可见，方程组的未知数是向量组各成员的系数。方程组问题就是向量组问题，方程组和向量组是同一个问题的两种表现形式，其本质和解决方案相同。</li><li>齐次线性方程组$Ax=0$<ul><li>系数矩阵满秩时，$r(A)=n$，方程组有唯一零解。</li><li>系数矩阵不满秩时，$r(A)=r&lt;n$，方程组有非零解，且有$n-r$个线性无关解。</li><li>解的结构：<ul><li>$n$元齐次线性方程组$Ax=0$的解向量集合$S$对向量的线性运算是封闭的。</li><li>$n$元齐次线性方程组$Ax=0$的基础解系，就是将解集合$S$看成向量组的极大无关组。所以，基础解系是不唯一的。</li><li>$r(A)=r&lt;n$则它有基础解系，且基础解系含有$n-r$个解向量。</li><li>方程组的任意解可由基础解系线性表出。</li><li>通解即为基础解系的线性组合。</li></ul></li></ul></li><li>非齐次线性方程组$Ax=\beta$<ul><li>$Ax=\beta$是$Ax=0$的导出组。</li><li>系数矩阵的秩不等于增广矩阵的秩，方程组无解。</li><li>系数矩阵的秩等于增广矩阵的秩等于解向量维度，方程有唯一解。</li><li>系数矩阵的秩等于增广矩阵的秩小于解向量维度，方程有无穷多解。</li><li>解的结构：<ul><li>非齐次线性方程组的任意两个解的差是它的导出组的解。</li><li>非齐次线性方程组的一个解与其导出组的一个解之和仍是非齐次线性方程组的解。</li><li>如果$\eta_{0}$是非齐次线性方程组的某个解, 那么非齐次线性方程组的任意解$\eta$都可以表示为$\eta=\eta_{0}+\xi$</li><li>通解即为基础解系的线性组合+特解$\eta_{0}$。</li></ul></li></ul></li><li>向量空间<ul><li>对加法和数乘运算封闭。</li><li>子空间</li><li>$r$维向量空间有$r$个彼此线性无关的基向量。如果没有基，则维度为$0$，即仅含一个零向量。</li><li>基下坐标</li><li>基变换公式：$(\beta_{1},\beta_{2},\beta_{3})=(\alpha_{1},\alpha_{2},\alpha_{3})C$，$C$为过渡矩阵。</li></ul></li></ol><h1 id="二次型"><a href="#二次型" class="headerlink" title="二次型"></a>二次型</h1><ol><li>$n$元二次型：$f(x_{1},x_{2},\cdots,x_{n})=a_{11}x_{1}^{2}+a_{22}x_{2}^{2}+\cdots+a_{nn}x_{n}^{2}+2a_{12}x_{1}x_{2}+2a_{13}x_{1}x_{3}+…+2a_{n-1,n}x_{n-1}x_{n}$</li><li>线性代数研究的是实二次型，即所有系数均为实数。</li><li>将$2a_{ij}x_{i}x_{j}$写成$a_{ij}x_{i}x_{j}+a_{ji}x_{j}x_{i}$，其中$a_{ij}=a_{ji}$，则有$f(x_{1},x_{2},\cdots,x_{n})=a_{11}x_{1}^{2}+a_{12}x_{1}x_{2}+\cdots+a_{1n}x_{1}x_{n}+a_{21}x_{2}x_{1}+a_{22}x_{2}^{2}+\cdots+a_{2n}x_{2}x_{n}+\cdots+a_{nn}x_{n}^{2}=\sum\limits_{i,j=1}^{n}a_{ij}x_{i}x_{j}=x^{T}Ax$</li><li>标准型：仅含平方项的二次型。</li><li>规范型：系数在${-1,0,1}$中取值的标准型。</li><li>二次型的秩等于矩阵$A$的秩。</li><li>线性变换$x=Cy$下，二次型仍变为二次型。可逆线性变换下，二次型的秩不变。</li><li>合同变换<ul><li>$B=C^{T}AC$，$C$可逆。</li><li>合同关系具有自反性、对称性和传递性，所以是一种<a href="https://blankspace.blog.csdn.net/article/details/113792569">等价关系</a>。</li><li>合同必等价，等价不必合同。</li><li>相似必正交相似，则必合同。</li></ul></li><li>化二次型为标准形<ul><li>正交变换法<ul><li>$C$为正交矩阵时，$x=Cy$为正交变换。</li><li>任意二次型$f=x^{T}Ax$都可以通过正交变换$x=Qy$化为标准型$f=y^{T}\Lambda{y}$，$\Lambda$对角线的元素恰好是$A$的特征值。</li><li>用正交变换化二次型为标准形与实对称矩阵正交相似对角化的步骤几乎是一致的。</li><li>化二次型为标准形所用的正交变换以及标准形都不是唯一的。但是，在正交变换对应的标准形中，各项系数恰是矩阵A的所有特征值，因此不考虑顺序的情况下是唯一的。</li><li>由于正交变换具有保范性，所以正交变换具有保持几何图形不变的优点。</li></ul></li><li>配方法<ul><li>如果含有平方项，则把所有含对应$x_{i}$的项集中配方。</li><li>如果不含平方项，先作可逆线性变换$x_{i}=y_{i}-y_{j}$、$x_{j}=y_{i}+y_{j}$、$x_{k}=y_{k}$，把二次型转化为含有平方项，再配方。</li><li>随着配方的方法不同，二次型的标准形和所用的可逆变换也不是唯一的。</li></ul></li><li>矩阵的合同对角化</li></ul></li><li>任意实二次型都可以经过$x=Cz$化为规范型。</li><li>惯性定理<ul><li>实二次型在不同的线性变换下化为的标准型系数$\lambda_{1},\lambda_{2},\cdots,\lambda_{n}$中正数个数与$\mu_{1},\mu_{2},\cdots,\mu_{n}$中正数个数相同。</li><li>其中正系数个数被称为正惯性指数，负系数个数被称为负惯性指数。</li><li>惯性定理指出，对二次型做任意实可逆变换其惯性指数都不变。</li><li>合同的充要条件是惯性指数相同（正负惯性指数都相同）。</li></ul></li><li>二次型的正定性<ul><li>正定二次型 $&gt;0$，正惯性指数等于$n$，矩阵全是正特征值，矩阵所有顺序主子式都大于0</li><li>负定二次型 $&lt;0$，负惯性指数等于$n$，矩阵全是负特征值，矩阵所有奇数阶顺序主子式都小于0且偶数阶顺序主子式都大于0</li><li>半正定二次型 $≥0$，负惯性指数等于$0$，矩阵没有负特征值</li><li>半负定二次型 $≤0$，正惯性指数等于$0$，矩阵没有正特征值</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS与BFS的区别</title>
      <link href="/2021/03/23/suan-fa-fen-xi-yu-she-ji/dfs-yu-bfs-de-qu-bie/"/>
      <url>/2021/03/23/suan-fa-fen-xi-yu-she-ji/dfs-yu-bfs-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>广度优先遍历(BFS)算法先访问所有最近的子结点，然后再向下访问。<br>深度优先遍历(DFS)算法先沿着一条路不断向下访问，然后再访问同级结点。</p><p>从基本的定义和实现思路上看，DFS和BFS都是<a href="https://blankspace.blog.csdn.net/article/details/102224364">递归</a>的。<br>BFS和DFS都有其非递归的实现方法，但需要借助线性数据结构。其中，BFS往往使用FIFO的队列作为辅助结构，而DFS往往使用LIFO的栈作为辅助结构。</p><p><a href="https://blankspace.blog.csdn.net/article/details/101633969">二叉树基本算法</a>中的前序遍历、中序遍历、后序遍历都是DFS，而层序遍历则是BFS。<br><a href="https://blankspace.blog.csdn.net/article/details/102463258">图</a>的邻接表和邻接矩阵实现也分别有其对应的BFS和DFS实现。</p><p>DFS和BFS的用途远不止用于树和图，其实很多搜索算法问题都使用到了DFS或BFS，当然，也许DP会更优化一些QAQ</p><p>如果觉得对这方面掌握的不是很好，建议先借助树和图掌握DFS和BFS的基本套路，再去刷题：</p><ul><li><a href="https://www.luogu.com.cn/training/112#problems">洛谷-搜索题单</a></li><li><a href="https://leetcode-cn.com/tag/depth-first-search/">力扣-DFS专题</a></li><li><a href="https://leetcode-cn.com/tag/breadth-first-search/">力扣-BFS专题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数理统计基础理论归纳</title>
      <link href="/2021/03/23/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/shu-li-tong-ji-ji-chu-li-lun-gui-na/"/>
      <url>/2021/03/23/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/shu-li-tong-ji-ji-chu-li-lun-gui-na/</url>
      
        <content type="html"><![CDATA[<h1 id="数理统计基础理论归纳"><a href="#数理统计基础理论归纳" class="headerlink" title="数理统计基础理论归纳"></a>数理统计基础理论归纳</h1><ol><li>读本文前建议先温习<a href="https://blankspace.blog.csdn.net/article/details/114225067">概率论基础理论归纳</a>。</li><li>数理统计学是一门应用性很强的学科，它是研究怎样以有效的方式收集、 整理和分析带有随机性的数据，以便对所考察的问题作出推断和预测，直至为采取一定的决策和行动提供依据和建议。<br>数理统计不同于一般的资料统计，它更侧重于应用随机现象本身的规律性进行资料的收集、整理和分析。<br>由于大量随机现象必然呈现出它的规律性，因而从理论上讲，只要对随机现象进行足够多次观察，被研究的随机现象的规律性一定能清楚地呈现出来。只允许我们对随机现象进行次数不多的观察试验，也就是说,   我们获得的只是局部观察资料。<br>数理统计的任务就是研究怎样有效地收集、整理、分析所获得的有限的资料，对所研究的问题,  尽可能地作出精确而可靠的结论。</li><li>概率论所研究的随机变量，都是已知分布去研究它的性质、特点和规律性，例如：求它的数字特征，讨论随机变量函数的分布，介绍常有的各种分布等等。而数理统计所研究的随机变量，它的分布是未知的或完全不知道的，人们通过对随机变量进行重复独立的观察，对这些数据进行分析，对所研究的随机变量的分布作出种种判断。</li><li>数理统计主要研究的两类问题：<strong>参数估计</strong>和<strong>假设检验</strong>。</li><li><strong>总体</strong>：研究对象的某项数量指标的全部可能的观察值，一般被看作随机变量。</li><li><strong>个体</strong>：每一个可能观察值为个体。</li><li><strong>容量</strong>：总体所包含的个体的个数称为总体的容量。</li><li><strong>有限总体</strong>：容量有限的称为有限总体。</li><li><strong>无限总体</strong>：容量无限的称为无 限总体。</li><li><strong>样本</strong>：被抽取的部分个体叫做总体的一个样本。</li><li><strong>简单随机样本</strong>：遵循独立同分布的样本，也称<strong>样本</strong>，其观察值为<strong>样本值</strong>。</li><li>$F^{*}(x_{1},x_{2},\cdots,x_{n})=\prod\limits_{i=1}^{n}{F(x_{i})}$</li><li>$f^{*}(x_{1},x_{2},\cdots,x_{n})=\prod\limits_{i=1}^{n}{f(x_{i})}$</li><li>不含未知参数的<strong>统计量</strong>$g(X_{1},X_{2},\cdots,X_{n})$是随机变量。</li><li>常用统计量：<ul><li>样本均值：$\bar{X}=\frac{1}{n}\sum\limits_{i=1}^{n}{X_{i}}$，观察值：$\bar{x}=\frac{1}{n}\sum\limits_{i=1}^{n}{x_{i}}$</li><li>样本方差：$S^{2}=\frac{1}{n-1}\sum\limits_{i=1}^{n}{(X_{i}-\bar{X})^{2}}$，荐读<a href="https://blog.csdn.net/Hearthougan/article/details/77859173">样本方差为何除以n-1</a>，观察值：$s^{2}=\frac{1}{n-1}\sum\limits_{i=1}^{n}{(x_{i}-\bar{x})^{2}}=\frac{1}{n-1}[\sum\limits_{i=1}^{n}{x_{i}^{2}-n\bar{x}^{2}}]$</li><li>样本标准差：$S=\sqrt{S^{2}}=\sqrt{\frac{1}{n-1}\sum\limits_{i=1}^{n}{(X_{i}-\bar{X})^{2}}}$，观察值：$s=\sqrt{\frac{1}{n-1}\sum\limits_{i=1}^{n}{(x_{i}-\bar{x})^{2}}}$</li><li>样本$k$阶原点矩：$A_{k}=\frac{1}{n}\sum\limits_{i=1}^{n}{X_{i}^{k}}$，观察值：$a_{k}=\frac{1}{n}\sum\limits_{i=1}^{n}{x_{i}^{k}}$</li><li>样本$k$阶中心矩：$B_{k}=\frac{1}{n}\sum\limits_{i=1}^{n}{(X_{i}-\bar{X})^{k}}$，观察值：$b_{k}=\frac{1}{n}\sum\limits_{i=1}^{n}{(x_{i}-\bar{x})^{k}}$</li></ul></li><li>经验分布函数：$F_{n}(x)=\frac{1}{n}s(x)$</li><li>$P{\lim\limits_{n\to\infty}\sup\limits_{-\infty&lt;x&lt;+\infty}|F_{n}(x)-F(x)|=0}=1$</li><li>统计量是样本的函数，它是一个随机变量，统计量的分布称为抽样分布。</li><li>来自正态总体的几个常用统计量的分布<ul><li>自由度为$n$的$\chi^{2}$分布（$\chi^{2}\sim\chi^{2}(n)$）<ul><li>$\chi^{2}=X_{1}^{2}+X_{2}^{2}+\cdots+X_{n}^{2}$</li><li>$f(x,n)=\begin{cases}\frac{1}{2^{\frac{n}{2}}\Gamma(\frac{n}{2})}x^{\frac{n}{2}-1}e^{-\frac{x}{2}}, &amp; x≥0 \ 0, &amp; x&lt;0 \end{cases}$</li><li>$\Gamma(x)=\int_{0}^{\infty}e^{-t}t^{x-1}dt$</li><li>$\Gamma(x+1)=x\Gamma(x)$</li><li>$\Gamma(n+1)=n!$</li><li>$\Gamma(\frac{1}{2})=\sqrt{\pi}$</li><li>密度函数图像：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/1.png"></li><li>可加性<ul><li>$X_{1},X_{2},\cdots,X_{n}$相互独立，服从正态分布$N(\mu,\sigma^{2})$，$\chi^{2}=\frac{1}{\sigma}\sum\limits_{i=1}^{n}(X_{i}-\mu)^{2}\sim\chi_{n}^{2}$</li><li>$X_{1}\sim\chi_{n_{1}}^{2}$，$X_{2}\sim\chi_{n_{2}}^{2}$，$X_{1}$和$X_{2}$相互独立，$X_{1}+X_{2}\sim\chi_{n_{1}+n_{2}}^{2}$</li></ul></li><li>$E(\chi^{2})=n$</li><li>$D(\chi^{2})=2n$</li><li>上$\alpha$分位点<ul><li>$P{\chi^{2}&gt;\chi_{\alpha}^{2}(n)}=\alpha$</li><li>$n$足够大时，$\chi_{\alpha}^{2}(n)≈\frac{1}{2}(z_{\alpha}+\sqrt{2n-1})^{2}$，$z_{\alpha}$是标准正态分布上的上$\alpha$分位点。</li><li>图示：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/2.png"></li></ul></li></ul></li><li>自由度为$n$的$t$分布（$t\sim{t(n)}$）<ul><li>$t=\frac{X}{\sqrt{\frac{Y}{n}}}$</li><li>$f(x,n)=\frac{\Gamma(\frac{n+1}{2})}{\Gamma(\frac{n}{2})\sqrt{n\pi}}(1+\frac{x^{2}}{n})^{-\frac{n+1}{2}}$</li><li>密度函数关于$y$轴对称，$\lim\limits_{n\to\infty}{f(x,n)}=\frac{1}{\sqrt{2\pi}}e^{-\frac{x^{2}}{2}}$</li><li>密度函数图像：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/3.png"></li><li>当$n$充分大时，t分布近似$N(0,1)$分布；但对于较小的$n$，t分布与$N(0,1)$分布相差很大。</li><li>上$\alpha$分位点<ul><li>$P{t&gt;t_{\alpha}(n)}=\alpha$</li><li>$t_{1-\alpha}(n)=-t_{\alpha}(n)$</li><li>$n&gt;45$时，$t_{\alpha}(n)≈z_{\alpha}$</li><li>图示：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/4.png"></li></ul></li></ul></li><li>自由度为$(n_{1},n_{2})$的$F$分布（$F\sim{F(n_{1},n_{2})}$）<ul><li>$F=\frac{\frac{U}{n_{1}}}{\frac{V}{n_{2}}}$</li><li>$\frac{1}{F}\sim{F(n_{2},n_{1})}$</li><li>上$\alpha$分位点<ul><li>$P{F&gt;F_{\alpha}(n_{1},n_{2})}=\alpha$</li><li>$F_{1-\alpha}(n_{1},n_{2})=\frac{1}{F_{\alpha}(n_{2},n_{1})}$</li><li>图示：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/5.png"></li></ul></li></ul></li><li>正态总体的样本均值与样本方差的分布<ul><li>$E(\bar{X})=\mu$</li><li>$D(\bar{X})=\frac{\sigma^{2}}{n}$</li><li>若$X\sim{N(\mu,\sigma^{2})}$，则$\bar{X}\sim{N(\mu,\frac{\sigma^{2}}{n})}$，$\frac{\bar{X}-\mu}{\frac{\sigma}{\sqrt{n}}}\sim{N(0,1)}$</li><li>$(n-1)\frac{S^{2}}{\sigma^{2}}\sim{\chi^{2}(n-1)}$，$\bar{X}$与$S^{2}$相互独立</li><li>样本取自正态总体，$\frac{\bar{X}-\mu}{\frac{S}{\sqrt{n}}}\sim{t(n-1)}$</li><li>$X\sim{N(\mu_{1},\sigma^{2})}$，$X\sim{N(\mu_{2},\sigma^{2})}$，$\frac{\bar{X}-\bar{Y}-(\mu_{1}-\mu_{2})}{\sqrt{\frac{(n_{1}-1)S_{1}^{2}+(n_{2}-1)S_{2}^{2}}{n_{1}+n_{2}-2}}\sqrt{\frac{1}{n_{1}}+\frac{1}{n_{2}}}}\sim{t_{n_{1}+n_{2}-2}}$</li><li>$X\sim{N(\mu_{1},\sigma_{1}^{2})}$，$X\sim{N(\mu_{2},\sigma_{2}^{2})}$，$\frac{S_{1}^{2}/\sigma_{1}^{2}}{S_{2}^{2}/\sigma_{2}^{2}}\sim{F_{n_{1}-1,n_{2}-1}}$</li></ul></li></ul></li><li><strong>估计量</strong>：用于基于观察数据计算给定量的估计的规则；是用来估计未知总体的参数。</li><li><strong>点估计</strong>：用样本数据来估计总体参数，估计结果使用一个点的数值来表示最佳估计值。</li><li><strong>估计值</strong>：由样本数据估计总体分布所含未知参数的真值，所得值称为估计值。</li><li><strong>矩估计</strong>：估计总体参数的方法，首先推导目标参数的总体矩（随机变量的幂的期望值）的方程，然后取出一个样本，并从该样本估计总体矩，接着用样本矩取代未知的总体矩，解出目标参数。</li><li><strong>极大似然估计</strong>：估计总体参数的方法，在参数的所有取值中寻找一个值，使得似然函数取得最大值，可能性最大的参数值即对参数的最大似然估计。<ul><li>离散型：$L(\theta)=L(x_{1},x_{2},\cdots,x_{n};\theta)=\prod\limits_{i=1}^{n}p(x_{i};\theta)$</li><li>连续型：$L(\theta)=L(x_{1},x_{2},\cdots,x_{n};\theta)=\prod\limits_{i=1}^{n}f(x_{i};\theta)$</li></ul></li><li><strong>参数区间估计问题</strong>：给定置信度求未知参数置信区间的问题。</li><li>置信区间<ul><li>展现的是这个参数的真实值有一定概率落在测量结果的周围的程度，其给出的是被测量参数的测量值的可信程度。</li><li>给定置信度的置信区间并不是唯一的，置信区间的长度表示估计的精度，置信区间越短表示估计的精度越高。</li><li>求解思路：<ul><li>选择总体统计量（要解决的实际问题）</li><li>求出统计量的抽样分布（样本的平均值和标准误差）</li><li>求出置信区间</li><li>求出置信区间的上下限的值</li></ul></li><li>基本的置信区间可以查表</li></ul></li><li>实际推断原理：概率很小的随机事件（通常以$\alpha≤0.05$的概率为小概率）在一次试验中实际上几乎是不发生的。</li><li>假设检验中，原假设为$H_{0}$，备择假设为$H_{1}$。</li><li>假设检验的基本方法：先假定所要检验的假设$H_{0}$成立，在此前提下，根据给定的值$\alpha$，使用样本构造概率为$\alpha$的小概率事件。然后，根据一次试验的结果，即样本观测值，看上述小概率事件在此试验中是否发生。如果发生，我们就否定$H_{0}$；否则就接受$H_{0}$ 。$\alpha$称为检验水平或检验标准，通常$\alpha=0.05$或$0.01$。</li><li>假设检验的两类错误：<ul><li>第一类错误（弃真）：如果原假设为真，按检验法则否定了原假设。</li><li>第二类错误（取伪）：如果原假设非真，按检验法则接受了原假设。</li></ul></li><li>拒绝域与临界点</li><li>双边检验、左边检验和右边检验</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数理统计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微积分基础理论归纳</title>
      <link href="/2021/03/23/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/wei-ji-fen-ji-chu-li-lun-gui-na/"/>
      <url>/2021/03/23/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/wei-ji-fen-ji-chu-li-lun-gui-na/</url>
      
        <content type="html"><![CDATA[<h1 id="微积分基础理论归纳"><a href="#微积分基础理论归纳" class="headerlink" title="微积分基础理论归纳"></a>微积分基础理论归纳</h1><ol><li><a href="https://blankspace.blog.csdn.net/article/details/114372779">一元函数微分学</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114379662">微分中值定理</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114380568">一元函数积分表</a></li><li>定积分，又称黎曼积分，是求函数图形与x轴所形成的曲边图形面积，结果是数值。</li><li>不定积分是求一个连续函数的原函数的过程. 结果是函数；有第一类间断点或无穷间断点的函数在包含该间断点的区间内没有原函数。</li><li>变限积分：定积分的推广，上限或下限是变量的定积分。</li><li>反常积分：定积分的推广。</li><li>无穷积分：积分区间的上限或下限为无穷的积分。</li><li>反常积分：被积函数在积分区间内含有间断点的积分。</li><li>函数凹凸性：二阶导数为正，函数图像上凹；二阶导数为负，函数图像上凸。</li><li><a href="https://blankspace.blog.csdn.net/article/details/114870930">拉格朗日乘数法</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114838354">九种二次曲面及其方程</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114842328">曲线的切线与法平面和曲面的切平面与法线</a></li></ol><h1 id="微分中值定理"><a href="#微分中值定理" class="headerlink" title="微分中值定理"></a>微分中值定理</h1><h2 id="费马引理"><a href="#费马引理" class="headerlink" title="费马引理"></a>费马引理</h2><p>设函数$f(x)$在点$x_{0}$的某邻域$U(x_{0})$内有定义，并且在$x_{0}$处可导，如果对任意的$x\in{U(x_{0})}$，有$f(x)≤f(x_{0})$（或$f(x)≥f(x_{0})$），那么$f’(x_{0})=0$。</p><h2 id="罗尔中值定理"><a href="#罗尔中值定理" class="headerlink" title="罗尔中值定理"></a>罗尔中值定理</h2><p>如果函数$f(x)$在闭区间$[a,b]$上连续，在开区间$(a,b)$内可导，在区间端点处的值相等即$f(a)=f(b)$，那么在$(a,b)$内至少有一点$\xi$（$a&lt;\xi&lt;b$），使得$f’(\xi)=0$。</p><h2 id="拉格朗日中值定理"><a href="#拉格朗日中值定理" class="headerlink" title="拉格朗日中值定理"></a>拉格朗日中值定理</h2><p>如果函数$f(x)$在闭区间$[a,b]$上连续，在开区间$(a,b)$内可导，那么在$(a,b)$内至少有一点$\xi$（$a&lt;\xi&lt;b$），使得$f(b)-f(a)=f’(\xi)(b-a)$。</p><p>也可以用有限增量的方式表达此定理：$\Delta{y}=f(x+\Delta{x})-f(x)=f’(x+\theta\Delta{x})\Delta{x}$（$0&lt;\theta&lt;1$）。</p><p>如果函数$f(x)$在区间$I$上连续，在区间$I$内导数恒为$0$，那么$f(x)$在区间$I$上是一个常数。</p><h2 id="柯西中值定理"><a href="#柯西中值定理" class="headerlink" title="柯西中值定理"></a>柯西中值定理</h2><p>如果函数$f(x)$和$F(x)$在闭区间$[a,b]$上连续，在开区间$(a,b)$内可导，对任意$x\in{(a,b)}$，$F’(x)≠0$，那么在$(a,b)$内至少有一点$\xi$，使得等式$\frac{f(b)-f(a)}{F(b)-F(a)}=\frac{f’(\xi)}{F’(\xi)}$成立。</p><h2 id="泰勒中值定理"><a href="#泰勒中值定理" class="headerlink" title="泰勒中值定理"></a>泰勒中值定理</h2><p>如果函数$f(x)$在$x_{0}$处具有$n$阶导数，那么存在$x_{0}$的一个邻域，对于该邻域内任意$x$，有$f(x)=f(x_{0})+f’(x_{0})(x-x_{0})+\frac{f’’(x_{0})}{2!}(x-x_{0})^{2}+…+\frac{f^{(n)}(x_{0})}{n!}(x-x_{0})^{n}+R_{n}(x)$，其中$R_{n}(x)=o((x-x_{0})^{n})$。</p><p>如果函数$f(x)$在$x_{0}$的某个邻域$U(x_{0})$内具有$n+1$阶导数，那么对任意$x\in{U(x_{0})}$，有$f(x)=f(x_{0})+f’(x_{0})(x-x_{0})+\frac{f’’(x_{0})}{2!}(x-x_{0})^{2}+…+\frac{f^{(n)}(x_{0})}{n!}(x-x_{0})^{n}+R_{n}(x)$，其中$R_{n}(x)=\frac{f^{(n+1)}(\xi)}{(n+1)!}(x-x_{0})^{n+1}$，$\xi$为介于$x_{0}$与$x$之间的某个值。</p><h1 id="拉格朗日乘数法"><a href="#拉格朗日乘数法" class="headerlink" title="拉格朗日乘数法"></a>拉格朗日乘数法</h1><p>找函数$z=f(x,y)$在附加条件$\varphi(x,y)=0$下的可能极值点，可以先做拉格朗日函数$L(x,y)=f(x,y)+\lambda\varphi(x,y)$，其中$\lambda$为参数，求其对$x$和$y$的一阶偏导数，并使之为$0$，然后与方程$\varphi(x,y)=0$相联立，得到：<br>$$\begin{cases}f_{x}(x,y)+\lambda\varphi_{x}(x,y)=0 \ f_{y}(x,y)+\lambda\varphi_{y}(x,y)=0 \ \varphi(x,y)=0 \end{cases}$$<br>由此方程组解出$x$、$y$及$\lambda$，这样得到的$(x,y)$就是函数$f(x,y)$在附加条件$\varphi(x,y)=0$下的可能极值点。</p><p>要求函数$u=f(x,y,z,t)$在附加条件$\varphi(x,y,z,t)=0$和$\psi(x,y,z,t)=0$下的极值，可以先作拉格朗日函数$L(x,y,z,t)=f(x,y,z,t)+\lambda\varphi(x,y,z,t)+\mu\psi(x,y,z,t)$，其中$\lambda$和$\mu$为参数，求其一阶偏导数，并使之为$0$，然后与方程$\varphi(x,y,z,t)=0$和$\psi(x,y,z,t)=0$相联立求解，得出的$(x,y,z,t)$就是函数$f(x,y,z,t)$在附加条件$\varphi(x,y,z,t)=0$和$\psi(x,y,z,t)=0$下的可能极值点。</p><p>至于求得的点是不是极值点，应该在实际问题中根据问题本身的性质来判定。</p><p>推荐阅读：<a href="https://www.zhihu.com/question/38586401">如何理解拉格朗日乘子法？</a></p><h1 id="曲线与曲面"><a href="#曲线与曲面" class="headerlink" title="曲线与曲面"></a>曲线与曲面</h1><h2 id="曲线的切线与法平面"><a href="#曲线的切线与法平面" class="headerlink" title="曲线的切线与法平面"></a>曲线的切线与法平面</h2><p>曲线$\Gamma:\begin{cases}x=\varphi(t) \ y=\psi(t) \ z=\omega(t) \end{cases}$，$t\in[\alpha,\beta]$</p><p>切线方程：$\frac{x-x_{0}}{\varphi’(t_{0})}=\frac{y-y_{0}}{\psi’(t_{0})}=\frac{z-z_{0}}{\omega’(t_{0})}$</p><p>法平面方程：$\varphi’(t_{0})(x-x_{0})+\psi’(t_{0})(y-y_{0})+\omega’(t_{0})(z-z_{0})=0$</p><h2 id="曲面的切平面与法线"><a href="#曲面的切平面与法线" class="headerlink" title="曲面的切平面与法线"></a>曲面的切平面与法线</h2><p>曲面$\Sigma:x=F(x,y,z)=0$</p><p>切平面方程：$F_{x}(x_{0},y_{0},z_{0})(x-x_{0})+F_{y}(x_{0},y_{0},z_{0})(y-y_{0})+F_{z}(x_{0},y_{0},z_{0})(z-z_{0})=0$</p><p>法线方程：$\frac{x-x_{0}}{F_{x}(x_{0},y_{0},z_{0})}=\frac{y-y_{0}}{F_{y}(x_{0},y_{0},z_{0})}=\frac{z-z_{0}}{F_{z}(x_{0},y_{0},z_{0})}$</p><h2 id="九种二次曲面及其方程"><a href="#九种二次曲面及其方程" class="headerlink" title="九种二次曲面及其方程"></a>九种二次曲面及其方程</h2><ol><li>椭圆锥面：$\frac{x^{2}}{a^{2}}+\frac{y^{2}}{b^{2}}=z^{2}$<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/1.png"></li><li>椭球面：$\frac{x^{2}}{a^{2}}+\frac{y^{2}}{b^{2}}+\frac{z^{2}}{c^{2}}=1$<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/2.png"></li><li>单叶双曲面：$\frac{x^{2}}{a^{2}}+\frac{y^{2}}{b^{2}}-\frac{z^{2}}{c^{2}}=1$<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/3.png"></li><li>双叶双曲面：$\frac{x^{2}}{a^{2}}-\frac{y^{2}}{b^{2}}-\frac{z^{2}}{c^{2}}=1$<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/4.png"></li><li>椭圆抛物面：$\frac{x^{2}}{a^{2}}+\frac{y^{2}}{b^{2}}=z$<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/5.png"></li><li>双曲抛物面：$\frac{x^{2}}{a^{2}}-\frac{y^{2}}{b^{2}}=z$<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/6.png"></li><li>椭圆柱面：$\frac{x^{2}}{a^{2}}+\frac{y^{2}}{b^{2}}=1$<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/7.png"></li><li>双曲柱面：$\frac{x^{2}}{a^{2}}-\frac{y^{2}}{b^{2}}=1$<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/8.png"></li><li>抛物柱面：$x^{2}=ay$<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/9.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算理论基础</title>
      <link href="/2021/03/21/ji-suan-ji-ke-xue-ji-chu/ji-suan-li-lun-ji-chu/"/>
      <url>/2021/03/21/ji-suan-ji-ke-xue-ji-chu/ji-suan-li-lun-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>计算理论是研究计算模型的一门学科，是研究理论计算机的科学。</p><p>理论计算机是研究计算机的理论模型，研究计算机的本质，也就是把计算机看成一个数学系统。这是因为，计算机科学的基本思想和模型在本质上是数学(离散)的。</p><p>计算机的基本能力和限制是什么?</p><ul><li>究竟哪些问题, 可通过计算解决？ $→$ 可计算性理论</li><li>解决可计算的问题，究竟需要多少资源？ $→$ 计算复杂性理论</li><li>为了研究计算, 要使用哪些计算模型？ $→$ 形式语言与自动机理论</li></ul><p>计算理论是学习编译原理的基础。</p><p>核心内容：</p><ul><li>正则语言<ul><li>有穷自动机</li><li>正则表达式</li><li>正则语言的性质</li></ul></li><li>上下文无关语言<ul><li>上下文无关文法</li><li>下推自动机</li><li>上下文无关语言的性质</li></ul></li><li>计算导论<ul><li>图灵机及其扩展</li><li>不可判定性</li></ul></li></ul><p>自动机理论：研究抽象机器及其所能解决问题的理论。</p><p>形式语言：经数学定义的语言。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/1.png"></p><p>字母表：符号(字符)的非空有穷集。<br>$\Sigma_{1}={0,1}$<br>$\Sigma_{2}={a,b,c,d,…,z}$<br>$\Sigma_{3}={x|x是一个汉字}$</p><p>字符串：由某字母表中符号组成的有穷序列。<br>若$\Sigma_{1}={0,1}$，那么$0,1,00,111001$为$\Sigma_{1}$上的字符串。<br>若$\Sigma_{2}={a,b,c,d,…,z}$，那么$ab,cdef$为$\Sigma_{2}$上的字符串。</p><p>空串：记为$\varepsilon$，有$0$个字符的串。<br>字母表$\Sigma$可以是任意的，但都有$\varepsilon\notin\Sigma$。</p><p>符号使用的一般约定：</p><ul><li>字母表：$\Sigma,\Gamma,…$</li><li>字符：$a,b,c,…$</li><li>字符串：$…,w,x,y,z$</li><li>集合：$A,B,C,…$</li></ul><p>文法：一个文法$G$是个有序四元组，记作$G=(V_{N},V_{T},P,S)$。</p><ul><li>$V_{N}$：非终极符(变元)集合，用大写英文字母表示。</li><li>$V_{T}$：终极符集合，这里$V_{N}\cap{V_{T}}=\Phi$，有时记作$V_{N}\cup{V_{T}}=V$。</li><li>$P$：生成式(产生式)的集合。</li><li>$S$：开始变元，$S\in{V_{N}}$。</li></ul><p>文法中使用的符号通常作如下约定：</p><ul><li>用大写英文字母表示变元。S通常表示开始变元。</li><li>用小写的$a,b,c,…$表示终极符。</li><li>用$x,y,z,…$表示终极符串，即$x,y,z,…∈V_{T}^{*}$。</li><li>用$α,β,γ,…$希腊字母表示既含有终极符，也含有非终极符的符号串，即$α,β,γ,…\in(V_{N}\cup{V_{T}})^{*}$。</li></ul><p>设文法$G=(V_{N},V_{T},P,S)$，则：</p><ul><li>$S$是个句型。</li><li>若$αβγ$是个句型，且$β→δ$是$P$中的一个产生式，则$αδγ$也是一个句型。</li></ul><p>按此定义，对于文法$G_{2}$来说，$P={S→0S1|01}$。<br>$S$，$0S1$，$00S11$，$000111$都是句型。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/2.png"></p><table><thead><tr><th align="center">文法</th><th align="center">产生的语言</th><th align="center">自动机</th></tr></thead><tbody><tr><td align="center">0型语言</td><td align="center">递归可枚举集(r.e)<br>(recursively enumerable set)</td><td align="center">图灵机</td></tr><tr><td align="center">1型语言</td><td align="center">上下文有关语言(CSL)<br>(Context Sensitive Language)</td><td align="center">线性界限自动机</td></tr><tr><td align="center">2型语言</td><td align="center">上下文无关语言(CFL)<br>(Context Free Language)</td><td align="center">下推自动机</td></tr><tr><td align="center">3型语言</td><td align="center">正规集(regular set)</td><td align="center">有限自动机</td></tr></tbody></table><p>可以看出，各类文法之间有向上兼容性，即：3型语言 $\subseteq$ 2型语言 $\subseteq$ 1型语言 $\subseteq$ 0型语言</p><p>算术公理的相容性：</p><ul><li>完备性：所有能从该形式化系统推导出来的命题，都可以从这个形式化系统推导出来。</li><li>一致性：一个命题不可能同时为真或为假。</li><li>可判定性：算法可以在有限步内判定命题的真伪。</li></ul><p>哥德尔不完全性定理：任何表达力足够强（递归可枚举）的系统都不可能同时具有一致性和完备性。</p><p>判定性问题是无法解决的，即有些数学问题是不可求解的，也就是说<a href="https://blankspace.blog.csdn.net/article/details/113730669">图灵机</a>是不可停机的。</p><table><thead><tr><th>计算载体</th><th>提出学者</th><th>计算角度</th></tr></thead><tbody><tr><td>原始递归函数</td><td>Godel</td><td>数学的</td></tr><tr><td>$\lambda-$演算</td><td>Church</td><td>数理逻辑的</td></tr><tr><td>图灵机</td><td>Turing</td><td>机械的</td></tr></tbody></table><p>图灵论题：凡是可计算的函数都可以用图灵机。</p><p>丘奇论题：任何计算，如果存在一个有效的过程，它就能被图灵机实现。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图灵机</title>
      <link href="/2021/03/21/ji-suan-ji-ke-xue-ji-chu/tu-ling-ji/"/>
      <url>/2021/03/21/ji-suan-ji-ke-xue-ji-chu/tu-ling-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="图灵机的组成"><a href="#图灵机的组成" class="headerlink" title="图灵机的组成"></a>图灵机的组成</h1><ul><li>一条存储带<ul><li>双向无限延长上有一个个小方格</li><li>每个小方格可存储一个数字/字母</li></ul></li><li>一个控制器<ul><li>包含一个读写头，可以读、写、更改存储带上每一格的数字/字母</li><li>可以接受设定好的程序语句</li><li>可以存储当前自身的状态</li><li>可以根据读到的字母/数字变换自身的状态</li><li>可以沿着存储带一格一格地左移/右移</li></ul></li></ul><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/1.png"></p><h1 id="图灵机的工作步骤"><a href="#图灵机的工作步骤" class="headerlink" title="图灵机的工作步骤"></a>图灵机的工作步骤</h1><ul><li>准备<ul><li>存储带上符号初始化</li><li>控制器设置好自身当前状态（初始化状态）</li><li>读写头置于起始位置</li><li>准备好工作程序;</li></ul></li><li>反复执行以下工作直到停机<ul><li>读写头读出存储带上当前方格中的字母/数字</li><li>根据自身当前状态和所读到的字符，找到相应的程序语句</li><li>根据相应程序语句，做三个动作<ul><li>在当前存储带方格上写入一个相应的字母/数字</li><li>变更自身状态至新状态</li><li>读写头向左或向右移一步</li></ul></li></ul></li></ul><h1 id="图灵机的运行机理示例"><a href="#图灵机的运行机理示例" class="headerlink" title="图灵机的运行机理示例"></a>图灵机的运行机理示例</h1><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/2.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/3.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/4.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/5.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/6.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/7.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/8.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/9.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/10.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/11.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/12.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/13.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/14.png"></p><p>至此，成功停机。</p><p>整个过程，完成了一个4+3=7的过程。</p><h1 id="图灵机的停机"><a href="#图灵机的停机" class="headerlink" title="图灵机的停机"></a>图灵机的停机</h1><p>图灵机的停机问题：判断任意一个程序是否会在有限的步骤之内结束运行的程序是否存在?</p><p>图灵机的停机意味着：</p><ul><li>给定符号序列$A$，如果能找到一个图灵机，得出对应的符号序列$B$，那么从$A$到$B$就是可计算的。</li><li>也就是说：<ul><li>对于一个问题的输入$A$，问：$A$能否推证出$B$？</li><li>如果能找到一个图灵机，得出对应的符号序列$B$，那么从$A$到$B$就是可计算的。</li><li>否则，该问题不可计算。</li></ul></li></ul><p>图灵认为：不存在这样的程序。</p><p>证明：采用<strong>反证法</strong><br>假设存在这样的程序，即，存在程序$H(P,I)$可以给出程序$P$在输入$I$时是否停机的判断：若$P$在输入$I$时可停机，$H$输出“停机”，反之输出“不停机（死循环）”（注：停机与死循环是对立的），即可导出下面的矛盾：<br>根据假设，可以设计一个调用程序$H$的主程序$K$如下：<br>首先，它调用$H(P,P)$，如果$H(P,P)$，输出“死循环”，则$K(P)$停机，反之$K(P)$死循环。即$K(P)$做与$H(P,P)$的输出相反的动作。<br>$K(P)$的程序如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">H</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span>I<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里的H函数有两种返回值：死循环或停机</span><span class="token keyword">int</span> <span class="token function">K</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">H</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span>P<span class="token punctuation">)</span> <span class="token operator">==</span> 死循环<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 程序本身可以被视作数据</span>        <span class="token keyword">return</span> 停机<span class="token punctuation">;</span>  <span class="token comment">// 主程序K停机</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// H(P,P) == 停机</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 这里K会死循环</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>视$K$程序为参数$P$，观察$K(K)$的运行：若$H(K , K)$输出死循环，实际观察到$K(K)$停机，但由$H$的定义知二者矛盾。反之，$H(K, K)$输出停机，$K(K)$实际死循环，两者仍然矛盾。<br>因此，假设程序$H$存在引发不可避免的矛盾，表明开始的假设不成立。<br>结论是：不存在这样的程序。<br>证明结束。<br>又称：“$H$是不可计算函数”、“停机问题不可解”。</p><p>以停机问题为基础，发现了大量不可计算问题，如“铺砖问题”等。</p><h1 id="图灵机的优势"><a href="#图灵机的优势" class="headerlink" title="图灵机的优势"></a>图灵机的优势</h1><ul><li>强大</li><li>简单</li><li>可实现</li></ul><h1 id="图灵机的理论意义"><a href="#图灵机的理论意义" class="headerlink" title="图灵机的理论意义"></a>图灵机的理论意义</h1><ul><li>给出了一个可实现的通用计算模型</li><li>引入了通过“读写符号”和“状态改变”进行运算的思想</li><li>证实了基于简单字母表完成复杂运算的能力</li><li>引入了存储区、程序、控制器等概念的原型</li></ul><h1 id="图灵机模拟器"><a href="#图灵机模拟器" class="headerlink" title="图灵机模拟器"></a>图灵机模拟器</h1><p><a href="http://morphett.info/turing/turing.html">图灵机模拟器网址</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图灵机 </tag>
            
            <tag> 计算理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云服务案例分析Quiz</title>
      <link href="/2021/03/19/ji-suan-ji-ke-xue-ji-chu/yun-fu-wu-an-li-fen-xi-quiz/"/>
      <url>/2021/03/19/ji-suan-ji-ke-xue-ji-chu/yun-fu-wu-an-li-fen-xi-quiz/</url>
      
        <content type="html"><![CDATA[<h1 id="Quiz1"><a href="#Quiz1" class="headerlink" title="Quiz1"></a>Quiz1</h1><p>1.In IT service management, what is NOT the benefit in use of processes?<br>a. measurable<br>b. simplifiable<br>c. auditable<br>d. contract compliant</p><p>2.Why we have to study services?<br>a. Service regulates professional activities<br>b. Service is simple<br>c. Service resolves technical problems<br>d. Service equals profits</p><p>3.In comparing with Computer Science, Software Engineering is concerning with _<br>a. building data structures<br>b. establishing computing theory<br>c. delivering useful software<br>d. applying efficient algorithms</p><p>4.In comparing with IT Management, IT SERVICE management is focusing on _.<br>a. Centralized behaviors<br>b. Process orientation<br>c. Once a time missions<br>d. Isolated procedures</p><p>5.In Service Sciences, Management, and Engineering (SSME), service innovation does NOT include:<br>a. Technology Innovation<br>b. Business Innovation<br>c. Manufacture Innovation<br>d. Demand Innovation</p><p>6.What is NOT the criterion for effective Services Management?<br>a. Scalability requirements of the world’s most demanding service infrastructures<br>b. Flexibility and modularity to adapt for business, organizational and technology convergence<br>c. Security to ensure information transformation correctly<br>d. Automation of processes and workflows fundamental to service delivery</p><p>7.From the customer perspective, Software as a Service means _.<br>a. Software is commercially available with minor configuration options<br>b. Internet accessed services available (near) real-time access of resources after purchase<br>c. The centralized hosting obviates the need for downloadable patches and upgrades and enables continuous improvements<br>d. The hosting provider assumes responsibility for the solution</p><p>8.To increase corporate profits，the service path is _.<br>a. Focusing on team building<br>b. Extending worker’s working hours<br>c. Meeting customer requirement<br>d. Doubling worker’s salary</p><p>9.Which one of the following statements may NOT be true?<br>a. Service Engineering is a multi-disciplinary field<br>b. In manufactures model the product design comes after process design<br>c. IT Service Architecture can be viewed from various perspectives.<br>d. Sometimes the services engineering model works but has limitations due to human judgment is required</p><p>10.Which one of the following statements may NOT be true?<br>a. Science is a way to create knowledge.<br>b. In interpretive model the improvements come from changes to design or process.<br>c. Engineering is a way to apply knowledge and create new value.<br>d. Management improves the process of creating and capturing value.</p><p>答案：</p><table><thead><tr><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">B</td><td align="center">B</td><td align="center">C</td><td align="center">B</td><td align="center">A</td><td align="center">C</td><td align="center">B</td><td align="center">C</td><td align="center">B</td><td align="center">B</td></tr></tbody></table><h1 id="Quiz2"><a href="#Quiz2" class="headerlink" title="Quiz2"></a>Quiz2</h1><p>1.The graphical user interface (GUI) is managed by ( )<br>a. computer hardware<br>b. computer operating systems<br>c. computer application software<br>d. computer input/output devices</p><p>2.The computer application software ( ).<br>a. provides tools for writing computer programs using different programming languages<br>b. provides tools for writing computer programs using different programming languages<br>c. manages the computer hardware and the computer system<br>d. facilitates the input and output devices in a computer system</p><p>3.The main functions of Internet may NOT include__.<br>a. Announcement<br>b. Encryption<br>c. News<br>d. Emails</p><p>4.In comparing with Hard Disks, the Solid State Disks (SSD) can ( ).<br>a. Offer lower cost per megabyte of storage<br>b. Provide faster access time<br>c. Depend on a read/write interface synchronizing with a data sector<br>d. Increase the number of servers needed</p><p>5.Which one is NOT characterized as the type of data storage?<br>a. Volatility of Information<br>b. Stability of media over time<br>c. Security of information<br>d. Ability to change information</p><p>6.Data deduplication is an important new technology to control data ( ). The average disk volume contains thousands or even millions of duplicate data objects. As data is created, distributed, backed up, and archived, duplicate data objects are stored unabated across all storage tiers. The end result is inefficient utilization of data storage resources. By eliminating ( ) data objects and referencing just the original object, an immediate benefit is obtained through storage space ( ).<br>a. storage/useless/reduction<br>b. proliferation/redundant/efficiencies<br>c. space/extra/optimization<br>d. flow/more/saving</p><p>7.The common computer platforms do NOT include ( )<br>a. computer’s architecture<br>b. operating system<br>c. programming languages<br>d. relational database</p><p>8.What is the Data Storage Virtualization?<br>a. A method of combining the available storage resources in a network by splitting up the available bandwidth into channels, each of which can be assigned (or reassigned) to a particular server or device in real time.<br>b. The masking of server resources (including the number and identity of individual physical servers, processors, and operating systems) from server and storage users.<br>c. A technique for hiding the physical characteristics of computing resources from the way in which other storage systems, applications, or end users interact with those resources.<br>d. The pooling of physical storage from multiple network storage devices into what appears to be a single storage device that is managed from a central console.</p><p>9.Which one of the following statements is NOT correct?<br>a. A local area network (L AN) is a network of computers close together.<br>b. Router computers act as receive-and -forward devices; they do not retain information about the packets that they handle.<br>c. Independent networks should require internal changes to be connected to the network.<br>d. The Web is more a way of thinking about and organizing information storage and retrieval than it is a specific technology.</p><p>10.Microservices may NOT have some characteristics，such as<br>a. Services in a microservice architecture (MSA) are often processes that communicate over a network to fulfil a goal using technology-agnostic protocols such as HTTP.<br>b. Services are organized around business capabilities.<br>c. Services cannot be implemented using different programming languages, databases, hardware and software environment, depending on what fits best.<br>d. Services are small in size, messaging-enabled, bounded by contexts, autonomously developed, independently deployable, decentralized and built and released with automated processes.</p><p>答案：</p><table><thead><tr><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">B</td><td align="center">B</td><td align="center">B</td><td align="center">B</td><td align="center">C</td><td align="center">B</td><td align="center">D</td><td align="center">D</td><td align="center">C</td><td align="center">C</td></tr></tbody></table><h1 id="Quiz3"><a href="#Quiz3" class="headerlink" title="Quiz3"></a>Quiz3</h1><p>1.An IT Architect is ( ).<br>a. a result seeker<br>b. a project manager<br>c. a product expert<br>d. a lone scientist</p><p>2.Which of the followings may NOT be correct?<br>a. Regulations and governance are means to assuring some acceptable level of quality-of-service<br>b. Information systems allow separation of production and consumption of services<br>c. The world is becoming networked, dependent on information and information technology<br>d. Non Function Requirement is less useful to cloud system design</p><p>3.Which one of the following activities is in the lower end of profit chain for IT industry?<br>a. manufacture a complicate device<br>b. build up a team to implement a technical consultation assignment<br>c. broadcast a product news to media<br>d. send emails to customers for an important product announcement</p><p>4.To create a component model by applying patterns for e-Business, which one of the following statements could be incorrect ?<br>a. Model represents the application object that implements the application data and business logic. b. Back-end system is responsible for the business processes beyond the commerce processes<br>c. Controller is responsible for formatting the application results and dynamic page construction<br>d. Database stores information about the commerce application</p><p>5.Which one of the following statements may NOT be true?<br>a. e-Business Solutions present unique challenges such as adapt to rapidly changing technologies and dramatically smaller product cycles.<br>b. Patterns for e-Business are proven and repeatable architectural constructs that occur across many engagements.<br>c. Patterns for e-business apply in the later stages of the lifecycle, when business processes are being analyzed and architectural level decisions are being made.<br>d. Fitting a pre-cut suit is much cheaper than creating one from scratch.</p><p>6.Which one of the following statements may NOT be true?<br>a. Architecting deals almost entirely with measurables using analytic tools derived from mathematics and the hard sciences.<br>b. The IT Architect may be involved during the construction of a solution as an advocate for the client.<br>c. A Pattern is a prescriptive technology specification that describes the development, deployment, and operations environment of a class of computer applications.<br>d. The Operational Model is a representation of a network of computer systems.</p><p>7.What may not be the objects of Business Pattern in Patterns for e-business?<br>a. Identify generalized aspects of business process interactions<br>b. Provide a non-technical view for not just the IT organization<br>c. Describe Interactions between the primary Business Actors<br>d. Describe a specific business process</p><p>8.In Patterns for e-business, the Composite pattern means ( ).<br>a. When a group of Business and Integration patterns have been combined to address a specific set of business process requirements.<br>b. When the applications need to be accessible via multiple device types, including rich clients, browsers, voice response units, mobile devices, and PDAs.<br>c. When there is a need to describe the consideration on Performance, Capacity, Scalability, and Availability.<br>d. When a particular group of Business and Integration patterns become a frequent occurrence.</p><p>9.Which one of the following statements may NOT be true?<br>a. Reuse of architectural knowledge and work products is not an important aspect of design approach.<br>b. This Systems Management discipline is particularly important in the Web environment as the potential impact of poor performance is that much greater.<br>c. Architectural Decisions depend on what is being architected, and in what context.<br>d. Great architects go beyond the role of intermediary to make a visionary combination of technology and purpose that exceeds the expectation of the builder or client.</p><p>10.What is not the benefit for Ford to use e-Business Patterns?<br>a. Save money as multiple development environments cost more money<br>b. Rapid mapping from business requirements to application and infrastructure designs<br>c. Standard reusable building blocks selected and aggregated in Patterns grouped by layers<br>d. IBM won hardware standard for all platforms</p><p>答案：</p><table><thead><tr><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">D</td><td align="center">A</td><td align="center">C</td><td align="center">C</td><td align="center">A</td><td align="center">D</td><td align="center">D</td><td align="center">A</td><td align="center">D</td></tr></tbody></table><h1 id="Quiz4"><a href="#Quiz4" class="headerlink" title="Quiz4"></a>Quiz4</h1><p>1.For the dimensions of big data growth, Veracity means ( ).<br>a. Streaming data, milliseconds to seconds to respond<br>b. Uncertainty from inconsistency ambiguities<br>c. Terabytes to exabytes of existing data to process<br>d. Structured, unstructured, text, multimedia</p><p>2.The common types of RFID working model do NOT include ( ).<br>a. idle<br>b. active<br>c. semipassive<br>d. passive</p><p>3.Which one of the following statements is NOT correct?<br>a. Big Data means unstructured Data.<br>b. Big Data is a new basis of competitive advantage for enterprises.<br>c. Data generated from IoT will grow exponentially as the number of connected nodes increases.<br>d. Big Data is similar to small data, but bigger in size.</p><p>4.What may NOT be the Big Data growth drivers?<br>a. Both mega-IT-vendors and pure-play Big Data vendors took steps to better articulate their product &amp; services roadmaps and larger visions for Big Data in the enterprise, creating greater confidence from enterprise buyers.<br>b. Continued “Big Data Washing” by legacy IT vendors leading to confusion among enterprise buyers and practitioners, as well as “political” factors that make it difficult for enterprise buyers to engage new vendors.<br>c. Big Data technologies took important steps towards greater enterprise-grade capabilities, critical for mass enterprise adoption. These steps included better privacy, security and governance capabilities, as well as improved backup &amp; recovery and high-availability for Hadoop specifically.<br>d. Partnerships played an important role in maturing the Big Data landscape. Of particular importance are a number of reseller agreements and technical partnerships between Big Data vendors and non-Big Data vendors, the results of which that make it easier for practitioners to adopt and integrate Big Data technologies.</p><p>5.Which one of the following statements may NOT be correct?<br>a. Big data is just a technology—it is not a business strategy for capitalizing on information resources<br>b. Organizations are using big data to target customer-centric outcomes, tap into internal data and build a better information ecosystem<br>c. Fast forward to the present and technologies like Hadoop give you the scale and flexibility to store data before you know how you are going to process it<br>d. Technologies such as MapReduce, Hive and Impala enable you to run queries without changing the data structures underneath</p><p>6.Which may NOT be the direct impact on IT industry by Big Data?<br>a. Data storage has grown significantly, shifting market from analog to digital<br>b. Computation Capability is demanding to process huge amount of data with various formats<br>c. New business insights are generated from combining and analyzing data types in new ways<br>d. The foundation is built for future requirements by expanding into big data platform</p><p>7.What could be the main benefit of using Big Data on Security/Intelligence Extension?<br>a. Increase customer loyalty and satisfaction by understanding what meaningful actions are needed<br>a. Increase customer loyalty and satisfaction by understanding what meaningful actions are needed<br>b. Track persons of interest (drug/sex traffickers, terrorists, illegal refugees/immigrants) and civil/border activity<br>c. Find, Visualize &amp; Understand all big data to improve business knowledge<br>d. Log analytics, energy bill forecasting, energy consumption optimization, anomalous energy usage detection, presence-aware energy management</p><p>8.What is NOT the feature of Hadoop?<br>a. Hadoop is an open source software project.<br>b. Hadoop is relying on high-end hardware.<br>c. Hadoop is designed to scale up from a single server to thousands of machines, with very high degree of fault tolerance.<br>d. Hadoop enables distributed processing of large data sets across clusters.</p><p>9.Which one of the following statements may NOT be corret?<br>a. Hadoop is designed to work best with a modest number of extremely large files.<br>b. Every data block stored in HDFS has its own metadata and needs to be tracked by a central server.<br>c. Because of data locality principle, using a storage area network in a Hadoop environment is recommended.<br>d. All hadoop commands are invoked by the bin/hadoop script.</p><p>10.Which one of the following statements may NOT be correct?<br>a. Spark is an implementation of Resilient Distributed Dataset (RDD) in Scala<br>b. In spark, MapReduce data flow can be expressed using RDD transformations<br>c. Spark Streaming extends the core API to allow high-throughput, fault-tolerant stream processing of live data streams<br>d. Spark cannot persist or cache a dataset in memory across operations</p><p>答案：</p><table><thead><tr><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">B</td><td align="center">A</td><td align="center">A</td><td align="center">B</td><td align="center">A</td><td align="center">C</td><td align="center">B</td><td align="center">B</td><td align="center">C</td><td align="center">D</td></tr></tbody></table><h1 id="Quiz5"><a href="#Quiz5" class="headerlink" title="Quiz5"></a>Quiz5</h1><p>1.What’s the significant problem with traditional business networks?<br>a. Every participant has a separate copy of the ledger and updates it for their transactions<br>b. There are several contracts involved<br>c. The participants in a network can never be known<br>d. No one person can oversee the entire network</p><p>2.In the Bitcoin network, everyone knows who is participating.<br>a. Possible<br>b. True<br>c. False<br>d. Nonsense</p><p>3.What is the core requirement for a business blockchain?<br>a. Technical services, business services and solution<br>b. Shared ledger, smart contract, privacy and trust<br>c. A new cryptocurrency<br>d. Optimized cryptographic mining</p><p>4.How can a blockchain business network help the diamond wholesale and retail industry?<br>a. Can use cognitive tools to analyze customer preferences<br>b. Can prevent the injection of illicit diamonds in the supply chain<br>c. Can cut diamonds for studying more thoroughly<br>d. Can trace diamond history</p><p>5.Which of the following statements is false?<br>a. Blockchain provides a smart contract feature that can be used to model assets of any description<br>b. Blockchain adds a cognitive analytics capability to the asset supply chain<br>c. Blockchain captures a record of every committed transaction in chronological order<br>d. Blockchain can help provide provenance for an asset</p><p>6.What is the appropriate use of business blockchain?<br>a. A more efficient transaction processing system across a business network<br>b. To make low value, high volume micro payment systems more efficient<br>c. Modern, cognitive and transformational fabric for the 21st century and beyond<br>d. None of these</p><p>7.Which one is NOT a key concept of Blockchain?<br>a. Distributed shared ledger<br>b. Smart contracts<br>c. Error sensitiveness<br>d. Cryptography</p><p>8.The components of a VR (Virtual Reality) System do not include ( ).<br>a. Simulation Processor<br>b. Accelerating Processor<br>c. Rendering Processor<br>d. World Database</p><p>9.Augmented reality (AR) is a technology that layers computer-generated enhancements atop an existing reality in order to make it more meaningful through the ability to interact with it.<br>a. True<br>b. Possible<br>c. False<br>d. Nonsense</p><p>10.Comparing real and virtual world, light entering the eyes is the result of natural reflection from all angles.<br>a. True<br>b. Possible<br>c. False<br>d. Nonsense</p><p>答案：</p><table><thead><tr><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">C</td><td align="center">B</td><td align="center">D</td><td align="center">B</td><td align="center">A</td><td align="center">C</td><td align="center">B</td><td align="center">A</td><td align="center">C</td></tr></tbody></table><h1 id="Quiz6"><a href="#Quiz6" class="headerlink" title="Quiz6"></a>Quiz6</h1><p>1.Which of the following statements may NOT be right?<br>a. Machine learning refers to a system capable of the autonomous acquisition and integration of knowledge<br>b. Learning is constructing or modifying representations of what is being experienced<br>c. Machine learning is primarily concerned with the accuracy and effectiveness of the computer system.<br>d. In Deep Learning approach, each neuron implements a relatively complicated mathematical function.</p><p>2.Which one of the following statements is NOT correct?<br>a. Neural Network needs long time for training.<br>b. Neural Network has a high tolerance to noisy and incomplete data<br>c. Neural Network cannot work with data in the range of (0,1) or (-1,1)<br>d. Neural Network is biologically motivated approach to machine learning</p><p>3.Which one of the following statements is NOT correct?<br>a. In Neural Network Learning, the algorithms iteratively adjust weights to reduce error (difference between network output and target output)<br>b. In Neural Networks, the destructive algorithms take a maximal network and prunes unnecessary layers nodes and connections during training.<br>c. In Neural Networks, the results get better with more data + bigger models + more computation<br>d. In Neural Networks, a neuron performs a generally linear operation on the result</p><p>4.IBM Watson is a massively parallel probabilistic evidence-based architecture, using a high-end system of ( ).<br>a. Intel x86 platform<br>b. IBM Power7 platform<br>c. DEC Alpha cluster running under OpenVMS<br>d. IBM Mainframe platform</p><p>5.In cognitive system, the decision making as learning from an expert, excludes<br>a. Asks natural language question, understands the question<br>b. Finds documents containing keywords, delivers the documents based on popularity<br>c. Produces possible answers based on evidence<br>d. Analyzes evidence, computes confidence, delivers response, evidence and confidence</p><p>6.Which one of the following statements is NOT correct?<br>a. Cognitive computing involves self-learning systems that use data mining, pattern recognition and natural language processing to mimic the way the human brain works<br>b. A confidence score is the quantitative value produced by a cognitive system representing the merit of a decision after evaluating multiple options<br>c. Predictive analytics is a business process and a set of related technologies that are not concerned with the prediction of future possibilities and trends<br>d. Cognitive systems play the role of an assistant – albeit one who is tireless, can consume vast amounts of structured and unstructured information, can reconcile ambiguous and even self-contradictory data, and can learn</p><p>7.Which one of the following statements is NOT correct?<br>a. Watson can consume insights from Big Data for advanced analysis<br>b. Natural Language is explicit, little contextual, and often precise<br>c. Watson uses the Apache Hadoop open framework to distribute the workload for loading information into memory<br>d. Watson’s APIs are the cognitive building blocks that harness data</p><p>8.What may NOT be the capability of cognitive computing systems?<br>a. Provide expert assistance by developing deep domain insights and bringing this information to people in a timely, natural and usable way<br>b. Provide decision-making functionality that is evidence-based and continually evolve based on new information, outcomes and actions<br>c. Provide professional judgement and services as the replacement of human experts such as medical doctors in hospitals<br>d. Provide insights that perhaps could not be discovered by even the most brilliant human beings, through vast amounts of information available around the world</p><p>9.In comparing with programmable systems, the cognitive system is NOT ( ).<br>a. Data-Centric<br>b. Statistical Analysis<br>c. Scale up / out<br>d. Automated Systems / workload management</p><p>10.What is the third era of computing in IBM’s vision?<br>a. single-purpose calculation<br>b. cloud computing<br>c. cognitive computing<br>d. programmable systems</p><p>答案：</p><table><thead><tr><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">D</td><td align="center">C</td><td align="center">D</td><td align="center">B</td><td align="center">B</td><td align="center">C</td><td align="center">B</td><td align="center">C</td><td align="center">C</td><td align="center">C</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象模型的七要素</title>
      <link href="/2021/03/17/ruan-jian-gong-cheng/mian-xiang-dui-xiang/dui-xiang-mo-xing-de-qi-yao-su/"/>
      <url>/2021/03/17/ruan-jian-gong-cheng/mian-xiang-dui-xiang/dui-xiang-mo-xing-de-qi-yao-su/</url>
      
        <content type="html"><![CDATA[<h1 id="对象模型的主要要素"><a href="#对象模型的主要要素" class="headerlink" title="对象模型的主要要素"></a>对象模型的主要要素</h1><p><strong>所谓“主要”，指的是如果一个模型不具有这些元素之一，就不是面向对象的。</strong></p><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><blockquote><p>抽象是人类处理复杂性的基本方式。</p></blockquote><blockquote><p>抽象描述了一个对象的基本特征，可以将这个对象与所有其他类型的对象区分开来，因此提供了清晰定义的概念边界，它与观察者的视角有关。</p></blockquote><p>抽象关注一个对象的外部视图，所以可以用来分离对象的基本行为和它的实现。</p><p>对于给定的问题域决定一组正确的抽象，就是面向对象设计的核心问题。</p><blockquote><p>从那些准确地为问题域实体建模的对象到那些实际上没有什么理由存在的对象，存在着一系列的抽象：</p><ul><li>实体抽象：一个对象，代表了问题域或解决方案域实体的一个有用的模型。</li><li>动作抽象：一个对象，提供了一组通用的动作，所有的这些操作都执行同类的功能。</li><li>虚拟机抽象：一个对象，集中了某种高层控制所用到的所有操作或者这些操作将利用某种更底层的操作集。</li><li>偶然抽象：一个对象，封装了一组互相间没有关系的操作。</li></ul></blockquote><p>抽象思想的核心是不变性的概念。<br>不变量是某种布尔条件，它的值必须保持不变。<br>对于对象的每个操作，我们可以定义“前置条件”（操作假定的不变量）和“后置条件”（操作满足的不变量），违反一个不变量将会破坏一个抽象相关的契约。<br>如果违反了前置条件，则说明客户没有完成属于它的那部分责任，因此服务器不能可靠地执行；如果违反了后置条件，则说明服务器没有完成属于它的那部分责任，因此客户不能再信任服务器的行为。<br>出现异常表示某个不变量没有满足或者不能满足。某些语言允许抛出异常，这样就可以终止处理并向其他对象报告问题，然后这些对象就可以捕捉异常并解决问题。</p><p>所有的抽象都有静态和动态属性。</p><p>没有对象是孤立的，每个对象都与其他对象协作，实现某些行为。这些对象如何协作的设计决策，定义了某种抽象的边界，从而也定义了每个对象的责任和协议。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>对象的抽象应该优先于它的实现被确定。<br>当选择了一种实现之后，它就应该作为这种抽象后面的秘密，对大多数客户隐藏，因此需要封装。</p><p>抽象和封装是互补的概念。<br>抽象关注的是对象可以观察到的行为，而封装关注的是这种行为的实现。封装通常是通过信息隐藏来实现的，当然，并不只是数据隐藏。信息隐藏是将那些不涉及对象本质特征的秘密都隐藏起来的过程。通常，对象的结构是隐藏的，其实现方法也是隐藏的。</p><blockquote><p>复杂系统的每一部分都不应该依赖于其他部分的细节。</p></blockquote><blockquote><p>抽象帮助人们思考他们做什么。<br>封装可以让程序员借助最少的工作进行可靠的修改。</p></blockquote><p>封装在不同的抽象之间提供了明确的边界，因此导致了清晰的分离关注。<br>一个抽象上的对象应该看不到较低抽象层次上的实现细节。</p><blockquote><p>要让抽象能工作起来，就必须将实现封装起来。</p></blockquote><p>每个类必须有两部分：一个接口和一个实现。</p><ul><li>类的接口描述了它的外部视图，包含了这个类的所有实例的共同行为的抽象。通过类的接口，我们能知道客户可以对这个类的所有实例做哪些假定。</li><li>类的实现包括抽象的表示以及实现期望行为的机制。实现封装了细节，客户不能对这些细节做任何假定。</li></ul><blockquote><p>封装是一个过程，它分隔构成抽象的结构和行为的元素。<br>封装的作用是分离抽象的概念接口及其实现。</p></blockquote><p>明智的封装使可能改变的设计决策局部化。随着系统的演进，开发者可能会发现，在实际使用过程中，某种操作花的时间超过了可接受的范围，某些对象使用的空间超过了可用的空间。此时，对象的表示方法常常会改变，这样就可以采用更高效的算法，或者通过计算而不是存储某些数据来优化空间的使用。抽象让我们既能改变表示方法，同时又不影响其客户，这就是封装的根本好处。</p><p>隐藏是一个与封装相关的概念：在一个抽象层次隐藏起来的东西，在另一个抽象层次里可能代表了外部视图。对象的内部表示方法可能被揭示出来，但是绝大多数情况下，只有当这个抽象的创造者显式地暴露出实现，并且客户愿意接受由此而带来的额外的复杂性时，才会这样做。所以，封装并不能阻止开发者做蠢事。</p><blockquote><p>隐藏是为了防止事故，而不是防止欺骗。</p></blockquote><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><blockquote><p>模块化将程序分为一些模块，这些模块可以独立地编译，但又与其他的模块有联系。</p></blockquote><blockquote><p>模块间的联系是模块相互之间所做出的假定。</p></blockquote><p>大多数语言将模块作为一个独立的概念，它们也区分模块的接口和它们的实现。<br>模块化和封装是密不可分的。</p><p>对于一个给定问题确定一组正确的模块，这与决定一组正确的抽象的难度差不多。</p><p>模块作为一种物理容器，我们在其中声明逻辑设计中的类和对象。</p><p>对很小的问题来说，开发者可能决定将所有的类和对象都声明在同一个包中。<br>对于稍微有点实际意义的软件来说，更好的解决方案是将逻辑上相关的类和对象放在同一个模块中，只暴露出其他模块必须看到的元素。<br>一旦模块划分不当，信息隐藏可能造成相反的效果，随意的模块化有时候比不实现模块化还糟糕。</p><p>开发者必须平衡好封装抽象的愿望以及让其他模块看到某些抽象的需要。</p><h2 id="层次结构"><a href="#层次结构" class="headerlink" title="层次结构"></a>层次结构</h2><p>一组抽象常常构成一个层次结构，通过在设计中确定这些层次结构，可能会极大地简化对系统的理解。</p><blockquote><p>层次结构是抽象的一种分级或排序。</p></blockquote><p>复杂的OO系统中，最重要的两种层次结构是类结构和对象结构。</p><p>类的层次结构包含继承、聚合等。</p><h1 id="对象模型的次要要素"><a href="#对象模型的次要要素" class="headerlink" title="对象模型的次要要素"></a>对象模型的次要要素</h1><p><strong>所谓“主要”，指的是这些要素是对象模型的重要组成部分，但不是本质的。</strong></p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><blockquote><p>一个类型是关于结构或行为属性的准确描述，一组实体共享这些属性。</p></blockquote><blockquote><p>类型⇔类</p></blockquote><blockquote><p>类型是关于一个对象的类的强制规定，如此，不同类型的对象不能互换使用，或者至少它们的互换使用收到非常严格的限制。</p></blockquote><p>某种编程语言可以是强类型、弱类型甚至无类型的，不影响它们可能是面向对象的。<br>类型匹配的概念是类型概念的核心。<br>强类型使得可以利用编程语言来执行某些设计决策，可以保证系统在复杂度不断增长时还能保持特定的关联，但它引入了语义上的依赖关系。</p><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>并发可分为重量级并发和轻量级并发：</p><ul><li>重量级并发：重量级进程由目标OS独立管理，具有自己的地址空间。</li><li>轻量级并发：轻量级进程通常与其他轻量级进程一起处于单个OS的进程之内，共享地址空间。</li></ul><p>设计一个大型并发系统必须充分考虑死锁、活锁、饥饿、<a href="https://blankspace.blog.csdn.net/article/details/113484279">竞争条件</a>等问题。</p><blockquote><p>在更高层次的抽象中，通过将并发隐藏在可复用的抽象中，OOP可以减轻大多数程序员在并发问题上的负担。</p></blockquote><blockquote><p>对象模型适合于分布式系统，因为隐式地定义了发布和移动的单元以及实体的通信。</p></blockquote><blockquote><p>并发是一种属性，它区分了主动对象和非主动对象。</p></blockquote><p>在并发的情况下，仅定义对象的方法是不够的，还必须确保这些方法的语义在多个控制线程的情况下仍然有效。</p><h2 id="持久"><a href="#持久" class="headerlink" title="持久"></a>持久</h2><blockquote><p>持久是对象的一种属性，利用这种属性，对象跨越时间和空间而存在。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的本质</title>
      <link href="/2021/03/17/ruan-jian-gong-cheng/mian-xiang-dui-xiang/dui-xiang-de-ben-zhi/"/>
      <url>/2021/03/17/ruan-jian-gong-cheng/mian-xiang-dui-xiang/dui-xiang-de-ben-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="对象的本质"><a href="#对象的本质" class="headerlink" title="对象的本质"></a>对象的本质</h1><blockquote><p>对象是一个具有状态、行为和标识符的实体，结构和行为类似的对象被定义在它们共同的类中。</p></blockquote><blockquote><p>对象$\Leftrightarrow$实例</p></blockquote><h1 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h1><p>操作一个对象的次序是重要的，这种行为依赖事件或依赖时间的原因是对象内部存在的状态。</p><blockquote><p>对象的状态包括这个对象的所有属性（通常是静态的）以及每个属性当前的值（通常是动态的）。</p></blockquote><p>属性是一种内在或独特的特征、特点、品质或特性，使一个对象区别于别的对象。<br>属性通常是静态的，因为这样的特征是不可更改的，是对象的本质。</p><p>所有的对象都有某种值，这个值可能是一个简单的数值，也可能代表另一个对象。<br>当对象的值是数值时，这是不受时间影响的、不可变化的、不可实例化的。<br>当对象的值是对象时，这是有存在时间的、可以变化的、可以实例化的，可以被创建、销毁和共享。</p><p>每个对象都有状态，这意味着每个对象都会在物理世界或计算机内存中占据一定的空间。</p><p>系统中的所有对象都封装了某种状态，系统中所有状态都由对象所封装。封装一个对象的状态只是开始，但并不足以让我们刻画出在开发过程中发现的这种抽象的全部含义。处于这个原因，必须考虑对象的行为。</p><p>同一个类的不同对象之间，一个对象不会与其他对象共享空间，虽然它们都有相同的属性，它们的状态具有共同的表现形式。</p><p>与暴露对象的状态相比，封装对象的状态是一项好的工程实践。</p><h1 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h1><blockquote><p>行为是对象在状态改变和消息传递方面的动作和反应的方式。</p></blockquote><p>对象的行为代表了它外部可见的活动。</p><p>操作是某种动作，一个对象对另一个对象执行这个操作，目的是获得反应。<br>Java语言中操作被称为方法，C++语言的操作被称为成员函数，Smalltalk语言的操作称为一个对象向另一个对象传递消息。</p><blockquote><p>操作$\Leftrightarrow$消息传递</p></blockquote><p>消息传递只是定义对象行为的一个方面，且对象的行为会受到其状态的影响。</p><blockquote><p>一个对象的状态代表了它的行为累积效果。</p></blockquote><p>很多对象没有静态状态，它们的状态包含了一些属性，这些属性的值在对象活动时被修改并被查询。一个对象的行为包括了其操作的总和。</p><p>一个操作代表了一个类提供给它对象的一种服务。最常见的五种操作：</p><ul><li>公共操作：<ol><li>修改操作：更改一个对象的状态的操作。</li><li>选择操作：访问一个对象的状态但并不更改这个状态的操作。</li><li>遍历操作：以一种定义良好的方式访问一个对象的所有部分的操作。</li></ol></li><li>常见操作：<ol><li>构造操作：创建一个对象并初始化它的状态的操作。</li><li>析构操作：释放一个对象的状态并销毁对象本身的操作。</li></ol></li></ul><p>Java只有构造操作，析构交给GC进行；C++支持构造操作和析构操作。</p><p>一个对象的所有方法共同构成了它的协议。<br>一个协议定义了对象允许的行为的封装，构成了这个对象完整的静态视图和动态视图。对大多数有用的对象来说，将这个较大的协议分成逻辑上的行为分组是有意义的。这些分组划分了对象的行为空间，表明了一个对象可以扮演的角色。<br>角色是一个对象戴上的一个面具，它定义了一种抽象与它的客户之间的契约。</p><blockquote><p>责任意味着表达对象的一种目标以及它在系统中的位置。<br>一个对象的责任是它为支持的所有契约提供的全部服务。</p></blockquote><p>一个对象的状态和行为共同决定了这个对象可以扮演的角色，这又实现了这种抽象的责任。</p><p>很多对象在它们的生命周期中扮演着许多不同的角色。<br>对象扮演的角色是动态的，同时又是互斥的。</p><p>我们常常从检查对象扮演的不同角色开始分析问题。在设计时，我们细化这些角色，设计出特定的操作，实现每个角色的责任。</p><p>对象中存在状态，这意味着操作调用的次序非常重要。其实，对象的行为可以通过一个等价的<a href="https://blankspace.blog.csdn.net/article/details/114580869">有限状态机</a>来描述。</p><p>主动的对象具有自己的控制线程，而被动的对象则没有。<br>主动的对象通常是自动的，这意味着它们不需要其他对象操作，就能表现出一些行为；被动对象则不是主动的，只有在显式地调用它时，才会发生状态变化。<br>系统中的主动对象是控制的中心。如果并发系统包含多个控制线程，则通常会有多个主动对象；对于串行系统，通常至多有一个主动对象，可能由这个主要的对象负责一切，控制也可能分散在系统的被动对象中。</p><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><blockquote><p>标识符是一个对象的属性，它区分这个对象和其他所有的对象。</p></blockquote><blockquote><p>大多数程序设计语言使用变量名来区分临时对象，混淆了定址能力和标识符。<br>大多数数据库系统使用标识符主键来区分持久对象，混淆了数据值和标识符。<br>不能区分对象的名称和对象本身，这点导致了面向对象编程中的许多错误。</p></blockquote><p>维护创建的对象的标识符非常重要，这种标识符非常容易被丧失且无法恢复。</p><p>每个对象的唯一标识符是在对象的整个生命周期都被保持的，即使它的状态改变时也是如此。</p><p>一个对象可能有很多别名。<br>如$p_{1}$和$p_{2}$均指向$obj_{1}$，通过$p_{1}$修改$obj_{1}$的属性值则$p_{2}$指向的对象也发生了改变，这就是结构共享。<br>结构共享是面向对象编程的许多问题的根源。如果没有意识到通过别名来操作一个对象的副作用，常常会导致内存泄漏、非法内存访问甚至更糟糕的、未预期的状态改变。<br>如果我们销毁$p_{1}$所指向的对象$obj_{1}$，则$p_{2}$的值就没有意义了，$p_{2}$将成为悬空指针。<br>如果$p_{2}$原本指向$obj_{2}$，后来指向$obj_{1}$，则$obj_{2}$不具有名称，既没有直接名称也没有间接名称，JVM的GC机制可能会将其回收，但C++则会形成内存泄漏。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解行列式的基本方法</title>
      <link href="/2021/03/16/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/jie-xing-lie-shi-de-ji-ben-fang-fa/"/>
      <url>/2021/03/16/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/jie-xing-lie-shi-de-ji-ben-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="初等行变换化三角行列式"><a href="#初等行变换化三角行列式" class="headerlink" title="初等行变换化三角行列式"></a>初等行变换化三角行列式</h1><p>利用运算$r_{i}+kr_{j}$把行列式化为上三角形行列式，从而算得行列式的值。<br>化零时一般尽量选含有1的行（列）及含零较多的行（列）；若没有1，则可适当选取便于化零的数，或利用行列式性质将某行（列）中的某数化为1；若所给行列式中元素间具有某些特点，则应充分利用这些特点，应用行列式性质，以达到化为三角形行列式之目的。<br>$\begin{vmatrix} 1 &amp; -1 &amp; 2 &amp; -3 &amp; 1 \ -3 &amp; 3 &amp; -7 &amp; 9 &amp; -5 \ 2 &amp; 0 &amp; 4 &amp; -2 &amp; 1 \ 3 &amp; -5 &amp; 7 &amp; -14 &amp; 6 \ 4 &amp; -4 &amp; 10 &amp; -10 &amp; 2 \end{vmatrix}$</p><h1 id="利用Vandermonde行列式"><a href="#利用Vandermonde行列式" class="headerlink" title="利用Vandermonde行列式"></a>利用Vandermonde行列式</h1><p>利用范德蒙行列式计算行列式，应根据范德蒙行列式的特点，将所给行列式化为范德蒙行列式，然后根据范德蒙行列式计算出结果。<br>$\begin{vmatrix} 1 &amp; 1 &amp; \ldots &amp; 1 \ 2 &amp; 2^{2} &amp; \ldots &amp; 2^{n} \ 3 &amp; 3^{2} &amp; \ldots &amp; 3^{n} \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \ n &amp; n^{2} &amp; \ldots &amp; n^{n} \end{vmatrix}$</p><h1 id="降阶法"><a href="#降阶法" class="headerlink" title="降阶法"></a>降阶法</h1><p>利用行列式的性质将所给行列式的某行（列）化成只含有一个非零元素，然后按此行（列）展开，每展开一次，行列式的阶数可降低1阶，如此继续进行，直到行列式能直接计算出来为止（一般展开成二阶行列式）。这种方法对阶数不高的数字行列式比较适用。<br>$\begin{vmatrix} a &amp; b &amp; c &amp; d \ b &amp; a &amp; d &amp; c \c &amp; d &amp; a &amp; b \ d &amp; c &amp; b &amp; a \end{vmatrix}$</p><h1 id="拆分成行列式之和或积"><a href="#拆分成行列式之和或积" class="headerlink" title="拆分成行列式之和或积"></a>拆分成行列式之和或积</h1><p>$\begin{vmatrix} \sin{2\alpha} &amp; \sin{(\alpha+\beta)} &amp; \sin{(\alpha+\gamma)} \ \sin{(\beta+\alpha)} &amp; \sin{2\beta} &amp; \sin{(\beta+\gamma)} \ \sin{(\gamma+\alpha)} &amp; \sin{(\gamma+\beta)} &amp; \sin{2\gamma}  \end{vmatrix}$</p><h1 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h1><p>利用行列式的性质把所给$n$阶行列式$D_{n}$用同样形式的$n-1$阶行列式表示出来，建立了$D_{n}$与$D_{n-1}$之间的递推关系。有时，还可以把给定的$n$阶行列式$D_{n}$用同样形式的比$n-1$阶更低阶的行列式表示，建立比$n-1$阶更低阶行列式之间的递推关系。<br>$\begin{vmatrix} a+x_{1} &amp; a &amp; \ldots &amp; a \ a &amp; a+x_{2} &amp; \ldots &amp; a \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \ a &amp; a &amp; \ldots &amp; a+x_{n} \end{vmatrix}$</p><h1 id="数学归纳法"><a href="#数学归纳法" class="headerlink" title="数学归纳法"></a>数学归纳法</h1><p>一般来讲，当行列式已告诉其结果，而要我们证明与自然数有关的结论时，可以考虑用数学归纳法来证明。如果未告诉其他结果，也可先猜想其结果，然后用数学归纳法证明其猜想结果成立。<br>$\begin{vmatrix} \cos\alpha &amp; 1 &amp; 0 &amp; \ldots &amp; 0 &amp; 0 \ 1 &amp; 2\cos\alpha &amp; 1 &amp; \ldots &amp; 0 &amp; 0 \ 0 &amp; 1 &amp; 2\cos\alpha &amp; \ldots &amp; 0 &amp; 0 \ \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots \ 0 &amp; 0 &amp; 0 &amp; \ldots &amp; \ddots &amp; 1 \ 0 &amp; 0 &amp; 0 &amp; \ldots &amp; 1 &amp; 2\cos\alpha \end{vmatrix}=\cos{n\alpha}$</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵微积分基础公式</title>
      <link href="/2021/03/13/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/ju-zhen-wei-ji-fen-ji-chu-gong-shi/"/>
      <url>/2021/03/13/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/ju-zhen-wei-ji-fen-ji-chu-gong-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="矩阵极限"><a href="#矩阵极限" class="headerlink" title="矩阵极限"></a>矩阵极限</h1><p>$\lim\limits_{k\to+\infty}{a\textbf{A}^{(k)}+b\textbf{B}^{(k)}}=a\textbf{A}+b\textbf{B}$</p><p>$\lim\limits_{k\to+\infty}{\textbf{A}^{(k)}\textbf{B}^{(k)}}=\textbf{A}\textbf{B}$</p><p>$\lim\limits_{k\to+\infty}{(\textbf{A}^{(k)})^{-1}}=\textbf{A}^{-1}$</p><h1 id="矩阵级数"><a href="#矩阵级数" class="headerlink" title="矩阵级数"></a>矩阵级数</h1><p>$\sum\limits_{k=0}^{\infty}{\textbf{A}^{(k)}}=\textbf{A}^{(0)}+\textbf{A}^{(1)}+\textbf{A}^{(2)}+\cdots+\textbf{A}^{(k)}+\cdots$</p><p>$\textbf{S}^{(k)}=\textbf{A}^{(0)}+\textbf{A}^{(1)}+\textbf{A}^{(2)}+\cdots+\textbf{A}^{(k)}$</p><p>$\sum\limits_{k=0}^{\infty}{(\textbf{A}^{(k)}\pm\textbf{B}^{(k)})}=\textbf{S}\pm\textbf{S}’$</p><p>$\sum\limits_{k=0}^{\infty}{\mu\textbf{A}^{(k)}}=\mu\textbf{S}$</p><h1 id="矩阵函数"><a href="#矩阵函数" class="headerlink" title="矩阵函数"></a>矩阵函数</h1><p>若$\textbf{AB}=\textbf{BA}$，则$e^{\textbf{A}}\cdot{e^{\textbf{B}}}=e^{\textbf{B}}\cdot{e^{\textbf{A}}}=e^{\textbf{A}+\textbf{B}}$</p><p>$e^{i\textbf{A}}=\cos{\textbf{A}}+i\sin{\textbf{A}}$</p><p>$\cos{\textbf{A}}=\frac{1}{2}(e^{i\textbf{A}}+e^{-i\textbf{A}})$</p><p>$\sin{\textbf{A}}=\frac{1}{2i}(e^{i\textbf{A}}-e^{-i\textbf{A}})$</p><p>$\cos{(-\textbf{A})}=\cos{\textbf{A}}$</p><p>$\sin{(-\textbf{A})}=-\sin{\textbf{A}}$</p><p>若$\textbf{AB}=\textbf{BA}$，则$\cos(\textbf{A}+\textbf{B})=\cos{\textbf{A}}\cos{\textbf{B}}-\sin{\textbf{A}}\sin{\textbf{B}}$</p><p>若$\textbf{AB}=\textbf{BA}$，则$\cos{2\textbf{A}}=\cos^{2}{\textbf{A}}-\sin^{2}{\textbf{A}}$</p><p>若$\textbf{AB}=\textbf{BA}$，则$\sin(\textbf{A}+\textbf{B})=\sin{\textbf{A}}\cos{\textbf{B}}+\cos{\textbf{A}}\sin{\textbf{B}}$</p><p>若$\textbf{AB}=\textbf{BA}$，则$\sin{2\textbf{A}}=2\sin{\textbf{A}}\cos{\textbf{A}}$</p><h1 id="矩阵求导"><a href="#矩阵求导" class="headerlink" title="矩阵求导"></a>矩阵求导</h1><p>$\textbf{A}(t)$为常数矩阵$\Leftrightarrow$$\textbf{A}’(t)=0$</p><p>$\frac{d}{dt}{(\textbf{A}(t)\pm\textbf{B(t)})}=\textbf{A}’(t)\pm\textbf{B}’(t)$</p><p>$\frac{d}{dt}{(k(t)\textbf{A(t)})}=k’(t)\textbf{B}(t)+k(t)\textbf{B}’(t)$</p><p>$\frac{d}{dt}{(\textbf{A}(t)\textbf{B(t)})}=\textbf{A}’(t)\textbf{B}(t)+\textbf{A}(t)\textbf{B}’(t)$</p><p>$\frac{d}{dt}{\textbf{A}^{-1}(t)}=-\textbf{A}^{-1}(t)\textbf{A}’(t)\textbf{A}^{-1}(t)$</p><p>设$t=f(x)$，则$\frac{d}{dx}{\textbf{A}(t)}=\frac{d}{dt}{\textbf{A}(t)}f’(x)=f’(x)\frac{d}{dt}{\textbf{A}(t)}$</p><p>$\frac{d^{k}{\textbf{A}(t)}}{dt}=\frac{d}{dt}{(\frac{d^{k-1}{\textbf{A}(t)}}{dt^{k-1}})}$</p><p>$\frac{d}{dt}{tr\textbf{A}}=tr\frac{d\textbf{A}}{dt}$</p><p>$\frac{df}{d\textbf{x}}=(\frac{\partial{f}}{\partial{x_{1}}},\frac{\partial{f}}{\partial{x_{2}}},\cdots,\frac{\partial{f}}{\partial{x_{n}}})^{T}$</p><p>$\frac{df}{d\textbf{A}}=(\frac{\partial{f}}{\partial{a_{ij}}})<em>{m\times{n}}=\begin{bmatrix} \frac{\partial{f}}{\partial{a</em>{11}}} &amp; \ldots &amp; \frac{\partial{f}}{\partial{a_{1n}}} \ \vdots &amp;  &amp; \vdots \ \frac{\partial{f}}{\partial{a_{m1}}} &amp; \ldots &amp; \frac{\partial{f}}{\partial{a_{mn}}} \end{bmatrix}$</p><p>$\frac{d[f(\textbf{x})\pm{h(\textbf{x})}]}{d\textbf{x}}=\frac{df(\textbf{x})}{d\textbf{x}}\pm\frac{dh(\textbf{x})}{d\textbf{x}}$</p><p>$\frac{df(\textbf{x})h(\textbf{x})}{d\textbf{x}}=\frac{df(\textbf{x})}{d\textbf{x}}h(\textbf{x})+f(\textbf{x})\frac{dh(\textbf{x})}{d\textbf{x}}$</p><p>$\frac{d\textbf{x}^{T}\textbf{A}\textbf{x}}{d\textbf{x}}=2\textbf{A}\textbf{x}$</p><p>$A=I$，$f(x)=x_{1}^{2}+x_{2}^{2}+\cdots+x_{n}^{2}$，$\frac{df(\textbf{x})}{d\textbf{x}}=2\textbf{x}$</p><h1 id="矩阵微分"><a href="#矩阵微分" class="headerlink" title="矩阵微分"></a>矩阵微分</h1><p>$d(\textbf{F}\pm\textbf{G})=d\textbf{F}\pm{d\textbf{G}}$</p><p>$d(k\textbf{F})=kd\textbf{F}$</p><p>当$A$是常量矩阵时，$d\textbf{A}=0$</p><p>$d(\textbf{X}^{T})=(d\textbf{X})^{T}$</p><p>$d(tr\textbf{X})=tr(d\textbf{X})$</p><p>$d\textbf{F}=\sum\limits_{i=1}^{n}{\frac{\partial{\textbf{F}}}{\partial{x_{i}}}}dx_{i}$</p><p>若$\textbf{A}=\textbf{BC}$，则$d\textbf{A}=(\textbf{B})\textbf{C}+\textbf{B}(d\textbf{C})$</p><p>若$\textbf{A}=\textbf{A}<em>{1}+\textbf{A}</em>{2}+\cdots+\textbf{A}<em>{r}$，则$d\textbf{F}=(d\textbf{A}</em>{1})\textbf{A}<em>{2}\cdots\textbf{A}</em>{r}+\textbf{A}<em>{1}(d\textbf{A}</em>{2})\textbf{A}<em>{3}\cdots\textbf{A}</em>{r}+\cdots+\textbf{A}<em>{1}\textbf{A}</em>{2}\cdots\textbf{A}<em>{r-1}(d\textbf{A}</em>{r})$</p><p>$d(\textbf{α}^{T}\textbf{x})=\textbf{α}^{T}d\textbf{x}=(d\textbf{x})^{T}\textbf{α}$</p><p>$d(\textbf{Ax})=\textbf{A}d\textbf{x}$</p><p>$d(\textbf{x}^{T}\textbf{Ax})=\textbf{x}^{T}(\textbf{A}^{T}+\textbf{A})d\textbf{x}$</p><h1 id="矩阵积分"><a href="#矩阵积分" class="headerlink" title="矩阵积分"></a>矩阵积分</h1><p>$\int{\textbf{A}(t)dt}=\begin{bmatrix} \int{a_{11}(t)dt} &amp; \int{a_{12}(t)dt} &amp; \ldots &amp; \int{a_{1n}(t)dt} \ \vdots &amp; \vdots &amp;  &amp; \vdots \ \int{a_{n1}(t)dt} &amp; \int{a_{n2}(t)dt} &amp; \ldots &amp; \int{a_{nn}(t)dt} \end{bmatrix}$</p><p>$\int_{a}^{b}{\textbf{A}(t)dt}=\begin{bmatrix} \int_{a}^{b}{a_{11}(t)dt} &amp; \int_{a}^{b}{a_{12}(t)dt} &amp; \ldots &amp; \int_{a}^{b}{a_{1n}(t)dt} \ \vdots &amp; \vdots &amp;  &amp; \vdots \ \int_{a}^{b}{a_{n1}(t)dt} &amp; \int_{a}^{b}{a_{n2}(t)dt} &amp; \ldots &amp; \int_{a}^{b}{a_{nn}(t)dt} \end{bmatrix}$</p><p>$\int_{\varOmega}{\textbf{AB}d\varOmega}=(\int_{\varOmega}{\textbf{A}d\varOmega})\textbf{B}$</p><p>$\int_{\varOmega}{\textbf{BA}d\varOmega}=\textbf{B}(\int_{\varOmega}{\textbf{A}d\varOmega})$</p><h1 id="矩阵微分方程"><a href="#矩阵微分方程" class="headerlink" title="矩阵微分方程"></a>矩阵微分方程</h1><p>略</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可见性</title>
      <link href="/2021/03/12/ruan-jian-gong-cheng/mian-xiang-dui-xiang/ke-jian-xing/"/>
      <url>/2021/03/12/ruan-jian-gong-cheng/mian-xiang-dui-xiang/ke-jian-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Java可见性"><a href="#Java可见性" class="headerlink" title="Java可见性"></a>Java可见性</h1><p>Java提供了private、protected、public三个关键词用作访问控制符，表示四种可见性。访问控制符用于控制一个类的成员是否可以被其他类访问。</p><table><thead><tr><th align="center"></th><th align="center">当前类访问权限</th><th align="center">包访问权限(默认)</th><th align="center">子类访问权限</th><th align="center">公开访问权限</th></tr></thead><tbody><tr><td align="center">关键词</td><td align="center">private</td><td align="center"></td><td align="center">protected</td><td align="center">public</td></tr><tr><td align="center">同类可访问</td><td align="center">$√$</td><td align="center">$√$</td><td align="center">$√$</td><td align="center">$√$</td></tr><tr><td align="center">同包可访问</td><td align="center">$×$</td><td align="center">$√$</td><td align="center">$√$</td><td align="center">$√$</td></tr><tr><td align="center">子类可访问</td><td align="center">$×$</td><td align="center">$×$</td><td align="center">$√$</td><td align="center">$√$</td></tr><tr><td align="center">全局可访问</td><td align="center">$×$</td><td align="center">$×$</td><td align="center">$×$</td><td align="center">$√$</td></tr></tbody></table><ul><li>当前类访问权限：如果类里的属性、方法、构造器使用private修饰，则它只能在当前类的内部被访问。private最适合于修饰属性，因为比较符合“封装”的要求。</li><li>包访问权限(默认)：如果类里的属性、方法、构造器或一个类不使用任何访问控制符修饰，则它只能被相同包下的其他类访问。</li><li>子类访问权限：如果类里的属性、方法、构造器使用protected修饰，那么它既可以被同一个包里的其他类访问，也可以被不同包中的子类访问。用protected修饰，通常是希望子类重写该方法。</li><li>公开访问权限：如果类里的属性、方法、构造器或一个类使用public修饰，那么它可以被任何外部包下的类访问，前提是能够引入。</li></ul><p>访问控制符的使用原则：</p><ul><li>类里的绝大部分成员变量都应该使用private修饰，static修饰的类变量才应该采用public修饰。此外，有些只用于辅助实现该类的工具方法，工具方法也应该用private修饰。</li><li>如果某个类要用作其他类的父类，该类里包含的大部分方法可能仅希望被其子类重写，不想被外界调用，应该用protected修饰。</li><li>希望暴露出来给其他类自由调用的接口方法应该使用public修饰。构造器一般用public修饰，除了单例模式等情况。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPerimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="C-可见性"><a href="#C-可见性" class="headerlink" title="C++可见性"></a>C++可见性</h1><p>C++提供了private、protected、public访问级别。</p><table><thead><tr><th align="center">访问权限</th><th align="center">private</th><th align="center">protected</th><th align="center">public</th></tr></thead><tbody><tr><td align="center">同类可访问</td><td align="center">$√$</td><td align="center">$√$</td><td align="center">$√$</td></tr><tr><td align="center">子类可访问</td><td align="center">$×$</td><td align="center">$√$</td><td align="center">$√$</td></tr><tr><td align="center">全局可访问</td><td align="center">$×$</td><td align="center">$×$</td><td align="center">$√$</td></tr></tbody></table><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">Square</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-&gt;</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">get_perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">4</span> <span class="token operator">*</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">Square</span></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">checkRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>a <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Square</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-&gt;</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-&gt;</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">get_perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Python可见性"><a href="#Python可见性" class="headerlink" title="Python可见性"></a>Python可见性</h1><p>Python默认可见性是public的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b    <span class="token keyword">def</span> <span class="token function">get_perimeter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>a <span class="token operator">+</span> self<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前缀<code>__</code>可以表示private，若强行访问private成员，会出现<code>AttributeError: 'Rectangle' object has no attribute '...'</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__a <span class="token operator">=</span> a        self<span class="token punctuation">.</span>__b <span class="token operator">=</span> b    <span class="token keyword">def</span> <span class="token function">get_perimeter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__a <span class="token operator">+</span> self<span class="token punctuation">.</span>__b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装、继承、多态</title>
      <link href="/2021/03/12/ruan-jian-gong-cheng/mian-xiang-dui-xiang/feng-zhuang-ji-cheng-duo-tai/"/>
      <url>/2021/03/12/ruan-jian-gong-cheng/mian-xiang-dui-xiang/feng-zhuang-ji-cheng-duo-tai/</url>
      
        <content type="html"><![CDATA[<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>封装要求只能通过对象接口中的操作才能访问到对象的状态。如果强迫封装，它将带来高度的数据独立性，这样所封装的数据结构将来的变化就不会导致一定要修改已有的程序。</p><p>关于继承与封装，尽管它们同为面向对象的三大特性，但现实情况是，封装与继承和查询能力是正交的，它不见得与这两个特性一起折中考虑。<br>事实上，将所有的数据声明为private也是不现实的。</p><p>继承允许子类直接访问protected属性，它削弱了封装。当计算涉及不同类的对象时，可能要求这些不同的类彼此是friend的或者让元素具有包可见性，这就进一步破坏了封装。</p><p>封装是针对类的概念，不针对于对象。<br>事实上，大多数的OO程序设计环境中，一个对象不能对同一个类的另一个对象隐藏任何东西。</p><p>用户基于SQL访问数据库中的数据，期望在查询时直接查询属性，而不是被迫使用某些数据访问方法，否则会导致查询的表达更困难、更易出错。</p><p>设计应用时，应该使它们达到期望的封装水平，但还要与继承、数据库查询以及计算需求相权衡。</p><p>封装的优点：</p><ul><li>提高了安全性，防止一些误操作。 </li><li>提高了复用性，封装之后便于调用。 </li><li>信息隐藏，隐藏了实现细节。</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>实现继承也称子类化、代码继承或类继承，要求在子类中组合父类的特性，必要时允许新的实现来重载它们。</p><p>实现继承允许共享特性描述、代码复用以及多态性。</p><p>当使用泛化来建模时，必须清楚其中隐含了哪种继承。<br>接口继承的使用是安全的，因为它只涉及契约部分的继承即操作型构。</p><p>实现继承涉及代码的继承，即实现部分的继承。</p><p>继承的优点：</p><ul><li>继承可提高代码的复用性。 </li><li>继承可提高代码的稳定性。 </li><li>继承让类与类之间产生关系，是多态的前提。</li></ul><p>继承可能存在的弊端有：</p><ul><li>脆弱的基类问题：对基类的修改会影响到它所有的子孙类。</li><li>臃肿的子类问题：如果“尽可能地继承”而非“适时地继承”，子类可能会越来越臃肿庞大。</li><li>可能由不恰当使用带来不必要的复杂性：面向对象的语言支持各种构造，使用不当会引入许多不必要的复杂性。</li></ul><p>如果不注意控制和限制，实现继承将会弊大于利。</p><h2 id="扩展继承-√"><a href="#扩展继承-√" class="headerlink" title="扩展继承[√]"></a>扩展继承[√]</h2><p>继承的唯一恰当使用就是将继承作为类的增量式定义。<br>子类具有比父类更多的特性（属性和/或方法），子类是父类的一种，这就是扩展继承。</p><p>在扩展继承中，特性的重写要谨慎使用，应该只允许使特性更特殊化（如限制值的范围或使操作的实现更高效），而不改变特性的含义。如果重写改变了特性的含义，则子类对象就不能再替换父类对象了。</p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%B0%81%E8%A3%85%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81/1.png"></p><h2 id="限制继承-×"><a href="#限制继承-×" class="headerlink" title="限制继承[×]"></a>限制继承[×]</h2><p>在扩展继承中，用新的特性扩展子类的定义。<br>然而，有一些继承来的特性在子类中被禁止（被重写），因此使用继承作为一种限制机制也是可能的，这样的继承被称为限制继承。</p><p>限制继承是有问题的。<br>从泛化的观点看，子类没有包括父类的所有特性。倘若使用对象的人知道被重写（禁止）的特性的话，父类对象仍然能够被子类对象所替换。</p><p>在限制继承中，一个类的特性通过继承被用于实现另一个类。如果重写未做扩展，限制继承能够带来益处。但一般来说，限制继承会带来维护上的问题。通过将继承来的方法实现为空，即什么也不做，限制继承将可能完全禁止继承来的问题。</p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%B0%81%E8%A3%85%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81/2.png"></p><h2 id="方便继承-×"><a href="#方便继承-×" class="headerlink" title="方便继承[×]"></a>方便继承[×]</h2><p>在系统建模中，既不是扩展继承也不是限制继承的继承是不好的。<br>当两个或多个类具有相似的实现，但在这些类所表示的概念之间没有分类关系的时候，会出现这种继承。<br>任意选择一个类作为其他类的父类，这样的继承被称为方便继承。</p><p>方便继承是不恰当的，它在语义上不正确，导致了扩展式重写。<br>由于对象不再属于相似的类型，可替换性原则就无效了。</p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%B0%81%E8%A3%85%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81/3.png"></p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>封装 → 继承 → 多态这不单单是三个名词的简单罗列，更是一步步递进的关系。对于面 向对象的程序设计，封装是基础，继承是多态 的前提条件，三者逻辑顺序不可颠倒。</p><p>Java如果想实现多态必须存在以下几个条件才可以成功实现：</p><ul><li>继承：在多态的管理网中必须要有存在继承关系的子类和父类。 </li><li>重写：子类会针对父类中的一些特点方法进行自定义，后续在使用这些方法时会调用子类中重写的方法。 </li><li>向上转型：在多态当中需要把子类引用的对象赋值给到父类，只有这样做才能达到可以调用父类、子类方法的目的。</li></ul><p>满足了以上的几个条件，我们可以在同一个继承的结构中使用统一逻辑代码，进而去处理不同类别的对象，进而达到执行不同方法的目的。</p><p>多态的优点：</p><ul><li>提高了代码的维护性（继承保证）。 </li><li>提高了代码的扩展性（由多态保证）。</li></ul><p>多态和动态绑定可能存在的弊端有：</p><ul><li>通常不太可能在编译时确定运行时调用哪种具体的多态方法，因而很难确定引起故障的原因。</li><li>多态和动态绑定会对维护产生负面的影响，维护人员必须考虑可能调用的所有可能的方法，耗时耗力。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类的本质</title>
      <link href="/2021/03/11/ruan-jian-gong-cheng/mian-xiang-dui-xiang/lei-de-ben-zhi/"/>
      <url>/2021/03/11/ruan-jian-gong-cheng/mian-xiang-dui-xiang/lei-de-ben-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><p>类的概念和对象的概念是紧密交织在一起的，因为我们在谈论一个类对象时不得不提到它的类，但是类和对象偏偏又有着重要差别。</p><p>对象是存在于时间和空间中存在的具体实体，而类仅仅代表一种抽象，即一个对象的本质。</p><blockquote><p>类是一组对象，它们拥有共同的结构，共同的行为和共同的语义。</p></blockquote><p>没有共同的结构、共同的行为、共同的语义的对象不能被划分为一个类。</p><p>一个对象，不是一个类，是对应类的一个实例。</p><p>一个单独的对象是一个具体实体，在整个系统中扮演着某个角色，而类则记录了所有相关对象之间的共同结构和行为。由此得出，类在一种抽象上和它所有的客户建立起来一种协议，类的接口中记录了这些内容。<br>协议就好比一种契约，可以区分一个类的外部视图和内部视图。<br>类的外部视图通过对外暴露的接口体现，强调了抽象，隐藏了它的结构和行为的private信息，这个接口主要由所有的操作声明构成，这些操作适用于这个类的所有对象，也可能包括其他类、常量、变量和异常的声明。<br>类的内部接口则是它的内部实现，包含了类行为的private信息。<br>一个类的实现主要由类接口的定义域所有操作的实现组成。</p><p>对象的状态必须在它对应的类中有某种表现形式，所以通常会表示为常量或变量声明，作为类接口的protected或private部分。通过这种方式，一个类的所有实例的共同表示形式被封装起来，对这种修改的封装不会在功能上影响任何外部客户。</p><h1 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h1><p>实体类表示<strong>应用程序</strong>中的持久数据库对象。它不是数据库中的持久类。</p><p>称它们持久的原因是在应用程序终止之前，实体对象的最新映射会持久保存在数据库中。<br>如此，同一个应用程序或者其他应用程序的后续活动就可以再次获取这些实体对象，且只需要从数据库中重新装载实体对象到程序内存中即可。</p><h2 id="应用程序与持久数据库模型的关联"><a href="#应用程序与持久数据库模型的关联" class="headerlink" title="应用程序与持久数据库模型的关联"></a>应用程序与持久数据库模型的关联</h2><p>下图表示了PCBMER体系结构框架中的向下依赖原则(DDP)扩展了应用程序与持久数据库之间的通信。</p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%B1%BB%E7%9A%84%E6%9C%AC%E8%B4%A8/1.png"></p><p>资源子系统专门负责与数据库通信。所有来自应用程序的SQL查询和对存储过程的调用由资源类产生并传递给数据库服务器，数据库服务器返回所有的数据和结果在传递到实体子系统之前首先要传递到资源类。</p><p>实体子系统表示应用程序内存中的业务对象，必须仔细定义业务对象与对应数据库表记录之间的映射规则。</p><p>映射规则由中介者子系统使用，中介者负责管理应用程序的内存以及对象在内存与数据库之间的人和移动。也就是说，当控制类需要访问一个业务对象而事先没有该对象的句柄（引用）时，中介者子系统就是调用的第一个端口。这也意味着中介者子系统必须管理执行数据库访问和修改的业务事务。</p><h2 id="O-R映射的困难性"><a href="#O-R映射的困难性" class="headerlink" title="O-R映射的困难性"></a>O-R映射的困难性</h2><p>应用程序与数据库之间的映射是复杂的，主要有两方面的原因。</p><p>原因一是数据库的存储结构处理不了面向对象泛型，实际上是非面向对象结构（通常是关系表）到实体子系统类的转换。即使目标数据库就是一个对象数据库，数据库的特性也使得这个转换需要经过仔细的考虑。</p><p>原因二是数据库几乎都不是为单个应用程序设计的，需要能满足所有应用程序的最优数据库设计而不仅仅是只针对所考虑的应用程序。所有与该数据库相关的应用程序具有与它们一致的数据库结构。数据库设计人员应该考虑到未来，预测将来的应用程序对数据库的需求，并设计出满足这些需求的数据库。</p><h1 id="可变对象和不可变对象"><a href="#可变对象和不可变对象" class="headerlink" title="可变对象和不可变对象"></a>可变对象和不可变对象</h1><p>在面向对象的系统中，存在<strong>可变对象</strong>（mutable）和<strong>不可变对象</strong>（immutable）两种对象，本文基于<strong>Java</strong>语言进行对比分析。</p><p>顾名思义，可变对象是<strong>创建之后状态可以改变</strong>的对象，不可变对象则是<strong>创建之后状态不可改变</strong>的对象。</p><p>一个对象包含的内部使用的属性改变了，但从外部看对象的状态并没有改变，例如一个使用Memoization来缓存复杂计算结果的对象仍然被看作是不可变对象。</p><p>不可变对象有几个优点：</p><ul><li>线程安全</li><li>易于理解</li><li>比可变对象有更高的安全性</li></ul><p>在面向对象编程中，String以及其他的具体对象都被看作是不可变对象，以提高可读性和运行效率。<br>尽管String类声明中没有提供让它成为不可变对象的语法，但是String类没有提供方法去改变一个String包含的数据，而是返回一个新的对象，这就使得它是不可变的。</p><p>Java中关键字final用于声明原始数据类型和对象引用为不可变对象，但是它不能使对象本身变为不可变对象。</p><ul><li>原始数据类型变量（int, long, short等）定义之后还可以再重新赋值，可以使用final阻止这样的赋值。</li><li>仅仅使用final关键字还不能让引用类型（reference types）成为不可变对象，final只能阻止重新赋值。</li></ul><p>原始类型包装类（Integer、Long、Short、Double、Float、Character、Byte、Boolean）也都是不可变的。</p><p>在Python中，strings、tuples、numbers是不可更改的对象，而list、dict等则是可以修改的对象。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代和增量的开发周期</title>
      <link href="/2021/03/11/ruan-jian-gong-cheng/die-dai-he-zeng-liang-de-kai-fa-zhou-qi/"/>
      <url>/2021/03/11/ruan-jian-gong-cheng/die-dai-he-zeng-liang-de-kai-fa-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代增量"><a href="#迭代增量" class="headerlink" title="迭代增量"></a>迭代增量</h1><p><strong>迭代</strong>和<strong>增量</strong>都是软件工程的<strong>固有特性</strong>。</p><p>迭代和增量式的开发会以连续系列的发布版本来开发系统的功能，完成度不断增加。</p><p>发布版本可以是外部的（提供给客户），也可以是内部的（不提供给客户）。<br>最后的发布版本是一个外部发布版本，代表了最终产品系统。<br>要确定一个发布版本是内部的还是外部的，取决于整体生命周期的阶段。<br>在开发过程的早期，发布版本一般是内部的，主要的、可执行的发布版本由开发团队提供给质量保证团队进行测试，然后收集此版本的完整性、正确性、健壮性等信息。这种早期的信息收集有助于确定一些质量问题，这些质量问题将在后续的发布版本的开发中较早地得到解决。<br>在开发过程的后期，外部的发布版本可能更多一些，可执行的发布版将以受控的方式提供给特定的最终用户，进行$\alpha$测试、$\beta$测试等。所谓“受控”，指的是开发团队将小心地为每个发布版本设定期望值，并确定希望评估哪些方面。<br>一般来说，开发过程中，开发团队将有更多的内部发布版本，只有少数可执行的发布版本会被提交给外部人员。内部发布版本代表了系统的一种持续集成，并且在某些关键系统部分存在强制的约束。<br>值得注意的是，每次创建一个发布版本的动作，其实其成本是较高的。</p><p>在<strong>迭代增量</strong>的宏观过程中，一些科目是重复执行的。但是，迭代增量式开发不仅仅是一些列的迭代，它必须有一个整体的框架，此框架下，迭代的执行反映了项目的战略计划，驱动着每次迭代的目标。这样的框架可以由一系列定义良好的<strong>里程碑</strong>来提供，通过执行一次或多次迭代来实现每个里程碑的目标。每个里程碑处进行一次评估，以确定目标是否实现，如果评估满意，即可进入下一个阶段，去实现下一个里程碑。<br>里程碑确保了迭代取得进展，最终会收敛成一个<strong>解决方案</strong>，而不仅仅是不确定的迭代。它们不应该仅仅被看作是项目进度表上的一个日期，而应该被看成是质量或成熟度的关口，实现了这些里程碑就意味着项目已经达到了某个成熟度，对演进的计划、规格说明和完成的解决方案有了进一步的理解。<br>如果最初为某个里程碑设置的日期到了，但项目没有达到<strong>预期的成熟度或者理解程度</strong>，那么这个里程碑日期就延迟了。日期可以延迟，而里程碑实现与否不能以日期截止为判据。</p><p>在一次迭代过程中选择实现哪些功能，取决于对项目<strong>风险</strong>的缓解，最重要的风险优先处理。<br>作为一次迭代的结果，得到的<strong>经验和产物</strong>将应用于下一次迭代。<br>通过每次迭代，可以逐渐优化<strong>战略和战术决策</strong>，最后得到一个满足用户真实需求的解决方案，这个解决方案是简单、可靠、能适应变化的。<br>每次迭代都可以看作是一个较小但完整的瀑布模型。</p><p>迭代和增量的方式是大多数现代软件开发方法的核心，如<a href="https://blankspace.blog.csdn.net/article/details/123452979">极限编程XP</a>、<a href="https://blankspace.blog.csdn.net/article/details/123287693">Scrum</a>。<br>迭代和增量的方法非常适合面向对象的软件工程方法，在风险管理方面提供了一些优点。</p><h1 id="迭代增量开发的好处"><a href="#迭代增量开发的好处" class="headerlink" title="迭代增量开发的好处"></a>迭代增量开发的好处</h1><p>迭代增量开发的好处：</p><ul><li>迭代增量开发允许需求变更，每次迭代一组具体的需求。</li><li>迭代增量开发没有在项目结束时的“大爆炸式”集成工作，每次迭代都包含了这个版本中元素的集成，集成是渐进的、持续的。</li><li>风险会被尽早地关注到。</li><li>可以在早期针对竞争对手的动作实现对产品的战术改变。</li><li>架构的关键组件及早被建立起来，更容易确定可复用的组件和利用已有组件。</li><li>可以更早地发现缺陷并纠正。每次迭代都执行充分的测试，这样缺陷就可以及早被发现，并在下一次迭代过程中得到修正，而不是等到后期才发现。</li><li>鼓励团队成员在迭代中承担不同的角色，可以让项目人员的工作更有效。</li><li>每次迭代都让团队成员有机会从过去的经验中学习，一次迭代中的问题可以在后面的迭代中解决。</li><li>每次迭代都会对软件过程和组织方式等里面有效和无效的部分进行评估和反思，开发过程可以得到优化和改进。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gourmet咖啡系统建模与实现</title>
      <link href="/2021/03/11/ruan-jian-gong-cheng/mian-xiang-dui-xiang/gourmet-ka-pei-xi-tong-jian-mo-yu-shi-xian/"/>
      <url>/2021/03/11/ruan-jian-gong-cheng/mian-xiang-dui-xiang/gourmet-ka-pei-xi-tong-jian-mo-yu-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="Modeling-the-Gourmet-Coffee-System"><a href="#Modeling-the-Gourmet-Coffee-System" class="headerlink" title="Modeling the Gourmet Coffee System"></a>Modeling the Gourmet Coffee System</h1><h2 id="Prerequisites-Goals-and-Outcomes"><a href="#Prerequisites-Goals-and-Outcomes" class="headerlink" title="Prerequisites, Goals, and Outcomes"></a>Prerequisites, Goals, and Outcomes</h2><p><em><strong>Prerequisites</strong></em>: Before you begin this exercise, you need mastery of the following: </p><ul><li>UML<ul><li>Knowledge of class diagram notation</li></ul></li><li>Object-Oriented Design<ul><li>Knowledge of modeling concepts: <ul><li>Identifying classes </li><li>Identifying relationships between classes </li><li>Identifying class attributes </li><li>Identifying class methods</li></ul></li></ul></li></ul><p><em><strong>Goals</strong></em>: Reinforce your object-oriented design skills </p><p><em><strong>Outcomes</strong></em>: You will master the following skills: </p><ul><li>Produce a UML class diagram, from a specification, that shows: <ul><li>classes </li><li>attributes </li><li>methods </li><li>relationships</li></ul></li></ul><p><em><strong>Background</strong></em><br>This assignment asks you to model a coffee store application. </p><p><em><strong>Description</strong></em><br>Gourmet Coffee is a store that sells coffee from countries around the globe. It also sells coffee brewing machines（咖啡冲泡机） and other accessories for coffee consumption（咖啡消费配件）. The Gourmet Coffee System maintains a product catalog, processes orders, and tracks the store’s sales. </p><p>The catalog maintains the following information about the store’s products:</p><ul><li><p>Coffee </p><ul><li>Code </li><li>Description  </li><li>Price  </li><li>Country of origin </li><li>Type of roast  </li><li>Flavor </li><li>Aroma </li><li>Acidity </li><li>Body</li></ul></li><li><p>Coffee brewer  </p><ul><li>Code </li><li>Description </li><li>Price </li><li>Model of the brewer  </li><li>Type of the water supply: Pour-over or Automatic </li><li>Capacity: number of cups</li></ul></li><li><p>Coffee accessory  </p><ul><li>Code </li><li>Description </li><li>Price</li></ul></li></ul><p>The following tables show some of the products sold by Gourmet Coffee. </p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Gourmet%E5%92%96%E5%95%A1%E7%B3%BB%E7%BB%9F%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/1.png"><br><em>Figure 1 Coffee</em> </p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Gourmet%E5%92%96%E5%95%A1%E7%B3%BB%E7%BB%9F%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/2.png"><br><em>Figure 2 Coffee brewers</em></p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Gourmet%E5%92%96%E5%95%A1%E7%B3%BB%E7%BB%9F%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/3.png"><br><em>Figure 3 Coffee accessories</em></p><p>The Gourmet Coffee System processes orders. An order contains a list of products, their quantities, and the total cost. The following is an example of an order:</p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Gourmet%E5%92%96%E5%95%A1%E7%B3%BB%E7%BB%9F%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/4.png"><br><em>Figure 4 Order</em></p><p>In the Gourmet Coffee System, the user can:</p><ul><li>Display the catalog: lists the code and description of each product </li><li>Display a product </li><li>Display the current order: lists quantity, code, and price of each product in the current order, and the total of the order. </li><li>Add a product to the current order—if the specified product is already part of the order, this command will modify the quantity of that product </li><li>Remove a product from the current order </li><li>Register the sale of the current order—this command adds the order to the store’s sales and empties the current order </li><li>Display the sales: lists all the orders that have been sold</li></ul><p>Run the sample executable that is provided to learn more about the Gourmet Coffee System.</p><p><em><strong>Files</strong></em><br>Following is a sample executable of the Gourmet Coffee System.</p><ul><li>gourmet-coffee-sample-executable.jar — Download this file now. It is a sample executable.</li></ul><p><em><strong>Tasks</strong></em><br>These steps will guide you for completing this assignment:</p><ul><li>First, run the sample executable by issuing the following command at the command prompt:<br>C:&gt;java -jar gourmet-coffee-sample-executable.jar</li><li>Then, follow the technique described in page 1.2.5 Modeling Classes to model the Gourmet Coffee System. <ul><li>Identify the following:<ul><li>The classes </li><li>The association relationships (include direction, multiplicity, and association attribute) </li><li>The specialization/generalization relationships </li><li>The attributes of each class </li><li>The methods of each class</li></ul></li><li>Your class diagram should include:<ul><li>The class of the gourmet coffee application </li><li>The accessor methods </li><li>The mutator methods if are needed </li><li>For the collections: <ul><li>The methods to add and access elements </li><li>The methods to remove elements if are needed</li></ul></li><li>The methods that compute other values not included in the attributes.<br>Use Sun’s coding conventions when naming classes, methods, and attributes.</li></ul></li></ul></li><li>Use Eclipse, Violet, PowerPoint, or another tool of your choosing to draw a UML class diagram. </li><li>Save the UML class diagram in a SVG, GIF, or JPG format in a file named uml-gou-cof.</li></ul><p><em><strong>Submission</strong></em><br>Upon completion, submit only the SVG, GIF, or JPG file uml-gou-cof. The extension of this file will depend on the tool used to create the diagram. </p><h2 id="Product类"><a href="#Product类" class="headerlink" title="Product类"></a>Product类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Product is created to be used as the super class. * @author BlankSpace * @version 2.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//Identifying whether objects are equal by code.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>product <span class="token keyword">instanceof</span> <span class="token class-name">Product</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token punctuation">)</span>product<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Coffee类"><a href="#Coffee类" class="headerlink" title="Coffee类"></a>Coffee类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Coffee is Product's subclass. It represents a type of Products which is something special. * @author BlankSpace * @version 2.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> countryOfOrigin<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> typeOfRoast<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> flavor<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> aroma<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> acidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> body<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">,</span> <span class="token class-name">String</span> countryOfOrigin<span class="token punctuation">,</span>             <span class="token class-name">String</span> typeOfRoast<span class="token punctuation">,</span> <span class="token class-name">String</span> flavor<span class="token punctuation">,</span> <span class="token class-name">String</span> aroma<span class="token punctuation">,</span> <span class="token class-name">String</span> acidity<span class="token punctuation">,</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> description<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>countryOfOrigin <span class="token operator">=</span> countryOfOrigin<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>typeOfRoast <span class="token operator">=</span> typeOfRoast<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flavor <span class="token operator">=</span> flavor<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aroma <span class="token operator">=</span> aroma<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acidity <span class="token operator">=</span> acidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCountryOfOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>countryOfOrigin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTypeOfRoast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>typeOfRoast<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFlavor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flavor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAroma</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aroma<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAcidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>acidity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>body<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CoffeeBrewer类"><a href="#CoffeeBrewer类" class="headerlink" title="CoffeeBrewer类"></a>CoffeeBrewer类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * CoffeeBrewer is Product's subclass. It represents a type of Products which is something special. * @author BlankSpace * @version 2.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeBrewer</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> modelOfTheBrewer<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> typeOfTheWaterSupply<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span>    numberOfCups<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">,</span>             <span class="token class-name">String</span> modelOfTheBrewer<span class="token punctuation">,</span> <span class="token class-name">String</span> typeOfTheWaterSupply<span class="token punctuation">,</span> <span class="token keyword">int</span> numberOfCups<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> description<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>modelOfTheBrewer <span class="token operator">=</span> modelOfTheBrewer<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>typeOfTheWaterSupply <span class="token operator">=</span> typeOfTheWaterSupply<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numberOfCups <span class="token operator">=</span> numberOfCups<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getModelOfTheBrewer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modelOfTheBrewer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTypeOfTheWaterSupply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>typeOfTheWaterSupply<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumberOfCups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numberOfCups<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="OrderItem类"><a href="#OrderItem类" class="headerlink" title="OrderItem类"></a>OrderItem类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * An orderItem contains one certain type of product and the quantity of user needs. * The class's objects will be added into an order's item list. * @author BlankSpace * @version 2.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderItem</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Product</span> product<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span>     quantity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>product <span class="token operator">=</span> product<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>quantity <span class="token operator">=</span> quantity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>product<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setQuantity</span><span class="token punctuation">(</span><span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>quantity <span class="token operator">=</span> quantity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>quantity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * to calculate the cost of purchasing the product     * @return the result     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Order类"><a href="#Order类" class="headerlink" title="Order类"></a>Order类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token comment">/** * the class which saves a certain order's all orderItems * @author BlankSpace * @version 2.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token comment">// to save all orderItems.</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderItem</span><span class="token punctuation">&gt;</span></span> orderItemList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * to add the orderItem to the list.     * @param orderItem     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrderItem</span><span class="token punctuation">(</span><span class="token class-name">OrderItem</span> orderItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderItemList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * to delete the orderItem which user wants to delete.     * @param orderItem     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeOrderItem</span><span class="token punctuation">(</span><span class="token class-name">OrderItem</span> orderItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderItemList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>orderItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @return the list which saves all orderItems     */</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderItem</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllOrderItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orderItemList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * to search the orderItem which user wants to find in the list.     * @param product     * @return the orderItem which user wants to find     */</span>    <span class="token keyword">public</span> <span class="token class-name">OrderItem</span> <span class="token function">getOrderItem</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OrderItem</span> orderItem <span class="token operator">:</span> orderItemList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>orderItem<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> orderItem<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**         * @return the number of orderItems which are saved in the list.     */</span>         <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumberOfOrderItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orderItemList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * to sum all the orderItems' value in the list.     * @return the sum of all the orderItems' value.     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> value <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OrderItem</span> orderItem <span class="token operator">:</span> orderItemList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            value <span class="token operator">+=</span> orderItem<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Catalog类"><a href="#Catalog类" class="headerlink" title="Catalog类"></a>Catalog类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token comment">/** * Catalog is created to save all the product's item. * @author BlankSpace * @version 2.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Catalog</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> products<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Catalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        products <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * to add the type of products to the list.     * @param product     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>products<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * to search the product which user wants to find in the list.     * @param code     * @return the product which user wants to find.     */</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product <span class="token operator">:</span> products<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> product<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @return the list which saves all kinds of products.     */</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>products<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @return the number of product categories which are saved in the list.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumberOfProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>products<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Sales类"><a href="#Sales类" class="headerlink" title="Sales类"></a>Sales类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token comment">/** * the class which can save all orders. * @author BlankSpace * @version 2.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sales</span> <span class="token punctuation">{</span>    <span class="token comment">//to save all orders.</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> orders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * to add the order to the list.     * @param order     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @return the list which saves all orders     */</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orders<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * @return the number of orders which are saved in the list.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumberOfOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GourmetCoffeeSystem类"><a href="#GourmetCoffeeSystem类" class="headerlink" title="GourmetCoffeeSystem类"></a>GourmetCoffeeSystem类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">NumberFormat</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token comment">/** * 程序包的可运行部分 * 使用了单例模式 * 实际上唯一存在的实例有catalog、currentOrder、sales三个属性 * @author BlankSpace * @version 2.0  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GourmetCoffee</span> <span class="token punctuation">{</span>    <span class="token comment">//静态初始化块</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        CURRENCY <span class="token operator">=</span> <span class="token class-name">NumberFormat</span><span class="token punctuation">.</span><span class="token function">getCurrencyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//用于后面格式化字符串</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">NumberFormat</span> CURRENCY<span class="token punctuation">;</span>    <span class="token comment">//用于表示唯一的实例(实现单例模式)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">GourmetCoffee</span> coffeeSystem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GourmetCoffee</span><span class="token punctuation">(</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用于获取整个程序体的输入</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//GourmetCoffeeSystem的三个属性:catalog、currentOrder、sales</span>    <span class="token keyword">private</span> <span class="token class-name">Catalog</span> catalog<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Order</span>   currentOrder<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Sales</span>   sales<span class="token punctuation">;</span>        <span class="token comment">//private修饰的构造器</span>    <span class="token keyword">private</span> <span class="token class-name">GourmetCoffee</span><span class="token punctuation">(</span><span class="token class-name">Catalog</span> catalog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>catalog <span class="token operator">=</span> catalog<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sales <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//main方法，程序的入口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        coffeeSystem<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 执行初始化，把信息存入Catalog的实例中     * @return 所有的产品信息     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Catalog</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Catalog</span> catalog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Catalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//这里利用了OOP中的多态：相当于Product product = new Coffee(......);......</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C001"</span><span class="token punctuation">,</span> <span class="token string">"Colombia, Whole, 1 lb"</span><span class="token punctuation">,</span>         <span class="token number">17.99</span><span class="token punctuation">,</span> <span class="token string">"Colombia"</span><span class="token punctuation">,</span>                             <span class="token string">"Medium"</span><span class="token punctuation">,</span> <span class="token string">"Rich and Hearty"</span><span class="token punctuation">,</span> <span class="token string">"Rich"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">,</span> <span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C002"</span><span class="token punctuation">,</span> <span class="token string">"Colombia, Ground, 1 lb"</span><span class="token punctuation">,</span>        <span class="token number">18.75</span><span class="token punctuation">,</span> <span class="token string">"Colombia"</span><span class="token punctuation">,</span>                             <span class="token string">"Medium"</span><span class="token punctuation">,</span> <span class="token string">"Rich and Hearty"</span><span class="token punctuation">,</span> <span class="token string">"Rich"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">,</span> <span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C003"</span><span class="token punctuation">,</span> <span class="token string">"Italian Roasts, Whole, 1 lb"</span><span class="token punctuation">,</span>   <span class="token number">16.80</span><span class="token punctuation">,</span> <span class="token string">"Latin American Blend"</span><span class="token punctuation">,</span>                 <span class="token string">"Italian Roast"</span><span class="token punctuation">,</span> <span class="token string">"Dark and heavy"</span><span class="token punctuation">,</span> <span class="token string">"Intense"</span><span class="token punctuation">,</span> <span class="token string">"Low"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C004"</span><span class="token punctuation">,</span> <span class="token string">"Italian Roasts, Ground, 1 lb"</span><span class="token punctuation">,</span>  <span class="token number">17.55</span><span class="token punctuation">,</span> <span class="token string">"Latin American Blend"</span><span class="token punctuation">,</span>                 <span class="token string">"Italian Roast"</span><span class="token punctuation">,</span> <span class="token string">"Dark and heavy"</span><span class="token punctuation">,</span> <span class="token string">"Intense"</span><span class="token punctuation">,</span> <span class="token string">"Low"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C005"</span><span class="token punctuation">,</span> <span class="token string">"French Roasts, Whole, 1 lb"</span><span class="token punctuation">,</span>    <span class="token number">16.80</span><span class="token punctuation">,</span> <span class="token string">"Latin American Blend"</span><span class="token punctuation">,</span>                 <span class="token string">"French Roast"</span><span class="token punctuation">,</span> <span class="token string">"Bittersweet, full intense"</span><span class="token punctuation">,</span> <span class="token string">"Intense, full"</span><span class="token punctuation">,</span> <span class="token string">"None"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C006"</span><span class="token punctuation">,</span> <span class="token string">"French Roasts, Ground, 1 lb"</span><span class="token punctuation">,</span>   <span class="token number">17.55</span><span class="token punctuation">,</span> <span class="token string">"Latin American Blend"</span><span class="token punctuation">,</span>                 <span class="token string">"French Roast"</span><span class="token punctuation">,</span> <span class="token string">"Bittersweet, full intense"</span><span class="token punctuation">,</span> <span class="token string">"Intense, full"</span><span class="token punctuation">,</span> <span class="token string">"None"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C007"</span><span class="token punctuation">,</span> <span class="token string">"Guatemala, Ground, 1 lb"</span><span class="token punctuation">,</span>       <span class="token number">17.99</span><span class="token punctuation">,</span> <span class="token string">"Guatemala"</span><span class="token punctuation">,</span>                            <span class="token string">"Medium"</span><span class="token punctuation">,</span>  <span class="token string">"Rich and complex"</span><span class="token punctuation">,</span> <span class="token string">"Spicy"</span><span class="token punctuation">,</span> <span class="token string">"Medium to high"</span><span class="token punctuation">,</span> <span class="token string">"Medium to full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C008"</span><span class="token punctuation">,</span> <span class="token string">"Guatemala, Ground, 1 lb"</span><span class="token punctuation">,</span>       <span class="token number">18.75</span><span class="token punctuation">,</span> <span class="token string">"Guatemala"</span><span class="token punctuation">,</span>                            <span class="token string">"Medium"</span><span class="token punctuation">,</span>  <span class="token string">"Rich and complex"</span><span class="token punctuation">,</span> <span class="token string">"Spicy"</span><span class="token punctuation">,</span> <span class="token string">"Medium to high"</span><span class="token punctuation">,</span> <span class="token string">"Medium to full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C009"</span><span class="token punctuation">,</span> <span class="token string">"Guatemala, Whole, 1 lb"</span><span class="token punctuation">,</span>        <span class="token number">19.99</span><span class="token punctuation">,</span> <span class="token string">"Sumatra"</span><span class="token punctuation">,</span>                              <span class="token string">"Medium"</span><span class="token punctuation">,</span> <span class="token string">"Vibrant and powdery"</span><span class="token punctuation">,</span> <span class="token string">"Like dark chocolate"</span><span class="token punctuation">,</span> <span class="token string">"Gentle"</span><span class="token punctuation">,</span> <span class="token string">"Rich and full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C010"</span><span class="token punctuation">,</span> <span class="token string">"Guatemala, Ground, 1 lb"</span><span class="token punctuation">,</span>       <span class="token number">20.50</span><span class="token punctuation">,</span> <span class="token string">"Sumatra"</span><span class="token punctuation">,</span>                              <span class="token string">"Medium"</span><span class="token punctuation">,</span> <span class="token string">"Vibrant and powdery"</span><span class="token punctuation">,</span> <span class="token string">"Like dark chocolate"</span><span class="token punctuation">,</span> <span class="token string">"Gentle"</span><span class="token punctuation">,</span> <span class="token string">"Rich and full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C011"</span><span class="token punctuation">,</span> <span class="token string">"Special Blend, Whole, 1 lb"</span><span class="token punctuation">,</span>    <span class="token number">16.80</span><span class="token punctuation">,</span> <span class="token string">"Latin American Blend"</span><span class="token punctuation">,</span>                 <span class="token string">"Dark roast"</span><span class="token punctuation">,</span> <span class="token string">"Full, roasted flavor"</span><span class="token punctuation">,</span> <span class="token string">"Hearty"</span><span class="token punctuation">,</span> <span class="token string">"Bold and rich"</span><span class="token punctuation">,</span> <span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C012"</span><span class="token punctuation">,</span> <span class="token string">"Special Blend, Ground, 1 lb"</span><span class="token punctuation">,</span>   <span class="token number">17.55</span><span class="token punctuation">,</span> <span class="token string">"Latin American Blend"</span><span class="token punctuation">,</span>                 <span class="token string">"Dark roast"</span><span class="token punctuation">,</span> <span class="token string">"Full, roasted flavor"</span><span class="token punctuation">,</span> <span class="token string">"Hearty"</span><span class="token punctuation">,</span> <span class="token string">"Bold and rich"</span><span class="token punctuation">,</span> <span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">(</span><span class="token string">"B001"</span><span class="token punctuation">,</span> <span class="token string">"Home Coffee Brewer"</span><span class="token punctuation">,</span>          <span class="token number">150.0</span><span class="token punctuation">,</span>                <span class="token string">"Brewer 100"</span><span class="token punctuation">,</span> <span class="token string">"Pourover"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">(</span><span class="token string">"B002"</span><span class="token punctuation">,</span> <span class="token string">"Coffee Brewer, 2 Warmers"</span><span class="token punctuation">,</span>    <span class="token number">200.0</span><span class="token punctuation">,</span>                 <span class="token string">"Brewer 200"</span><span class="token punctuation">,</span> <span class="token string">"Pourover"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">(</span><span class="token string">"B003"</span><span class="token punctuation">,</span> <span class="token string">"Coffee Brewer, 3 Warmers"</span><span class="token punctuation">,</span>    <span class="token number">280.0</span><span class="token punctuation">,</span>                 <span class="token string">"Brewer 210"</span><span class="token punctuation">,</span> <span class="token string">"Pourover"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">(</span><span class="token string">"B004"</span><span class="token punctuation">,</span> <span class="token string">"Commercial Brewer, 20 cups"</span><span class="token punctuation">,</span>  <span class="token number">380.0</span><span class="token punctuation">,</span>                 <span class="token string">"Quick Coffee 100"</span><span class="token punctuation">,</span> <span class="token string">"Automatic"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">(</span><span class="token string">"B005"</span><span class="token punctuation">,</span> <span class="token string">"Commercial Brewer, 40 cups"</span><span class="token punctuation">,</span>  <span class="token number">480.0</span><span class="token punctuation">,</span>                 <span class="token string">"Quick Coffee 200"</span><span class="token punctuation">,</span> <span class="token string">"Automatic"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A001"</span><span class="token punctuation">,</span> <span class="token string">"Almond Flavored Syrup"</span><span class="token punctuation">,</span>            <span class="token number">9.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A002"</span><span class="token punctuation">,</span> <span class="token string">"Irish Creme Flavored Syrup"</span><span class="token punctuation">,</span>       <span class="token number">9.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A003"</span><span class="token punctuation">,</span> <span class="token string">"Mint Flavored syrup"</span><span class="token punctuation">,</span>              <span class="token number">9.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A004"</span><span class="token punctuation">,</span> <span class="token string">"Caramel Flavored Syrup"</span><span class="token punctuation">,</span>           <span class="token number">9.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A005"</span><span class="token punctuation">,</span> <span class="token string">"Gourmet Coffee Cookies"</span><span class="token punctuation">,</span>           <span class="token number">12.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A006"</span><span class="token punctuation">,</span> <span class="token string">"Gourmet Coffee Travel Thermo"</span><span class="token punctuation">,</span>     <span class="token number">18.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A007"</span><span class="token punctuation">,</span> <span class="token string">"Gourmet Coffee Ceramic Mug"</span><span class="token punctuation">,</span>       <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A008"</span><span class="token punctuation">,</span> <span class="token string">"Gourmet Coffee 12 Cup Filters"</span><span class="token punctuation">,</span>    <span class="token number">15.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A009"</span><span class="token punctuation">,</span> <span class="token string">"Gourmet Coffee 36 Cup Filters"</span><span class="token punctuation">,</span>    <span class="token number">45.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> catalog<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//对传统印象中的for循环语句加以改造，使之更灵活</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> choice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getChoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> choice <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> choice <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getChoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//不需要default语句，因为在获取输入的时候就稳妥的处理了数据</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">displayCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">displayProductInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">displayOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addOrModifyProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saleOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">displayOrdersSold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 打印主菜单的方法     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMainMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                 <span class="token comment">//退出系统</span>                 <span class="token string">"[0]  Quit\n"</span>                 <span class="token comment">//显示目录：列出每个产品的代码和描述</span>                 <span class="token operator">+</span> <span class="token string">"[1]  Display catalog\n"</span>                 <span class="token comment">//显示产品</span>                 <span class="token operator">+</span> <span class="token string">"[2]  Display product\n"</span>                 <span class="token comment">//显示当前订单：列出当前订单中每个产品的数量、代码和价格，以及订单总价格。</span>                 <span class="token operator">+</span> <span class="token string">"[3]  Display current order\n"</span>                 <span class="token comment">//将产品添加到当前订单,如果指定的产品已经是订单的一部分，此命令将修改该产品的数量</span>                 <span class="token operator">+</span> <span class="token string">"[4]  Add|modify product to|in current order\n"</span>                 <span class="token comment">//从当前订单中删除产品</span>                 <span class="token operator">+</span> <span class="token string">"[5]  Remove product from current order\n"</span>                 <span class="token comment">//注册当前订单的销售此命令将订单添加到商店的销售中并清空当前订单</span>                 <span class="token operator">+</span> <span class="token string">"[6]  Register sale of current order\n"</span>                 <span class="token comment">//显示销售：列出所有已售出的订单</span>                 <span class="token operator">+</span> <span class="token string">"[7]  Display sales"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 读取、处理选择值的方法     * 与用户交互，读取选择的数据加以处理     * @return 选择     * @throws IOException     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getChoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//不满足条件，循环会一直持续下去</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printMainMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> choice <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//提前处理数据，只有输入0到7的整数才是合法的</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> choice <span class="token operator">&amp;&amp;</span> choice <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> choice<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">//提示用户输入错误</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Invalid choice:  "</span> <span class="token operator">+</span> choice<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> numberFormatException<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//打印异常</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numberFormatException<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 打印所有产品信息的方法     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">displayCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> numberOfProducts <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>catalog<span class="token punctuation">.</span><span class="token function">getNumberOfProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numberOfProducts <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The catalog is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>catalog<span class="token punctuation">.</span><span class="token function">getAllProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 打印所选产品信息的方法     * 利用instance of来分析判断前面的对象是否是后面的类或其子类、实现类的实例，使代码更加健壮     * @throws IOException     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">displayProductInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  Description: "</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  Price: "</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token keyword">instanceof</span> <span class="token class-name">Coffee</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//进行强制类型转换</span>                <span class="token class-name">Coffee</span> coffee <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Coffee</span><span class="token punctuation">)</span>product<span class="token punctuation">;</span>                <span class="token comment">//输出咖啡产品信息</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  Origin: "</span> <span class="token operator">+</span> coffee<span class="token punctuation">.</span><span class="token function">getCountryOfOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  Roast: "</span> <span class="token operator">+</span> coffee<span class="token punctuation">.</span><span class="token function">getTypeOfRoast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  Flavor: "</span> <span class="token operator">+</span> coffee<span class="token punctuation">.</span><span class="token function">getFlavor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  Aroma: "</span> <span class="token operator">+</span> coffee<span class="token punctuation">.</span><span class="token function">getAroma</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  Acidity: "</span> <span class="token operator">+</span> coffee<span class="token punctuation">.</span><span class="token function">getAcidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  Body: "</span> <span class="token operator">+</span> coffee<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token keyword">instanceof</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">CoffeeBrewer</span> coffeeBrewer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CoffeeBrewer</span><span class="token punctuation">)</span>product<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  Model: "</span> <span class="token operator">+</span> coffeeBrewer<span class="token punctuation">.</span><span class="token function">getModelOfTheBrewer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  Water Supply: "</span> <span class="token operator">+</span> coffeeBrewer<span class="token punctuation">.</span><span class="token function">getTypeOfTheWaterSupply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  Number of Cups: "</span> <span class="token operator">+</span> coffeeBrewer<span class="token punctuation">.</span><span class="token function">getNumberOfCups</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"There are no products with that code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 打印订单信息的方法     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">displayOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> numberOfOrderItems <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentOrder<span class="token punctuation">.</span><span class="token function">getNumberOfOrderItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numberOfOrderItems <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The current order is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OrderItem</span> orderItem <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentOrder<span class="token punctuation">.</span><span class="token function">getAllOrderItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orderItem<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total: "</span> <span class="token operator">+</span> CURRENCY<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentOrder<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 添加或修改订单中产品信息的方法     * @throws IOException     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addOrModifyProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> quantity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">OrderItem</span> orderItem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentOrder<span class="token punctuation">.</span><span class="token function">getOrderItem</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>orderItem <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>currentOrder<span class="token punctuation">.</span><span class="token function">addOrderItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The product "</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" has been added"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                orderItem<span class="token punctuation">.</span><span class="token function">setQuantity</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The quantity of the product "</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" has been modified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"There are no products with that code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 清除订单信息中某一产品信息的方法     * @throws IOException     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">OrderItem</span> orderItem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentOrder<span class="token punctuation">.</span><span class="token function">getOrderItem</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>orderItem <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>currentOrder<span class="token punctuation">.</span><span class="token function">removeOrderItem</span><span class="token punctuation">(</span>orderItem<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The product "</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" has been removed from the current order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"There are no products in the current order with that code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"There are no products with that code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 交易当前订单的方法     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saleOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentOrder<span class="token punctuation">.</span><span class="token function">getNumberOfOrderItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sales<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>currentOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The sale of the order has been registered"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The current order is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 展示交易过的订单的方法     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">displayOrdersSold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取交易过的订单数</span>        <span class="token keyword">int</span> numberOfOrders <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sales<span class="token punctuation">.</span><span class="token function">getNumberOfOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numberOfOrders <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Order</span> order <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sales<span class="token punctuation">.</span><span class="token function">getAllOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Order "</span> <span class="token operator">+</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OrderItem</span> orderItem <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentOrder<span class="token punctuation">.</span><span class="token function">getAllOrderItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"   "</span> <span class="token operator">+</span> orderItem<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"   Total: "</span> <span class="token operator">+</span> CURRENCY<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"There are no sales"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 读取要检索的产品的方法     * @return 要检索的产品     * @throws IOException     */</span>    <span class="token keyword">private</span> <span class="token class-name">Product</span> <span class="token function">readProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Product code&gt; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>catalog<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 读取购买数的方法     * @return 购买数     * @throws IOException     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">readQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Quantity&gt; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> quantity <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>quantity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> quantity<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Invalid input. Please enter a positive integer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Gourmet%E5%92%96%E5%95%A1%E7%B3%BB%E7%BB%9F%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/5.jpg"></p><h1 id="Using-Design-Patterns-in-the-Gourmet-Coffee-System"><a href="#Using-Design-Patterns-in-the-Gourmet-Coffee-System" class="headerlink" title="Using Design Patterns in the Gourmet Coffee System"></a>Using Design Patterns in the Gourmet Coffee System</h1><h2 id="Prerequisites-Goals-and-Outcomes-1"><a href="#Prerequisites-Goals-and-Outcomes-1" class="headerlink" title="Prerequisites, Goals, and Outcomes"></a>Prerequisites, Goals, and Outcomes</h2><p><em><strong>Prerequisites</strong></em><br>Before you begin this exercise, you need mastery of the following: </p><ul><li>Object-oriented Programming<ul><li>How to define interfaces </li><li>How to implement interfaces</li></ul></li><li>Design Patterns: <ul><li>Knowledge of the singleton pattern </li><li>Knowledge of the strategy pattern</li></ul></li></ul><p><em><strong>Goals</strong></em><br>Reinforce your ability to use the singleton and strategy patterns </p><p><em><strong>Outcomes</strong></em><br>You will demonstrate mastery in the following: </p><ul><li>Producing applications that use the singleton pattern </li><li>Producing applications that use the strategy pattern</li></ul><p><em><strong>Background</strong></em><br>In this assignment, you will create another version of the Gourmet Coffee System. This version will present the user with four choices:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token class-name">Quit</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name">Display</span> sales <span class="token punctuation">(</span><span class="token class-name">Plain</span> <span class="token class-name">Text</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token class-name">Display</span> sales <span class="token punctuation">(</span>HTML<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token class-name">Display</span> sales <span class="token punctuation">(</span>XML<span class="token punctuation">)</span>choice<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The user will be able to display the sales information in three formats: plain text, HTML, or XML. Part of the work has been done for you and is provided in the student archive. You will implement the code that formats the sales information. This code will use the singleton and strategy patterns. </p><p><em><strong>Description</strong></em><br>The following class diagram shows how the singleton and strategy pattern will be used in your implementation:</p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Gourmet%E5%92%96%E5%95%A1%E7%B3%BB%E7%BB%9F%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/6.png"></p><p><em>Figure 1 Portion of Gourmet Coffee System class diagram</em></p><ul><li>Interface <strong>SalesFormatter</strong> declares a method called formatSales that produces a string representation of the sales information. </li><li>Class <strong>PlainTextSalesFormatter</strong> implements formatSales. Its version returns the sales information in a plain-text format. </li><li>Class <strong>HTMLSalesFormatter</strong> implements formatSales. Its version returns the sales information in an HTML format. </li><li>Class <strong>XMLSalesFormatter</strong> implements formatSales. Its version returns the sales information in an XML format. </li><li>Class <strong>GourmetCoffee</strong> is the context class. It also contains client code. The client code calls: <ul><li>Method GourmetCoffee.setSalesFormatter to change the current formatter </li><li>Method GourmetCoffee.displaySales to display the sales information using the current formatter</li></ul></li></ul><p>In this assignment, you should implement the following interface and classes:</p><ul><li><strong>SalesFormatter</strong></li><li><strong>PlainTextSalesFormatter</strong></li><li><strong>HTMLSalesFormatter</strong></li><li><strong>XMLSalesFormatter</strong></li><li><strong>GourmetCoffee</strong> <em>(a partial implementation is provided in the student archive)</em></li></ul><p>Complete implementations of the following classes are provided in the student archive:</p><ul><li><strong>Coffee</strong></li><li><strong>CoffeeBrewer</strong></li><li><strong>Product</strong></li><li><strong>Catalog</strong></li><li><strong>OrderItem</strong></li><li><strong>Order</strong></li><li><strong>Sales</strong></li></ul><h2 id="Interface-SalesFormatter"><a href="#Interface-SalesFormatter" class="headerlink" title="Interface SalesFormatter"></a>Interface SalesFormatter</h2><p>Interface SalesFormatter declares the method that every “Formatter” class will implement.</p><p><em><strong>Method:</strong></em></p><ul><li><em><strong>public String formatSales(Sales sales):</strong></em> Produces a string representation of the sales information.</li></ul><h2 id="Class-PlainTextSalesFormatter"><a href="#Class-PlainTextSalesFormatter" class="headerlink" title="Class PlainTextSalesFormatter"></a>Class PlainTextSalesFormatter</h2><p>Class PlainTextSalesFormatter implements the interface SalesFormatter. This class is implemented as a singleton so a new object will not be created every time the plain-text format is used.</p><p><em><strong>Static variable:</strong></em></p><ul><li><em><strong>singletonInstance:</strong></em> The single instance of class PlainTextSalesFormatter.</li></ul><p><em><strong>Constructor and methods:</strong></em></p><ul><li><em><strong>static public PlainTextSalesFormatter getSingletonInstance():</strong></em> Static method that obtains the single instance of class PlainTextsalesFormatter. </li><li><em><strong>private PlainTextSalesFormatter():</strong></em> Constructor that is declared private so it is inaccessible to other classes. A private constructor makes it impossible for any other class to create an instance of class PlainTextSalesFormatter. </li><li><em><strong>public String formatSales(Sales sales):</strong></em> Produces a string that contains the specified sales information in a plain-text format. Each order in the sales information has the following format:</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Order</span> numberquantity1code1price1quantity2code2price2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>quantityNcodeNpriceN<span class="token class-name">Total</span> <span class="token operator">=</span> totalCost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>where</strong></em> </p><ul><li><strong>number</strong> is the order number. </li><li><strong>quantityX</strong> is the quantity of the product. </li><li><strong>codeX</strong> is the code of the product. </li><li><strong>priceX</strong> is the price of the product. </li><li><strong>totalCost</strong> is the total cost of the order.</li></ul><p>Each order should begin with a dashed line. The first order in the sales information should be given an order number of 1, the second should be given an order number of 2, and so on.</p><h2 id="Class-HTMLSalesFormatter"><a href="#Class-HTMLSalesFormatter" class="headerlink" title="Class HTMLSalesFormatter"></a>Class HTMLSalesFormatter</h2><p>Class HTMLSalesFormatter implements the interface SalesFormatter. This class is implemented as a singleton so a new object will not be created every time the HTML format is used.</p><p><em><strong>Static variable:</strong></em></p><ul><li><em><strong>singletonInstance:</strong></em> The single instance of class HTMLSalesFormatter.</li></ul><p><em><strong>Constructor and methods:</strong></em></p><ul><li><em><strong>static public HTMLSalesFormatter getSingletonInstance():</strong></em> Static method that obtains the single instance of class HTMLSalesFormatter. </li><li><em><strong>private HTMLSalesFormatter():</strong></em> Constructor that is declared private so it is inaccessible to other classes. A private constructor makes it impossible for any other class to create an instance of class HTMLSalesFormatter. </li><li><em><strong>public String formatSales(Sales sales):</strong></em> Produces a string that contains the specified sales information in an HTML format.</li></ul><p>The string should begin with the following HTML: </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Orders<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Each order in the sales information should begin with horizontal line, that is, an <strong>&lt;hr&gt;</strong> tag. </p><p>Each order in the sales information should have the following format: </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>Total = totalCost<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>code:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>code1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>quantity:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>quantity1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>price:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>price1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>code:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>codeN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>quantity:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>quantityN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>price:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>priceN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>where:</p><ul><li><strong>quantityX</strong> is the quantity of the product. </li><li><strong>codeX</strong> is the code of the product. </li><li><strong>priceX</strong> is the price of the product. </li><li><strong>totalCost</strong> is the total cost of the order.</li></ul><p>The string should end with the following HTML: </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Class-XMLSalesFormatter"><a href="#Class-XMLSalesFormatter" class="headerlink" title="Class XMLSalesFormatter"></a>Class XMLSalesFormatter</h2><p>Class XMLSalesFormatter implements the interface SalesFormatter. This class is implemented as a singleton so a new object will not be created every time the XML format is used.</p><p><em><strong>Static variable:</strong></em></p><ul><li><em><strong>singletonInstance:</strong></em> The single instance of class XMLSalesFormatter.</li></ul><p><em><strong>Constructor and methods:</strong></em></p><ul><li><em><strong>static public XMLSalesFormatter getSingletonInstance():</strong></em> Static method that obtains the single instance of class XMLSalesFormatter. </li><li><em><strong>private XMLSalesFormatter():</strong></em> Constructor that is declared private so it is inaccessible to other classes. A private constructor makes it impossible for any other class to create an instance of class XMLSalesFormatter. </li><li><em><strong>public String formatSales(Sales sales):</strong></em> Produces a string that contains the specified sales information in an XML format.</li></ul><p>The string should begin with the following XML: </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Sales</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Each order in the sales information should have the following format: </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Order</span> <span class="token attr-name">total</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>totalCost<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrderItem</span> <span class="token attr-name">quantity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quantity1<span class="token punctuation">"</span></span> <span class="token attr-name">price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>code1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrderItem</span><span class="token punctuation">&gt;</span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrderItem</span> <span class="token attr-name">quantity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quantityN<span class="token punctuation">"</span></span> <span class="token attr-name">price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>priceN<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>codeN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrderItem</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Order</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>where:</strong></em></p><ul><li><strong>quantityX</strong> is the quantity of the product. </li><li><strong>codeX</strong> is the code of the product. </li><li><strong>priceX</strong> is the price of the product. </li><li><strong>totalCost</strong> is the total cost of the order.</li></ul><p>The string should end with the following XML: </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Sales</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Class-GourmetCoffee"><a href="#Class-GourmetCoffee" class="headerlink" title="Class GourmetCoffee"></a>Class GourmetCoffee</h2><p>Class GourmetCoffee lets the user display the sales information in one of three formats: <strong>plain text</strong>, <strong>HTML</strong>, or <strong>XML</strong>. A partial implementation of this class is provided in the student archive. </p><p><em><strong>Instance variables:</strong></em></p><ul><li><em><strong>private Sales sales:</strong></em> A list of the orders that have been paid for. </li><li><em><strong>private SalesFormatter salesFormatter:</strong></em> A reference variable that refers to the current formatter: a PlainTextSalesFormatter, HTMLSalesFormatter, or XMLSalesFormatter object.</li></ul><p><em><strong>Constructor and methods:</strong></em><br>The following methods and constructor are complete and require no modification:</p><ul><li><em><strong>public static void main(String[] args) throws IOException:</strong></em> Starts the application. </li><li><em><strong>private GourmetCoffee():</strong></em> Initialize instance variables sales and salesFormatter. </li><li><em><strong>private Catalog loadCatalog():</strong></em> Populates the product catalog. </li><li><em><strong>private void loadSales(Catalog catalog):</strong></em> Populates the sales object. </li><li><em><strong>private int getChoice() throws IOException:</strong></em> Displays a menu of options and verifies the user’s choice.</li></ul><p><em><strong>The following methods should be completed:</strong></em></p><ul><li><em><strong>private void setSalesFormatter(SalesFormatter newFormatter):</strong></em> Changes the current formatter by updating the instance variable salesFormatter with the object specified in the parameter newFormatter. </li><li><em><strong>private void displaySales():</strong></em> Displays the sales information in the standard output using the method salesFormatter.formatSales to obtain the sales information in the current format. </li><li><em><strong>private void run() throws IOException:</strong></em> Presents the user with a menu of options and executes the selected task <ul><li>If the user chooses <strong>option 1</strong>, run calls method setSalesFormatter with the singleton instance of class PlainTextSalesFormatter, and calls method displaySales to display the sales information in the standard output. </li><li>If the user chooses <strong>option 2</strong>, run calls method setSalesFormatter with the singleton instance of class HTMLSalesFormatter, and calls method displaySales to display the sales information in the standard output. </li><li>If the user chooses <strong>option 3</strong>, run calls method setSalesFormatter with the singleton instance of class XMLTextSalesFormatter, and calls method displaySales to display the sales information in the standard output.</li></ul></li></ul><p><em><strong>Files</strong></em><br>The following files are needed to complete this assignment: </p><ul><li><em><strong>student-files.zip</strong></em> — Download this file. This archive contains the following: </li><li><em><strong>Class files</strong></em> <ul><li><em><strong>Coffee.class</strong></em></li><li><em><strong>CoffeeBrewer.class</strong></em></li><li><em><strong>Product.class</strong></em></li><li><em><strong>Catalog.class</strong></em></li><li><em><strong>OrderItem.class</strong></em></li><li><em><strong>Order.class</strong></em></li><li><em><strong>Sales.class</strong></em></li></ul></li><li><em><strong>Documentation</strong></em> <ul><li><em><strong>Coffee.html</strong></em></li><li><em><strong>CoffeeBrewer.html</strong></em></li><li><em><strong>Product.html</strong></em> </li><li><em><strong>Catalog.html</strong></em></li><li><em><strong>OrderItem.html</strong></em></li><li><em><strong>Order.html</strong></em></li><li><em><strong>Sales.html</strong></em></li></ul></li><li><em><strong>GourmetCoffee.java</strong></em>. A partial implementation of the class <strong>GourmetCoffee</strong>.</li></ul><p><em><strong>Tasks</strong></em><br>Implement the interface <strong>SalesFormatter</strong> and the classes <strong>PlainTextSalesFormatter</strong>, <strong>HTMLSalesFormatter</strong>, <strong>XMLSalesFormatter</strong>. Finish the implementation of class <strong>GourmetCoffee</strong>. Document using Javadoc and follow Sun’s code conventions. The following steps will guide you through this assignment. Work incrementally and test each increment. Save often.</p><ol><li><pre><code>Extract the files by issuing the following command at the command prompt:</code></pre></li></ol><p><strong>C:&gt;unzip student-files.zip</strong><br>2.Then, implement interface <strong>SalesFormatter</strong> from scratch.<br>3.Next, implement class <strong>PlainTextSalesFormatter</strong> from scratch.<br>4.Then, implement class <strong>HTMLSalesFormatter</strong> from scratch.<br>5.Next, implement class <strong>XMLSalesFormatter</strong> from scratch.<br>6.Then, complete the method <strong>GourmetCoffee.setSalesFormatter</strong>.<br>7.Next, complete the method <strong>GourmetCoffee.displaySales</strong>.<br>8.Then, complete the method <strong>GourmetCoffee.run</strong>.<br>9.Finally, compile and execute the class <strong>GourmetCoffee</strong>. Sales information has been hard-coded in the GourmetCoffee template provided by <strong>iCarnegie</strong>. </p><ul><li>If the user chooses to display the sales information in plain text, the output should be:</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Order</span> <span class="token number">1</span><span class="token number">5</span> C001 <span class="token number">17.99</span><span class="token class-name">Total</span> <span class="token operator">=</span> <span class="token number">89.94999999999999</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Order</span> <span class="token number">2</span><span class="token number">2</span> C002 <span class="token number">18.75</span><span class="token number">2</span> A001 <span class="token number">9.0</span><span class="token class-name">Total</span> <span class="token operator">=</span> <span class="token number">55.5</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Order</span> <span class="token number">3</span><span class="token number">1</span> B002 <span class="token number">200.0</span><span class="token class-name">Total</span> <span class="token operator">=</span> <span class="token number">200.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>If the user chooses to display the sales information in HTML, the output should be: <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Orders<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>Total = 89.94999999999999<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>code:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> C001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>quantity:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>price:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 17.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>Total = 55.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>code:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> C002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>quantity:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>price:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 18.75<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>code:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> A001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>quantity:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>price:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>Total = 200.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>code:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> B002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>quantity:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>price:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 200.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>If the user chooses to display the sales information in XML, the output should be: <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Sales</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Order</span> <span class="token attr-name">total</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>89.94999999999999<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrderItem</span> <span class="token attr-name">quantity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17.99<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>C001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrderItem</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Order</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Order</span> <span class="token attr-name">total</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55.5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrderItem</span> <span class="token attr-name">quantity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18.75<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>C002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrderItem</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrderItem</span> <span class="token attr-name">quantity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>9.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>A001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrderItem</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Order</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Order</span> <span class="token attr-name">total</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrderItem</span> <span class="token attr-name">quantity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>B002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrderItem</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Order</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Sales</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><em><strong>Submission</strong></em><br>Upon completion, submit <strong>only</strong> the following:<br>1.SalesFormatter.java<br>2.PlainTextSalesFormatter.java<br>3.HTMLSalesFormatter.java<br>4.XMLSalesFormatter.java<br>5.GourmetCoffee.java</p><h2 id="SalesFormatter类"><a href="#SalesFormatter类" class="headerlink" title="SalesFormatter类"></a>SalesFormatter类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SalesFormatter</span> <span class="token punctuation">{</span>        <span class="token comment">//Produces a string representation of the sales information.</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">formatSales</span><span class="token punctuation">(</span><span class="token class-name">Sales</span> sales<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PlainTextSalesFormatter类"><a href="#PlainTextSalesFormatter类" class="headerlink" title="PlainTextSalesFormatter类"></a>PlainTextSalesFormatter类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlainTextSalesFormatter</span> <span class="token keyword">implements</span> <span class="token class-name">SalesFormatter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">PlainTextSalesFormatter</span> singletonInstance<span class="token punctuation">;</span>           <span class="token keyword">private</span> <span class="token class-name">PlainTextSalesFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span>              <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">PlainTextSalesFormatter</span> <span class="token function">getSingletonInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>               singletonInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlainTextSalesFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> singletonInstance<span class="token punctuation">;</span>       <span class="token punctuation">}</span>              <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">formatSales</span><span class="token punctuation">(</span><span class="token class-name">Sales</span> sales<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> iterator1 <span class="token operator">=</span> sales<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Order</span> order <span class="token operator">=</span> iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            string <span class="token operator">+=</span><span class="token string">"---------------------\r\n"</span><span class="token punctuation">;</span>               string <span class="token operator">+=</span> <span class="token string">"Order "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"\r\n\r\n"</span><span class="token punctuation">;</span>             <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderItem</span><span class="token punctuation">&gt;</span></span> iterator2 <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">OrderItem</span> orderItem <span class="token operator">=</span> iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                string <span class="token operator">+=</span> orderItem<span class="token punctuation">.</span><span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> orderItem<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span>orderItem<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>               string <span class="token operator">+=</span> <span class="token string">"\r\n"</span> <span class="token operator">+</span> <span class="token string">"Total = "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getTotalCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token keyword">return</span> string<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HTMLSalesFormatter类"><a href="#HTMLSalesFormatter类" class="headerlink" title="HTMLSalesFormatter类"></a>HTMLSalesFormatter类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HTMLSalesFormatter</span> <span class="token keyword">implements</span> <span class="token class-name">SalesFormatter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HTMLSalesFormatter</span> singletonInstance<span class="token punctuation">;</span>           <span class="token keyword">private</span> <span class="token class-name">HTMLSalesFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span>               <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">HTMLSalesFormatter</span> <span class="token function">getSingletonInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>               singletonInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLSalesFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> singletonInstance<span class="token punctuation">;</span>       <span class="token punctuation">}</span>              <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">formatSales</span><span class="token punctuation">(</span><span class="token class-name">Sales</span> sales<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>           string <span class="token operator">+=</span><span class="token string">"&lt;html&gt;\r\n  &lt;body&gt;\r\n    &lt;center&gt;&lt;h2&gt;Orders&lt;/h2&gt;&lt;/center&gt;\r\n"</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> iterator1 <span class="token operator">=</span> sales<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Order</span> order <span class="token operator">=</span> iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            string <span class="token operator">+=</span> <span class="token string">"    &lt;hr&gt;\r\n    &lt;h4&gt;Total = "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getTotalCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/h4&gt;\r\n      &lt;p&gt;\r\n"</span><span class="token punctuation">;</span>              <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderItem</span><span class="token punctuation">&gt;</span></span> iterator2 <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">OrderItem</span> orderItem <span class="token operator">=</span> iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                string <span class="token operator">+=</span> <span class="token string">"        &lt;b&gt;code:&lt;/b&gt; "</span><span class="token operator">+</span>orderItem<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br&gt;\r\n"</span> <span class="token operator">+</span> <span class="token string">"        &lt;b&gt;quantity:&lt;/b&gt; "</span><span class="token operator">+</span>orderItem<span class="token punctuation">.</span><span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;br&gt;\r\n"</span><span class="token operator">+</span><span class="token string">"        &lt;b&gt;price:&lt;/b&gt; "</span><span class="token operator">+</span>orderItem<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>              string <span class="token operator">+=</span> <span class="token string">"      &lt;/p&gt;\r\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          string <span class="token operator">+=</span> <span class="token string">"  &lt;/body&gt;\r\n&lt;/html&gt;\r\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> string<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="XMLSalesFormatter类"><a href="#XMLSalesFormatter类" class="headerlink" title="XMLSalesFormatter类"></a>XMLSalesFormatter类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLSalesFormatter</span> <span class="token keyword">implements</span> <span class="token class-name">SalesFormatter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">XMLSalesFormatter</span> singletonInstance<span class="token punctuation">;</span>           <span class="token keyword">private</span> <span class="token class-name">XMLSalesFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span>              <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">XMLSalesFormatter</span> <span class="token function">getSingletonInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>               singletonInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLSalesFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> singletonInstance<span class="token punctuation">;</span>       <span class="token punctuation">}</span>              <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">formatSales</span><span class="token punctuation">(</span><span class="token class-name">Sales</span> sales<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>           string <span class="token operator">+=</span><span class="token string">"&lt;Sales&gt;\r\n"</span><span class="token punctuation">;</span>         <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> iterator1 <span class="token operator">=</span> sales<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Order</span> order <span class="token operator">=</span> iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            string <span class="token operator">+=</span> <span class="token string">"  &lt;Order total=\""</span><span class="token operator">+</span>order<span class="token punctuation">.</span><span class="token function">getTotalCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\"&gt;\r\n"</span><span class="token punctuation">;</span>              <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderItem</span><span class="token punctuation">&gt;</span></span> iterator2 <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">OrderItem</span> orderItem <span class="token operator">=</span> iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                string <span class="token operator">+=</span> <span class="token string">"    &lt;OrderItem quantity=\""</span><span class="token operator">+</span>orderItem<span class="token punctuation">.</span><span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\" price=\""</span><span class="token operator">+</span>orderItem<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\"&gt;"</span><span class="token operator">+</span>orderItem<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/OrderItem&gt;\r\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>              string <span class="token operator">+=</span> <span class="token string">"  &lt;/Order&gt;\r\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          string <span class="token operator">+=</span> <span class="token string">"&lt;/Sales&gt;\r\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> string<span class="token punctuation">;</span>         <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GourmetCoffee类"><a href="#GourmetCoffee类" class="headerlink" title="GourmetCoffee类"></a>GourmetCoffee类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * This class implements a gourmet coffee system. * * @author BlankSpace * @version 1.1.0 * @see Product * @see Coffee * @see CoffeeBrewer * @see Catalog * @see OrderItem * @see Order * @see SalesFormatter * @see PlainTextSalesFormatter * @see HTMLSalesFormatter * @see XMLSalesFormatter */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GourmetCoffee</span>  <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">BufferedReader</span>  stdIn <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">PrintWriter</span>  stdOut <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">PrintWriter</span>  stdErr <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Sales</span>  sales<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">SalesFormatter</span>  salesFormatter<span class="token punctuation">;</span><span class="token comment">/** * Loads data into the catalog and starts the application. * * @param args  String arguments.  Not used. * @throws IOException if there are errors in the input. */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>  <span class="token punctuation">{</span><span class="token class-name">GourmetCoffee</span>  application <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">GourmetCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>application<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Constructs a &lt;code&gt;GourmetCoffee&lt;/code&gt; object and * initializes the catalog and sales data. * * @param initialCatalog a product catalog */</span><span class="token keyword">private</span> <span class="token class-name">GourmetCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>sales <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>salesFormatter <span class="token operator">=</span> <span class="token class-name">PlainTextSalesFormatter</span><span class="token punctuation">.</span><span class="token function">getSingletonInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadSales</span><span class="token punctuation">(</span><span class="token function">loadCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Creates an empty catalog and then add products to it. * * @return a product catalog */</span><span class="token keyword">private</span> <span class="token class-name">Catalog</span> <span class="token function">loadCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Catalog</span> catalog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Catalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C001"</span><span class="token punctuation">,</span> <span class="token string">"Colombia, Whole, 1 lb"</span><span class="token punctuation">,</span> <span class="token number">17.99</span><span class="token punctuation">,</span><span class="token string">"Colombia"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">,</span> <span class="token string">"Rich and Hearty"</span><span class="token punctuation">,</span> <span class="token string">"Rich"</span><span class="token punctuation">,</span><span class="token string">"Medium"</span><span class="token punctuation">,</span> <span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C002"</span><span class="token punctuation">,</span> <span class="token string">"Colombia, Ground, 1 lb"</span><span class="token punctuation">,</span> <span class="token number">18.75</span><span class="token punctuation">,</span><span class="token string">"Colombia"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">,</span> <span class="token string">"Rich and Hearty"</span><span class="token punctuation">,</span> <span class="token string">"Rich"</span><span class="token punctuation">,</span><span class="token string">"Medium"</span><span class="token punctuation">,</span><span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C003"</span><span class="token punctuation">,</span> <span class="token string">"Italian Roasts, Whole, 1 lb"</span><span class="token punctuation">,</span><span class="token number">16.80</span><span class="token punctuation">,</span> <span class="token string">"Latin American Blend"</span><span class="token punctuation">,</span> <span class="token string">"Italian Roast"</span><span class="token punctuation">,</span><span class="token string">"Dark and heavy"</span><span class="token punctuation">,</span> <span class="token string">"Intense"</span><span class="token punctuation">,</span> <span class="token string">"Low"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C004"</span><span class="token punctuation">,</span> <span class="token string">"Italian Roasts, Ground, 1 lb"</span><span class="token punctuation">,</span><span class="token number">17.55</span><span class="token punctuation">,</span> <span class="token string">"Latin American Blend"</span><span class="token punctuation">,</span> <span class="token string">"Italian Roast"</span><span class="token punctuation">,</span><span class="token string">"Dark and heavy"</span><span class="token punctuation">,</span> <span class="token string">"Intense"</span><span class="token punctuation">,</span> <span class="token string">"Low"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C005"</span><span class="token punctuation">,</span> <span class="token string">"French Roasts, Whole, 1 lb"</span><span class="token punctuation">,</span><span class="token number">16.80</span><span class="token punctuation">,</span> <span class="token string">"Latin American Blend"</span><span class="token punctuation">,</span> <span class="token string">"French Roast"</span><span class="token punctuation">,</span><span class="token string">"Bittersweet, full intense"</span><span class="token punctuation">,</span> <span class="token string">"Intense, full"</span><span class="token punctuation">,</span> <span class="token string">"None"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C006"</span><span class="token punctuation">,</span> <span class="token string">"French Roasts, Ground, 1 lb"</span><span class="token punctuation">,</span><span class="token number">17.55</span><span class="token punctuation">,</span> <span class="token string">"Latin American Blend"</span><span class="token punctuation">,</span> <span class="token string">"French Roast"</span><span class="token punctuation">,</span><span class="token string">"Bittersweet, full intense"</span><span class="token punctuation">,</span> <span class="token string">"Intense, full"</span><span class="token punctuation">,</span> <span class="token string">"None"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C007"</span><span class="token punctuation">,</span> <span class="token string">"Guatemala, Ground, 1 lb"</span><span class="token punctuation">,</span> <span class="token number">17.99</span><span class="token punctuation">,</span><span class="token string">"Guatemala"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">,</span> <span class="token string">"Rich and complex"</span><span class="token punctuation">,</span> <span class="token string">"Spicy"</span><span class="token punctuation">,</span><span class="token string">"Medium to high"</span><span class="token punctuation">,</span> <span class="token string">"Medium to full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C008"</span><span class="token punctuation">,</span> <span class="token string">"Guatemala, Ground, 1 lb"</span><span class="token punctuation">,</span> <span class="token number">18.75</span><span class="token punctuation">,</span><span class="token string">"Guatemala"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">,</span> <span class="token string">"Rich and complex"</span><span class="token punctuation">,</span> <span class="token string">"Spicy"</span><span class="token punctuation">,</span><span class="token string">"Medium to high"</span><span class="token punctuation">,</span> <span class="token string">"Medium to full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C009"</span><span class="token punctuation">,</span> <span class="token string">"Guatemala, Whole, 1 lb"</span><span class="token punctuation">,</span> <span class="token number">19.99</span><span class="token punctuation">,</span><span class="token string">"Sumatra"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">,</span> <span class="token string">"Vibrant and powdery"</span><span class="token punctuation">,</span><span class="token string">"Like dark chocolate"</span><span class="token punctuation">,</span> <span class="token string">"Gentle"</span><span class="token punctuation">,</span> <span class="token string">"Rich and full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C010"</span><span class="token punctuation">,</span> <span class="token string">"Guatemala, Ground, 1 lb"</span><span class="token punctuation">,</span> <span class="token number">20.50</span><span class="token punctuation">,</span><span class="token string">"Sumatra"</span><span class="token punctuation">,</span> <span class="token string">"Medium"</span><span class="token punctuation">,</span> <span class="token string">"Vibrant and powdery"</span><span class="token punctuation">,</span><span class="token string">"Like dark chocolate"</span><span class="token punctuation">,</span> <span class="token string">"Gentle"</span><span class="token punctuation">,</span> <span class="token string">"Rich and full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C011"</span><span class="token punctuation">,</span> <span class="token string">"Special Blend, Whole, 1 lb"</span><span class="token punctuation">,</span><span class="token number">16.80</span><span class="token punctuation">,</span> <span class="token string">"Latin American Blend"</span><span class="token punctuation">,</span> <span class="token string">"Dark roast"</span><span class="token punctuation">,</span><span class="token string">"Full, roasted flavor"</span><span class="token punctuation">,</span> <span class="token string">"Hearty"</span><span class="token punctuation">,</span> <span class="token string">"Bold and rich"</span><span class="token punctuation">,</span> <span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token string">"C012"</span><span class="token punctuation">,</span> <span class="token string">"Special Blend, Ground, 1 lb"</span><span class="token punctuation">,</span><span class="token number">17.55</span><span class="token punctuation">,</span> <span class="token string">"Latin American Blend"</span><span class="token punctuation">,</span> <span class="token string">"Dark roast"</span><span class="token punctuation">,</span><span class="token string">"Full, roasted flavor"</span><span class="token punctuation">,</span> <span class="token string">"Hearty"</span><span class="token punctuation">,</span> <span class="token string">"Bold and rich"</span><span class="token punctuation">,</span> <span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">(</span><span class="token string">"B001"</span><span class="token punctuation">,</span> <span class="token string">"Home Coffee Brewer"</span><span class="token punctuation">,</span><span class="token number">150.00</span><span class="token punctuation">,</span> <span class="token string">"Brewer 100"</span><span class="token punctuation">,</span> <span class="token string">"Pourover"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">(</span><span class="token string">"B002"</span><span class="token punctuation">,</span> <span class="token string">"Coffee Brewer, 2 Warmers"</span><span class="token punctuation">,</span><span class="token number">200.00</span><span class="token punctuation">,</span> <span class="token string">"Brewer 200"</span><span class="token punctuation">,</span> <span class="token string">"Pourover"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">(</span><span class="token string">"B003"</span><span class="token punctuation">,</span> <span class="token string">"Coffee Brewer, 3 Warmers"</span><span class="token punctuation">,</span><span class="token number">280.00</span><span class="token punctuation">,</span> <span class="token string">"Brewer 210"</span><span class="token punctuation">,</span> <span class="token string">"Pourover"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">(</span><span class="token string">"B004"</span><span class="token punctuation">,</span> <span class="token string">"Commercial Brewer, 20 cups"</span><span class="token punctuation">,</span><span class="token number">380.00</span><span class="token punctuation">,</span> <span class="token string">"Quick Coffee 100"</span><span class="token punctuation">,</span> <span class="token string">"Automatic"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">(</span><span class="token string">"B005"</span><span class="token punctuation">,</span> <span class="token string">"Commercial Brewer, 40 cups"</span><span class="token punctuation">,</span><span class="token number">480.00</span><span class="token punctuation">,</span> <span class="token string">"Quick Coffee 200"</span><span class="token punctuation">,</span> <span class="token string">"Automatic"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A001"</span><span class="token punctuation">,</span> <span class="token string">"Almond Flavored Syrup"</span><span class="token punctuation">,</span> <span class="token number">9.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A002"</span><span class="token punctuation">,</span> <span class="token string">"Irish Creme Flavored Syrup"</span><span class="token punctuation">,</span> <span class="token number">9.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A003"</span><span class="token punctuation">,</span> <span class="token string">"Mint Flavored syrup"</span><span class="token punctuation">,</span> <span class="token number">9.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A004"</span><span class="token punctuation">,</span> <span class="token string">"Caramel Flavored Syrup"</span><span class="token punctuation">,</span> <span class="token number">9.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A005"</span><span class="token punctuation">,</span> <span class="token string">"Gourmet Coffee Cookies"</span><span class="token punctuation">,</span> <span class="token number">12.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A006"</span><span class="token punctuation">,</span> <span class="token string">"Gourmet Coffee Travel Thermo"</span><span class="token punctuation">,</span> <span class="token number">18.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A007"</span><span class="token punctuation">,</span> <span class="token string">"Gourmet Coffee Ceramic Mug"</span><span class="token punctuation">,</span> <span class="token number">8.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A008"</span><span class="token punctuation">,</span> <span class="token string">"Gourmet Coffee 12 Filters"</span><span class="token punctuation">,</span> <span class="token number">15.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">"A009"</span><span class="token punctuation">,</span> <span class="token string">"Gourmet Coffee 36 Filters"</span><span class="token punctuation">,</span> <span class="token number">45.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> catalog<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Initializes the sales object. */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadSales</span><span class="token punctuation">(</span><span class="token class-name">Catalog</span> catalog<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Order</span> orderOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>orderOne<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span>catalog<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"C001"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sales<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>orderOne<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Order</span> orderTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>orderTwo<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span>catalog<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"C002"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>orderTwo<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span>catalog<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"A001"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sales<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>orderTwo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Order</span> orderThree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>orderThree<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span>catalog<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"B002"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sales<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>orderThree<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Displays a menu of options and verifies the user's choice. * * @return an integer in the range [0,3] */</span><span class="token keyword">private</span> <span class="token keyword">int</span>  <span class="token function">getChoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>  <span class="token punctuation">{</span><span class="token keyword">int</span>  input<span class="token punctuation">;</span><span class="token keyword">do</span>  <span class="token punctuation">{</span><span class="token keyword">try</span>  <span class="token punctuation">{</span>stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stdErr<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"[0]  Quit\n"</span>             <span class="token operator">+</span> <span class="token string">"[1]  Display sales (Plain Text)\n"</span>             <span class="token operator">+</span> <span class="token string">"[2]  Display sales (HTML)\n"</span>             <span class="token operator">+</span> <span class="token string">"[3]  Display sales (XML)\n"</span>             <span class="token operator">+</span> <span class="token string">"choice&gt; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stdErr<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stdIn<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> input <span class="token operator">&amp;&amp;</span> <span class="token number">3</span> <span class="token operator">&gt;=</span> input<span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Invalid choice:  "</span> <span class="token operator">+</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span>  nfe<span class="token punctuation">)</span>  <span class="token punctuation">{</span>stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nfe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span>  input<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * Changes the sales . * * @param newFormatter a sales formatter */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setSalesFormatter</span><span class="token punctuation">(</span><span class="token class-name">SalesFormatter</span> newFormatter<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newFormatter <span class="token keyword">instanceof</span> <span class="token class-name">PlainTextSalesFormatter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salesFormatter <span class="token operator">=</span> newFormatter<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newFormatter <span class="token keyword">instanceof</span> <span class="token class-name">HTMLSalesFormatter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salesFormatter <span class="token operator">=</span> newFormatter<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newFormatter <span class="token keyword">instanceof</span> <span class="token class-name">XMLSalesFormatter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salesFormatter <span class="token operator">=</span> newFormatter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/* PLACE YOUR CODE HERE */</span><span class="token punctuation">}</span><span class="token comment">/** * Displays the sales information in the current format. */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">displaySales</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sales<span class="token punctuation">.</span><span class="token function">getNumberOfOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The catalog is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>               stdOut<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>salesFormatter<span class="token punctuation">.</span><span class="token function">formatSales</span><span class="token punctuation">(</span>sales<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>   <span class="token comment">/* PLACE YOUR CODE HERE */</span><span class="token punctuation">}</span><span class="token comment">/** * Presents the user with a menu of options and executes the * selected task. */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>  <span class="token punctuation">{</span><span class="token keyword">int</span>  choice <span class="token operator">=</span> <span class="token function">getChoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>choice <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>                <span class="token function">setSalesFormatter</span><span class="token punctuation">(</span><span class="token class-name">PlainTextSalesFormatter</span><span class="token punctuation">.</span><span class="token function">getSingletonInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">displaySales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* PLACE YOUR CODE HERE */</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">setSalesFormatter</span><span class="token punctuation">(</span><span class="token class-name">HTMLSalesFormatter</span><span class="token punctuation">.</span><span class="token function">getSingletonInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">displaySales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* PLACE YOUR CODE HERE */</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">setSalesFormatter</span><span class="token punctuation">(</span><span class="token class-name">XMLSalesFormatter</span><span class="token punctuation">.</span><span class="token function">getSingletonInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">displaySales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* PLACE YOUR CODE HERE */</span><span class="token punctuation">}</span>choice <span class="token operator">=</span> <span class="token function">getChoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Using-File-I-x2F-O-in-the-Gourmet-Coffee-System"><a href="#Using-File-I-x2F-O-in-the-Gourmet-Coffee-System" class="headerlink" title="Using File I/O in the Gourmet Coffee System"></a>Using File I/O in the Gourmet Coffee System</h1><h2 id="Prerequisites-Goals-and-Outcomes-2"><a href="#Prerequisites-Goals-and-Outcomes-2" class="headerlink" title="Prerequisites, Goals, and Outcomes"></a>Prerequisites, Goals, and Outcomes</h2><p><strong>Prerequisites</strong><br>Before you begin this exercise, you need mastery of the following: </p><ul><li>Java API<ul><li>Knowledge of the class StringTokenizer</li></ul></li><li>File I/O<ul><li>Knowledge of file I/O <ul><li>How to read data from a file </li><li>How to write data to a file</li></ul></li></ul></li></ul><p><em><strong>Goals</strong></em><br>Reinforce your ability to use file I/O </p><p><em><strong>Outcomes</strong></em><br>You will master the following skills: </p><ul><li>Produce applications that read data from a file and parse it </li><li>Produce applications that write data to a file</li></ul><p><strong>Background</strong><br>In this assignment, you will create another version of the Gourmet Coffee System. In previous versions, the data for the product catalog was hard-coded in the application. In this version, the data will be loaded from a file. Also, the user will be able to write the sales information to a file in one of three formats: plain text, HTML, or XML. Part of the work has been done for you and is provided in the student archive. You will implement the code that loads the product catalog and persists the sales information. </p><p><strong>Description</strong><br>The Gourmet Coffee System sells three types of products: coffee, coffee brewers, and accessories for coffee consumption. A file called catalog.dat stores the product data:</p><ul><li>catalog.dat. File with product data</li></ul><p>Every line in catalog.dat contains exactly one product.<br>A line for a coffee product has the following format:<br><code>Coffee_code_description_price_origin_roast_flavor_aroma_acidity_body</code></p><p><strong>where:</strong></p><ul><li>“<strong>Coffee</strong>“ is a prefix that indicates the line type. </li><li><strong>code</strong> is a string that represents the code of the coffee. </li><li><strong>description</strong> is a string that represents the description of the coffee. </li><li><strong>price</strong> is a double that represents the price of the coffee. </li><li><strong>origin</strong> is a string that represents the origin of the coffee. </li><li><strong>roast</strong> is a string that represents the roast of the coffee. </li><li><strong>flavor</strong> is a string that represents the flavor of the coffee. </li><li><strong>aroma</strong> is a string that represents the aroma of the coffee. </li><li><strong>acidity</strong> is a string that represents the acidity of the coffee. </li><li><strong>body</strong> is a string that represents the body of the coffee.</li></ul><p>The fields are delimited by an underscore ( _ ). You can assume that the fields themselves do not contain any underscores.<br>A line for a coffee brewer has the following format:<br><code>Brewer_code_description_price_model_waterSupply_numberOfCups</code></p><p><strong>where:</strong></p><ul><li>“<strong>Brewer</strong>“ is a prefix that indicates the line type. </li><li><strong>code</strong> is a string that represents the code of the brewer. </li><li><strong>description</strong> is a string that represents the description of the brewer. </li><li><strong>price</strong> is a double that represents the price of the brewer. </li><li><strong>model</strong> is a string that represents the model of the coffee brewer. </li><li><strong>waterSupply</strong> is a string that represents the water supply of the coffee brewer. </li><li><strong>numberOfCups</strong> is an integer that represents the capacity of the coffee brewer in number of cups.</li></ul><p>The fields are delimited by an underscore ( _ ). You can assume that the fields themselves do not contain any underscores.<br>A line for a coffee accessory has the following format:<br><code>Product_code_description_price</code></p><p><strong>where:</strong></p><ul><li>“<strong>Product</strong>“ is a prefix that indicates the line type. </li><li><strong>code</strong> is a string that represents the code of the product. </li><li><strong>description</strong> is a string that represents the description of the product. </li><li><strong>price</strong> is a double that represents the price of the product.</li></ul><p>The fields are delimited by an underscore ( _ ). You can assume that the fields themselves do not contain any underscores.<br>The following class diagram highlights the elements you will use to load the product catalog and persist the sales information:</p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Gourmet%E5%92%96%E5%95%A1%E7%B3%BB%E7%BB%9F%E5%BB%BA%E6%A8%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/7.png"></p><p><em>Figure 1 Portion of Gourmet Coffee System class diagram</em></p><p>In this assignment, you will implement FileCatalogloader and complete the implementation of GourmetCoffee.</p><h2 id="Interface-CatalogLoader"><a href="#Interface-CatalogLoader" class="headerlink" title="Interface CatalogLoader"></a>Interface CatalogLoader</h2><p>The interface CatalogLoader declares a method for producing a product catalog. A complete implementation of this interface is provided in the student archive.</p><p><strong>Method:</strong></p><ul><li><strong>Catalog loadCatalog(String fileName) throws FileNotFoundException, IOException, DataFormatException</strong></li></ul><p>Loads the information in the specified file into a product catalog and returns the catalog. </p><h2 id="Class-DataFormatException"><a href="#Class-DataFormatException" class="headerlink" title="Class DataFormatException"></a>Class DataFormatException</h2><p>This exception is thrown when a line in the file being parsed has errors:</p><ul><li><strong>The line does not have the expected number of tokens.</strong> </li><li><strong>The tokens that should contain numbers do not.</strong></li></ul><p>A complete implementation of this class is provided in the student archive.</p><h2 id="Class-FileCatalogLoader"><a href="#Class-FileCatalogLoader" class="headerlink" title="Class FileCatalogLoader"></a>Class FileCatalogLoader</h2><p>The class FileCatalogLoader implements interface CatalogLoader. It is used to obtain a product catalog from a file. You should implement this class from scratch:</p><p><strong>Methods:</strong></p><ul><li><p><strong>private Product readProduct(String line) throws DataFormatException</strong><br>This method reads a line of coffee-accessory data. It uses the class StringTokenizer to extract the accessory data in the specified line. If the line is error free, this method returns a Product object that encapsulates the accessory data. If the line has errors, that is, if it does not have the expected number of tokens or the token that should contain a double does not; this method throws a DataFormatException that contains the line of malformed data. </p></li><li><p><strong>private Coffee readCoffee(String line) throws DataFormatException</strong><br>This method reads a line of coffee data. It uses the class StringTokenizer to extract the coffee data in the specified line. If the line is error free, this method returns a Coffee object that encapsulates the coffee data. If the line has errors, that is, if it does not have the expected number of tokens or the token that should contain a double does not; this method throws a DataFormatException that contains the line of malformed data. </p></li><li><p><strong>private CoffeeBrewer readCoffeeBrewer(String line) throws DataFormatException</strong><br>This method reads a line of coffee-brewer data. It uses the class StringTokenizer to extract the brewer data in the specified line. If the line is error free, this method returns a CoffeeBrewer object that encapsulates the brewer data. If the line has errors, that is, if it does not have the expected number of tokens or the tokens that should contain a number do not; this method throws a DataFormatException that contains the line of malformed data. </p></li><li><p><strong>public Catalog loadCatalog(String filename) throws FileNotFoundException, IOException, DataFormatException</strong><br>This method loads the information in the specified file into a product catalog and returns the catalog. It begins by opening the file for reading. It then proceeds to read and process each line in the file. The method String.startsWith is used to determine the line type: </p><ul><li>If the line type is “<strong>Product</strong>“, the method readProduct is invoked. </li><li>If the line type is “<strong>Coffee</strong>“, the method readCoffee is invoked. </li><li>If the line type is “<strong>Brewer</strong>“, the method readCoffeeBrewer is invoked.</li></ul><p>After the line is processed, loadCatalog adds the product (accessory, coffee, or brewer) to the product catalog. When all the lines in the file have been processed, load returns the product catalog to the calling method.</p></li></ul><p>This method can throw the following exceptions: </p><ul><li><strong>FileNotFoundException</strong> — if the specified file does not exist. </li><li><strong>IOException</strong> — if there is an error reading the information in the specified file. </li><li><strong>DataFormatException</strong> — if a line in the file has errors (the exception should contain the line of malformed data).</li></ul><h2 id="Class-GourmetCoffee-1"><a href="#Class-GourmetCoffee-1" class="headerlink" title="Class GourmetCoffee"></a>Class GourmetCoffee</h2><p>A partial implementation of class GourmetCoffee is provided in the student archive. You should implement writeFile, a method that writes sales information to a file:</p><ul><li><strong>private void writeFile(String fileName, String content) throws IOException</strong></li></ul><p>This method creates a new file with the specified name, writes the specified string to the file, and then closes the file.</p><h2 id="Class-TestFileCatalogLoader"><a href="#Class-TestFileCatalogLoader" class="headerlink" title="Class TestFileCatalogLoader"></a>Class TestFileCatalogLoader</h2><p>This class is a test driver for FileCatalogLoader. A complete implementation is included in the student archive student-files.zip. You should use this class to test your implementation of FileCatalogLoader. </p><p><strong>Files</strong><br>The following files are needed to complete this assignment: </p><ul><li><strong>student-files.zip</strong> — Download this file. This archive contains the following: <ul><li><strong>Class files</strong> <ul><li><strong>Coffee.class</strong></li><li><strong>CoffeeBrewer.class</strong></li><li><strong>Product.class</strong></li><li><strong>Catalog.class</strong></li><li><strong>OrderItem.class</strong></li><li><strong>Order.class</strong></li><li><strong>Sales.class</strong></li><li><strong>SalesFormatter.class</strong></li><li><strong>PlainTextSalesFormatter.class</strong></li><li><strong>HTMLSalesFormatter.class</strong></li><li><strong>XMLSalesFormatter.class</strong></li></ul></li><li><strong>Documentation</strong> <ul><li><strong>Coffee.html</strong></li><li><strong>CoffeeBrewer.html</strong></li><li><strong>Product.html</strong></li><li><strong>Catalog.html</strong></li><li><strong>OrderItem.html</strong></li><li><strong>Order.html</strong></li><li><strong>Sales.html</strong></li><li><strong>SalesFormatter.html</strong></li><li><strong>PlainTextSalesFormatter.html</strong></li><li><strong>HTMLSalesFormatter.html</strong></li><li><strong>XMLSalesFormatter.html</strong></li></ul></li><li><strong>Java files</strong> <ul><li><strong>CatalogLoader.java:</strong> A complete implementation </li><li><strong>DataFormatException.java:</strong> A complete implementation </li><li><strong>TestFileCatalogLoader.java:</strong> A complete implementation </li><li><strong>GourmetCoffee.java:</strong> Use this template to complete your implementation.</li></ul></li><li><strong>Data files for the test driver</strong> <ul><li><strong>catalog.dat:</strong> A file with product information </li><li><strong>empty.dat:</strong> An empty file</li></ul></li></ul></li></ul><p><strong>Tasks</strong><br>Implement the class FileCatalogLoader and the method GourmetCoffee.writeFile. Document using Javadoc and follow Sun’s code conventions. The following steps will guide you through this assignment. Work incrementally and test each increment. Save often.</p><ul><li><p>Extract the files by issuing the following command at the command prompt:<br>C:&gt;unzip student-files.zip</p></li><li><p>Then, implement class FileCatalogLoader from scratch. Use the TestFileCatalogLoader driver to test your implementation. </p></li><li><p>Next, implement the method GourmetCoffee.writeFile. </p></li><li><p>Finally, compile the class GourmetCoffee, and execute the class GourmetCoffee by issuing the following command at the command prompt:<br>C:&gt;java GourmetCoffee catalog.dat<br>Sales information has been hard-coded in the GourmetCoffee template provided by iCarnegie.</p></li><li><p>If the user displays the catalog, the output should be:<br>C001 Colombia, Whole, 1 lb<br>C002 Colombia, Ground, 1 lb<br>C003 Italian Roast, Whole, 1 lb<br>C004 Italian Roast, Ground, 1 lb<br>C005 French Roast, Whole, 1 lb<br>C006 French Roast, Ground, 1 lb<br>C007 Guatemala, Whole, 1 lb<br>C008 Guatemala, Ground, 1 lb<br>C009 Sumatra, Whole, 1 lb<br>C010 Sumatra, Ground, 1 lb<br>C011 Decaf Blend, Whole, 1 lb<br>C012 Decaf Blend, Ground, 1 lb<br>B001 Home Coffee Brewer<br>B002 Coffee Brewer, 2 Warmers<br>B003 Coffee Brewer, 3 Warmers<br>B004 Commercial Coffee, 20 Cups<br>B005 Commercial Coffee, 40 Cups<br>A001 Almond Flavored Syrup<br>A002 Irish Creme Flavored Syrup<br>A003 Mint Flavored syrup<br>A004 Caramel Flavored Syrup<br>A005 Gourmet Coffee Cookies<br>A006 Gourmet Coffee Travel Thermo<br>A007 Gourmet Coffee Ceramic Mug<br>A008 Gourmet Coffee 12 Cup Filters<br>A009 Gourmet Coffee 36 Cup Filters</p></li><li><p>If the user saves the sales information in plain text, a file with the following content should be created: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Order</span> <span class="token number">1</span><span class="token number">5</span> C001 <span class="token number">17.99</span><span class="token class-name">Total</span> <span class="token operator">=</span> <span class="token number">89.94999999999999</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Order</span> <span class="token number">2</span><span class="token number">2</span> C002 <span class="token number">18.75</span><span class="token number">2</span> A001 <span class="token number">9.0</span><span class="token class-name">Total</span> <span class="token operator">=</span> <span class="token number">55.5</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Order</span> <span class="token number">3</span><span class="token number">1</span> B002 <span class="token number">200.0</span><span class="token class-name">Total</span> <span class="token operator">=</span> <span class="token number">200.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>If the user saves the sales information in HTML, a file with the following content should be created: </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Orders<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>Total = 89.94999999999999<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>code:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> C001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>quantity:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>price:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 17.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>Total = 55.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>code:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> C002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>quantity:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>price:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 18.75<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>code:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> A001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>quantity:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>price:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>Total = 200.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>code:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> B002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>quantity:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>price:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 200.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>If the user saves the sales information in XML, a file with the following content should be created:</p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Sales</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Order</span> <span class="token attr-name">total</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>89.94999999999999<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrderItem</span> <span class="token attr-name">quantity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17.99<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>C001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrderItem</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Order</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Order</span> <span class="token attr-name">total</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55.5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrderItem</span> <span class="token attr-name">quantity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18.75<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>C002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrderItem</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrderItem</span> <span class="token attr-name">quantity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>9.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>A001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrderItem</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Order</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Order</span> <span class="token attr-name">total</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OrderItem</span> <span class="token attr-name">quantity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>B002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OrderItem</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Order</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Sales</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>Submission</strong></em><br>Upon completion, submit only the following:</p><ol><li>FileCatalogLoader.java</li><li>GourmetCoffee.java</li></ol><h2 id="DataFormatException类"><a href="#DataFormatException类" class="headerlink" title="DataFormatException类"></a>DataFormatException类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataFormatException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span>  <span class="token punctuation">{</span>        <span class="token comment">//序列化</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Constructs a &lt;code&gt;DataFormatException&lt;/code&gt; with no detail     * message.     */</span>    <span class="token keyword">public</span> <span class="token class-name">DataFormatException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Constructs a &lt;code&gt;DataFormatException&lt;/code&gt; with the     * specified detail message.     *     * @param message  the malformed data     */</span>    <span class="token keyword">public</span> <span class="token class-name">DataFormatException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CatalogLoader类"><a href="#CatalogLoader类" class="headerlink" title="CatalogLoader类"></a>CatalogLoader类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * This interface declares a method for obtaining a products catalog. * * @author BlankSpace * @version 1.1.0 * @see Catalog */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CatalogLoader</span>  <span class="token punctuation">{</span>    <span class="token comment">/*     * Loads the product catalog with the data in the specified file.     *     * @param filename  The name of a file that contains catalog     *                  information.     * @return the product catalog.     * @throws FileNotFoundException  if the specified file does not     *                                exist.     * @throws IOException  if there is an error reading the     *                     information in the specified file.     * @throws DataFormatException  if the file contains     *                                     badly-formed data.     */</span>    <span class="token class-name">Catalog</span> <span class="token function">loadCatalog</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">DataFormatException</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FileCatalogLoader类"><a href="#FileCatalogLoader类" class="headerlink" title="FileCatalogLoader类"></a>FileCatalogLoader类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringTokenizer</span></span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * This class implements interface CatalogLoader. It is used to obtain a product catalog from a file. *  * @author BlankSpace * @version 1.0.0 * @see DataFormatException */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileCatalogLoader</span> <span class="token keyword">implements</span> <span class="token class-name">CatalogLoader</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> split <span class="token operator">=</span> <span class="token string">"_"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * This method reads a line of coffee-accessory data.     * It uses the class StringTokenizer to extract the accessory data in the specified line.     * If the line is error free, this method returns a Product object that encapsulates the accessory data.     * If the line has errors, that is, if it does not have the expected number of tokens or the token that should contain a double does not.     * This method throws a DataFormatException that contains the line of malformed data.      * @param line     * @return an new object of Coffee     * @throws DataFormatException, which contains the line of malformed data     */</span>    <span class="token keyword">private</span> <span class="token class-name">Product</span> <span class="token function">readProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataFormatException</span> <span class="token punctuation">{</span>           <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token class-name">String</span> description <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>           <span class="token class-name">StringTokenizer</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> split<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               code <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               description <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               price <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> description<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>           <span class="token comment">/**     * This method reads a line of coffee data. It uses the class StringTokenizer to extract the coffee data in the specified line.     * If the line is error free, this method returns a Coffee object that encapsulates the coffee data.     * If the line has errors, that is, if it does not have the expected number of tokens or the token that should contain a double does not.     * This method throws a DataFormatException that contains the line of malformed data.      * @param line     * @return an new object of Coffee     * @throws DataFormatException, which contains the line of malformed data     */</span>    <span class="token keyword">private</span> <span class="token class-name">Coffee</span> <span class="token function">readCoffee</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataFormatException</span> <span class="token punctuation">{</span>           <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> description <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> origin <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> roast <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> flavor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> aroma <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> acidity <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">StringTokenizer</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> split<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            code <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            description <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            price <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            origin <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            roast <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flavor <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            aroma <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            acidity <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            body <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> description<span class="token punctuation">,</span> price<span class="token punctuation">,</span> origin<span class="token punctuation">,</span> roast<span class="token punctuation">,</span> flavor<span class="token punctuation">,</span> aroma<span class="token punctuation">,</span> acidity<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">/**    * This method reads a line of coffee-brewer data.    * It uses the class StringTokenizer to extract the brewer data in the specified line.     * If the line is error free, this method returns a CoffeeBrewer object that encapsulates the brewer data.    * If the line has errors, that is, if it does not have the expected number of tokens or the tokens that should contain a number do not.    * This method throws a DataFormatException that contains the line of malformed data.     * @param line    * @return an new object of Coffee    * @throws DataFormatException, which contains the line of malformed data    */</span>    <span class="token keyword">private</span> <span class="token class-name">CoffeeBrewer</span> <span class="token function">readCoffeeBrewer</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataFormatException</span> <span class="token punctuation">{</span>           <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token class-name">String</span> description <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>           <span class="token class-name">String</span> model <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token class-name">String</span> waterSupply <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> numberOfCups <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token class-name">StringTokenizer</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> split<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               code <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               description <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               price <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               model <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               waterSupply <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               numberOfCups <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token punctuation">}</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> description<span class="token punctuation">,</span> price<span class="token punctuation">,</span> model<span class="token punctuation">,</span> waterSupply<span class="token punctuation">,</span> numberOfCups<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>           <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Catalog</span> <span class="token function">loadCatalog</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">DataFormatException</span> <span class="token punctuation">{</span>           <span class="token class-name">Catalog</span> catalog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Catalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">BufferedReader</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> line <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>line <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Product"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token function">readProduct</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Coffee"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token function">readCoffee</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Brewer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   catalog<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token function">readCoffeeBrewer</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               line <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           buffer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> catalog<span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TestFileCatalogLoader类"><a href="#TestFileCatalogLoader类" class="headerlink" title="TestFileCatalogLoader类"></a>TestFileCatalogLoader类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * Tests the class &lt;code&gt;FileCatalogLoader&lt;/code&gt; * * @author BlankSpace * @version 1.0.0 * @see FileCatalogLoader */</span><span class="token keyword">public</span> <span class="token keyword">class</span>  <span class="token class-name">TestFileCatalogLoader</span>  <span class="token punctuation">{</span>    <span class="token comment">/* Standard output stream */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">PrintWriter</span>  stdOut <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Standard error stream */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">PrintWriter</span>  stdErr <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Tests methods of class {@link FileCatalogLoader}     *     * @param args  not used.     * @throws IOException  if an I/O error occurs.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        stdOut<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stdOut<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Testing class FileCatalogLoader..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TestFileCatalogLoader</span> tester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestFileCatalogLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tester<span class="token punctuation">.</span><span class="token function">testLoadCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stdOut<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"All tests passed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stdOut<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Displays a message in the standard error stream if the value specified     * by parameter &lt;code&gt;condition&lt;code&gt; is &lt;code&gt;false&lt;/code&gt;.     *     * @param message  the error message.     * @param condition  the test condition.     * @return the value of &lt;code&gt;condition&lt;/code&gt;     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token keyword">boolean</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stdErr<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"** Test failure "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * Displays a message in the standard error stream.     *     * @param message  the error message.     * @return &lt;code&gt;false&lt;/code&gt;;     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stdErr<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"** Test failure "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Tests the method &lt;code&gt;loadCatalog&lt;/code&gt;.     *     * @return &lt;code&gt;true&lt;/code&gt; if all test passed; otherwise returns     *         &lt;code&gt;false&lt;/code&gt;.     * @throws IOException  if an I/O error occurs.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLoadCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">CatalogLoader</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileCatalogLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// Testing an empty file</span>            <span class="token class-name">Catalog</span> emptyCatalog <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadCatalog</span><span class="token punctuation">(</span><span class="token string">"empty.dat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"1, testing method read with an empty file"</span><span class="token punctuation">,</span>                emptyCatalog <span class="token keyword">instanceof</span> <span class="token class-name">Catalog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"2, testing method read with an empty file"</span>                <span class="token operator">+</span> emptyCatalog<span class="token punctuation">.</span><span class="token function">getNumberOfProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" products loaded"</span><span class="token punctuation">,</span>                emptyCatalog<span class="token punctuation">.</span><span class="token function">getNumberOfProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Testing a not empty file</span>            <span class="token class-name">Catalog</span> catalog <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadCatalog</span><span class="token punctuation">(</span><span class="token string">"catalog.dat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"3, testing method loadCatalog"</span><span class="token punctuation">,</span>                catalog <span class="token keyword">instanceof</span> <span class="token class-name">Catalog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"4, testing method loadCatalog: "</span>                <span class="token operator">+</span> catalog<span class="token punctuation">.</span><span class="token function">getNumberOfProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" products loaded"</span><span class="token punctuation">,</span>                catalog<span class="token punctuation">.</span><span class="token function">getNumberOfProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Testing product C001</span>            <span class="token class-name">Product</span> product <span class="token operator">=</span> catalog<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"C001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"5, testing method loadCatalog"</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                product <span class="token keyword">instanceof</span> <span class="token class-name">Coffee</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Coffee</span> coffeeC001 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Coffee</span><span class="token punctuation">)</span> product<span class="token punctuation">;</span>            <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"6, testing method loadCatalog: "</span> <span class="token operator">+</span>                 coffeeC001<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                coffeeC001<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"C001"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                coffeeC001<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Colombia, Whole, 1 lb"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                coffeeC001<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">17.99</span> <span class="token operator">&amp;&amp;</span>                coffeeC001<span class="token punctuation">.</span><span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Colombia"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                coffeeC001<span class="token punctuation">.</span><span class="token function">getRoast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Medium"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                coffeeC001<span class="token punctuation">.</span><span class="token function">getFlavor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Rich and Hearty"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span>                coffeeC001<span class="token punctuation">.</span><span class="token function">getAroma</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Rich"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                coffeeC001<span class="token punctuation">.</span><span class="token function">getAcidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Medium"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                coffeeC001<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Testing product C002</span>            product <span class="token operator">=</span> catalog<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"C002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"7, testing method loadCatalog: "</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                product <span class="token keyword">instanceof</span> <span class="token class-name">Coffee</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Coffee</span> coffeeC002 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Coffee</span><span class="token punctuation">)</span> product<span class="token punctuation">;</span>            <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"8, testing method loadCatalog: "</span> <span class="token operator">+</span>                 coffeeC002<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                coffeeC002<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"C002"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                coffeeC002<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Colombia, Ground, 1 lb"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                coffeeC002<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">18.75</span> <span class="token operator">&amp;&amp;</span>                coffeeC002<span class="token punctuation">.</span><span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Colombia"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                coffeeC002<span class="token punctuation">.</span><span class="token function">getRoast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Medium"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                coffeeC002<span class="token punctuation">.</span><span class="token function">getFlavor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Rich and Hearty"</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span>                coffeeC002<span class="token punctuation">.</span><span class="token function">getAroma</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Rich"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                coffeeC002<span class="token punctuation">.</span><span class="token function">getAcidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Medium"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                coffeeC002<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Full"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Testing product A001</span>            product <span class="token operator">=</span> catalog<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"A001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"9, testing method loadCatalog: "</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                product <span class="token keyword">instanceof</span> <span class="token class-name">Product</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"10, testing method loadCatalog: "</span> <span class="token operator">+</span>                 product<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                product<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"A001"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                product<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Almond Flavored Syrup"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                product<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">9.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Testing product B002</span>            product <span class="token operator">=</span> catalog<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"B002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"11, testing method loadCatalog: "</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                product <span class="token keyword">instanceof</span> <span class="token class-name">CoffeeBrewer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CoffeeBrewer</span> brewerB002 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CoffeeBrewer</span><span class="token punctuation">)</span> product<span class="token punctuation">;</span>            <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"12, testing method loadCatalog: "</span> <span class="token operator">+</span>                 brewerB002<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                brewerB002<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"B002"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                brewerB002<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Coffee Brewer, 2 Warmers"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                brewerB002<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">200.0</span> <span class="token operator">&amp;&amp;</span>                brewerB002<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Brewer 200"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                brewerB002<span class="token punctuation">.</span><span class="token function">getWaterSupply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Pourover"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                brewerB002<span class="token punctuation">.</span><span class="token function">getNumberOfCups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"13, testing method loadCatalog: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GourmetCoffeeSystem类-1"><a href="#GourmetCoffeeSystem类-1" class="headerlink" title="GourmetCoffeeSystem类"></a>GourmetCoffeeSystem类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * This class implements a gourmet coffee system. * * @author BlankSpace * @version 1.1.0 * @see Product * @see Coffee * @see CoffeeBrewer * @see Catalog * @see OrderItem * @see Order * @see SalesFormatter * @see PlainTextSalesFormatter * @see HTMLSalesFormatter * @see XMLSalesFormatter * @see CatalogLoader * @see FileCatalogLoader */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GourmetCoffee</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">BufferedReader</span>  stdIn <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">PrintWriter</span>  stdOut <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">PrintWriter</span>  stdErr <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Catalog</span>  catalog<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Sales</span>  sales<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SalesFormatter</span> salesFormatter<span class="token punctuation">;</span>    <span class="token comment">/**     * Loads catalog data from a file and starts the application.     * &lt;p&gt;     * The name of the file is specified in the command arguments.     * &lt;/p&gt;     *     * @param args  String arguments.     * @throws IOException if there are errors in the input.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>  <span class="token punctuation">{</span>        <span class="token class-name">Catalog</span> catalog <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Usage: java GourmetCoffee filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                catalog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileCatalogLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadCatalog</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> fnfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The file does not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DataFormatException</span> dfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The file contains malformed data: "</span>                               <span class="token operator">+</span> dfe<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">GourmetCoffee</span> application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GourmetCoffee</span><span class="token punctuation">(</span>catalog<span class="token punctuation">)</span><span class="token punctuation">;</span>            application<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Constructs a &lt;code&gt;GourmetCoffee&lt;/code&gt; object.     * Initializes the catalog data with the value specified     * in the parameter.     *     * @param initialCatalog a product catalog     */</span>    <span class="token keyword">private</span> <span class="token class-name">GourmetCoffee</span><span class="token punctuation">(</span><span class="token class-name">Catalog</span> initialCatalog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>catalog <span class="token operator">=</span> initialCatalog<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sales <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salesFormatter <span class="token operator">=</span> <span class="token class-name">PlainTextSalesFormatter</span><span class="token punctuation">.</span><span class="token function">getSingletonInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadSales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Initializes the sales object.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadSales</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Order</span> orderOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Product</span> productOne <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>catalog<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"C001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>productOne <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            orderOne<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span>productOne<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sales<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>orderOne<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Order</span> orderTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Product</span> productTwo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>catalog<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"C002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Product</span> productThree <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>catalog<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"A001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>productTwo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>productThree <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            orderTwo<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span>productTwo<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            orderTwo<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span>productThree<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sales<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>orderTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Order</span> orderThree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Product</span> productFour <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>catalog<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"B002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>productFour <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            orderThree<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderItem</span><span class="token punctuation">(</span>productFour<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sales<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>orderThree<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Presents the user with a menu of options and executes the     * selected task.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>  <span class="token punctuation">{</span>        <span class="token keyword">int</span>  choice <span class="token operator">=</span> <span class="token function">getChoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>choice <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>                <span class="token function">displayCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>salesFormatter <span class="token operator">=</span>                    <span class="token class-name">PlainTextSalesFormatter</span><span class="token punctuation">.</span><span class="token function">getSingletonInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">writeFile</span><span class="token punctuation">(</span>                    <span class="token function">readFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>salesFormatter<span class="token punctuation">.</span><span class="token function">formatSales</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sales<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>salesFormatter <span class="token operator">=</span>                    <span class="token class-name">HTMLSalesFormatter</span><span class="token punctuation">.</span><span class="token function">getSingletonInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">writeFile</span><span class="token punctuation">(</span>                    <span class="token function">readFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>salesFormatter<span class="token punctuation">.</span><span class="token function">formatSales</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sales<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>salesFormatter <span class="token operator">=</span>                    <span class="token class-name">XMLSalesFormatter</span><span class="token punctuation">.</span><span class="token function">getSingletonInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">writeFile</span><span class="token punctuation">(</span>                    <span class="token function">readFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>salesFormatter<span class="token punctuation">.</span><span class="token function">formatSales</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sales<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            choice <span class="token operator">=</span> <span class="token function">getChoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Displays a menu of options and verifies the user's choice.     *     * @return an integer in the range [0,7]     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span>  <span class="token function">getChoice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>  <span class="token punctuation">{</span>        <span class="token keyword">int</span>  input<span class="token punctuation">;</span>        <span class="token keyword">do</span>  <span class="token punctuation">{</span>            <span class="token keyword">try</span>  <span class="token punctuation">{</span>                stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stdErr<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"[0]  Quit\n"</span>                             <span class="token operator">+</span> <span class="token string">"[1]  Display Catalog\n"</span>                             <span class="token operator">+</span> <span class="token string">"[2]  Save sales (Plain Text)\n"</span>                             <span class="token operator">+</span> <span class="token string">"[3]  Save sales (HTML)\n"</span>                             <span class="token operator">+</span> <span class="token string">"[4]  Save sales (XML)\n"</span>                             <span class="token operator">+</span> <span class="token string">"choice&gt; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stdErr<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                input <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stdIn<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> input <span class="token operator">&amp;&amp;</span> <span class="token number">4</span> <span class="token operator">&gt;=</span> input<span class="token punctuation">)</span>  <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Invalid choice:  "</span> <span class="token operator">+</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span>  nfe<span class="token punctuation">)</span>  <span class="token punctuation">{</span>                stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nfe<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  input<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Displays the catalog.     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">displayCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>catalog<span class="token punctuation">.</span><span class="token function">getNumberOfProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stdErr<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The catalog is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>catalog<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stdOut<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span>                               <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Creates a new file (which has the specified name) and writes     * the specified string to the new file.     *     * @param filename name of the file that will store the data     * @param content data to be stored     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">/* PLACE YOUR CODE HERE */</span>        <span class="token class-name">BufferedWriter</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           buffer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>           buffer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Prompts the user for a filename (the name of the file that     * will store the sales information) and returns the user's     * response.     *     * @return name of a file     */</span>    <span class="token keyword">private</span>  <span class="token class-name">String</span> <span class="token function">readFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>  <span class="token punctuation">{</span>        stdErr<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Filename&gt; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stdErr<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stdIn<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类间关系</title>
      <link href="/2021/03/11/ruan-jian-gong-cheng/mian-xiang-dui-xiang/lei-jian-guan-xi/"/>
      <url>/2021/03/11/ruan-jian-gong-cheng/mian-xiang-dui-xiang/lei-jian-guan-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h1><p>泛化是通过通用类（超类或父类）与专用类（子类）之间的一种语义关系，子类是父类的一种，子类是父类的特殊化，子类对象可以用在允许使用父类的场合，任何子类实例是父类的非直接实例。<br>通过泛化，可以不必陈述已经定义的属性，父类中定义的属性和方法可以在子类中复用，我们称子类继承了父类的属性和方法。<br>泛化是很强大的软件复用技术，极大地简化了模型的语义和图形表示。<br>泛化有助于增加规格说明、类之间公共属性的利用以及更好地确认变更的位置。</p><p>泛化关系在UML中用指向其父类的空心三角表示。</p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%B1%BB%E9%97%B4%E5%85%B3%E7%B3%BB/1.png"></p><p>泛化是一个强有力的实用概念，但由于复杂的继承机制，它也可能带来很多问题，特别是在大型软件项目中。</p><p>必须明确的是，继承$≠$泛化。</p><p>继承只用于类而非对象，只用于类型而非值。<br>泛化是一种类之间的语义关系，说明子类接口必须包含父类的所有特性；继承是一种机制，通过这种机制，较特殊的元素可以合并较一般的元素中定义的结构和行为。</p><h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><p>下面分享聚合的四种语义。</p><h2 id="ExclusiveOwns语义"><a href="#ExclusiveOwns语义" class="headerlink" title="ExclusiveOwns语义"></a>ExclusiveOwns语义</h2><ul><li>构件类对复合类存在依赖性。删除一个复合对象时将会向下扩散，相关的构件对象也会被删除。</li><li>聚合是<a href="https://blankspace.blog.csdn.net/article/details/113789378">传递</a>的。</li><li>聚合是非<a href="https://blankspace.blog.csdn.net/article/details/113789378">对称</a>的。</li><li>聚合是固定的。如果$B_{1}$是$A_{1}$的一部分，则它绝不是$A_{i}(i\neq{1})$的一部分。</li></ul><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%B1%BB%E9%97%B4%E5%85%B3%E7%B3%BB/2.png"></p><h2 id="Owns语义"><a href="#Owns语义" class="headerlink" title="Owns语义"></a>Owns语义</h2><ul><li>构件类对复合类存在依赖性。</li><li>聚合是传递的。</li><li>聚合是非对称的。</li></ul><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%B1%BB%E9%97%B4%E5%85%B3%E7%B3%BB/3.png"></p><h2 id="Has语义"><a href="#Has语义" class="headerlink" title="Has语义"></a>Has语义</h2><ul><li>聚合是传递的。</li><li>聚合是非对称的。</li></ul><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%B1%BB%E9%97%B4%E5%85%B3%E7%B3%BB/4.png"></p><h2 id="Member语义"><a href="#Member语义" class="headerlink" title="Member语义"></a>Member语义</h2><ul><li>有目的地组合独立对象的特性，这个对象并不假定具有存在依赖性、传递性、非对称性或固定性。</li><li>是一个抽象，其中一组构件被看作为一个高层复合对象来考虑。</li><li>一个构件对象可以同时属于一个以上的复合对象，支持多对多的关系。</li></ul><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%B1%BB%E9%97%B4%E5%85%B3%E7%B3%BB/5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子系统与包</title>
      <link href="/2021/03/11/ruan-jian-gong-cheng/mian-xiang-dui-xiang/zi-xi-tong-yu-bao/"/>
      <url>/2021/03/11/ruan-jian-gong-cheng/mian-xiang-dui-xiang/zi-xi-tong-yu-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑构造块"><a href="#逻辑构造块" class="headerlink" title="逻辑构造块"></a>逻辑构造块</h1><p>主要的逻辑构造块是类，其他逻辑结构的概念则是子系统和包。</p><p>分而治之可以将大问题划分为许多小问题，从而简化直接求解大问题的难度，这导致了问题空间的分层模块化，也导致了系统被划分为子系统和软件包。这种划分必须谨慎规划，以减少子系统和软件包的层次间的依赖。</p><h1 id="子系统"><a href="#子系统" class="headerlink" title="子系统"></a>子系统</h1><p><strong>子系统</strong>的概念特殊化了<a href="https://blankspace.blog.csdn.net/article/details/114670184">构件</a>的概念，并被建模为构件的构造型。子系统封装了想实现的系统行为的某些部分。子系统提供的服务是由其内部的组成部分所提供的服务的结果，这也意味着子系统是不能实例化的。</p><p>子系统的服务能够也应该使用接口来定义。<br>封装行为以及通过接口提供服务的益处很多，包括隔离变更、可替换的服务实现、可扩展性以及复用性。</p><p>子系统可以在体系结构层被结构化，使得层之间的依赖是非循环的、最小化的。在每一层内，子系统可以嵌套，这意味着一个子系统可以包含另一个子系统。</p><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p><strong>包</strong>是具有指定名字的建模元素的分组。<br>与子系统类似的是，包所提供的服务是其内部组分（即类）所提供服务的结果。<br>与子系统不同的是，包不通过暴露接口而显露其行为。<br>包与子系统的区别是：对于包，客户请求包内的某元素完成行为；对于子系统，客户请求子系统本身完成行为。</p><p>包表示了一组类，用于划分应用程序的逻辑模型。<br>包是高度相关的类的聚合，这些类本身是内聚的，但相对于其他聚合来说又是松散耦合的。</p><p>包也可以嵌套。<br>外层包可以直接访问包含在它的嵌套包中的任何类。<br>一个类只能属于一个包。<br>与子系统类似的是，包拥有其成员，一个类或者接口可以只属于一个直接子系统或包。<br>与子系统不同的是，包可以直接被映射为程序设计语言元素结构，如package、module、命名空间等。</p><p>包可以以两种方式相关联：泛化和依赖。</p><h1 id="对比和总结"><a href="#对比和总结" class="headerlink" title="对比和总结"></a>对比和总结</h1><p>总的来说，子系统是一个更丰富的概念，既包含了包的结构化方面，也包含类的行为方面。<br>行为总由一个或多个<a href="https://blankspace.blog.csdn.net/article/details/105441651">接口</a>提供，客户通过这些接口请求子系统的服务。</p><p>通常，为了最小化系统依赖，应该将接口放在实现接口的子系统外面，允许将所有接口或绝大部分接口只放在包括接口的包中。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件技术</title>
      <link href="/2021/03/11/ruan-jian-gong-cheng/mian-xiang-dui-xiang/zu-jian-ji-zhu/"/>
      <url>/2021/03/11/ruan-jian-gong-cheng/mian-xiang-dui-xiang/zu-jian-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><blockquote><p>组件表示封装了系统内容的模块化组成部分，并且系统的表示在其环境中是可替换的。<br>组件在所提供的和所依赖的接口方面定义其行为。</p></blockquote><p>组件是系统的物理部分、实现的一个片段或一个软件程序，一般可理解为二进制可执行部分，也可以是不可直接运行部分。</p><p>组件具有以下特性：</p><ul><li>组件是独立的部署单元，不可以只部署组件的一部分。</li><li>组件是第三方组装单元，是充分文档化的和自包含的，可以被第三方插入到其他组件中。</li><li>组件没有持久状态，不能与其他拷贝区分开来，在任何给定的应用系统中，一个特定的组件最多有一个拷贝。</li><li>组件是系统的可替换部分，它可以被符合相同接口的另一个接口替换。</li><li>组件完成清晰的功能，并且是逻辑耦合和物理耦合的。</li><li>组件可以嵌套在其他组件中。</li></ul><h1 id="组件与包"><a href="#组件与包" class="headerlink" title="组件与包"></a>组件与包</h1><p><strong>子系统</strong>的概念特殊化了组件的概念，并被建模为组件的构造型。子系统封装了想实现的系统行为的某些部分。子系统提供的服务是由其内部的组成部分所提供的服务的结果，这也意味着子系统是不能实例化的。</p><p>包是建模元素的分组，并具有指定的名字。<br>在逻辑层上，每个类都属于一个单一的包。<br>在物理层上，每个类都至少由一个组件实现，并且一个组件可能只实现一个类，抽象类和接口则经常被多个组件实现。</p><p>通常情况下，包是比组件更大的体系结构单元，包倾向于以水平方式组织类，这些类是在应用域中静态接近的类。<br>组件是对行为相近的类的垂直组织，这些类可能来自不同的域，但贡献于一个单一的业务活动，可能只是一个用例。</p><p>包和组件具有正交性，这使得它们很难建立起依赖。通常的情况是，逻辑包依赖几个物理组件。</p><h1 id="组件与类、接口"><a href="#组件与类、接口" class="headerlink" title="组件与类、接口"></a>组件与类、接口</h1><p>组件与类的区别：</p><ul><li>组件是部署在某个计算机结点上的物理抽象；类表示逻辑事物，为了起到物理抽象的作用，不得不将其实现为组件。</li><li>组件只显示它所包含的类的某些借口，很多其他接口都被封装在组件中，它们只被协作的类在内部使用而对其他组件是不可见的。</li></ul><p><strong>提供接口</strong>是由组件（或其他分类符，如类）实现了的接口，它表示组件的实例为它们的客户所提供的服务。</p><p><strong>依赖接口</strong>是指可能被组件使用的接口，它指明一个组件为了执行它的功能并完成它自己向客户提供的服务所需要的服务。</p><h1 id="组件与组件图"><a href="#组件与组件图" class="headerlink" title="组件与组件图"></a>组件与组件图</h1><p>组件图关注对所实现系统中的结构及组件的依赖性建模。</p><p>组件图描述代码组件的物理结构以及各种组件之间的依赖关系，建模软件的组件及其相互之间的关系，由组件标记符和组件之间的关系构成。</p><p>在组件图，组件是软件单个组成部分，它可以是一个文件，产品、可执行文件和脚本等。</p><p>组件图的组件包含关键词标签<code>&lt;&lt;component&gt;&gt;</code>和分类器矩形框右上角显示的组件图标。</p><p>组件图中接口定义了组件交互的细节，接口显示为小球和球窝的样子。提供接口的一方使用小球，请求接口使用球窝表示。端口和接口不一定是一对一的关系，端口可以用来对接口分组。</p><p>组件的内部结构可以通过内部结构图表示。子系统的内部结构图可以用<code>&lt;&lt;subsystem&gt;&gt;</code>表示。</p><h1 id="组件与软件复用"><a href="#组件与软件复用" class="headerlink" title="组件与软件复用"></a>组件与软件复用</h1><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/114686154">软件复用</a></p><p>UML将复用定义为：已有人工制品的使用。</p><blockquote><p>记住，除了继承，还可以通过其他方式进行复用，包括代码拷贝。在建模中的最大错误之一就是为了获得复用而强迫使用不适当的泛化，这种做法通常会造成混乱。</p></blockquote><p>软件复用的粒度及对应的复用策略：</p><ul><li>类 ~ 工具包（类库）</li><li>组件 ~ 框架</li><li>解决方案 ~ 分析与设计模式</li></ul><p>组件带来的软件复用：</p><ul><li>时间维度：使用以前的软件版本作为新版本的基础，加入新功能，适应新需求，即软件维护。</li><li>平台维度：以某平台上的软件为基础，修改其和运行平台相关的部分，使其运行于新平台，即软件移植。</li><li>应用维度：将某软件或其中的组件用于其他应用系统中，新系统具有不同功能和用途，即真正的软件复用。</li></ul><h2 id="工具包复用"><a href="#工具包复用" class="headerlink" title="工具包复用"></a>工具包复用</h2><p>工具包强调在类一级进行代码复用。</p><p>在这种层次的复用中，程序员通过调用某些类库中的具体类来完成程序。<br>此程序的主题是程序员编写的，而不是复用的。<br><del><em>（就好比你调用Guava库的某些API来简化你的Java编程）</em></del> </p><p>有两种工具包：</p><ul><li>基础工具包：基础类由对象编程环境广泛提供，包括实现原始数据类型的类、结构化数据类型与集合。</li><li>体系结构工具包：体系结构类通常作为系统软件的一部分，如OS、DB、GUI软件。</li></ul><h2 id="框架复用"><a href="#框架复用" class="headerlink" title="框架复用"></a>框架复用</h2><p>框架强调组件级的设计复用。</p><p>与工具包复用不同，一个框架提供程序的骨架，程序员通过编写框架需要调用的程序代码在框架骨架里完成程序，程序本身是定制的。</p><p>除了框架本身的具体类，框架提供了大量的抽象类用于程序员实现定制的程序。</p><p><del><em>（就好比基于Spring框架来开发Web系统的Java后端）</em></del> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletComponentScan</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ServletComponentScan</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringbootApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个框架是可定制的应用软件。</p><p>虽然框架是一种极有吸引力的复用建议，但也有很多缺点。<br>框架所交付的通用的、最低公有分母解决方案可能并不能令人满意，甚至可能是过时的。如果如此，框架不但没有给采纳者带来优势，反而在追求新式解决方案时可能产生维护的负担。</p><h2 id="模式复用"><a href="#模式复用" class="headerlink" title="模式复用"></a>模式复用</h2><p>模式强调的是开发方法的复用，它们提供对象交互的思想和例子来表示好的开发实践，得到可理解和可扩展的解决方案。</p><p>模式可应用于开发生命周期的分析阶段、体系结构设计阶段或详细设计阶段，从而产生了分析模式、体系结构模式和设计模式（一般来说，设计模式包含体系结构模式）。</p><p>模式是被证实的解决方案，很多情况下都适用。这些情况已经被标识，并可以用于开发者寻找问题解决方案的线索。一个模式的任何已知的不利条件和副作用都应该被列出来以便开发者做出正确的决定。</p><p>虽然很多设计模式包含了样例代码，使得程序员可以复用，但模式复用很大程度上是概念性的。<br>设计模式的范围通常处于一个比类大但比组件小的范围内。<br>分析模式的范围则依赖于模式所应用的建模抽象的层次。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用例</title>
      <link href="/2021/03/11/ruan-jian-gong-cheng/mian-xiang-dui-xiang/yong-li/"/>
      <url>/2021/03/11/ruan-jian-gong-cheng/mian-xiang-dui-xiang/yong-li/</url>
      
        <content type="html"><![CDATA[<h1 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h1><p>用例驱动整个软件开发的生命周期，从需求分析道测试和维护，它是大多数开发活动的焦点和参照。</p><p>用例表示参与者从外部可以看到的业务功能，并且可以在以后的开发过程中单独测试。</p><p>参与者是主题外部的人或事物针对用例所扮演的角色。<br>参与者与用例交互是为了收到有用的结果。<br>参与者和用例应该从功能性需求的分析来确定。</p><p>一个用户表示：</p><ul><li>一个完整的功能。</li><li>一个外部可见的功能。</li><li>一个正交的功能（虽然用例执行期间可以共享对象，但是每个用例的执行独立于其他用例）。</li><li>由一个参与者启动的一个功能（一旦被启动，则这个用例可以与其他参与者交互）。</li><li>给参与者传递确切值的一个功能（并且这个值是在一个用例中获得）。</li></ul><p>用例是对参与者有价值的功能单元，并不一定与参与者直接关联。</p><p>每个用例都需要明确规定某种行为，也许包括变体，这样主题就可以与一个或多个参与者协作。用例定义主题所提供的行为，而不需要引用主题的内部结构。</p><p>用例可以从参与者任务的标识中导出，也可以通过对功能性需求的直接分析来确定。</p><p>可以从主题或参与者的角度对用例命名，但一般不建议从参与者的角度来命名用例，因为有可能引起争议。</p><p>用例图是参与者与用例的可视化表示，伴随有附加的定义和说明，此处不细说。</p><h1 id="用例间的关系"><a href="#用例间的关系" class="headerlink" title="用例间的关系"></a>用例间的关系</h1><p>用例间的关系主要包含以下四种：</p><ul><li>关联</li><li>包含</li><li>扩展</li><li>泛化</li></ul><p>关联建立起参与者和用例之间的通信渠道。</p><p>包含关系和扩展关系由&lt;&lt;include&gt;&gt;和&lt;&lt;extend&gt;&gt;来构造表示。</p><p><a href="https://blankspace.blog.csdn.net/article/details/114665438">泛化</a>关系允许一个特殊化的用例来改变基础用例的任何方面。</p><p>事实上，如果花费太多的工作量来发现用例间的关系，以及确定哪些关系适用于一对特定用例的话，项目将会很容易陷入困境。<br>另外，高层用例往往紧密地交织在一起，以至于关系链接占图的主要部分，使图难以理解，从而注意力从正确地标识用例转移到用例关系上。</p><h2 id="包含和扩展关系"><a href="#包含和扩展关系" class="headerlink" title="包含和扩展关系"></a>包含和扩展关系</h2><p><em>&lt;&lt;include&gt;&gt;</em> 关系允许将被包含用例中的公共行为分解出来。</p><p><em>&lt;&lt;extend&gt;&gt;</em> 关系通过在特定的扩展点激活另一个用例来扩展一个用例的行为，从而提供了一种可控的扩展形式。</p><p><em>&lt;&lt;include&gt;&gt;</em> 与 <em>&lt;&lt;extend&gt;&gt;</em> 关系的不同点在于“被包含”用例对“激活”用例的完成来说是必需的。</p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%94%A8%E4%BE%8B/1.png"></p><p>上图是一个大学注册系统的高层用例图，该模型包含了<strong>4个参与者</strong>和<strong>4个用例</strong>。每一个用例由一个参与者启动，是一个<strong>完整</strong>的、<strong>外部可见</strong>的和<strong>正交</strong>的功能。除了 <em>Student</em> 以外，所有的参与者都是启动者。<em>Student</em> 首先获取考试结果和注册指导，然后才能输入和验证下学期的学习计划。<br>用例 <em>Provide examination results</em> 可以 <em>&lt;&lt;extend&gt;&gt;</em> 用例 <em>Provide enrolment instructions</em>，但前者并不总是扩展后者。例如，对新生来说，考试结果还是未知的。这就是用 <em>&lt;&lt;extend&gt;&gt;</em> 构建扩展型，而不是用 <em>&lt;&lt;include&gt;&gt;</em> 来为这个关系建模的原因。<br>从用例 <em>Enter program of study</em> 到用例 <em>Validate program of study</em> 建立了 <em>&lt;&lt;include&gt;&gt;</em> 关系，这个 <em>&lt;&lt;include&gt;&gt;</em> 关系表明前者总是包含后者，每当输入学习计划时，都要验证是否存在时间冲突和特殊的批准等。</p><h2 id="UML扩展的建模概念"><a href="#UML扩展的建模概念" class="headerlink" title="UML扩展的建模概念"></a>UML扩展的建模概念</h2><ul><li><p>构造型</p><ul><li>构造型对现有的UML建模元素进行扩展，使现有元素的语义多样化。</li><li>构造型本身不是一个新的模型元素，没有改变UML的结构，只是扩展了现有表示法的语义。</li><li>表示方法：双尖括号括住的一个名字，如&lt;&lt;global&gt;&gt;、&lt;&lt;PK&gt;&gt;、&lt;&lt;include&gt;&gt;。</li><li><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%94%A8%E4%BE%8B/2.png"></li></ul></li><li><p>注释</p><ul><li>注释是从属于一组元素的文本解释，提供给元素添加各种解释的能力。</li><li>在UML的任何位置都能插入注释。</li><li>注释是对建模决策的附加说明，对模型语义没有任何影响。</li><li>表示方法：右上角卷起的矩形。</li><li><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%94%A8%E4%BE%8B/3.png"></li></ul></li><li><p>约束</p><ul><li>约束是指条件或限制，是对一个元素某些语义的声明，可以用自然语言文本或机器可读语言来表达。</li><li>约束表示附加给被约束元素的额外语义，并且用形式化的约束语言来描述。</li><li>约束是一个断言，表示正确的系统设计所满足的一个限制。</li><li>表示方法：大括号{ }中的文本字符串。</li><li>注释和约束的区别不在于表示法，而在于语义结果：注释对模型语义没有作用，它只是对模型决策的附加说明；约束对模型具有语义含义，并且在理论上应该用形式化的约束语言来描述。</li><li><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%94%A8%E4%BE%8B/4.png"></li></ul></li><li><p>标签</p><ul><li>标签定义是构造型的一个特性，显示为含有构造型声明的类矩形中的一个属性。</li><li>标签值是一个K-V对，附属于一个使用了包含标签定义的构造型的模型元素，该模型使用了包含标签定义的构造型。</li><li>标签的典型应用是提供项目管理信息。</li><li>标签与约束相似，表示模型中的任意文本信息，写在大括号中。</li><li>由于标签只能表示成一个定义在构造型上的属性，所以在将标签值应用到模型元素的特定实例前，模型元素必须定义一个带有标签定义的构造型。</li><li>同构造型和约束一样，几乎没有标签在UML中预定义。</li><li><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%94%A8%E4%BE%8B/5.png"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>帕斯卡三角形与二项式定理</title>
      <link href="/2021/03/10/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/pa-si-qia-san-jiao-xing-yu-er-xiang-shi-ding-li/"/>
      <url>/2021/03/10/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/pa-si-qia-san-jiao-xing-yu-er-xiang-shi-ding-li/</url>
      
        <content type="html"><![CDATA[<h1 id="帕斯卡三角形"><a href="#帕斯卡三角形" class="headerlink" title="帕斯卡三角形"></a>帕斯卡三角形</h1><p>$C(n,r)=\frac{n!}{r!(n-r)!}$</p><p>帕斯卡三角形：</p><pre class="line-numbers language-none"><code class="language-none">n=0                C(0,0)n=1            C(1,0)  C(1,1)n=2        C(2,0)  C(2,1)  C(2,2)n=3    C(3,0)  C(3,1)  C(3,2)  C(3,3)n=4 C(4,0)  C(4,1)  C(4,2)  C(4,3)  C(4,4)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>规律是除了每行第一个元素和最后一个元素以外，帕斯卡三角形的任意一个元素都是上一行中最接近它的那两个元素之和。</p><p>如果$r$和$n$是满足$1≤r&lt;n$的整数，那么$C(n,r)=C(n-1,r-1)+C(n-1,r)$</p><p>如果$r$和$n$是满足$0≤r≤n$的整数，那么$C(n,r)=C(n,n-r)$。</p><h1 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h1><p>二项式定理：对于每个正整数$n$，有$(x+y)^{n}=C(n,0)x^{n}+C(n,1)x^{n-1}y+\cdots+C(n,n-1)xy^{n-1}+C(n,n)y^{n}$。其中，数值$C(n,r)$被称为二项式系数。</p><h1 id="C-编程实现"><a href="#C-编程实现" class="headerlink" title="C++编程实现"></a>C++编程实现</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getNum</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getNum</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> row<span class="token operator">-</span>i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span> <span class="token function">getNum</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印示例：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%B8%95%E6%96%AF%E5%8D%A1%E4%B8%89%E8%A7%92%E5%BD%A2%E4%B8%8E%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86/1.png"></p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%B8%95%E6%96%AF%E5%8D%A1%E4%B8%89%E8%A7%92%E5%BD%A2%E4%B8%8E%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86/2.png"></p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%B8%95%E6%96%AF%E5%8D%A1%E4%B8%89%E8%A7%92%E5%BD%A2%E4%B8%8E%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86/3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学归纳法</title>
      <link href="/2021/03/10/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/shu-xue-gui-na-fa/"/>
      <url>/2021/03/10/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/shu-xue-gui-na-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="数学归纳法原理"><a href="#数学归纳法原理" class="headerlink" title="数学归纳法原理"></a>数学归纳法原理</h1><p>数学归纳法原理：设$S(n)$是涉及$n$的命题，假设对某个固定的整数$n_{0}$，</p><ol><li>$S(n_{0})$为真</li><li>只要$k$是一个整数，使得$k≥n_{0}$为真且$S(k)$为真，则$S(k+1)$就为真，那么$S(n)$对所有的整数$n≥n_{0}$就为真</li></ol><p>应用数学归纳法的证明分为两部分：</p><ol><li>通过证明某个命题$S(n_{0})$为真建立起归纳基础</li><li>归纳步骤，证明如果任何命题$S(k)$为真，则下一个命题$S(k+1)$也同样为真</li></ol><p>强数学归纳法原理：设$S(n)$是涉及整数$n$的命题，假设对某个固定的整数$n_{0}$，</p><ol><li>$S(n_{0})$为真</li><li>只要$k$是一个整数，使得$k≥n_{0}$为真且$S(n_{0}),S(n_{0}+1),…,S(k)$均为真，那么$S(k+1)$就为真，则对所有的整数$n≥n_{0}$，$S(n)$为真</li></ol><h1 id="斐波那契数列的递归复杂度"><a href="#斐波那契数列的递归复杂度" class="headerlink" title="斐波那契数列的递归复杂度"></a>斐波那契数列的递归复杂度</h1><p>$F_{0}=1$<br>$F_{1}=1$<br>$F_{2}=2$<br>$F_{3}=3$<br>$F_{4}=5$<br>$……$<br>$F_{i}=F_{i-1}+F_{i-2}$</p><p>$证：对于i≥1，有F_{i}＜(\frac{5}{3})^{n}$</p><p>$易证，F_{1}=1&lt;\frac{5}{3}，F_{2}=2&lt;(\frac{5}{3})^{2}=\frac{25}{9}$</p><p>$假设F_{k}&lt;(\frac{5}{3})^{k}$</p><p>$下面只需要证明F_{k+1}&lt;(\frac{5}{3})^{k+1}$</p><p>$F_{k+1}=F_{k}+F_{k-1}$</p><p>$F_{k+1}&lt;(\frac{5}{3})^{k}+(\frac{5}{3})^{k-1}=(\frac{3}{5})(\frac{5}{3})^{k+1}+(\frac{3}{5})^{2}(\frac{5}{3})^{k+1}=(\frac{15}{25})(\frac{5}{3})^{k+1}+(\frac{9}{25})(\frac{5}{3})^{k+1}=(\frac{24}{25})(\frac{5}{3})^{k+1}&lt;(\frac{5}{3})^{k+1}$</p><p>$得证$</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计数原理</title>
      <link href="/2021/03/10/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/ji-shu-yuan-li/"/>
      <url>/2021/03/10/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/ji-shu-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>这里介绍三个基本计数原理：鸽巢原理、加法原理、乘法原理。</p><p>鸽巢原理：假设要把一些鸽子放到鸽笼中去，鸽子的总数多于鸽笼总数，那么一定有某个鸽笼里至少有两只鸽子。更一般地，如果鸽子的总数超过鸽笼总数的$k$倍，那么某只鸽笼必定至少包含$k+1$只鸽子。</p><p>加法原理：假设有$k$个集合，第一个集合有$n_{1}$个元素，第二个集合有$n_{2}$个元素，以此类推。如果所有的元素都是不相同的，即$k$个集合中的任意两个互不相交，那么这些集合的并集有$n_{1}+n_{2}+\cdots+n_{k}$个元素。</p><p>乘法原理：考虑一个由$k$个步骤组成的序列，假设执行第一步的方法由$n_{1}$种，且对于执行第一步的每种方法，执行第二步的方法有$n_{2}$种。一般地，不管怎样执行前面各步，执行第$i$步($i=2,3,\cdots,k$)有$n_{i}$种方法，那么执行整个过程的不同方法就有$n_{1}n_{2}\cdots,n_{i}$种。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息系统</title>
      <link href="/2021/03/09/ruan-jian-gong-cheng/xin-xi-xi-tong/"/>
      <url>/2021/03/09/ruan-jian-gong-cheng/xin-xi-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h1><p>与系统规划有关的是，要认识到一个组织具有三级管理：</p><ul><li>策略级</li><li>战术级</li><li>操作级</li></ul><h2 id="策略级"><a href="#策略级" class="headerlink" title="策略级"></a>策略级</h2><ul><li>行政和高层管理级，制定系统产品长期计划，更强调预测性，从已知得到未知，如市场预测。</li><li>关键概念：知识（对信息的理解和有效使用）。</li><li>运用工具：知识处理系统。</li><li>关联技术：数据挖掘。<ul><li>关联（路径分析）：在数据中发现一个事件导致另一个相关事件发生的模式。</li><li>分类：发现某事实是否落入预定、感兴趣的类别中。</li><li>聚类：与分类相似，但种类未知，它们由聚类方法发现。</li></ul></li><li>用于数据挖掘的数据主要来源于数据仓库，而不是操作型数据库。</li></ul><h2 id="战术级"><a href="#战术级" class="headerlink" title="战术级"></a>战术级</h2><ul><li>做短期目标，进行信息资源分配，对已处理数据分析归纳，如预算分析、工资预测、调度、客服。</li><li>关键概念：信息（有用的数据，增值的事实）。</li><li>运用工具：分析处理系统，联机分析处理，OLAP 系统。<ul><li>关联技术：数据仓库技术。<ul><li>创建方式通常是在一个或多个事务数据库中提取的数据增量拷贝。</li><li>总是增加新数据，不移除历史数据。</li><li>独特特征：对数据的汇总和封装，目的是给源系统提供的数据增加价值。</li></ul></li><li>数据集市：主要保存被汇总的历史数据。</li></ul></li></ul><h2 id="操作级"><a href="#操作级" class="headerlink" title="操作级"></a>操作级</h2><ul><li>由底层操作员，做一些日常工作，如发工资、收银。</li><li>关键概念：数据（原始事实）。</li><li>运用工具：事务处理系统，联机事务处理，OLTP 系统。<ul><li>事务：工作的一个逻辑单元，完成某一特定的业务任务，并在任务完成后保证数据库的完整性。</li><li>关联技术：数据库技术。</li><li>OLTP中事务管理的两大主要功能：<ul><li>并发控制。</li><li>从软硬件故障中恢复。</li></ul></li></ul></li></ul><h1 id="系统约束"><a href="#系统约束" class="headerlink" title="系统约束"></a>系统约束</h1><p>系统服务定义了系统必须完成什么，而<strong>系统约束描述了系统在完成服务时怎样被约束</strong>。</p><p>设置系统约束是由于：</p><ul><li>界面需求</li><li>性能需求</li><li>安全性需求</li><li>操作性需求</li><li>政策和法律需求</li><li>……</li></ul><p>界面需求定义产品如何与用户进行交互。在需求文档中，定义GUI的外观和感觉即可，GUI的初步设计将在需求规格说明书以及后面的系统设计期间进行。</p><p>性能需求指定了完成各种任务的速度，即系统响应时间。广义上，性能需求包含与系统的可靠性、有效性、吞吐量相关的其他约束。</p><p>安全型需求描述了用户在系统控制下对信息的存取权限，可以赋予用户对数据的受限访问和/或对数据执行确定操作的受限权利。</p><p>操作性需求决定系统运行的软硬件环境，对用户培训和系统维护等方面有影响。</p><p>政策和法律需求常常是假定的，而不是在需求文档中明确表述的。这可能是代价非常高的错误，因为产品可能会由于政治或法律的原因很难或不可能部署。</p><p>可能还会有其他约束，比如可用性、可维护性等。</p><p>需要说明的是，<strong>不要夸大严格定义系统约束的重要性</strong>，由于忽略或错误解释系统约束而导致项目失败的例子并不少见。</p><h1 id="系统规划"><a href="#系统规划" class="headerlink" title="系统规划"></a>系统规划</h1><h2 id="SWOT"><a href="#SWOT" class="headerlink" title="SWOT"></a>SWOT</h2><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/105108011">用于信息规划的SWOT方法</a></p><ul><li>内涵：通过调整组织优势、劣势、机会和威胁的方式来进行IS开发项目的识别、分类、排序和选择。这是一个从确定组织使命开始的、自顶向下的方法。</li><li>使命陈述捕获一个组织的独特性质，并详细说明它未来的愿景，良好的使命陈述重点在于客户的需要。</li><li>对内部的企业优势和劣势的识别是成功业务规划的必要非充分条件。</li><li>对可利用的外部机会和可避免的外部威胁的认识是决定组织目的和目标的基础。</li><li>实质是看清自己，内因：优势劣势， 外因：机遇挑战。</li><li>得到SWOT矩阵，基于每一个问题细化目标，得到策略。</li></ul><h2 id="VCM"><a href="#VCM" class="headerlink" title="VCM"></a>VCM</h2><ul><li>内涵：分析组织中完整的活动链来评估竞争优势。</li><li>目的：理解哪种价值链配置将产生最大竞争优势。</li><li>组织的职能：<ul><li>基本活动，对最终产品追加价值。</li><li>支持活动，不对最终产品直接产生价值，至少不直接增加价值，它们仍然基础却不丰富产品。</li><li>基于不同业务场景来区分主要次要活动。</li></ul></li></ul><h2 id="BPR"><a href="#BPR" class="headerlink" title="BPR"></a>BPR</h2><ul><li>前提：当今组织必须彻底改造自己，并丢弃现在使用的功能分解、分层结构和操作原则。</li><li>主要目的：在组织中从根本上重新设计业务过程。必须对业务过程进行识别、流程化和改进。在工作流图中对过程文档化，并经历工作流分析。</li><li>主要障碍：需要向传统的总想管理结构中嵌入一个横向过程。</li></ul><h2 id="ISA"><a href="#ISA" class="headerlink" title="ISA"></a>ISA</h2><ul><li>自底向上的方法，它为能够适应各种业务策略的IS解决方案提供一种中立的系统结构框架。</li><li>ISA框架：<ul><li>5行：代表五种人，规划者、所有者、设计者、建造者、承包者。</li><li>6列：表现每个参与者所从事的6种不同的描述或体系结构模型。</li><li>规定软件过程中每一个阶段的成果由谁来完成的。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纠错码基础理论</title>
      <link href="/2021/03/09/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/jiu-cuo-ma-ji-chu-li-lun/"/>
      <url>/2021/03/09/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/jiu-cuo-ma-ji-chu-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="纠错基础"><a href="#纠错基础" class="headerlink" title="纠错基础"></a>纠错基础</h1><p><strong>字</strong>：任一由<code>'0'</code>、<code>'1'</code>字符组成的字符串。</p><p><strong>字长</strong>：字中<code>'0'</code>、<code>'1'</code>字符的个数。</p><p><strong>码</strong>：一些字的集合。</p><p><strong>码字</strong>：码中的字。</p><p><strong>废码</strong>：不在码中的字。</p><p><strong>码元</strong>：码字中的每一个字符<code>'0'</code>或<code>'1'</code>。</p><p>一般地，字长为$n$的不同字符一共有$2^{n}$个，它们分别是$n$维立方体的顶点。两个字中不同字符的个数正好等于从一个字出发沿着$n$维立方体的棱到另一个字所经过的最少棱数。</p><p>设$p$表示一个字符在信道中正确传送的概率，那么，由于噪声干扰，产生错误传送的概率是$q=1-p$。假设各位字符传送是相互独立的，那么，一个$n$位的码字中出现$r$个错误的概率是$C_{n}^{r}p^{n-r}q^{r}$，其中$C_{n}^{r}=\frac{n!}{(n-r)!r!}$是从$n$位中任取$r$位的不同组合数。</p><h1 id="线性分组码的纠错能力"><a href="#线性分组码的纠错能力" class="headerlink" title="线性分组码的纠错能力"></a>线性分组码的纠错能力</h1><p>对于长度为$2$的二进制编码$C_{1}={00,01,10,11}$，它的任一码字出错后仍是码字，无法查出单错。将$C_{1}$的每一码字增加$1$位，使每一个码字中所含$1$的个数为偶数，则变成$000,011,101,110$，如果传送过程有码字发生单错，则它就变成含有奇数个$1$的废码；如果有码字发生三错，则它也是含有奇数个$1$的废码。对于这种编码，我们很容易发现奇数个错误。这种编码方式不能纠正单错，比如$011$在第$2$位出错、$000$在第$3$位出错、$101$在第$1$位出错都会得到$001$。<br>同理，可以将$C_{1}$的每一码字增加$1$位，使每一个码字中所含$1$的个数为奇数。<br>这种增加奇偶校验位的码称为<strong>奇偶校验码</strong>，增加的位称为<strong>校验位</strong>，校验位是信息位的模2和，且每一码字都是等长的，这种码称为<strong>线性分组码</strong>。</p><p>设$S_{n}$是长度为$n$的二进制串组成的集合，$S_{n}={x_{1}x_{2}x_{3}…x_{n}|x_{i}\in{0,1},1≤i≤n}$，定义$S_{n}$上的二元运算$\oplus$，使得对于任意$X,Y\in{S_{n}}$，$X=x_{1}x_{2}x_{3}…x_{n}$，$Y=y_{1}y_{2}y_{3}…y_{n}$。$X\oplus{Y}=z_{1}z_{2}z_{3}…z_{n}$，其中$z_{i}=x_{i}+y_{i}$，集合${0,1}$上的$+$表示按位加。</p><p>代数系统$&lt;S_{n},\oplus&gt;$是群。</p><p>$S_{n}$的任一子集$C$，如果$&lt;C,\oplus&gt;$是群，则称码$C$是<strong>群码</strong>。</p><p>对于$S_{n}$中的任两元素$X=x_{1}x_{2}x_{3}…x_{n}$和$Y=y_{1}y_{2}y_{3}…y_{n}$，$X$和$Y$中对应位字符的不同个数称为$X$和$Y$的<strong>海明距</strong>，记作$H(X,Y)$，即$H(X,Y)=\sum\limits_{i=1}^{n}(x_{i}+y_{i})$。</p><p>设$X,Y,Z\in{S_{n}}$，海明距的性质：</p><ol><li>$H(X,X)=0$</li><li>$H(X,Y)=H(Y,X)$</li><li>$H(X,Y)+H(Y,Z)≥H(X,Z)$</li></ol><p>一个码$C$中所有不同码字的海明距的极小值称为码$C$的<strong>极小距</strong>，记作$d_{\min}(C)$，即$d_{\min}(C)=\min\limits_{X,Y\in{C},X≠Y}{H(X,Y)}$。</p><p>一个码$C$能查出不超过$k$个错误的充要条件是此码的极小距至少是$k+1$。</p><p><strong>最小距离译码准则</strong>：给定码$C$，设接收字为$X’$，在$C$中找到一个码字$X$，使得$X’$与$X$的海明距是$X’$与$C$中所有码字海明距的极小值，即$H(X,X’)=\min\limits_{Y\in{C}}{H(Y,X’)}$，则我们将$X’$译为码字$X$。</p><p>一个码能纠$k$个错的充要条件是此码的极小距至少是$2k+1$。</p><h1 id="海明码"><a href="#海明码" class="headerlink" title="海明码"></a>海明码</h1><p>海明在1950年提出了一种能纠单错的线性分组码，称为海明码，这种编码简单、直观、易于实现，在计算机系统中经常使用。</p><p>码字的<strong>重量</strong>：一个码字$X$所含$1$的个数，记作$W(X)$。</p><p>给定码$C$，对于任两个码字$X,Y\in{C}$，有$H(X,Y)=H(X\oplus{Y},0)=W(X\oplus{Y})$。</p><p>群码$C$中非零码字的最小重量等于此群码的最小距，即$\min\limits_{Z\in{C},Z≠0}{W(Z)}=d_{\min}(C)$。</p><p>设$H$是$k$行$n$列矩阵，$X=x_{1}x_{2}x_{3}…x_{n}$是$n$位二进制串，那么集合$G={X|=\vec{X}\cdot{H^{T}}=0}$对于运算$\oplus$构成群，即$G$是群码。</p><p>群码$G={X|=\vec{X}\cdot{H^{T}}=0}$称为由$H$生成的群码，$G$中的每一码字，称为由$H$生成的码字，矩阵$H$称为一致校验矩阵。<br>矩阵$H$的$n$个列向量分别记为$h_{1},h_{2},…,h_{n}$，其中$h_{i}$是第$i$个列向量，即$H=(h_{1}h_{2}…h_{n})$，其中$h_{i}=\begin{bmatrix} h_{1i} \ h_{2i} \ \vdots \ h_{ki} \end{bmatrix}$，定义列向量$h_{i}$与$h_{j}$的和$h_{i}\oplus{h_{j}}$为$h_{i}\oplus{h_{j}}=\begin{bmatrix} h_{1i}+h_{1j} \ h_{2i}+h_{2j} \ \vdots \ h_{ki}+h_{kj} \end{bmatrix}$</p><p>一致校验矩阵$H$生成一个重量为$q$的码字的充要条件是在$H$中存在$q$个列向量，他们的和为$0$。</p><p>由$H$生成的群码中非零码字的最小重量等于矩阵$H$中列向量为$0$的最小向量数。</p><p>线性分组码$C$中每一码字$X$的形式为：$X=x_{1}x_{2}…x_{m}x_{m+1}…x_{m+k}$，$k$位校验位与$m$位信息位之间有如下关系：$x_{m+i}=q_{i_{1}}x_{1}+q_{i_{2}}x_{2}+…+q_{i_{m}}x_{m}$，$1≤i≤k$，其中$q_{ij}\in{0,1}$，$1≤j≤m$。<br>令$H=\begin{bmatrix} Q &amp; I_{k} \end{bmatrix}$，其中$Q=\begin{bmatrix} q_{11} \cdots q_{1m} \ \vdots \qquad  \vdots\ q_{k1} \cdots q_{km} \end{bmatrix}<em>{k\times{m}}$，$I</em>{k}=\begin{bmatrix} 1 \quad\quad 0 \ \ \ddots \ 0 \quad\quad 1 \end{bmatrix}<em>{k\times{k}}$，那么，码$C$中任一码字满足方程$X\cdot{H^{T}}=0$，记$n=m+k$，这种码简称$(n,m)$码。<br>为了要使码$C$能纠正单错，由上述定理及其推论可知，要求$H$中的列向量不能为$0$且不能出现$I</em>{k}$中的$k$个列向量，因此，可以从$2^{k}-a-k$个列向量中任取$m$个来组成$Q$，故必须满足$m≤2^{k}-1-k$或$2^{k}≥(m+k)+1=n+1$&gt;</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有限状态机基础理论</title>
      <link href="/2021/03/09/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/you-xian-zhuang-tai-ji-ji-chu-li-lun/"/>
      <url>/2021/03/09/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/you-xian-zhuang-tai-ji-ji-chu-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="有限状态机"><a href="#有限状态机" class="headerlink" title="有限状态机"></a>有限状态机</h1><p>现实世界的机器都可以认为由有限个部件组成，且每个部件都有有限个状态。</p><p>假设机器$M$由$N$个部件组成，用$q^{(i)}(t)$表示$M$在时间$t$的状态，那么，在时间$t$内，$M$的状态是一个$N$元有序组$&lt;q^{(1)}(t),q^{(2)}(t),…,q^{(N)}(t)&gt;$，故$M$总状态的最大可能数是所有部件状态数的积。若每一部件的状态数不超过$K$，则$M$的状态数不超过$K^{N}$。用$q(t)$表示$M$在时间$t$的状态，即$q(t)=&lt;q^{(1)}(t),q^{(2)}(t),…,q^{(N)}(t)&gt;$，所有不同的$q(t)$组成的集合称为状态集，记作$Q$。机器$M$在$t=0$时所处的状态称为初始状态，记作$q_{I}$，$q_{I}=q(0)$。</p><p>所有输入符号组成的集合称为输入符号集，记作$S$。<br>所有输出符号组成的集合称为输出符号集，记作$R$。</p><p>机器$M$在接收到输入信号$s(t)$时，它将产生一个输出$r(t)$，同时，状态从$q(t-1)$转换到$q(t)$。$r(t)$和$q(t)$不仅与$s(t)$有关，还与机器在前一瞬间的状态$q(t-1)$有关。因此，存在一个函数$f$用来描述机器的状态：$q(t)=f(q(t-1),s(t))$，$t≥1$，称之为状态转换函数。状态转换函数的定义域是状态集$Q$与输入符号集$S$的笛卡尔积，值域是状态集$Q$的子集，即$f:Q\times{S}→Q$。还存在一个函数$g$，用它来描述机器的输出：$r(t)=g(q(t-1),s(t))$，$t≥1$，称之为输出函数，$g:Q\times{S}→R$。</p><p>这类机器是当它处于状态$q(t-1)$且接收到输入信号$s(t)$，状态就转向唯一确定的下一状态$q(t)$，且产生一个确定的输出信号$r(t)$，称这类机器是确定型的。</p><p>状态有限的机器称为有限状态机，它有四部分组成：</p><ol><li>三个有限集$R$、$S$和$Q$</li><li>状态转换函数$f$</li><li>输出函数$g$</li><li>初态$q_{I}$</li></ol><h2 id="Melay自动机"><a href="#Melay自动机" class="headerlink" title="Melay自动机"></a>Melay自动机</h2><p>一台转换赋值有限状态机是一个六元有序组$M=(Q,S,R,f,g,q_{I})$，其中，$Q$是状态的有限集合，$S$是有限输入字母表，$R$是有限输出字母表，$f$是状态转换函数$f:Q\times{S}→Q$，$g$是输出函数$g:Q\times{S}→R$，$q_{I}\in{Q}$是初态。这类自动机，又称<strong>Melay自动机</strong>，它的输出符号不仅与及其所处的状态有关，还与输入字母有关，需要考虑状态$q(t)$是从哪一状态转换而来，也称转换赋值有限状态机。</p><p>描述有限状态机的方法有两种：状态表和状态图。</p><p>状态表可以同时表示两个函数，表的左端从上到下标记的所有状态，常把$q_{I}$放在最上面，表的上方从左到右标记所有的输入符号，因此表的行数是$|Q|$，列数是$|S|$，对应于状态$q$的行与相应于输入符号$s$的列的交错处，写上下一个状态$q’=f(q,s)$和输入符号$r=g(q,s)$。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/1.png"></p><p>状态图是一个有向图，其中每一个结点表示机器的一个状态，每一有向弧指出从一个状态到另一个状态的转换，此有向弧上加以标记$s/r$，其中$r$和$s$分别代表相应的输出符号和输入符号，对于初态$q_{I}$，用一个指向它的箭头来标明。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/2.png"></p><h2 id="Moore自动机"><a href="#Moore自动机" class="headerlink" title="Moore自动机"></a>Moore自动机</h2><p>对于$q’=f(g,s)$，$r=g(q,s)$，常将此记为$q\stackrel{s/r}{\longrightarrow}{q’}$。<br>这样，对于激励$s(1)s(2)…s(t)$产生响应$r(1)r(2)…r(t)$和状态序列$q^{(0)}q^{(1)}…q^{(t)}$，可以记为$q^{(0)}\stackrel{s(1)/r(1)}{\longrightarrow}{q^{(1)}}\stackrel{s(2)/r(2)}{\longrightarrow}{q^{(2)}}\stackrel{}{\longrightarrow}{…}\stackrel{}{\longrightarrow}{q^{(t-1)}}\stackrel{s(t)/r(t)}{\longrightarrow}{q^{(t)}}$。<br>如果令$\omega=s(1)s(2)…s(t)$表示激励，$\varphi=r(1)r(2)…r(t)$表示响应，那么机器的动作可以用更紧凑的记号表示为$q\stackrel{\omega/\varphi}{\longrightarrow}{q’}\begin{cases}q=q(0) \ q’=q(t) \end{cases}$</p><p>对于另一类有限状态机，其输入只与到达状态有关，而与从哪个状态转换来的无关，这种有限状态机称为状态赋值机，又称<strong>Moore自动机</strong>。<br>一台状态赋值有限状态机是一个六元有序组$M=(Q,S,R,f,h,q_{I})$，其中，$Q$是状态的有限集合，$S$是有限输入字母表，$R$是有限输出字母表，$f$是状态转换函数$f:Q\times{S}→Q$，$h$是输出函数$g:Q→R$，$q_{I}\in{Q}$是初态。</p><p>状态赋值机的状态表和状态图如下所示：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/3.png"></p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/4.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一元函数微积分学</title>
      <link href="/2021/03/04/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/yi-yuan-han-shu-wei-ji-fen-xue/"/>
      <url>/2021/03/04/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/yi-yuan-han-shu-wei-ji-fen-xue/</url>
      
        <content type="html"><![CDATA[<h1 id="求导"><a href="#求导" class="headerlink" title="求导"></a>求导</h1><h2 id="常数和基本初等函数的导数公式"><a href="#常数和基本初等函数的导数公式" class="headerlink" title="常数和基本初等函数的导数公式"></a>常数和基本初等函数的导数公式</h2><ol><li>$(C)’=0$</li><li>$(x^{n})’=nx^{n-1}$</li><li>$(\sin{x})’=\cos{x}$</li><li>$(\cos{x})’=-\sin{x}$</li><li>$(\tan{x})’=\sec^{2}{x}$</li><li>$(\cot{x})’=-\csc^{2}{x}$</li><li>$(\sec{x})’=\sec{x}\tan{x}$</li><li>$(\csc{x})’=-\csc{x}\cot{x}$</li><li>$(a^{x})’=a^{x}\ln{a}$，$a&gt;0$，$a≠1$</li><li>$(e^{x})’=e^{x}$</li><li>$(\log_{a}x)’=\frac{1}{x\ln{a}}$</li><li>$(\ln{x})’=\frac{1}{x}$</li><li>$(\arcsin{x})’=\frac{1}{\sqrt{1-x^{2}}}$</li><li>$(\arccos{x})’=-\frac{1}{\sqrt{1-x^{2}}}$</li><li>$(\arctan{x})’=\frac{1}{1+x^{2}}$</li><li>$(arccot{x})’=-\frac{1}{1+x^{2}}$</li></ol><h2 id="函数的四则运算导数法则"><a href="#函数的四则运算导数法则" class="headerlink" title="函数的四则运算导数法则"></a>函数的四则运算导数法则</h2><ol><li>$(u±v)’=u’±v)’$</li><li>$(Cu)’=Cu’$</li><li>$(uv)’=u’v+uv’$</li><li>$(\frac{u}{v})’=\frac{u’v-uv’}{v^{2}}$，$v≠0$</li></ol><h2 id="反函数的求导法则"><a href="#反函数的求导法则" class="headerlink" title="反函数的求导法则"></a>反函数的求导法则</h2><ul><li>$[f^{-1}(x)]’=\frac{1}{f’(y)}$</li><li>$\frac{dy}{dx}=\frac{1}{\frac{dx}{dy}}$</li></ul><h2 id="复合函数的求导法则"><a href="#复合函数的求导法则" class="headerlink" title="复合函数的求导法则"></a>复合函数的求导法则</h2><ul><li>$\frac{dy}{dx}=\frac{dy}{du}.\frac{du}{dx}$</li></ul><h2 id="常见高阶导数公式"><a href="#常见高阶导数公式" class="headerlink" title="常见高阶导数公式"></a>常见高阶导数公式</h2><ol><li>$(e^{x})^{(n)}=e^{x}$</li><li>$(a^{x})^{(n)}=(\ln{a})^{n}a^{x}$</li><li>$(\frac{1}{x+a})^{(n)}=\frac{(-1)^{n}n!}{(x+a)^{n+1}}$</li><li>$[\ln(x+a)]^{(n)}=\frac{(-1)^{n-1}(n-1)!}{(x+a)^{n}}$</li><li>$[\sin(kx+a)]^{(n)}=k^{n}\sin(kx+a+\frac{n\pi}{2})$</li><li>$[\cos(kx+a)]^{(n)}=k^{n}\cos(kx+a+\frac{n\pi}{2})$</li><li>$[uv]^{(n)}=\sum\limits_{i=0}^{n}C_{n}^{i}u^{(n-i)}v^{(i)}$</li><li>$[(x+a)^{m}]^{(n)}=\begin{cases}m(m-1)(m-2)…(m-n+1)(x+a)^{m-n}, &amp; m≥n \ 0, &amp; m&lt;n \end{cases}$</li></ol><h2 id="参数方程求导"><a href="#参数方程求导" class="headerlink" title="参数方程求导"></a>参数方程求导</h2><p>$\begin{cases}x=\varphi(t) \ y=\psi(t) \end{cases}$，$\frac{dy}{dx}=\frac{\psi’(t)}{\varphi’(t)}$</p><h1 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h1><ol><li>$\int{kdx}=kx+C$</li><li>$\int{x^{\mu}{dx}}=\frac{x^{\mu+1}}{\mu+1}+C$</li><li>$\int{\frac{dx}{x}}=\ln{|x|}+C$</li><li>$\int{\frac{dx}{1+x^{2}}}=\arctan{x}+C$</li><li>$\int{\frac{dx}{\sqrt{1-x^{2}}}}=\arcsin{x}+C$</li><li>$\int{\cos{x}dx}=\sin{x}+C$</li><li>$\int{\sin{x}dx}=-\cos{x}+C$</li><li>$\int{\frac{dx}{\cos^{2}{x}}}=\int{\sec^{2}{x}dx}=\tan{x}+C$</li><li>$\int{\frac{dx}{\sin^{2}{x}}}=\int{\csc^{2}{x}dx}=-\cot{x}+C$</li><li>$\int{\sec{x}\tan{x}dx}=\sec{x}+C$</li><li>$\int{\csc{x}\cot{x}dx}=-\csc{x}+C$</li><li>$\int{e^{x}dx}=e^{x}+C$</li><li>$\int{a^{x}dx}=\frac{a^{x}}{\ln{a}}+C$</li><li>$\int{\sh{x}dx}=\ch{x}+C$</li><li>$\int{\ch{x}dx}=\sh{x}+C$</li><li>$\int{\tan{x}dx}=-\ln{|\cos{x}|}+C$</li><li>$\int{\cot{x}dx}=\ln{|\sin{x}|}+C$</li><li>$\int{\sec{x}dx}=\ln{|\sec{x}+\tan{x}|}+C$</li><li>$\int{\csc{x}dx}=\ln{|\csc{x}-\cot{x}|}+C$</li><li>$\int{\frac{dx}{a^{2}+x^{2}}}=\frac{1}{a}\arctan{\frac{x}{a}}+C$</li><li>$\int{\frac{dx}{x^{2}-a^{2}}}=\frac{1}{2a}\ln{|\frac{x-a}{x+a}|}+C$</li><li>$\int{\frac{dx}{\sqrt{a^{2}-x^{2}}}}=\arcsin{\frac{x}{a}}+C$</li><li>$\int{\frac{dx}{\sqrt{x^{2}+a^{2}}}}=\ln{(x+\sqrt{x^{2}+a^{2}})}+C$</li><li>$\int{\frac{dx}{\sqrt{x^{2}-a^{2}}}}=\ln{|x+\sqrt{x^{2}-a^{2}}|}+C$</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论基础理论归纳</title>
      <link href="/2021/03/04/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/gai-lu-lun-ji-chu-li-lun-gui-na/"/>
      <url>/2021/03/04/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/gai-lu-lun-ji-chu-li-lun-gui-na/</url>
      
        <content type="html"><![CDATA[<h1 id="概率论基础理论归纳"><a href="#概率论基础理论归纳" class="headerlink" title="概率论基础理论归纳"></a>概率论基础理论归纳</h1><ol><li><strong>概率论</strong>是研究随机现象规律性的一门数学学科。</li><li>在一定条件下可能出现也可能不出现的现象称为<strong>随机现象</strong>。</li><li>随机现象的特征：条件不能完全决定结果。</li><li>随机现象是通过随机试验来研究的。</li><li>具有以下三个特征的试验被称为<strong>随机试验</strong>：<ol><li>可以在相同的条件下重复地进行。</li><li>每次试验的可能结果不止一个, 并且能事先明确试验的所有可能结果。</li><li>进行一次试验之前不能确定哪一个结果会出现。</li></ol></li><li>随机试验$E$的所有可能结果组成的集合称为$E$的<strong>样本空间</strong>, 记为$S$。</li><li>样本空间的元素，即试验E的每一个结果，称为<strong>样本点</strong>。</li><li>试验不同，对应的样本空间也不同。</li><li>同一试验，若试验目的不同，则对应的样本空间也不同。</li><li>建立样本空间，事实上就是建立随机现象的数学模型。因此，一个样本空间可以概括许多内容大不相同的实际问题。</li><li>随机试验E的样本空间S的子集称为E的<strong>随机事件</strong>，简称事件。</li><li>随机试验、样本空间与随机事件的关系:<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/1.png"></li><li>随机事件的关系和运算与集合的关系和运算一一对应。</li><li>概率具有<strong>非负性</strong>、<strong>规范性</strong>、<strong>可加性</strong>。</li><li>频率与概率的关系：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/2.png"></li><li>古典概型与几何概型：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/3.png"></li><li><strong>条件概率公式</strong>：$P(B|A)=\frac{P(AB)}{P(A)}$</li><li><strong>乘法定理</strong>：$P(AB)=P(B|A)P(A)$</li><li><strong>全概率公式</strong>：$P(A)=P(A|B_{1})P(B_{1})+P(A|B_{2})P(B_{2})+…+P(A|B_{n})P(B_{n})$<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/4.png"></li><li><strong>贝叶斯公式</strong>：$P(B_{i}|A)=\frac{P(A|B_{i})P(B_{i})}{\sum\limits_{j=1}^{n}P(A|B_{j})P(B_{j})}$，$i=1,2,…,n$</li><li>$A$，$B$ 两<strong>事件独立</strong> $⇔$ $P(AB)=P(A)P(B)$</li><li>$A$，$B$，$C$ 三事件独立 $⇔$ $P(AB)=P(A)P(B)\wedge{P(BC)=P(B)P(C)}\wedge{P(AC)=P(A)P(C)}\wedge{P(ABC)=P(A)P(B)P(C)}$</li><li>$A$，$B$ 两事件独立 $⇔$ $\overline{A}$ 与 $B$、$A$ 与$\overline{B}$、$\overline{A}$与$\overline{B}$相互独立</li><li><strong>随机变量</strong>是定义在样本空间上的一种特殊的函数。</li><li>随机变量与普通的函数不同，随机变量是一个函数，但它与普通的函数有着本质的差别，普通函数是定义在实数轴上的，而随机变量是定义在样本空间上的（样本空间的元素不一定是实数）。</li><li>随机变量随着试验的结果不同而取不同的值，由于试验的各个结果的出现具有一定的概率，因此随机变量的取值也有一定的概率规律。</li><li>随机事件包容在随机变量这个范围更广的概念之内。换而言之，随机事件是从静态的观点来研究随机现象，而随机变量则是从动态的观点来研究随机现象。</li><li>随机变量主要类别是<strong>离散型随机变量</strong>和<strong>连续型随机变量</strong>。</li><li><strong>两点分布</strong>(<strong>0-1分布</strong>)的分布律：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/5.png"></li><li><strong>等可能分布</strong>的分布律：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/6.png"></li><li>将试验$E$重复进行$n$次，若各次试验的结果互不影响，即每次试验结果出现的概率都不依赖于其它各次试验的结果，则称这n次试验是<strong>相互独立</strong>的，或称为<strong>n次重复独立试验</strong>。</li><li>设试验$E$只有两个可能结果：$A$及$\overline{A}$,则称$E$为<strong>伯努利试验</strong>。<br>设$P(A)=p(0&lt; p&lt;1)$，此时$P(A)=1-p$。<br>将$E$独立地重复地进行$n$次,则称这一串重复的独立试验为<strong>n重伯努利试验</strong>。</li><li><strong>二项分布</strong>$X\sim{b(n,p)}$的分布律：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/7.png"></li><li>二项分布与两点分布的关系：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/8.png"></li><li><strong>泊松分布</strong>$X\sim{\pi(\lambda)}$的分布律：$P{X=k}=\frac{\lambda^{k}e^{-\lambda}}{k!}$，$k=1,2,…$</li><li>二项分布和泊松分布的关系（$n&gt;10$，$p&lt;0.1$）：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/9.png"></li><li><strong>几何分布</strong>的分布律（$p+q=1$）：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/10.png"></li><li>随机变量的<strong>分布函数</strong>：$F(x)=P{X≤x}$</li><li>随机变量的分布函数$F(x)$是$x$的一个普通实函数，主要研究随机变量在某一区间内取值的概率情况。</li><li>随机变量的分布函数的重要性质和公式：<ol><li>$0≤F(x)≤1$，$x\in(-∞,+∞)$</li><li>$x_{1}≤x_{2}$，$F(x_{1})≤F(x_{2})$</li><li>$F(-∞)=\lim\limits_{x→-∞}F(x)=0$</li><li>$F(+∞)=\lim\limits_{x→+∞}F(x)=1$</li><li>$\lim\limits_{x→x_{0}^{+}}F(x)=F(x_{0})$，$x_{0}\in(-∞,+∞)$，任意分布函数处处右连续</li><li>$P(a&lt;X≤b)=F(b)-F(a)$</li><li>$P(X&gt;a)=1-F(a)$</li></ol></li><li>离散型随机变量的分布函数：$F(x)=P{X≤x}=\sum\limits_{x_{i}≤x}p_{k}$</li><li>连续型随机变量的<strong>概率密度</strong>：$F(x)=\int_{-∞}^{x}f(t)dt$</li><li>连续型随机变量的概率密度的重要性质和公式：<ol><li>$f(x)≥0$</li><li>$\int_{-∞}^{+∞}f(x)dx=1$</li><li>$P(x_{1}&lt;X≤x_{2})=F(x_{2})-F(x_{1})=\int_{x_{1}}^{x_{2}}f(x)dx$</li><li>若$f(x)$在$x$处连续，则有$F(x)’=f(x)$</li><li>对于任意可能值$a$，连续型随机变量取$a$的概率等于零，即$P{X=a}=0$</li><li>连续型随机变量取值落在某一区间的概率与区间开闭无关，即$P(a≤X≤b)=P(a&lt;X≤b)=P(a≤X&lt;b)=P(a&lt;X&lt;b)=F(b)-F(a)$</li></ol></li><li>若$X$为离散型随机变量，则${X=a}$是不可能事件$\leftrightarrow{P{X=a}=0}$</li><li>若$X$为连续型随机变量，则${X=a}$是不可能事件$→P{X=a}=0$，而$P{X=a}=0\nrightarrow{ {X=a} }$是不可能事件</li><li><strong>均匀分布</strong>$X\sim{U(a,b)}$的概率密度：$f(x)=\begin{cases}\frac{1}{b-a}, &amp; a&lt;x&lt;b \ 0, &amp; 其他 \end{cases}$<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/11.png"></li><li>均匀分布$X\sim{U(a,b)}$的分布函数：$F(x)=\begin{cases}0, &amp; x &lt; a\ \frac{x-a}{b-a}, &amp; a≤x&lt;b \ 1, &amp; x≥b \end{cases}$<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/12.png"></li><li><strong>指数分布</strong>的概率密度：$f(x)=\begin{cases}\frac{1}{\theta}e^{-\frac{x}{\theta}}, &amp; x&gt;0 \ 0, &amp; x ≤0\end{cases}$</li><li>指数分布的分布函数：$F(x)=\begin{cases}1-\frac{1}{\theta}e^{-\frac{x}{\theta}}, &amp; x&gt;0 \ 0, &amp; x ≤0\end{cases}$</li><li><strong>正态分布</strong>$X\sim{N(\mu,\sigma^{2})}$的概率密度：$f(x)=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^{2}}{2\sigma^{2}}}$</li><li>正态分布$X\sim{N(\mu,\sigma^{2})}$的分布函数：$F(x)=\frac{1}{\sqrt{2\pi}\sigma}\int_{-∞}^{x}e^{-\frac{(t-\mu)^{2}}{2\sigma^{2}}}dt$</li><li><strong>标准正态分布</strong>$X\sim{N(0,1)}$的概率密度：$f(x)=\frac{1}{\sqrt{2\pi}}e^{-\frac{x^{2}}{2}}$</li><li>标准正态分布$X\sim{N(0,1)}$的分布函数：$F(x)=\frac{1}{\sqrt{2\pi}}\int_{-∞}^{x}e^{-\frac{t^{2}}{2}}dt$</li><li>正态分布的重要性质和结论：<ol><li>若$X\sim{N(\mu,\sigma^{2})}$，则$Z=\frac{X-\mu}{\sigma}\sim{N(0,1)}$</li><li>$P{c≤X≤d}=\Phi(\frac{d-\mu}{\sigma})-\Phi(\frac{c-\mu}{\sigma})$</li><li>$\Phi(-x)-1-\Phi(x)$</li></ol></li><li>正态分布是概率论中最重要的分布。<br>正态分布有极其广泛的实际背景，例如测量误差，人的生理特征尺寸如身高、体重等，正常情况下生产的产品尺寸：直径、长度、重量高度，炮弹的弹落点的分布等，都服从或近似服从正态分布。可以说，正态分布是自然界和社会现象中最为常见的一种分布，一个变量如果受到大量微小的、独立的随机因素的影响，那么这个变量一般是一个正态随机变量。<br>另一方面，有些分布（如二项分布、泊松分布）的极限分布是正态分布。所以，无论在实践中，还是在理论上，正态分布是概率论中最重要的一种分布。</li><li>离散型随机变量的函数的分布：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/13.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/14.png"></li><li>二维连续型随机变量的函数的分布：先求$F_{Y}(y)=P{Y≤y}=P{g(X)≤y}=\int_{g(x)≤y}{f_{X}(x)dx}$，再求$\frac{dF_{Y}(y)}{dy}$。</li><li>二维随机变量的分布函数：$F(x,y)=P{X≤x,Y≤y}$，也称随机变量$X$和$Y$的联合分布函数。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/15.png"></li><li>二维随机变量的分布函数的性质：<ol><li>$F(x,y)$是随机变量$x$和$y$的单调不减函数</li><li>$0≤F(x,y)≤1$</li><li>$F(-∞,y)=\lim\limits_{x→-∞}F(x,y)=0$</li><li>$F(x,-∞)=\lim\limits_{y→-∞}F(x,y)=0$</li><li>$F(-∞,-∞)=\lim\limits_{x→-∞,y→-∞}F(x,y)=0$</li><li>$F(+∞,+∞)=\lim\limits_{x→+∞,y→+∞}F(x,y)=1$</li><li>$F(x,y)=F(x+0,y)$</li><li>$F(x,y)=F(x,y+0)$</li><li>$F(x_{2},y_{2})-F(x_{2},y_{1})+F(x_{1},y_{1})-F(x_{1},y_{2})≥0$，$x_{1}&lt;x_{2}$，$y_{1}&lt;y_{2}$</li></ol></li><li>二维离散型随机变量的分布律：$P{X=x_{i},Y=y_{j}}=p_{ij}$</li><li>二维离散型随机变量的分布函数：$F(x,y)=\sum\limits_{x_{i}≤x}\sum\limits_{y_{j}≤y}p_{ij}$<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/16.png"></li><li>二维连续型随机变量的概率密度：$F(x,y)=\int_{-∞}^{y}\int_{-∞}^{x}f(u,v)dudv$，也称随机变量$X$和$Y$的联合概率密度。</li><li>二维连续型随机变量的概率密度的性质：<ol><li>$f(x,y)≥0$</li><li>$\int_{-∞}^{+∞}\int_{-∞}^{+∞}f(x,y)dxdy=F(-∞,+∞)=1$</li><li>$f(x,y)$在$(x,y)$上连续，$\frac{\partial^{2}F(x,y)}{\partial{x}\partial{y}}=f(x,y)$</li><li>$P{(X,Y)\in{G}}=\iint\limits_{G}f(x,y)dxdy$</li></ol></li><li>二维均匀分布的概率密度：$f(x,y)=\begin{cases}\frac{1}{S}, &amp; (x,y)\in{D} \ 0, &amp; 其他 \end{cases}$</li><li>二维正态分布$(X,Y)\sim{N(\mu_{1},\mu_{2},\sigma_{1}^{2},\sigma_{2}^{2},\rho)}$的概率密度：$f(x,y)=\frac{1}{2\pi\sigma_{1}\sigma_{2}\sqrt{1-\rho^{2}}}e^{-\frac{1}{2(1-\rho^{2})}[\frac{(x-\mu_{1})^{2}}{\sigma_{1}^{2}}-\frac{2\rho(x-\mu_{1})(y-\mu_{2})}{\sigma_{1}\sigma_{2}}+\frac{(y-\mu_{2})^{2}}{\sigma_{2}^{2}}]}$，其两个边缘分布都是一维正态分布。</li><li>二维随机变量的边缘分布函数：$F_{X}(x)=F(x,∞)=P{X≤x}$，$F_{Y}(y)=F(∞,y)=P{Y≤y}$</li><li>二维离散型随机变量的边缘分布律：$p_{i.}=\sum\limits_{j=1}^{∞}{p_{ij}}=P{X=x_{i}}$，$p_{.j}=\sum\limits_{i=1}^{∞}{p_{ij}}=P{Y=y_{j}}$</li><li>二维随机变量的联合分布与边缘分布的关系：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/17.png"></li><li>二维离散型随机变量的边缘分布函数：$F_{X}(x)=F(x,∞)=\sum\limits_{x_{i}≤x}\sum\limits_{j=1}^{∞}p_{ij}$，$F_{Y}(y)=F(∞,y)=\sum\limits_{y_{j}≤y}\sum\limits_{i=1}^{∞}p_{ij}$</li><li>二维连续型随机变量的边缘概率密度：$f_{X}(x)=\int_{-∞}^{+∞}f(x,y)dy$，$f_{Y}(y)=\int_{-∞}^{+∞}f(x,y)dx$</li><li>二维连续型随机变量的边缘分布函数：$F_{X}(x)=F(x,∞)=\int_{-∞}^{x}[\int_{-∞}^{+∞}f(x,y)dy]dx$，$F_{Y}(y)=F(∞,y)=\int_{-∞}^{y}[\int_{-∞}^{+∞}f(x,y)dx]dy$</li><li>二维离散型随机变量的条件分布律：$P{X=x_{i}|Y=y_{j}}=\frac{P{X=x_{i},Y=y_{j}}}{P{Y=y_{j}}}=\frac{p_{ij}}{p_{.j}}$，$P{Y=y_{j}|X=x_{i}}=\frac{P{X=x_{i},Y=y_{j}}}{P{X=x_{i}}}=\frac{p_{ij}}{p_{i.}}$</li><li>二维连续型随机变量的条件概率密度：$f_{X|Y}(x|y)=\frac{f(x,y)}{f_{Y}(y)}$，$f_{Y|X}(y|x)=\frac{f(x,y)}{f_{X}(x)}$</li><li>联合分布、边缘分布、条件分布的关系：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%BD%92%E7%BA%B3/18.png"></li><li>随机变量$X$和$Y$是相互独立的$⇔F(x,y)=F_{X}(x)F_{Y}(y)$</li><li>离散型随机变量$X$和$Y$是相互独立的$⇔P{X=x_{i},Y=y_{j}}=P{X=x_{i}}P{Y=y_{j}}$</li><li>连续型随机变量$X$和$Y$是相互独立的$⇔f(x,y)=f_{X}(x)f_{Y}(y)$</li><li>随机变量$X$和$Y$是相互独立的，则$f(X)$和$g(Y)$也相互独立。</li><li>$n$维随机变量的理论可以从二维随机变量推广得到，此处不再赘述。</li><li>离散型随机变量函数$Z=g(X,Y)$的分布律：$P{Z=z_{k}}=P{g(X,Y)=z_{k}}=\sum\limits_{z_{k}=g(x_{i},y_{j})}p_{ij}$</li><li>连续型随机变量函数$Z=X+Y$的概率密度：$f_{Z}(z)=\int_{-∞}^{+∞}f(x,z-x)dx=\int_{-∞}^{+∞}f(z-y,y)dy$<br>$X$和$Y$独立时，$f_{Z}(z)=\int_{-∞}^{+∞}f_{X}(x)f_{Y}(z-x)dx=\int_{-∞}^{+∞}f_{X}(z-y)f_{Y}(y)dy$</li><li>连续型随机变量函数$Z=\frac{X}{Y}$的概率密度：$f_{Z}(z)=\int_{-∞}^{+∞}|y|f(yz,y)dy$<br>$X$和$Y$独立时，$f_{Z}(z)=\int_{-∞}^{+∞}|y|f_{X}(yz)f_{Y}(y)dy$</li><li>随机变量函数$Z=\max(X,Y)$的分布函数：$F_{\max}(z)=F_{X}(z)F_{Y}(z)$</li><li>随机变量函数$Z=\min(X,Y)$的分布函数：$F_{\min}(z)=1-[1-F_{X}(z)][1-F_{Y}(z)]$</li><li>离散型随机变量$X$的数学期望：$E(X)=\sum\limits_{k=1}^{∞}x_{k}p_{k}$，要求此级数收敛。</li><li>连续型随机变量$X$的数学期望：$E(X)=\int_{-∞}^{+∞}xf(x)dx$</li><li>离散型随机变量函数$Y=g(X)$的数学期望：$E(g(X))=g(x_{k})p_{k}$</li><li>连续型随机变量函数$Y=g(X)$的数学期望：$E(g(X))=\int_{-∞}^{+∞}g(x)f(x)dx$</li><li>数学期望的性质：<ol><li>$E(C)=C$</li><li>$E(CX)=CE(X)$</li><li>$E(X+Y)=E(X)+E(Y)$</li><li>$E(XY)=E(X)E(Y)$</li></ol></li><li>二维离散型随机变量$(X,Y)$的数学期望：$E(X)=\sum\limits_{i}\sum\limits_{j}x_{i}p_{ij}$，$E(Y)=\sum\limits_{i}\sum\limits_{j}y_{j}p_{ij}$</li><li>二维连续型随机变量$(X,Y)$的数学期望：$E(X)=\int_{-∞}^{+∞}\int_{-∞}^{+∞}xf(x,y)dxdy$，$E(Y)=\int_{-∞}^{+∞}\int_{-∞}^{+∞}yf(x,y)dxdy$</li><li>二维离散型随机变量函数$g(X,Y)$的数学期望：$E(g(X,Y))=\sum\limits_{i}\sum\limits_{j}g(x_{i},y_{j})p_{ij}$</li><li>二维连续型随机变量函数$g(X,Y)$的数学期望：$E(g(X,Y))=\int_{-∞}^{+∞}\int_{-∞}^{+∞}g(x,y)f(x,y)dxdy$</li><li>随机变量的方差：$D(X)=Var(X)=E{[X-E(X)]^{2}}=E(X^{2})-[E(X)]^{2}$</li><li>离散型随机变量的方差：$D(X)=\sum\limits_{k=1}^{∞}[x_{k}-E(X)]^{2}p_{k}$</li><li>连续型随机变量的方差：$D(X)=\int_{-∞}^{+∞}[x-E(X)]^{2}f(x)dx$</li><li>方差的性质：<ol><li>$D(C)=0$</li><li>$D(CX)=C^{2}D(X)$</li><li>$D(X±Y)=D(X)+D(Y)$</li><li>$D(X)=0⇔P{X=C}=1$</li></ol></li><li>随机变量的标准差：$\sigma(X)=\sqrt{D(X)}=\sqrt{E{[X-E(X)]^{2}}}$</li><li>随机变量的协方差：$Cov(X,Y)=E{[X-E(X)][Y-E(Y)]}$</li><li>协方差的性质： <ol><li>$Cov(X,Y)=Cov(Y,X)$</li><li>$Cov(aX,bY)=abCov(Y,X)$</li><li>$Cov(X_{1}+X_{2},Y)=Cov(X_{1},Y)+Cov(X_{2},Y)$</li></ol></li><li>随机变量的相关系数：$|\rho_{XY}|=\frac{Cov(X,Y)}{\sqrt{D(X)}\sqrt{D(Y)}}$</li><li>相关系数的性质：<ol><li>$|\rho_{XY}|≤1$</li><li>$|\rho_{XY}|=1⇔P{Y=a+bX}=1$</li></ol></li><li>切比雪夫不等式：$P{|X-E(X)|&lt;\epsilon}≥1-\frac{\sigma^{2}}{\epsilon^{2}}$，$P{|X-E(X)|≥\epsilon}≤\frac{\sigma^{2}}{\epsilon^{2}}$<br>切比雪夫不等式给出了在随机变量$X$分布未知的情况下，事件${|X-\mu|&lt;\epsilon}$概率的一种估计方法。</li><li>切比雪夫大数定理：$\lim\limits_{n→∞}P{|Y_{n}-\mu|&lt;\epsilon}=\lim\limits_{n→∞}P{|\frac{1}{n}\sum\limits_{k=1}^{n}{X_{k}}-\mu|&lt;\epsilon}=1$<br>定理要求随机变量相互独立，有相同的数学期望和方差。<br>随机变量序列$Y_{1},Y_{2},…,Y_{n}$依概率收敛于$\mu$。<br>在所给的条件下，当$n$充分大时，$n$个随机变量的算术平均值与它们的数学期望有较小的偏差的可能性比较大，可以考虑用算术平均值作为所研究指标值的近似值。</li><li>伯努利大数定理：$\lim\limits_{n→∞}P{|\frac{n_{A}}{n}-p|&lt;\epsilon}=1$，$\lim\limits_{n→∞}P{|\frac{n_{A}}{n}-p|≥\epsilon}=0$<br>伯努利大数定理表明事件发生的频率依概率收敛于事件的概率。由实际推断原理，在实际应用中，当试验次数很多时，可以用事件发生的频率来代替事件的概率。</li><li>辛钦大数定理：$\lim\limits_{n→∞}P{|\frac{1}{n}\sum\limits_{k=1}^{n}{X_{k}}-\mu|&lt;\epsilon}=1$<br>定理要求随机变量独立同分布，有相同的数学期望。<br>伯努利大数定理是辛钦定理的特殊情况，$n$个随机变量的算术平均值以概率收敛于算术平均值的数学期望。</li><li>在概率论中，习惯于把和的分布收敛于正态分布这一类定理都叫做中心极限定理。</li><li>随机变量标准化：$Z_{n}=\frac{\sum\limits_{k=1}^{n}X_{k}-E(\sum\limits_{k=1}^{n}X_{k})}{\sqrt{Var(\sum\limits_{k=1}^{n}X_{k})}}$</li><li>独立同分布的中心极限定理(列维—林德伯格中心极限定理)：$Y_{k}=\frac{\sum\limits_{k=1}^{n}X_{k}-E(\sum\limits_{k=1}^{n}X_{k})}{\sqrt{D(\sum\limits_{k=1}^{n}X_{k})}}=\frac{\sum\limits_{k=1}^{n}X_{k}-n\mu}{\sqrt{n}\sigma}$的分布函数$F_{n}(x)$对任意$x$满足$\lim\limits_{n→∞}F_{n}(x)=\lim\limits_{n→∞}P{\frac{\sum\limits_{k=1}^{n}X_{k}-n\mu}{\sqrt{n}\sigma}≤x}=\int_{-∞}^{x}\frac{1}{\sqrt{2\pi}}e^{-\frac{t^{2}}{2}}dt=\Phi(x)$<br>在所给的条件下，当$n$无穷大时，$n$个具有期望和方差的独立同分布的随机变量之和$Y_{n}$的分布函数近似服从标准正态分布为极限分布。</li><li>李雅普诺夫中心极限定理：$B_{n}^{2}=\sum\limits_{k=1}^{n}\sigma_{k}^{2}$，$Z_{n}=\frac{\sum\limits_{k=1}^{n}X_{k}-E(\sum\limits_{k=1}^{n}X_{k})}{\sqrt{D(\sum\limits_{k=1}^{n}X_{k})}}=\frac{\sum\limits_{k=1}^{n}X_{k}-\sum\limits_{k=1}^{n}\mu_{k}}{B_{n}}$的分布函数$F_{n}(x)$对任意$x$满足$\lim\limits_{n→∞}F_{n}(x)=\lim\limits_{n→∞}P{\frac{\sum\limits_{k=1}^{n}X_{k}-\sum\limits_{k=1}^{n}\mu_{k}}{B_{n}}≤x}=\int_{-∞}^{x}\frac{1}{\sqrt{2\pi}}e^{-\frac{t^{2}}{2}}dt=\Phi(x)$</li><li>棣莫佛—拉普拉斯中心极限定理：$\eta_{n}\sim{b(n,p)}$，$\lim\limits_{n→∞}F_{n}(x)=\lim\limits_{n→∞}P{\frac{\eta_{n}-np}{\sqrt{np(1-p)}}≤x}=\int_{-∞}^{x}\frac{1}{\sqrt{2\pi}}e^{-\frac{t^{2}}{2}}dt=\Phi(x)$<br>当$n$很大，$0&lt;p&lt;1$是一个定值时，二项变量$Y_{n}$的分布近似正态分布$N(np,np(1-p))$</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>假设检验</title>
      <link href="/2021/03/03/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/jia-she-jian-yan/"/>
      <url>/2021/03/03/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/jia-she-jian-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="实际推断原理"><a href="#实际推断原理" class="headerlink" title="实际推断原理"></a>实际推断原理</h1><p>概率很小的随机事件（通常以$\alpha≤0.05$的概率为小概率）在一次试验中实际上几乎是不发生的。</p><h1 id="假设检验"><a href="#假设检验" class="headerlink" title="假设检验"></a>假设检验</h1><p>假设检验中，原假设为$H_{0}$，备择假设为$H_{1}$。</p><p>假设检验的基本方法：先假定所要检验的假设$H_{0}$成立，在此前提下，根据给定的值$\alpha$，使用样本构造概率为$\alpha$的小概率事件。然后，根据一次试验的结果，即样本观测值，看上述小概率事件在此试验中是否发生。如果发生，我们就否定$H_{0}$；否则就接受$H_{0}$ 。</p><p>$\alpha$称为检验水平或检验标准，通常$\alpha=0.05$或$0.01$。</p><h1 id="假设检验的两类错误"><a href="#假设检验的两类错误" class="headerlink" title="假设检验的两类错误"></a>假设检验的两类错误</h1><p>假设检验的两类错误：</p><ul><li>第一类错误（弃真）：如果原假设为真，按检验法则否定了原假设。<br>当原假设$H_{0}$成立时，在此前提下，使用样本构成的小概率事件，在一次试验中也有可能发生，这时按照假设检验的基本方法因该拒绝原假设$H_{0}$，从而犯了“以真为假”的错误，称这种错误为第一类错误。</li><li>第二类错误（取伪）：如果原假设非真，按检验法则接受了原假设。<br>原假设$H_{0}$本来不成立，但结果却是接受$H_{0}$，从而犯了“以假为真”的错误，称为第二类错误。</li></ul><h1 id="拒绝域与临界点"><a href="#拒绝域与临界点" class="headerlink" title="拒绝域与临界点"></a>拒绝域与临界点</h1><p>当检验统计量取某个区域$C$中的值时,拒绝原假设$H_{0}$ , 称区域$C$为拒绝域。拒绝域的边界点称为临界点。</p><p>$U=\frac{\bar{X}-\mu}{\frac{\sigma}{\sqrt{n}}}$称为检验统计量。</p><p>$H_{1}$：$\mu≠\mu_{0}$备择假设。</p><p>已知方差$\sigma^{2}$，检验假设$H_{0}$：$\mu=\mu_{0}$的步骤：</p><ol><li>提出原假设$H_{0}$：$\mu=\mu_{0}$，$H_{1}$：$\mu≠\mu_{0}$。</li><li>选择统计量$U=\frac{\bar{X}-\mu}{\frac{\sigma}{\sqrt{n}}}$。</li><li>求出在假设$H_{0}$成立的条件下，确定该统计量服从的分布：$U\sim{N(0,1)}$。</li><li>选择检验水平$\alpha$，查正态分布表，得临界值$z_{\frac{\alpha}{2}}$，即$P{|\frac{\bar{X}-\mu}{\frac{\sigma}{\sqrt{n}}}|≥z_{\frac{\alpha}{2}}}=\alpha$。</li><li>根据样本值计算统计量的观察值$u_{0}$,给出拒绝或接受$H_{0}$的判断：当$|u_{0}|≥z_{\frac{\alpha}{2}}$时,则拒绝$H_{0}$；当$|u_{0}|&lt;z_{\frac{\alpha}{2}}$时,则接受$H_{0}$。</li></ol><h1 id="双边检验、左边检验和右边检验"><a href="#双边检验、左边检验和右边检验" class="headerlink" title="双边检验、左边检验和右边检验"></a>双边检验、左边检验和右边检验</h1><p>形如$H_{0}$：$\mu≤\mu_{0}$，$H_{1}$：$\mu&gt;\mu_{0}$的假设检验称为右边检验。</p><p>形如$H_{0}$：$\mu≥\mu_{0}$，$H_{1}$：$\mu&lt;\mu_{0}$的假设检验称为左边检验。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数理统计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论欧拉回路的判定</title>
      <link href="/2021/03/01/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/tu-lun-ou-la-hui-lu-de-pan-ding/"/>
      <url>/2021/03/01/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/tu-lun-ou-la-hui-lu-de-pan-ding/</url>
      
        <content type="html"><![CDATA[<h1 id="七桥问题"><a href="#七桥问题" class="headerlink" title="七桥问题"></a>七桥问题</h1><p>在18世纪，东普鲁士哥尼斯堡有一条大河，河中有两个小岛。全城被大河分割成四块陆地，河上架有七座桥，把四块陆地联系起来(如图)。当时许多市民都在思索一个问题:一个散步者能否从某一陆地出发，不重复地经过每座桥一次，最后回到原来的出发地。</p><p>七桥问题：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E8%AE%BA%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF%E7%9A%84%E5%88%A4%E5%AE%9A/1.jpg"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E8%AE%BA%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF%E7%9A%84%E5%88%A4%E5%AE%9A/2.jpg"></p><p>这就是历史上有名的哥尼斯堡七桥问题。</p><h1 id="欧拉回路"><a href="#欧拉回路" class="headerlink" title="欧拉回路"></a>欧拉回路</h1><p>这个问题似乎不难解决，所以吸引了许多人来尝试，但是日复一日谁也没有得出肯定的答案。于是有人便写信求教当时著名的数学家欧拉(1707~1783)。欧拉毕竟是数学家，他并没有去重复人们已失败了多次的试验，而是产生了一种直觉的猜想:人们千百次的失败，也许意味着这样的走法根本就不存在。于是欧拉把七桥问题进行了数学的抽象。用A、B、C、D四个点表示四块陆地，用两点间的一条线表示连接两块陆地之间的一座桥，就得到如下图所示的一个由四个点和七条线组成的图形。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E8%AE%BA%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF%E7%9A%84%E5%88%A4%E5%AE%9A/3.png"></p><p>于是，七桥问题就转化为一个抽象图形是否可以“一笔画”的问题。<br>这个一笔画，也是欧拉回路的判定方法是这样的：</p><ul><li>连通多重图具有欧拉路当且仅当它有0个或2个度数为奇数的结点。</li><li>连通多重图具有欧拉路但无欧拉回路当且仅当它有2个度数为奇数的结点。</li><li>连通多重图具有欧拉回路当且仅当它只有度数为偶数的结点。</li></ul><p>问题的再进一步抽象（用二维数组表示的矩阵）：</p><table><thead><tr><th align="center"></th><th align="center">0(A)</th><th align="center">1(B)</th><th align="center">2(C)</th><th align="center">3(D)</th></tr></thead><tbody><tr><td align="center">0(A)</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center">1(B)</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">2(C)</td><td align="center">2</td><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">3(D)</td><td align="center">2</td><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><h1 id="Java编程实现"><a href="#Java编程实现" class="headerlink" title="Java编程实现"></a>Java编程实现</h1><p>下面是Java代码实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EulerCircuit</span> <span class="token punctuation">{</span>    <span class="token comment">// 定义二维数组实现图储存</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mat<span class="token punctuation">;</span>    <span class="token comment">// 定义顶点个数</span>    <span class="token keyword">int</span> vertexNum<span class="token punctuation">;</span>    <span class="token comment">// 构造方法初始化问题</span>    <span class="token keyword">public</span> <span class="token class-name">EulerCircuit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mat<span class="token punctuation">,</span> <span class="token keyword">int</span> vertexNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mat <span class="token operator">=</span> mat<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vertexNum <span class="token operator">=</span> vertexNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOddVertexNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 累加器记录奇数顶点个数</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 依次累加每一行元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 记录通过顶点i的边数</span>            <span class="token keyword">int</span> degree <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vertexNum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                degree <span class="token operator">+=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 顶点度为奇数时</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>degree <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 结束函数，返回奇数顶点个数</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 七桥问题数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mat <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">// 生成EulerCircuit对象</span>        <span class="token class-name">EulerCircuit</span> eulerCircuit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EulerCircuit</span><span class="token punctuation">(</span>mat<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据函数获取奇数桥的个数</span>        <span class="token keyword">int</span> oddVertexNum <span class="token operator">=</span> eulerCircuit<span class="token punctuation">.</span><span class="token function">getOddVertexNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oddVertexNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有欧拉回路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有"</span> <span class="token operator">+</span> oddVertexNum <span class="token operator">+</span> <span class="token string">"个顶点通奇数桥，无欧拉回路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果求欧拉路就可以设置条件判定的分叉点为2。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学基础理论归纳</title>
      <link href="/2021/03/01/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/chi-san-shu-xue-ji-chu-li-lun-gui-na/"/>
      <url>/2021/03/01/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/chi-san-shu-xue-ji-chu-li-lun-gui-na/</url>
      
        <content type="html"><![CDATA[<h1 id="离散数学"><a href="#离散数学" class="headerlink" title="离散数学"></a>离散数学</h1><p>离散数学是现代数学的一个重要分支，是计算机科学与技术的理论基础。如果说“高科技本质上是数学技术”的话，计算机科学与技术基本上是离散数学技术。所以离散数学又称为计算机数学，是计算机科学与技术专业的核心、骨干课程。</p><p>本课程结合计算机学科的特点，主要研究离散对象的代数结构及相互关系。通过该课程的教学，使学生了解并掌握计算机科学中普遍地采用离散数学中的一些基本概念、基本思想和基本方法。通过本课程的学习将使学生得到良好的数学训练，从而进一步提高学生的抽象思维能力和逻辑推理能力，为其学习计算机专业各门后续课程做好必要的知识准备，并为从事计算机的应用提供理论基础。</p><p>离散数学应着重掌握数理逻辑、集合与关系、代数系统的一般性质、图论初步等方面的基本概念和简单应用，特别应注意体会书中的典型例题，以促进对主要内容的掌握。</p><h1 id="第一篇-数理逻辑"><a href="#第一篇-数理逻辑" class="headerlink" title="第一篇 数理逻辑"></a>第一篇 数理逻辑</h1><p>用数学方法来研究推理的规律称为数理逻辑。这里所指的数学方法，就是引进一套严格定义的符号体系的方法，即建立一套形式语言，来研究形式逻辑。所以数理逻辑又称作符号逻辑，它是从量的侧面来研究思维规律的。</p><p>现代数理逻辑可分为逻辑演算，证明论，模型论，递归函数论，公理化集合论。这里介绍的是数理逻辑基本的内容：逻辑演算中的命题逻辑和谓词逻辑。数理逻辑与数学的其它分支、计算机科学、人工智能、语言学等学科均有密切联系。</p><h2 id="第一章-命题逻辑"><a href="#第一章-命题逻辑" class="headerlink" title="第一章 命题逻辑"></a>第一章 命题逻辑</h2><p>本章是以<strong>命题</strong>为中心，主要讨论的内容有：</p><ul><li>命题的表示、命题的演算</li><li>命题演算中的公式，及其应用</li><li>命题逻辑推理的方法</li></ul><h3 id="学习要求"><a href="#学习要求" class="headerlink" title="学习要求"></a>学习要求</h3><ol><li>掌握逻辑联结词，要熟练掌握联结词的真值表定义以及它们在自然语言中的含义。其中特别要注意$\vee$和$→$的用法。</li><li>会命题符号化。</li><li>掌握永真式的证明方法：<ol><li>真值表</li><li>等价变换，化简成$T$</li><li>主析取范式</li></ol></li><li>掌握永真蕴含式的证明方法，熟练记忆并会应用重要的永真蕴含式。</li><li>掌握等价公式的证明方法，熟练记忆并会应用重要的等价公式。</li><li>熟练掌握范式的写法及其应用：<ol><li>析取范式与主析取范式</li><li>合取范式与主合取范式</li></ol></li><li>熟练掌握三种推理方法：<ol><li>直接推理$P$</li><li>条件论证$CP$，写附加前提</li><li>反证法$T$，写假设前提</li></ol></li></ol><h3 id="章节内容"><a href="#章节内容" class="headerlink" title="章节内容"></a>章节内容</h3><ol><li>命题及其表示法</li><li>联结词 </li><li>命题公式及命题符号化</li><li>重言式与重言蕴含式</li><li>等价公式</li><li>范式</li><li>命题逻辑推理</li></ol><h3 id="学习重难点"><a href="#学习重难点" class="headerlink" title="学习重难点"></a>学习重难点</h3><ul><li>联结词在自然语言中的含义，命题符号化</li><li>永真式、永真蕴含式、等价公式的证明方法，相关公式的熟练应用</li><li>范式的写法及其应用</li><li>命题逻辑的三种推理方法</li></ul><h3 id="我的博客"><a href="#我的博客" class="headerlink" title="我的博客"></a>我的博客</h3><ol><li><a href="https://blankspace.blog.csdn.net/article/details/113765513">命题逻辑联结词的自然语言表述</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113765518">逻辑蕴含的充分条件和必要条件</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113774321">命题逻辑符号化例题</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113780527">基本重言蕴含式总结</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113780786">基本等价公式总结</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113782581">浅析小项与主析取范式和大项与主合取范式</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113782725">极小全功能集</a></li></ol><h2 id="第二章-谓词逻辑"><a href="#第二章-谓词逻辑" class="headerlink" title="第二章 谓词逻辑"></a>第二章 谓词逻辑</h2><p>在第一章命题逻辑中，把命题作为演算的基本单位，一个原子命题只用一个字母表示，而不再对命题中的句子成分及其内部结构进行分析。这样就无法研究命题的更深层次的结构与意义，鉴于上述局限性，使得我们对于一些常见而又简单的命题无法进行解释与推理。所以就要考虑解决这个问题的方法：在表示命题时，既表示出主语（主词），也表示出谓语（谓词），就可以解决上述问题。这就提出了谓词的概念。</p><p>本章将从<strong>谓词的相关基本概念</strong>出发，主要讨论：</p><ul><li>谓词公式及命题符号化、谓词的演算</li><li>谓词演算中的公式，及其应用</li><li>谓词逻辑推理的方法</li></ul><h3 id="学习要求-1"><a href="#学习要求-1" class="headerlink" title="学习要求"></a>学习要求</h3><ol><li>准确掌握有关概念。</li><li>会命题符号化。</li><li>掌握常用的谓词演算等价公式和永真蕴涵式，包括:<ol><li>带量词的公式在论域内展开式</li><li>量词否定公式</li><li>量词辖域扩充公式</li><li>量词分配公式</li></ol></li><li>会用等价公式求谓词公式的真值。</li><li>会写前束范式。</li><li>熟练掌握谓词逻辑推理的四种推理方法：<ol><li>全称特指规则$US$</li><li>存在特指规则$ES$</li><li>全称推广规则$UG$</li><li>存在推广规则$EG$</li></ol></li></ol><h3 id="章节内容-1"><a href="#章节内容-1" class="headerlink" title="章节内容"></a>章节内容</h3><ol><li>基本概念</li><li>谓词公式及命题符号化</li><li>谓词演算的等价式与蕴涵式</li><li>前束范式</li><li>谓词演算的推理理论</li></ol><h3 id="学习重难点-1"><a href="#学习重难点-1" class="headerlink" title="学习重难点"></a>学习重难点</h3><ul><li>谓词公式及命题符号化</li><li>谓词演算的等价公式和永真蕴涵式的证明方法，相关公式的熟练应用</li><li>谓词逻辑的三种推理方法</li></ul><h3 id="我的博客-1"><a href="#我的博客-1" class="headerlink" title="我的博客"></a>我的博客</h3><ol><li><a href="https://blankspace.blog.csdn.net/article/details/113782390">论域和客体函数的区别</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113786592">含有两个量词的谓词逻辑公式</a></li></ol><h1 id="第二篇-集合论"><a href="#第二篇-集合论" class="headerlink" title="第二篇 集合论"></a>第二篇 集合论</h1><p>集合是数学中最基本的概念，又是数学各分支、自然科学及社会科学各领域的最普遍采用的描述工具。集合论是离散数学的重要组成部分，是现代数学中占有独特地位的一个分支。</p><p>本部分主要介绍朴素集合论的主要内容，其中包括集合论基础（第三章）、二元关系（第四章）、函数（第五章）。</p><h2 id="第三章-集合论基础"><a href="#第三章-集合论基础" class="headerlink" title="第三章 集合论基础"></a>第三章 集合论基础</h2><p>集合是一个不能精确定义的基本概念。一般地说把具有共同性质的东西，汇集成一个整体，就形成了一个集合。</p><p>本章主要介绍<strong>朴素集合论</strong>的基本内容，包括：</p><ul><li>什么是集合以及有关子集、空集、全集、补集等概念</li><li>集合的基本运算和集合代数的有关公式</li><li>在组合计数的有关公式</li><li>在组合计数中有着广泛应用的包含排斥原理</li></ul><h3 id="学习要求-2"><a href="#学习要求-2" class="headerlink" title="学习要求"></a>学习要求</h3><ol><li>掌握集合间三种关系的定义、谓词定义、证明方法：<ol><li>包含关系$⊆$</li><li>相等关系$=$</li><li>真包含关系$⫋$</li></ol></li><li>掌握三个特殊集合，会求集合的幂集：<ol><li>全集$E$</li><li>空集$\Phi$</li><li>幂集$P(A)$</li></ol></li><li>掌握集合的五种运算定义、计算方法及性质：<ol><li>交运算$\cap$</li><li>并运算$\cup$</li><li>差运算$-$</li><li>绝对补运算$\sim$</li><li>对称差$\oplus$</li></ol></li><li>会用包含排斥原理解决集合计数问题。</li></ol><h3 id="章节内容-2"><a href="#章节内容-2" class="headerlink" title="章节内容"></a>章节内容</h3><ol><li>集合的概念和表示法</li><li>集合间的关系</li><li>三个特殊集合</li><li>集合的运算</li><li>包含排斥原理</li></ol><h3 id="学习重难点-2"><a href="#学习重难点-2" class="headerlink" title="学习重难点"></a>学习重难点</h3><ul><li>集合间三种关系的证明方法</li><li>集合的幂集</li><li>集合五种运算的计算方法及性质</li></ul><h3 id="我的博客-2"><a href="#我的博客-2" class="headerlink" title="我的博客"></a>我的博客</h3><ol><li><a href="https://blankspace.blog.csdn.net/article/details/113787511">幂集的求解</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113787645">集合的包含排斥原理</a></li></ol><h2 id="第四章-二元关系"><a href="#第四章-二元关系" class="headerlink" title="第四章 二元关系"></a>第四章 二元关系</h2><p>现实世界中，任何两个或多个事物之间总是存在这样或那样的联系，在逻辑学中我们称这种联系为关系。</p><p>关系以集合理论为基础，是关系型数据库的理论基础。</p><p>本章主要讨论有关<strong>二元关系的定义</strong>和<strong>二元关系的运算及各种性质</strong>，其中包含的复合关系和逆关系，等价关系及相容关系都是本章学习的重点。</p><h3 id="学习要求-3"><a href="#学习要求-3" class="headerlink" title="学习要求"></a>学习要求</h3><ol><li>关系的概念，表示方法。</li><li>二元关系的性质的定义，熟练掌握性质的判断及证明。</li><li>掌握关系的复合、求逆运算(计算方法及有关性质)，了解关系的闭包运算。</li><li>掌握等价关系的判断，证明，求等价类和商集。</li><li>掌握相容关系定义，简化图和简化矩阵，相容类，最大相容类，完全覆盖。</li><li>偏序关系的判断，会画Hasse图，会求一个子集的极小(大)元、最小(大)元、上界与下界、最小上界及最大下界。</li></ol><h3 id="章节内容-3"><a href="#章节内容-3" class="headerlink" title="章节内容"></a>章节内容</h3><ol><li>序偶与笛卡尔定理</li><li>关系及其表示</li><li>关系的性质</li><li>复合关系</li><li>逆关系</li><li>关系的闭包运算</li><li>集合的划分和覆盖</li><li>等价关系与等价类</li><li>相容关系</li><li>次序关系</li></ol><h3 id="学习重难点-3"><a href="#学习重难点-3" class="headerlink" title="学习重难点"></a>学习重难点</h3><ul><li>二元关系性质的判断及证明</li><li>关系的运算：关系的复合, 逆关系</li><li>等价关系、等价类的划分和商集</li><li>偏序关系</li></ul><h3 id="我的博客-3"><a href="#我的博客-3" class="headerlink" title="我的博客"></a>我的博客</h3><ol><li><a href="https://blankspace.blog.csdn.net/article/details/113788981">序偶的性质</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113789378">二元关系的性质</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113791108">二元关系复合运算的性质</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113791171">二元关系逆关系的性质</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113791915">求解传递闭包的Warshall算法</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113792237">二元关系的闭包</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113794710">偏序集Hasse图的画法和重要元素</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/113792569">等价关系、相容关系、偏序关系</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114016145">集合的划分与覆盖</a></li></ol><h2 id="第五章-函数"><a href="#第五章-函数" class="headerlink" title="第五章 函数"></a>第五章 函数</h2><p>函数是数学中的一个基本概念，也是一个重要概念，它广泛应用在数学的多个分支中，在数学的应用和发展中起着十分重要的作用。</p><p><strong>函数</strong>在计算机领域内有很多应用。如开关理论、自动机理论和可计算性理论等。</p><h3 id="学习要求-4"><a href="#学习要求-4" class="headerlink" title="学习要求"></a>学习要求</h3><ol><li>掌握函数的定义。</li><li>掌握函数的类型, 会判断、会证明：<ol><li>满射函数</li><li>映内函数</li><li>入射函数</li><li>双射函数</li></ol></li><li>会计算函数的复合(左复合)，求逆函数，知道有关性质。</li><li>了解集合的特征函数，了解集合的基数、可数集合。</li></ol><h3 id="章节内容-4"><a href="#章节内容-4" class="headerlink" title="章节内容"></a>章节内容</h3><ol><li>函数的概念</li><li>函数的复合函数</li><li>逆函数</li><li>集合特征函数与模糊子集</li><li>集合的基数</li></ol><h3 id="学习重难点-4"><a href="#学习重难点-4" class="headerlink" title="学习重难点"></a>学习重难点</h3><ul><li>函数及函数类型的判断和证明</li><li>函数的复合、求逆</li></ul><h3 id="我的博客-4"><a href="#我的博客-4" class="headerlink" title="我的博客"></a>我的博客</h3><ol><li><a href="https://blankspace.blog.csdn.net/article/details/113795563">满射函数、入射函数、双射函数</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114155996">函数复合的性质和逆函数的性质</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114159678">集合的特征函数</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114169833">集合的基数</a></li></ol><h1 id="第三篇-代数系统"><a href="#第三篇-代数系统" class="headerlink" title="第三篇 代数系统"></a>第三篇 代数系统</h1><p>通常所说的“系统”，是在一定情况下，指对某一相对独立或封闭的环境中的集合的元素间的性质、行为和联系。现实世界中存在各种各样的系统。例如：商品交易、军事指挥系统、计算机系统、管理系统等等。</p><p>而在数学中所说的系统是指具有某种性质的数学结构。也就是在一个非空集合上，定义了元素间的算法法则和运算所满足的运算律，把这个集合及其上的定义的算法法则叫做一个代数系统。数学中所研究的是抽象的代数系统，它的元素暂时不必代表任何具体对象，而是一个集合中的元素，并且抽象代数系统上的运算也是抽象的函数。</p><p>代数系统是数学的一个重要分支，在计算机科学中有广泛的应用，而且计算机科学的发展，也促进了代数学的进一步发展。</p><h2 id="第六章-代数系统"><a href="#第六章-代数系统" class="headerlink" title="第六章 代数系统"></a>第六章 代数系统</h2><p>针对某个具体问题选用适宜的数学结构去进行较为确切的描述，这就是所谓的“数学模型”。可见，数学结构在数学模型中占有极为重要的位置。我们这里所要研究的是一类特殊的数学结构——由集合上定义若干个运算而组成的系统。我们通常称它为代数系统。它在计算机科学中有着广泛的应用。</p><p>本章将从一般代数系统的引入出发，研究一些<strong>特殊的代数系统</strong>，而这些代数系统中的运算具有某些性质，从而确定了这些代数系统的数学结构。</p><h3 id="学习要求-5"><a href="#学习要求-5" class="headerlink" title="学习要求"></a>学习要求</h3><ol><li>掌握二元运算的定义。</li><li>熟练掌握二元运算的性质的判断及证明。</li><li>掌握代数系统的同态、同构定义，会证明。了解同构性质的保持。</li><li>熟练掌握半群、独异点、群、子群、交换群(会证明)，了解循环群。</li><li>了解子群的陪集，Lagrange定理及其推论。</li><li>了解环、域的概念。</li></ol><h3 id="章节内容-5"><a href="#章节内容-5" class="headerlink" title="章节内容"></a>章节内容</h3><ol><li>代数系统的概念</li><li>二元运算及其性质</li><li>同态与同构</li><li>同余关系</li><li>半群与独异点</li><li>群与子群</li><li>循环群与置换群</li><li>陪集与拉格朗日定理</li><li>环与域</li></ol><h3 id="学习重难点-5"><a href="#学习重难点-5" class="headerlink" title="学习重难点"></a>学习重难点</h3><ul><li>二元运算及其性质</li><li>同态与同构的证明</li><li>群与子群的性质及证明</li></ul><h3 id="我的博客-5"><a href="#我的博客-5" class="headerlink" title="我的博客"></a>我的博客</h3><ol><li><a href="https://blankspace.blog.csdn.net/article/details/114112478">二元运算的性质</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114188967">代数系统的同态(同构)</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114199255">群的性质</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114199046">代数系统分类</a></li></ol><h2 id="第七章-格与布尔代数"><a href="#第七章-格与布尔代数" class="headerlink" title="第七章 格与布尔代数"></a>第七章 格与布尔代数</h2><p>从代数的观点出发，我们是否能对一种更为抽象的代数系统进行研究，而这种抽象的代数系统又具有象集合代数，命题代数那样具体的代数系统所具的一些最本质的性质？回答是肯定的，这种抽象的代数系统就是格（Lattice）和布尔代数（Boolean  Algebra）。</p><p><strong>格和布尔代数</strong>的理论成为计算机硬件设计和通讯系统设计中的重要工具。在保密学、开关理论、计算机理论和逻辑设计以及其他一些科学和工程领域中，都直接应用了格与布尔代数。</p><h3 id="学习要求-6"><a href="#学习要求-6" class="headerlink" title="学习要求"></a>学习要求</h3><ol><li>掌握格的定义，格的性质，格的同构。</li><li>会判断格、分配格、有补格和布尔格。</li><li>重点掌握两个元素的布尔代数的性质(10个)。</li><li>会写两个元素的布尔表达式的范式(实质是第一章的主析取和主合取范式)。</li></ol><h3 id="章节内容-6"><a href="#章节内容-6" class="headerlink" title="章节内容"></a>章节内容</h3><ol><li>格的概念</li><li>几个特殊格</li><li>布尔代数</li><li>布尔表达式与布尔函数</li></ol><h3 id="学习重难点-6"><a href="#学习重难点-6" class="headerlink" title="学习重难点"></a>学习重难点</h3><ul><li>格的性质、判断，格的同构</li><li>分配格、有界格、有补格、布尔格的判断、性质</li></ul><h3 id="我的博客-6"><a href="#我的博客-6" class="headerlink" title="我的博客"></a>我的博客</h3><ol><li><a href="https://blankspace.blog.csdn.net/article/details/114205690">格</a></li></ol><h1 id="第四篇-图论"><a href="#第四篇-图论" class="headerlink" title="第四篇 图论"></a>第四篇 图论</h1><h2 id="第八章-图论"><a href="#第八章-图论" class="headerlink" title="第八章 图论"></a>第八章 图论</h2><p><strong>图论</strong>是个应用十分广泛而又极其有趣数学分支, 物理、学、生物、经济、管理科学、信息论、计算机等各个领域都可以找到图论的足迹。</p><h3 id="学习要求-7"><a href="#学习要求-7" class="headerlink" title="学习要求"></a>学习要求</h3><ol><li>掌握图的基本概念(特别注意相似的概念)。</li><li>熟练掌握图中关于结点度数的定理 (会应用)。</li><li>无向图的连通性的判定，连通分支及连通分支数的概念。</li><li>有向图的可达性、强连通、单侧连通和弱连通的判定，求强分图、单侧分图和弱分图。</li><li>会求图的矩阵。</li><li>会判定欧拉图和汉密尔顿图。</li><li>了解平面图。</li><li>了解着色与对偶图。</li><li>掌握树的基本定义，$v$和$e$间的关系式。会画生成树，会求最小生成树。</li><li>掌握根树的概念，完全$m$叉树的公式，会画最优树，会设计前缀码。</li></ol><h3 id="章节内容-7"><a href="#章节内容-7" class="headerlink" title="章节内容"></a>章节内容</h3><ol><li>图的基本概念 </li><li>路与回路</li><li>图的矩阵表示 </li><li>赋权图的最短路与关键路</li><li>欧拉图与汉密尔顿图</li><li>二部图</li><li>平面图 </li><li>对偶图与着色</li><li>树与生成树 </li><li>根树及其应用</li></ol><h3 id="学习重难点-7"><a href="#学习重难点-7" class="headerlink" title="学习重难点"></a>学习重难点</h3><ul><li>图的若干基本概念及相关定理</li><li>路与回路</li><li>欧拉图和汉密尔顿图的判定及应用</li><li>树的等价定义，树与生成树的应用</li><li>根树及其应用</li></ul><h3 id="我的博客-7"><a href="#我的博客-7" class="headerlink" title="我的博客"></a>我的博客</h3><ol><li><a href="https://blankspace.blog.csdn.net/article/details/114257431">图的基本概念和结论</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114275195">欧拉图与汉密尔顿图</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114281799">二部图</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114285228">平面图</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114285877">图的着色与对偶图</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114295093">树的基本概念和结论</a></li></ol><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><ol><li><a href="https://blankspace.blog.csdn.net/article/details/102466436">一个简单的自动逻辑推理问题</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/102466332">编写一个简单的三人表决器</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/104938780">旅行路线规划问题</a></li></ol><h1 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h1><p>此课的特点：内容较杂，概念多，定理多，比较抽象，给学习带来一定难度。</p><p>离散数学是计算机科学系所有专业的基础数学课程。一方面有其实用性（应用数学的特征），另一方面有其本身作为数学基础课的理论的严谨性。所以，学习任何一个专题时：</p><p>首先，要精确严格地掌握好概念和术语，正确理解他们的内涵和外延。因为公理、定理或定律的基石都是概念。只有正确的理解概念，才能把握定理的实质，熟练地将公理、定理应用于解决问题。完全的，精确的掌握一个概念的好主意是首先要深刻理解概念的内涵，然后举一些属于和不属于该概念外延的正反两方面的实例。如果对一些似是而非的例子也能辨别的话，应该说这个概念真正理解了。对一些重要的概念，能记住一两个的实例也很管用。这对牢固掌握一个概念是很有好处的。 千万不要在完全理解某些概念，基本定理之前就匆忙去做相应的习题。几乎可以肯定的说，这样做是不能学懂离散数学的。 </p><p>其次，养成一种自觉的学习习惯。在掌握好基本概念和术语基础上，理解每一基本定理的本质，通过学习和借鉴书中提供的例题，多做些习题，从而进一步加深理解所学内容。尤其注意要独立的完成每一次作业，并且在每次作业完成之后，能自觉地归纳出其中用到的基本解题方法。 </p><p>第三，要有刻苦钻研精神,不断总结经验，注意培养自己分析问题和解决问题的能力。</p><p>最后，必须树立正确的学习目的，端正学习态度，刻苦学习从入学开始。</p><h1 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h1><ol><li><a href="https://blankspace.blog.csdn.net/article/details/114580869">两类有限状态自动机</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/114578024">纠错码基本理论</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学的图与树理论</title>
      <link href="/2021/03/01/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/chi-san-shu-xue-de-tu-yu-shu-li-lun/"/>
      <url>/2021/03/01/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/chi-san-shu-xue-de-tu-yu-shu-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p><strong>图</strong>可以定义为$G=V(G),E(G)$，其中$V(G)$是G的<strong>结点的非空集合</strong>，可简记成$V$；$E(G)$是G的<strong>边的集合</strong>，可简记成$E$。</p><p>图的<strong>结点</strong>(Vertices)用$\circ$表示，旁边表明该结点的名称。</p><p>图的<strong>边</strong>(Edges)可以分为有向边和无向边。</p><p><strong>有向边</strong>用带箭头的弧线表示，从$u$到$v$的边可表示为$&lt;u,v&gt;$。</p><p><strong>无向边</strong>用不带箭头的弧线表示，从$u$到$v$的边可表示为$(u,v)$。</p><p>图中结点相对位置不同不重要，边的区直和长短也不重要。</p><p>图的<strong>邻接点</strong>是与一条边关联的两个结点。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/1.png"></p><p>图的<strong>邻接边</strong>是关联同一个结点的两条边。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/2.png"></p><p>图的<strong>环</strong>是只关联一个结点的边。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/3.png"></p><p>图的<strong>平行边</strong>是关联于同一对接点的若干条边。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/4.png"></p><p>图可分为有向图和无向图。</p><p><strong>有向图</strong>是只有有向边的图。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/5.png"></p><p><strong>无向图</strong>是只有无向边的图。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/6.png"></p><p>图的<strong>孤立结点</strong>是不与任何边关联的结点。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/7.png"></p><p><strong>零图</strong>是仅有一些孤立结点构成的图。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/8.png"></p><p><strong>平凡图</strong>是仅有一个孤立结点构成的零图，$|V(G)=1$，$|E(G)=0|$。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/9.png"></p><p><strong>简单图</strong>是不含有环和平行边的图。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/10.png"></p><p><strong>多重图</strong>是含有平行边的图。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/11.png"></p><p>无向图中结点$v$的<strong>度</strong>是结点$v$所关联的边数，记作$deg(v)$或$d(v)$。<br>一个环带给结点的度是2。</p><p>无向图的<strong>结点度序列</strong>表示为$V={deg(v_{1}),deg(v_{2}),…,deg(v_{n})}$。</p><p>无向图的<strong>最大度</strong>表示为$\Delta(G)=\max{deg(v)|v\in{G}}$。</p><p>无向图的<strong>最小度</strong>表示为$\delta(G)=\min{deg(v)|v\in{G}}$</p><p>每个无向图所有结点度的总和等于边数的2倍，即$\sum\limits_{v\in{V}}deg(v)=2|E|$。</p><p><strong>握手定理</strong>：每个无向图中，奇数度的结点必为偶数个。</p><p><strong>K-正则图</strong>是$\Delta(G)=\delta(G)=k$的无向简单图。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/12.png"></p><p>有向图的<strong>出度</strong>是从结点$v$射出的边数，记作$deg^{+}(v)$或$dego(v)$。</p><p>有向图的<strong>入度</strong>是射入结点$v$的边数，记作$deg^{-}(v)$或$degi(v)$。</p><p>有向图所有结点的出度之和等于入度之和。</p><p><strong>无向完全图</strong>是每对结点之间都有边相连的无向简单图，如果此图有$n$个结点则记作$K_{n}$。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/14.png"></p><p>无向完全图$K_{n}$的边数为$\frac{n(n-1)}{2}$。</p><p><strong>有向简单完全图</strong>是任何两个不同结点之间都有相互可达的边的有向简单图。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/15.png"></p><p>有向简单完全图$K_{n}$的边数为$n(n-1)$。</p><p><strong>有向完全图</strong>是任何两个结点之间都有相互可达的边的有向图。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/16.png"></p><p>设$G=&lt;V,E&gt;$是图，如果$G’=&lt;V’,E’&gt;$，$V’⊆V$，$V’=\Phi$，$E’⊆E$，则称$G’$是$G$的<strong>子图</strong>。</p><p>设$G=&lt;V,E&gt;$是图，$G’=&lt;V’,E’&gt;$，$G’$是$G$的<strong>子图</strong>，如果$V’=V$，则称$G’$是$G$的<strong>生成子图</strong>。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/17.png"></p><p>图$G$的<strong>补图</strong>是由$G$的所有结点和为使$G$变成完全图所需要添加的所有边组成的图，记作$\overline{G}$。</p><p>设$G_{1}=&lt;V_{1},E_{1}&gt;$是图$G=&lt;V,E&gt;$的子图，如果有$G_{2}=&lt;V_{2},E_{2}&gt;$使得$E_{2}=E-E_{1}$且$V_{2}$中仅包含$E_{2}$中的边所关联的结点，则称$G_{2}$是$G_{1}$相对$G$的补图。<br>相对补图没有相互性。<br>下图中$G_{2}$是$G_{3}$相对$G$的补图，$G_{3}$是$G_{1}$相对$G$的补图，$G_{1}$不是$G_{3}$相对$G$的补图。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/18.png"></p><p>$G=&lt;V,E&gt;$和$G’=&lt;V’,E’&gt;$是图，如果存在双射$f:V→V’$，对于任意$v_{i},v_{j}\in{V}$，若$(v_{i},v_{j})\in{E}$当且仅当$(f(v_{i}),f(v_{j}))\in{E’}$，或$&lt;v_{i},v_{j}&gt;\in{E}$当且仅当$&lt;f(v_{i}),f(v_{j})&gt;\in{E’}$，则称$G$与$G’$同构，记作$G\cong{G’}$。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/19.png"></p><p>两个图同构的必要条件：</p><ol><li>结点个数相等</li><li>边数相等</li><li>度数相同的结点数相等</li><li>对应的结点的度数相等</li></ol><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/20.png"></p><p>图中结点和边的交叉序列$v_{0}e_{1}v_{1}e_{2}v_{2}…e_{n}v_{n}$是连接$v_{0}$到$v_{n}$的<strong>路</strong>，$v_{0}$是此<strong>路的起点</strong>，$v_{n}$是此<strong>路的终点</strong>，路中含有的边数$n$称为此<strong>路的长度</strong>。<br>如果图是简单图，则路可以只用结点序列表示，如$abcd$。<br>如果图是有向图，则路可以只用边序列表示，如$e_{1}e_{3}e_{5}e_{6}$。</p><p>图中的<strong>回路</strong>是起点和终点重合的路。</p><p>图中的<strong>迹</strong>是所有边都不同的路。</p><p>图中的<strong>闭迹</strong>是所有边都不同的回路。</p><p>图中的<strong>通路</strong>是所有结点都不同的路。</p><p>图中的<strong>圈</strong>是除起点和终点外其余结点都不同的回路。</p><p>在一个有$n$个结点的图中，如果结点$v_{i}$到$v_{j}$存在一条路，则从$v_{i}$到$v_{j}$必存在一条长度不多于$n-1$的路。</p><p>在无向图中，如果结点$u$和$v$之间存在一条路，则称$u$和$v$是<strong>连通</strong>的。<br>规定，对于任意结点$u$，$u$和$u$是连通的。<br>图中结点间的连通关系是一个等价关系。</p><p>令$G=&lt;G,V&gt;$是无向图，$R$是$V$上的连通关系，设$R$对$V$的商集中有等价类$V_{1},V_{2},V_{3},…,V_{n}$，这$n$个类构成的$n$个子图分别记作$G(V_{1}),G(V_{2}),G(V_{3}),…,G(V_{n})$，并称它们为$G$的<strong>连通分支</strong>，并用$W(G)$表示$G$中连通分支数。</p><p><strong>连通图</strong>是只有一个连通分支的图，$W(G)=1$。</p><p>图$G=&lt;G,V&gt;$是连通图，当且仅当对$V$的任何分成$V_{1}$和$V_{2}$的划分，恒存在一条边，使得它的两个端点分别属于$V_{1}$和$V_{2}$。</p><p>$G=&lt;G,V&gt;$是无向连通图，结点集合$V_{1}⊆V$，如果删去$V_{1}$所有的结点后，$G$就不再连通，而删去$V_{1}$的任何真子集中的所有结点后得到的子图仍然连通，则称$V_{1}$是$G$的一个<strong>点割集</strong>。<br>若点割集$V_{1}$中只有一个结点，则称此结点为<strong>割点</strong>。</p><p>一个连通图中结点$v$是割点的充分必要条件是存在两个结点$u$和$w$，使得从$u$到$w$的任何路都通过$v$。</p><p><strong>点连通度</strong>$k(G)=\min{|V_{1}||V_{1}是G的点割集}$，$G$不是完全图。<br>点连通度表示的是使$G$不连通至少要删去的结点数。<br>具有割点的图的点连通度$k(G)=1$。</p><p>$G=&lt;G,V&gt;$是无向连通图，边集合$E_{1},E_{2}⊆E$，如果删去$E_{1}$所有的边后，$G$就不再连通，而删去$E_{1}$的任何真子集中的所有边后得到的子图仍然连通，则称$E_{1}$是$G$的一个<strong>边割集</strong>。<br>若边割集$E_{1}$中只有一条边，则称此边为<strong>割边</strong>，也称<strong>桥</strong>。</p><p><strong>边连通度</strong>$\lambda(G)=\min{|E_{1}||E_{1}是G的边集}$，$G$不是平凡图。<br>边连通度表示的是使$G$不连通至少要删去的边数。<br>如果$G$不是连通图，则$k(G)=\lambda(G)=0$。</p><p>$G$是无向图，则$k(G)≤\lambda(G)≤\delta(G)$。</p><p>在有向图中，如果结点$u$和$v$之间存在一条路，则称从$u$到$v$是<strong>可达</strong>的。<br>显然，结点间的可达关系具有自反性和传递性。</p><p>在有向图中，如果从$u$到$v$是<strong>可达</strong>的，则可能存在多条路，其中最短路的长度被称作从$u$到$v$的<strong>距离</strong>。记作$d&lt;u,v&gt;$。</p><p>可达性的性质：</p><ol><li>$d&lt;u,v&gt;≥0$</li><li>$d&lt;u,u&gt;=0$</li><li>$d&lt;u,v&gt;+d&lt;v,w&gt;≥d&lt;u,w&gt;$</li><li>如果从$u$到$v$是不可达的，则$d&lt;u,u&gt;=∞$</li><li>即使从$u$到$v$是可达的，从$v$到$u$也是可达的，$d&lt;u,v&gt;$也不一定等于$d&lt;v,u&gt;$。</li></ol><p>有向图的<strong>直径</strong>$D=\max\limits_{u,v\in{V}}{d&lt;u,v&gt;}$。</p><p>简单有向图中，如果任意两个结点间互相可达，则称此图为<strong>强联通图</strong>。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/21.png"></p><p>简单有向图中，如果任意一对结点间至少有一个结点到另一个结点可达，则称此图为<strong>单侧联通图</strong>。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/22.png"></p><p>简单有向图中，如果将此图看做无向图后是连通的，则称此图为<strong>弱联通图</strong>。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/23.png"></p><p>有向图是强联通的，当且仅当此图中有一条至少包含每个结点一次的回路。</p><p>简单有向图的<strong>强分图</strong>是具有强联通的最大子图。</p><p>简单有向图的<strong>单侧分图</strong>是具有单侧联通的最大子图。</p><p>简单有向图的<strong>弱分图</strong>是具有弱联通的最大子图。</p><p>强分图、单侧分图、弱分图用结点的集合表示。</p><p>在有向图中，每个结点必位于一个且只位于一个强分图中。</p><p>设$G=&lt;V,E,W&gt;$是图，如果$G$的每条边$e$上都标有实数$c(e)$，$c(e)\in{W}$，则称这个数为边$e$的<strong>权</strong>，称此图为<strong>带权图</strong>。<br>带权图的性质：</p><ol><li>$c(u,u)=0$</li><li>如果结点$u$与$v$间无边相连，则$c(u,v)=∞$</li></ol><p>带权图结点$u$和$v$之间的<strong>路长</strong>是指该路所包含的各边权的总和。</p><p>带权图结点$u$和$v$的<strong>两点间距离</strong>是指两结点之间的最短路的路长，记作$d(u,v)$或d&lt;u,v&gt;。</p><p>求带权图一个结点到另一个结点的最短路径算法有：<strong>Dijkstra算法</strong>、SPFA算法/Bellman-Ford算法、Floyd算法/Floyd-Warshall算法、Johnson算法、A*算法等。</p><h2 id="欧拉图"><a href="#欧拉图" class="headerlink" title="欧拉图"></a>欧拉图</h2><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/24.png"></p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/25.png"></p><p>在无孤立结点的图$G$中，如果存在一条经过图中每条边一次且仅一次的路，则称此路为<strong>欧拉路</strong>。</p><p>在无孤立结点的图$G$中，如果存在一条经过图中每条边一次且仅一次的回路，则称此路为<strong>欧拉回路</strong>。</p><p><strong>欧拉图</strong>是含有欧拉回路的图。</p><p>欧拉路的判定：无向图$G$具有欧拉路，当且仅当$G$是连通的且有<strong>零个或两个奇数度</strong>的结点。</p><p>欧拉回路的判定：无向图$G$具有欧拉回路，当且仅当$G$是连通的且所有结点的度都是<strong>偶数</strong>。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/26.png"></p><p>求下图的欧拉回路：<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/27.png"></p><ol><li>判定所有结点度均为偶数，此图具有欧拉回路。</li><li>以1位起点，选择闭迹$E_{1}=1261$。</li><li>$E_{1}$不包含所有边。</li><li>在$G-E_{1}$中找新闭迹$E_{2}=6356$。</li><li>以公共结点6为起点，对$E_{1}\cup{E_{2}}$中的边排序：$C=6356126$。</li><li>$E_{1}:=C$，$E_{1}=6356126$。</li><li>$E_{1}$不包含所有边。</li><li>在$G-E_{1}$中找新闭迹$E_{2}=52345$。</li><li>以公共结点5为起点，对$E_{1}\cup{E_{2}}$中的边排序：$C=52345612635$。</li><li>$E_{1}:=C$，$E_{1}=52345612635$。</li><li>$E_{1}$包含所有边。</li><li>打印$E_{1}=52345612635$。</li><li>结束。</li></ol><h2 id="汉密尔顿图"><a href="#汉密尔顿图" class="headerlink" title="汉密尔顿图"></a>汉密尔顿图</h2><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/28.png"></p><p>在无向有限图$G$中，如果存在一条经过图中每个结点一次且仅一次的路，则称此路为<strong>汉密尔顿路</strong>。</p><p>在无向有限图$G$中，如果存在一条经过图中每个结点一次且仅一次的回路，则称此路为<strong>汉密尔顿回路</strong>。</p><p><strong>汉密尔顿图</strong>是含有汉密尔顿回路的图。</p><p>目前尚无判定汉密尔顿图的充要条件。</p><p>充分条件1：$G$是完全图。</p><p>充分条件2：$G$是有$n$个结点的简单图，且$G$中每对结点度数之和大于等于$(n-1)$。<br>下图则是其不具有必要性的例子：<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/29.png"></p><p>必要条件1：若图$G=&lt;V,E&gt;$有汉密尔顿回路，则对$V$的任何非空有限子集$S$，均有$W(G-S)≤|S|$，其中$W(G-S)$是从$G$中删去$S$中所有结点及与这些结点关联的边所得到的子图的连通分支数。</p><p>已确定存在汉密尔顿回路的情况下，使用<strong>最邻近法</strong>求解汉密尔顿回路：</p><ol><li>任选任意结点$u$，找一个最近邻（边的权最小）的结点$x$。</li><li>设$x$是新加到这条路中的结点，再从不在此路上的结点中找到一个$x$邻近的（边的权最小）的结点，加到此路中。</li><li>重复第2步，直到$G$中所有结点都在此路上。</li><li>回到起点，构成回路，找到汉密尔顿回路。</li></ol><h2 id="二部图"><a href="#二部图" class="headerlink" title="二部图"></a>二部图</h2><p>$G=&lt;V,E&gt;$是无向图，如果可以将$V$划分成两个子集$V_{1}$和$V_{2}$，使得任何边$(v_{i},v_{j})\in{E}$，$v_{i}\in{V_{1}}$，$v_{j}\in{V_{2}}$，则称$G$是<strong>二部图</strong>，也称<strong>二分图</strong>，并称$V_{1}$和$V_{2}$是$G$的互补的结点子集。</p><p>$G=&lt;V,E&gt;$是以$V_{1}$和$V_{2}$为互补的结点子集的二部图，如果$V_{1}$中的每个结点都与$V_{2}$中的每个结点相邻接，则称$G$是<strong>完全二部图</strong>，$|V_{1}|=m$，$|V_{2}|=n$，则$G$记作$K_{m,n}$。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/30.png"></p><p>二部图的判定定理：$G=&lt;V,E&gt;$是二部图，当且仅当它的所有回路的长度都是偶数。</p><p>$G=&lt;V,E&gt;$是以$V_{1}$和$V_{2}$为互补的结点子集的二部图，令$V_{1}={v_{1},v_{2},…,v_{k}}$，$V_{1}$对$V_{2}$的一个<strong>匹配</strong>是$G$的一个子图，它由$k$条边$(v_{1},v_{1}’),(v_{2},v_{2}’),…,(v_{k},v_{k}’)$组成，其中$v_{1}’,v_{2}’,…,v_{k}’$是$V_{2}$中$k$个不同元素。</p><p>如果$|V_{1}|=|V_{2}|$时，此匹配称为<strong>完全匹配</strong>。</p><p>匹配相当于一个入射，完全匹配相当于一个双射。</p><p>设$G_(0)=&lt;V_{0},E_{0}&gt;$是二部图，求一个匹配的算法：</p><ol><li>置初值，$V_{1}=V_{0}$，$E_{1}=\Phi$，$G_{1}=G_{0}$。</li><li>如果$G_{1}$是零图，则结束，得$E_{1}$；否则在$V_{1}$中选取度最小的结点。设此节点为$u$，与之相邻接的一个结点为$v$，取边$(u,v)$，$E_{1}=E_{1}\cup{(u,v)}$。</li><li>从图$G_{1}$中删去结点$u$和$v$，即$V_{1}=V_{1}-{u,v}$，更新图$G_{1}$</li><li>转到第2步</li></ol><p>在下面的二部图中验证该算法：<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/31.png"></p><ol><li>置初值，$V_{1}=V_{0}$，$E_{1}=\Phi$，$G_{1}=G_{0}$。</li><li>$G_{1}$不是零图，在$V_{1}$中选取度最小的结点$c$，$E_{1}=E_{1}\cup{(B,c)}={(B,c)}$。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/32.png"></li><li>$V_{1}=V_{1}-{B,c}$。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/33.png"></li><li>$G_{1}$不是零图，在$V_{1}$中选取度最小的结点$d$，$E_{1}=E_{1}\cup{(A,d)}={(B,c),(A,d)}$。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/34.png"></li><li>$V_{1}=V_{1}-{A,d}$。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/35.png"></li><li>$G_{1}$不是零图，在$V_{1}$中选取度最小的结点$a$，$E_{1}=E_{1}\cup{(C,a)}={(B,c),(A,d),(C,a)}$。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/36.png"></li><li>$V_{1}=V_{1}-{C,a}$。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/37.png"></li><li>$G_{1}$不是零图，在$V_{1}$中选取度最小的结点$b$，$E_{1}=E_{1}\cup{(D,b)}={(B,c),(A,d),(C,a),(D,b)}$。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/38.png"></li><li>$V_{1}=V_{1}-{D,b}$。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/39.png"></li><li>$G_{1}$是零图，结束匹配，得$E_{1}={(B,c),(A,d),(C,a),(D,b)}$是一个匹配。</li></ol><p>此算法可能得不到所有匹配，比如下图也是匹配：<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/40.png"></p><h2 id="平面图"><a href="#平面图" class="headerlink" title="平面图"></a>平面图</h2><p>设$G$是无向图，如果能将$G$的所有结点和边都画在一个平面上，且使得任何两条边除了端点外没有其它交点，则称$G$是个<strong>平面图</strong>。</p><p>如果一个图表面上是个非平面图，通过改变边的位置就变成平面图，则称此图是<strong>可平面化</strong>的。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/41.png"></p><p>两个重要的非平面图是$K_{5}$和$K_{3,3}$：<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/42.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/43.png"></p><p>设$G$是个平面图，图中边围成的区域，其内部不含有结点，也不含有边，称这样区域为$G$的一个<strong>面</strong>。</p><p>围成一个面$r$的所有边构成的回路，称之为这个$r$面的<strong>边界</strong>。此回路中的边数，称之为$r$面的<strong>次数</strong>，记作$deg(r)$。</p><p>面的面积有限称为<strong>有限面</strong>，反之称为<strong>无限面</strong>。<br>所有平面图的外侧都有一个无限面。</p><p><strong>欧拉公式</strong>：$G$是个连通的平面图，设$v$、$e$、$r$分别表示$G$中结点数、边数、面数，则有$v-e+r=2$。</p><p>一个图是平面图的必要条件：若$v≥3$，$则 e≤3v-6$。</p><p>如果$G_{1}$和$G_{2}$是同构的,或者通过反复插入或删去度数为2的结点，使得它们变成同构的图，称$G_{1}$和$G_{2}$是<strong>在2度结点内同构</strong>（同胚）。</p><p><strong>Kuratowski定理</strong>：一个图是平面图的充要条件是它不含有任何与$K_{5}$、$K_{3,3}$在2度结点内同构的子图。</p><p>设$G$是个简单图，令$u$、$v$是不邻接的结点，如果不能在$u$、$v$之间增加一条边而不破坏图的平面性时，则称$G$是极大平面图。<br><em>理解：此时，如果再加一条边，就恰好不是平面图了。</em></p><p>极大平面图的每个面都是由三条边围成。<br>这是因为如果含有四条或者四条以上的边围成的面，那么至少可以增加一条边，而不改变可平面性。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/44.png"></p><p>设$G$是个极大平面图，且有$v$个结点，$e$条边，$r$个面，则$e=3v-6$，$r=2v-4$。</p><h2 id="对偶图"><a href="#对偶图" class="headerlink" title="对偶图"></a>对偶图</h2><p>着色问题起源于对地图着色。问题是使得相邻国家用不同颜色，需要多少种不同的颜色?</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/45.png"></p><p>Guthrie提出四色猜想，最终于1976年被K.Appel和W.Haken归结为2000个不同的组合结构图形，利用计算机进行了证明，变成了四色定理。</p><p>给定平面图$G=&lt;V,E&gt;$, 具有平面$F_{1},F_{2},F_{3},…,F_{n}$。如果有图$G^{*}=&lt;V^{*},E^{*}&gt;$, 满足下面条件：</p><ol><li>对于$G$的任意平面$F_{i}$的内部有且仅有一个结点$v_{i}^{<em>}∈V^{</em>}$。</li><li>对于图$G$的面$F_{i}$与$F_{j}$的公共边界$e_{k}$，有且仅有一条边$e_{k}^{<em>}\in{E^{</em>}}$，使得$e_{k}^{<em>}=(v_{i}^{</em>},v_{j}^{<em>})$，且$e_{k}^{</em>}$与$e_{k}$相交。（$v_{i}^{<em>}$在$F_{i}$内,$v_{j}^{</em>}$在$F_{j}$内）</li><li>当且仅当$e_{k}$只是一个面$F_{i}$的边界 时，$v_{i}^{<em>}$上有一个环$e_{k}^{</em>}$与$e_{k}$相交。</li></ol><p>则称图$G^{*}$是$G$的<strong>对偶图</strong>。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/46.png"></p><p>$G^{*}$中的结点数等于$G$中的面数。</p><p>如果图$G$的对偶图$G^{*}$与$G$同构，则称$G$是自对偶图。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/47.png"></p><p>对平面图的相邻面用不同颜色的着色问题，可以归结到对其对偶图的相邻接的结点着不同颜色。</p><p>对$G$的每个结点指定一种颜色，使得相邻接的两个结点着不同颜色。如果$G$着色用了$n$种颜色，称$G$是$n-色$的。</p><p>对$G$着色时，需要的最少颜色数，称为$G$的<strong>着色数</strong>,记作$\chi(G)$。</p><p>图的着色方法（韦尔奇.鲍威尔法）：</p><ol><li>将$G$中的结点按度数递减依次排序。</li><li>用第一种颜色对第一个结点上色，并按照排序，对与前面着色点不相邻的每一个点着上相同颜色。此时需要注意同时与当前结点不相邻的结点中如果有相邻的，也要避免冲突。</li><li>用另一种颜色对尚未着色的点重复执行第2步和第3步，直到所有结点都着上颜色为止。</li></ol><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/48.png"></p><p>色数的计算：</p><ol><li>如果$G$只有一个孤立结点，则$\chi(G)=1$。</li><li>$\chi(K_{n})=n$。</li><li>如果$G$有偶数个结点的回路，则$\chi(G)=2$。</li><li>如果$G$有奇数个结点的回路，则$\chi(G)=3$。</li><li>如果$G$是结点数超过1的树，则$\chi(G)=2$。</li><li>如果$G$是二部图，则$\chi(G)=2$。</li><li>一般求法：设$v_{i}$和$v_{j}$不是邻接点，定义$\hat{G_{ij}}$为$G$上加边$(v_{i},v_{j})$所得到的图、$\dot{G_{ij}}$为把$v_{i}$和$v_{j}$缩为一点$z$所得到的图（即$G$图中反是与$v_{i}$、$v_{j}$关联的边都与$z$关联），$\chi(G)=\min{\chi(\hat{G_{ij}}),\chi(\dot{G_{ij}})}$。</li></ol><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p><strong>树</strong>的定义：</p><ol><li>连通无回路的无向图。</li><li>无回路且$e=v-1$。</li><li>连通且$e=v-1$。</li><li>无回路，但添加一条新边则得到唯一的一条回路。</li><li>连通，但删去任意一条边就不连通。</li><li>每对结点之间有且仅有一条路。</li></ol><p><strong>叶结点</strong>是树中度数为1的结点。</p><p><strong>分支结点</strong>是树中度数大于1的结点。</p><p><strong>森林</strong>是每个连通分支都是树的无向图。</p><p>如果图的生成子图是树，则称此树为此图的<strong>生成树</strong>。</p><p><strong>弦</strong>：不在图的生成树里边的边。</p><p><strong>生成树的补</strong>：所有弦的集合。</p><p>连通图至少有一棵生成树。<br><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%9B%BE%E4%B8%8E%E6%A0%91%E7%90%86%E8%AE%BA/49.png"></p><p>$B_{k}$是连通图$G$的基本关联矩阵，则$G$的生成树的个数为$det(B_{k}B_{k}^{T})$。</p><p>$G$是一个连通图，$e\in{E(G)}$，则$\tau(G)=\tau(G-e)+\tau(G.e)$。<br>$\tau(G)$是生成树的个数，$\tau(G-e)$是不含边$e$的生成树个数，$\tau(G.e)$是含边$e$的生成树个数。</p><p>完全图$K_{n}$的生成树个数$\tau(K_{n})=n^{n-2}$。</p><p>一棵生成树的所有边的权之和称为该<strong>生成树的权</strong>。<br>具有最小权的生成树，称为<strong>最小生成树</strong>。</p><p>求解最小生成树的经典算法有Prim算法和Kruskal算法等。</p><h2 id="根树"><a href="#根树" class="headerlink" title="根树"></a>根树</h2><p>如果$G$是个有向图，在不考虑边的方向时是一棵树，则称$G$是<strong>有向树</strong>。</p><p><strong>根树</strong>是恰有一个入度为0的结点且其他结点入度均为1的有向树。</p><p>根树中，<strong>树根</strong>是入度为0的结点。</p><p>根树中，<strong>叶</strong>是出度为0的结点。</p><p>根树中，<strong>分支结点</strong>是出度不为0的结点。</p><p>根树中，如果$&lt;v_{i},v_{j}&gt;$是根树中的一条边，则称$v_{i}$是$v_{j}$的<strong>父结点</strong>，$v_{j}$是$v_{i}$的<strong>子结点</strong>。</p><p>根树中，如果从$v_{i}$到$v_{j}$有路，则称$v_{i}$是$v_{j}$的<strong>祖先结点</strong>，$v_{j}$是$v_{i}$的<strong>后裔结点</strong>。</p><p>根树中，从根结点到某个结点的路径长度称为该结点的<strong>层次</strong>，同一层次的结点称为<strong>兄弟结点</strong>。</p><p>根树中，从树根到各个叶结点的路径中，最长路径的长度称为该树的<strong>高度</strong>。</p><p><strong>有序树</strong>是规定了每一层上的结点的次序的有向树。</p><p><strong>m叉树</strong>是每个结点出度最大为$m$的根树。</p><p><strong>完全m叉树</strong>是每个结点出度都为$m$或$0$的根树。</p><p><strong>正则m叉树</strong>是所有树叶层次相同的完全m叉树。</p><p>$T$是一棵完全m叉树，有$t$个叶结点和$i$个分支结点，则$(m-1)i=t-1$。</p><p>遍历二叉树可以有<strong>先序遍历</strong>、<strong>中序遍历</strong>、<strong>后序遍历</strong>、<strong>层序遍历</strong>的方式。</p><p><strong>最优二叉树</strong>也称<strong>哈夫曼树</strong>，是带权树中权数最小的二叉树。<br>生成最优二叉树的算法是哈夫曼算法，这是一种贪心算法。</p><h1 id="图与树"><a href="#图与树" class="headerlink" title="图与树"></a>图与树</h1><ol><li>不难看出，数据结构中的树并不是离散数学中的树，我认为二者的区别有两个方面：<ol><li>数据结构的树指的是离散数学中的根树</li><li>数据结构的树考虑的是结点一对多的逻辑关系，图则是多对多的逻辑关系；离散数学的树则是图的一种特殊情况。当然，从这个角度深入思考其实二者没有本质矛盾。</li></ol></li><li>树本身就是递归定义的，与树相关的算法多为递归算法。鉴于递归的时空性能可能较差，可以使用栈和队列等数据结构辅助实现非递归的算法。</li><li>如果实在记不住树里面边和结点的个数关系，那就画个简单的图，轻松易懂。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵的特征值和特征向量</title>
      <link href="/2021/03/01/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/ju-zhen-de-te-zheng-zhi-he-te-zheng-xiang-liang/"/>
      <url>/2021/03/01/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/ju-zhen-de-te-zheng-zhi-he-te-zheng-xiang-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="线性代数理论分析"><a href="#线性代数理论分析" class="headerlink" title="线性代数理论分析"></a>线性代数理论分析</h1><p>设$A$是$n$阶方阵,  如果数$\lambda_{0}$和$n$维非零列向量$\xi$满足关系式$A\xi=\lambda_{0}\xi$，则称$\lambda_{0}$为A的特征值，$\xi$为A的属于$\lambda_{0}$的一个特征向量。</p><p>设$A$是$n$阶方阵，$\lambda$是参数，则行列式$\det(\lambda{E}-A)=\begin{vmatrix} \lambda-a_{11} &amp; -a_{12} &amp; \ldots &amp; -a_{1n} \ -a_{21} &amp; \lambda-a_{22} &amp; \ldots &amp; -a_{2n} \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \ -a_{n1} &amp; -a_{n2} &amp; \ldots &amp; \lambda-a_{nn} \end{vmatrix}$称为方阵$A$的特征多项式。称$\det(\lambda{E}-A)=0$为方阵$A$的特征方程。$A$的特征值就是特征方程的解，$n$阶方阵$A$有$n$个特征值。$A$的属于特征值$\lambda_{i}$的特征向量就是齐次线性方程组$(\lambda_{i}E-A)x=0$的所有非零解。</p><h1 id="Numpy编程实现"><a href="#Numpy编程实现" class="headerlink" title="Numpy编程实现"></a>Numpy编程实现</h1><p><img src="https://img-blog.csdnimg.cn/ca28898bde6d4737a6a7dfa02613fc59.png" alt="在这里插入图片描述"></p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/104074290">Numpy操作向量和矩阵</a></p><p>Numpy库的<code>numpy.linalg.eig()</code>可以计算特征值和特征向量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 加载numpy库</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 创建一个求解特征值、特征向量的矩阵</span>matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 计算特征值和特征向量</span>eigen_values<span class="token punctuation">,</span> eigen_vectors <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eig<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看计算所得的特征值和特征向量：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查看特征值</span><span class="token keyword">print</span><span class="token punctuation">(</span>eigen_values<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>eigen_values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 查看特征向量</span><span class="token keyword">print</span><span class="token punctuation">(</span>eigen_vectors<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>eigen_vectors<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<br>[13.55075847  0.74003145 -3.29078992]<br>&lt;class ‘numpy.ndarray’&gt;<br>[[-0.17622017 -0.96677403 -0.53373322]<br> [-0.435951    0.2053623  -0.64324848]<br> [-0.88254925  0.15223105  0.54896288]]<br>&lt;class ‘numpy.ndarray’&gt;</p><p>可见，特征值的结果类型是一维<code>numpy.ndarray</code>，特征向量的结果类型是二维<code>numpy.ndarray</code>。</p><p>验证方法按照标准定义来，对$A$的每个特征值$\lambda_{i}$及其对应的特征向量$\xi_{i}$，$A\xi_{i}=\lambda_{i}\xi_{i}$。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>eigen_values<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 逐一取出的特征值</span>    lambda_data <span class="token operator">=</span> eigen_values<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment"># 逐一取出对应的特征向量</span>    xi_vector <span class="token operator">=</span> eigen_vectors<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment"># n×n矩阵和n×1向量相乘</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>xi_vector<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># λ数值和n×1向量乘得数量积</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lambda_data <span class="token operator">*</span> xi_vector<span class="token punctuation">)</span>    <span class="token comment"># 换行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特征向量应该按列取，即<code>eigen_vectors[:, i:i + 1]</code>。</p><p>矩阵和向量相乘不能用<code>*</code>，要用<code>.dot()</code>求得：<code>matrix.dot(xi_vector)</code>。</p><p>尽管看起来等号两侧的结果向量相等，但还是可以用<code>numpy.array_equal()</code>对比一下：<code>np.array_equal(matrix.dot(xi_vector), (lambda_data * xi_vector))</code>。遗憾的是，并不总是True，这可能是浮点运算误差所致。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学的格理论</title>
      <link href="/2021/02/28/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/chi-san-shu-xue-de-ge-li-lun/"/>
      <url>/2021/02/28/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/chi-san-shu-xue-de-ge-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="格"><a href="#格" class="headerlink" title="格"></a>格</h1><p><strong>格</strong>：$&lt;A,≤&gt;$是<a href="https://blankspace.blog.csdn.net/article/details/113792569">偏序集</a>，如果任何$a,b\in{A}$，使得${a,b}$都有最大下界和最小上界，则称$&lt;A,≤&gt;$是格。</p><p><strong>平凡格</strong>：所有<a href="https://blankspace.blog.csdn.net/article/details/113792569">全序集</a>都是格，这种格被称为平凡格。</p><p><strong>由格诱导的代数系统</strong>：$&lt;A,≤&gt;$是格，在$A$上定义二元运算$\vee$和$\wedge$为：$∀a,b\in{A}$，$a\vee{b}=LUB{a,b}$，$a\wedge{b}=GLB{a,b}$，称$&lt;A,\vee,\wedge&gt;$是由格$&lt;A,≤&gt;$诱导的代数系统。<br>LUB表示最小上界，GLB表示最大下界。</p><p><strong>子格</strong>：$&lt;A,≤&gt;$是格，$&lt;A,\vee,\wedge&gt;$是由格$&lt;A,≤&gt;$诱导的代数系统，$B$是$A$的非空子集，如果$\vee$和$\wedge$在$B$上封闭，则称$&lt;B,≤&gt;$是$&lt;A,≤&gt;$的子格。</p><h1 id="格的对偶原理"><a href="#格的对偶原理" class="headerlink" title="格的对偶原理"></a>格的对偶原理</h1><p>$&lt;A,≤&gt;$是格，$≤$的逆关系记作$≥$，$≥$也是偏序关系，$&lt;A,≥&gt;$也是格，$&lt;A,≥&gt;$的<a href="https://blankspace.blog.csdn.net/article/details/113794710">Hasse图</a>是将$&lt;A,≤&gt;$的Hasse图颠倒$180^{\circ}$得到的。</p><p>格的对偶原理与离散数学中普遍存在的对偶原理本质上是一致的，强调的点是$≤$换成$≥$、$\vee$换成$\wedge$、$\wedge$换成$\vee$，具体内容就不讲了。</p><h1 id="格的性质"><a href="#格的性质" class="headerlink" title="格的性质"></a>格的性质</h1><p>$&lt;A,\vee,\wedge&gt;$是由格$&lt;A,≤&gt;$诱导的代数系统，$∀a,b,c,d\in{A}$</p><ol><li>$a≤a\vee{b}$，$b≤a\vee{b}$，$a\wedge{b}≤a$，$a\wedge{b}≤b$</li><li>格的保序性：如果$a≤b$，$c≤d$，则$a\vee{c}≤b\vee{d}$，$a\wedge{c}≤b\wedge{d}$</li><li>$\vee$和$\wedge$满足交换律：$a\vee{b}=b\vee{a}$，$a\wedge{b}=b\wedge{a}$</li><li>$\vee$和$\wedge$满足幂等律：$a\vee{a}=a$，$a\wedge{a}=a$</li><li>$\vee$和$\wedge$满足结合律：$(a\vee{b})\vee{c}=a\vee({b}\vee{c})$，$(a\wedge{b})\wedge{c}=a\wedge({b}\wedge{c})$</li><li>$\vee$和$\wedge$满足吸收律：$a\vee({a}\wedge{b})=a$，$a\wedge({a}\vee{b})=a$</li><li>如果$\vee$和$\wedge$是满足吸收律的<a href="https://blankspace.blog.csdn.net/article/details/114112478">二元运算</a>，则$\vee$和$\wedge$必满足幂等律</li><li>$\vee$和$\wedge$<strong>不满足</strong>分配律，满足分配不等式：$a\vee({b}\wedge{c})≤(a\vee{b})\wedge(a\vee{c})$，$a\wedge({b}\vee{c})≤(a\wedge{b})\vee(a\wedge{c})$</li><li><font color="red">$a≤b⇔a\vee{b}=b⇔a\wedge{b}=a$</font></li></ol><h1 id="格的同构"><a href="#格的同构" class="headerlink" title="格的同构"></a>格的同构</h1><p>设$&lt;A_{1},≤_{1}&gt;$和$&lt;A_{2},≤_{2}&gt;$是两个格，由它们诱导的代数系统分别是$&lt;A_{1},\vee_{1},\wedge_{1}&gt;$和$&lt;A_{2},\vee_{2},\wedge_{2}&gt;$，如果存在映射$f→A_{1}→A_{2}$，使得对任何$a,b\in{A_{1}}$，$f(a\vee_{1}{b})=f(a)\vee_{2}{f(b)}$，$a,b\in{A_{1}}$，$f(a\wedge_{1}{b})=f(a)\wedge_{2}{f(b)}$，则称$f$是$&lt;A_{1},\vee_{1},\wedge_{1}&gt;$到$&lt;A_{2},\vee_{2},\wedge_{2}&gt;$的同态映射，也称$&lt;f(A_{1}),≤_{2}&gt;$是$&lt;A_{1},≤_{1}&gt;$的同态像。<br>如果$f$是双射的，就称$f$是$&lt;A_{1},\vee_{1},\wedge_{1}&gt;$到$&lt;A_{2},\vee_{2},\wedge_{2}&gt;$的格同构，也称$&lt;A_{1},≤_{1}&gt;$和$&lt;A_{2},≤_{2}&gt;$同构。</p><p>格同构，则它们的图的形状一定相同。</p><p>格同态具有保序性，格同构也具有保序性。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代数系统基础理论</title>
      <link href="/2021/02/27/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/dai-shu-xi-tong-ji-chu-li-lun/"/>
      <url>/2021/02/27/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/dai-shu-xi-tong-ji-chu-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="代数系统分类"><a href="#代数系统分类" class="headerlink" title="代数系统分类"></a>代数系统分类</h1><p>按照运算的性质可以将代数系统分成几类抽象的代数系统：</p><ul><li>含有一个运算的：半群、独异点、群</li><li>含有两个运算的：环、域</li><li>含有三个运算的：布尔代数</li></ul><h2 id="半群"><a href="#半群" class="headerlink" title="半群"></a>半群</h2><p><strong>半群</strong>：$S$是个非空集合，$\bigstar$是$S$上的二元运算，如果$\bigstar$在$S$上满足封闭性、可结合性，则称$&lt;S,\bigstar&gt;$是半群。<br>半群举例：$&lt;N,+&gt;$、$&lt;I,+&gt;$、$&lt;R,+&gt;$、$&lt;N,\times&gt;$、$&lt;I,\times&gt;$、$&lt;R,\times&gt;$、$&lt;P(E),\cap&gt;$、$&lt;P(E),\cup&gt;$、$&lt;P(E),\oplus&gt;$。</p><p><strong>交换半群</strong>：$&lt;S,\bigstar&gt;$是半群，如果$\bigstar$是可交换的，则称它是交换半群。<br>交换半群举例：$&lt;R,+&gt;$、$&lt;N,\times&gt;$、$&lt;P(E),\cap&gt;$、$&lt;P(E),\oplus&gt;$。</p><p><strong>子半群</strong>：$&lt;S,\bigstar&gt;$是半群，$B⊆S$，如果$\bigstar$在$B$上封闭，则称$&lt;B,\bigstar&gt;$是$&lt;S,\bigstar&gt;$上的子半群。<br>子半群举例：$&lt;N,+&gt;$是$&lt;I,+&gt;$的子半群。</p><h2 id="独异点"><a href="#独异点" class="headerlink" title="独异点"></a>独异点</h2><p><strong>独异点</strong>：$&lt;M,\bigstar&gt;$是半群，如果对$\bigstar$有幺元，则称$&lt;M,\bigstar&gt;$是个独异点，也称它是含幺半群。<br>独异点举例：</p><ul><li>幺元为$0$：$&lt;I,+&gt;$、$&lt;R,+&gt;$。</li><li>幺元为$1$：$&lt;I,\times&gt;$、$&lt;R,\times&gt;$。</li><li>幺元是$E$：$&lt;P(E),\cap&gt;$。</li><li>幺元是$\Phi$：$&lt;P(E),\cup&gt;$、$&lt;P(E),\oplus&gt;$。</li></ul><p><strong>交换独异点</strong>：$&lt;M,\bigstar&gt;$是独异点，如果$\bigstar$是可交换的，则称它是交换独异点。<br>交换独异点举例：$&lt;R,+&gt;$、$&lt;N,\times&gt;$、$&lt;P(E),\cap&gt;$、$&lt;P(E),\oplus&gt;$。</p><p><strong>子独异点</strong>：$&lt;M,\bigstar&gt;$是独异点，$B⊆M$，如果$\bigstar$在$B$上封闭，幺元$e\in{B}$，则称$&lt;B,\bigstar&gt;$是$&lt;S,\bigstar&gt;$上的子独异点。<br>子独异点举例：$&lt;I,+&gt;$是$&lt;R,+&gt;$的子独异点。</p><h2 id="群"><a href="#群" class="headerlink" title="群"></a>群</h2><p><strong>群</strong>：$&lt;G,\bigstar&gt;$是代数系统，如果$\bigstar$满足封闭、可结合、有幺元且每个元素可逆，则称它是群。<br>群举例：$&lt;I,+&gt;$、$&lt;R,+&gt;$、$&lt;P(E),\oplus&gt;$。</p><p><strong>有限群</strong>：$&lt;G,\bigstar&gt;$是群，$G$是有限集，则称它为有限群。</p><p><strong>交换群</strong>：$&lt;G,\bigstar&gt;$是群，如果$\bigstar$是可交换的，则称它是交换群，也称<strong>阿贝尔群</strong>。<br>交换群举例：$&lt;I,+&gt;$、$&lt;R,+&gt;$、$&lt;P(E),\oplus&gt;$。</p><p><strong>子群</strong>：$&lt;G,\bigstar&gt;$是群，$S$是$G$的非空子集，如果$&lt;S,\bigstar&gt;$满足封闭、有幺元、每个元素可逆，则称$&lt;S,\bigstar&gt;$是$&lt;G,\bigstar&gt;$的子群。<br>子群举例：$&lt;I,+&gt;$是$&lt;R,+&gt;$的子群。</p><p>广群仅仅是具有封闭二元运算的非空集合；半群是具有结合运算的广群；独异点是具有幺元的半群；群是每个元素有逆元的独异点。<br>$${群}⫋{独异点}⫋{半群}⫋{广群}$$</p><h3 id="群的性质"><a href="#群的性质" class="headerlink" title="群的性质"></a>群的性质</h3><ul><li>可消去性：$&lt;G,\bigstar&gt;$是群，则对任何$a,b,c\in{G}$，如果有$a\bigstar{b}=a\bigstar{c}$，则$b=c$；如果有$b\bigstar{a}=c\bigstar{a}$，则$b=c$。</li><li>群方程可解性：$&lt;G,\bigstar&gt;$是群，则对任何$a,b\in{G}$，存在唯一元素$x\in{G}$，使得$a\bigstar{x}=b$；存在唯一元素$y\in{G}$，使得$y\bigstar{a}=b$。</li><li>无零元：$&lt;G,\bigstar&gt;$是群，如果$K[G]≥2$，则$G$中无零元。</li><li>除幺元外无其他幂等元：$&lt;G,\bigstar&gt;$是群，$G$中除幺元外，无其他幂等元。</li><li>逆元相关：$&lt;G,\bigstar&gt;$是群，则对任何$a,b\in{G}$，有$(a^{-1})^{-1}=a$，$(a\bigstar{b})^{-1}=b^{-1}\bigstar{a^{-1}}$。</li><li>有限群的运算表的特征：$&lt;G,\bigstar&gt;$是群，则$G$中每个元素在$\bigstar$运算表中的每一行(列)必定出现且只出现一次。</li></ul><h2 id="环"><a href="#环" class="headerlink" title="环"></a>环</h2><p><strong>环</strong>：$&lt;A,\bigstar,<em>&gt;$是代数系统，如果$&lt;A,\bigstar&gt;$是阿贝尔群、$&lt;A,*&gt;$是半群、运算$</em>$关于$\bigstar$是可分配的，则称它是环。</p><p><strong>交换环</strong>：$&lt;A,+,\bullet&gt;$是环，如果$&lt;A,\bullet&gt;$是可交换的，则称它是交换环。</p><p><strong>含幺环</strong>：$&lt;A,+,\bullet&gt;$是环，如果$&lt;A,\bullet&gt;$含有幺元，则称它是含幺环。</p><p><strong>整环</strong>：$&lt;A,\bigstar,*&gt;$是代数系统，如果$&lt;A,+&gt;$是阿贝尔群、$&lt;A,\bullet&gt;$是可交换独异点且满足无零因子条件、运算$\bullet$对于运算$+$是可分配的，则称它是整环。</p><h2 id="域"><a href="#域" class="headerlink" title="域"></a>域</h2><p><strong>域</strong>：$&lt;A,+,\bullet&gt;$是代数系统，如果$&lt;A,+&gt;$是阿贝尔群、$&lt;A-{\theta},\bullet&gt;$是阿贝尔群、运算$\bullet$对于运算$+$是可分配的，则称它是域。</p><p>域一定是整环，有限整环一定是域。</p><h2 id="布尔代数"><a href="#布尔代数" class="headerlink" title="布尔代数"></a>布尔代数</h2><p><strong>布尔代数</strong>：由布尔格$&lt;B,≤&gt;$诱导的代数系统$&lt;B,\vee,\wedge,^{-}&gt;$称为布尔代数，其中$^{-}$是取补元运算。<br>布尔代数举例：$B={F,T}$时的$&lt;B,\vee,\wedge,¬&gt;$。</p><p><strong>有限布尔代数</strong>：$&lt;B,≤&gt;$是布尔代数，如果$B$是有限集合，则称它为有限布尔代数。</p><h1 id="代数系统的同态-同构"><a href="#代数系统的同态-同构" class="headerlink" title="代数系统的同态(同构)"></a>代数系统的同态(同构)</h1><h2 id="同态-x2F-同构"><a href="#同态-x2F-同构" class="headerlink" title="同态/同构"></a>同态/同构</h2><p>设$&lt;X,\bigstar&gt;$和$&lt;Y,\circ&gt;$是两个代数系统，$\bigstar$和$\circ$都是<a href="https://blankspace.blog.csdn.net/article/details/114112478">二元运算</a>，如果存在映射$f:X→Y$，使得对任何$x_{1},x_{2}\in{X}$，有$f(x_{1}\bigstar{x_{2}})=f(x_{1})\circ{f(x_{2})}$（此式称为同态（同构）关系式），则称$f$是从$&lt;X,\bigstar&gt;$到$&lt;Y,\circ&gt;$的同态映射，简称这两个代数系统同态，记作$X\sim{Y}$，并称$&lt;f(X),\circ&gt;$为$&lt;X,\bigstar&gt;$的同态像。</p><ul><li>如果$f$是满射的，称此同态$f$是满同态。</li><li>如果$f$是入射的，称此同态$f$是单一同态。</li><li>如果$f$是双射的，称$&lt;X,\bigstar&gt;$和$&lt;Y,\circ&gt;$同构，记作$X\cong{Y}$。</li><li>$f$是$&lt;X,\bigstar&gt;$到$&lt;X,\bigstar&gt;$的同态（同构），称之为自同态（自同构）。</li></ul><p>代数系统$&lt;X,\bigstar&gt;$和$&lt;Y,\circ&gt;$同构的必要条件：</p><ol><li>$X$和$Y$的基数相同，即$K[X]=K[Y]$。</li><li>运算$\bigstar$和$\circ$是同类型的。</li><li>存在双射$f:X→Y$，且满足同构关系式。</li></ol><p>实际上，同构映射必须是幺元对幺元、零元对零元……</p><p>同构关系是<a href="https://blankspace.blog.csdn.net/article/details/113792569">等价关系</a>，具有自反性、对称性、传递性。</p><h2 id="同构性质的保持"><a href="#同构性质的保持" class="headerlink" title="同构性质的保持"></a>同构性质的保持</h2><p>代数系统$&lt;X,\bigstar&gt;$和$&lt;Y,\circ&gt;$同构，$f:X→Y$是同态映射，如果$&lt;X,\bigstar&gt;$中满足交换律、结合律、有幺元、有零元、每个元素可逆，则$&lt;f(X),\circ&gt;$中$\circ$也满足上述性质。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学的函数理论</title>
      <link href="/2021/02/27/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/chi-san-shu-xue-de-han-shu-li-lun/"/>
      <url>/2021/02/27/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/chi-san-shu-xue-de-han-shu-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数的基本概念：</p><ul><li>函数</li><li>自变元</li><li>函数值</li><li>定义域</li><li>值域</li><li>陪域</li></ul><h2 id="函数的表示方法"><a href="#函数的表示方法" class="headerlink" title="函数的表示方法"></a>函数的表示方法</h2><ul><li>枚举法</li><li>有向图法</li><li>矩阵法</li><li>谓词描述法</li></ul><h2 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h2><ul><li>常值函数</li><li>恒等函数</li></ul><h2 id="函数的类型"><a href="#函数的类型" class="headerlink" title="函数的类型"></a>函数的类型</h2><p>$R_{f}$表示值域，$f:X→Y$表示函数。</p><ul><li>满射：$R_{f}=Y$</li><li>映内：$R_{f}⫋Y$</li><li>单射：$∀x_{1}∀x_{2}((x_{1}\in{X}\wedge{x_{2}\in{X}}\wedge{x_{1}≠x_{2}})→f(x_{1})≠f(x_{2}))$</li><li>双射：满射+入射</li></ul><p>思考：“$f:X→X$是一个入射的函数，则它必然是满射的，所以$f$必然是双射的”，这句话对吗？<br>答案：不对。假设$f:N→N$，$f(n)=2n$，$f$是入射的，但并不是满射的函数，所以不是双射函数。</p><p>满射函数的证明思路：</p><ul><li>任取$y\in{Y}$，推出存在$x\in{X}$，使得$y=f(x)$</li></ul><p>入射函数的证明思路：</p><ul><li>任取$x_{1},x_{2}\in{X}$，设$x_{1}≠x_{2}$，推出$f(x_{1})≠f(x_{2})$</li><li>任取$x_{1},x_{2}\in{X}$，设$f(x_{1})=f(x_{2})$，推出$x_{1}=x_{2}$</li></ul><p>通俗描述：</p><ul><li>满射：$R_{f}$是从$D_{f}$映射来的，但有可能只是$Y$的一个真子集，即还有一部分$Y$中的元素是$R_{f}$不含的。而满射要求这种元素不存在，即所有$Y$中的元素$R_{f}$中都有，二者重合。</li><li>单射：映射本身要求一个$x$只能对一个$y$，而一个$y$也能对应多个$x$。单射要求一个$y$也只能对一个$x$，这就要求$x$和$y$必须一一对应。</li><li>双射：满足满射和入射。</li></ul><h1 id="函数复合"><a href="#函数复合" class="headerlink" title="函数复合"></a>函数复合</h1><p>设$f:X→Y$、$g:Y→Z$是函数，则定义$g\circ{f}={&lt;x,z&gt;|x∈X∧z∈Z∧∃y(y∈Y∧&lt;x,y&gt;∈f∧&lt;y,z&gt;∈g)}$，则称$g\circ{f}$为$f$与$g$的复合函数(左复合)。</p><p>$g\circ{f}:X→Z$，即$g\circ{f}$是$X$到$Z$的函数。这样写是为了照顾数学习惯: $g\circ{f}(x)=g(f(x))$。</p><h2 id="函数复合的性质"><a href="#函数复合的性质" class="headerlink" title="函数复合的性质"></a>函数复合的性质</h2><ol><li>可结合性：$f:X→Y$，$g:Y→Z$，$h:Z→W$是函数，则$(h\circ{g})\circ{f}=h\circ(g\circ{f})$</li><li>$f:X→Y$，$g:Y→Z$是两个函数，则<ol><li>如果$f$和$g$是满射的，则$g\circ{f}$也是满射的</li><li>如果$f$和$g$是入射的，则$g\circ{f}$也是入射的</li><li>如果$f$和$g$是双射的，则$g\circ{f}$也是双射的</li></ol></li><li>$f:X→Y$，$g:Y→Z$是两个函数，则<ol><li>如果$g\circ{f}$是满射的，则$g$是满射的</li><li>如果$g\circ{f}$是入射的，则$f$是入射的</li><li>如果$g\circ{f}$是双射的，则$g$是满射的且$f$是入射的</li></ol></li><li>$f:X→Y$是函数，则$f\circ{I_{X}}=f$且$I_{Y}\circ{f}=f$</li></ol><h1 id="逆函数"><a href="#逆函数" class="headerlink" title="逆函数"></a>逆函数</h1><p>设$f:X→Y$是双射的函数，$f^{C}:Y→X$是$f$的逆函数。</p><p>可以用$f^{-1}$代替$f^{C}$ 。若$f^{-1}$存在，也称$f$可逆。</p><p>显然，$f^{-1}$也是双射函数。</p><h2 id="逆函数的性质"><a href="#逆函数的性质" class="headerlink" title="逆函数的性质"></a>逆函数的性质</h2><ol><li>$f:X→Y$是双射函数，则$(f^{-1})^{-1}=f$</li><li>$f:X→Y$是双射函数，则$f^{-1}\circ{f}=I_{X}$且$f\circ{f^{-1}}=I_{Y}$</li><li>$f:X→Y$，$g:Y→Z$是两个函数，如果$g\circ{f}=I_{X}$且$f\circ{g}=I_{Y}$，则$g=f^{-1}$</li><li>$f:X→Y$，$g:Y→Z$是两个双射函数，则$(g\circ{f})^{-1}=f^{-1}\circ{g^{-1}}$</li></ol><h1 id="集合的特征函数"><a href="#集合的特征函数" class="headerlink" title="集合的特征函数"></a>集合的特征函数</h1><p>令$E$是全集，$A$是$E$的子集，定义函数$\Psi_{A}:E→{0,1}$，对任何$x\in{E}$，有$\Psi_{A}(x)=\begin{cases}1, &amp; x\in{A} \ 0, &amp; x\notin{A} \end{cases}$，称$\Psi_{A}:E→{0,1}$是子集$A$的特征函数。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%9A%84%E5%87%BD%E6%95%B0%E7%90%86%E8%AE%BA/1.png"></p><h2 id="集合特征函数的性质"><a href="#集合特征函数的性质" class="headerlink" title="集合特征函数的性质"></a>集合特征函数的性质</h2><p>令$A$、$B$是全集$E$的子集，则</p><ol><li>$A=\Phi⇔∀x(\Psi_{A}(x)=0)$</li><li>$A=E⇔∀x(\Psi_{A}(x)=1)$</li><li>$A⊆B⇔∀x(\Psi_{A}(x)≤\Psi_{B}(x))$</li><li>$A=B⇔∀x(\Psi_{A}(x)=\Psi_{B}(x))$</li><li>$A⫋B⇔∀x(\Psi_{A}(x)≤\Psi_{B}(x))\wedge{∃x(\Psi_{A}(x)=0\wedge{\Psi_{B}(x)=1})}$</li><li>$\Psi_{A\cap{B}}(x)=\Psi_{A}(x)\Psi_{B}(x)$</li><li>$\Psi_{\sim{A}}(x)=1-\Psi_{A}(x)$</li><li>$\Psi_{A\cup{B}}(x)=\Psi_{A}(x)+\Psi_{B}(x)-\Psi_{A\cap{B}}(x)$</li><li>$\Psi_{A-B}(x)=\Psi_{A}(x)-\Psi_{A\cap{B}}(x)$</li></ol><h1 id="集合的基数"><a href="#集合的基数" class="headerlink" title="集合的基数"></a>集合的基数</h1><h2 id="集合的等势"><a href="#集合的等势" class="headerlink" title="集合的等势"></a>集合的等势</h2><p>$A$、$B$是集合，如果存在双射$f:A→B$，则称$A$与$B$等势，记作$A\sim{B}$。</p><p>集合间的等势关系$\sim$是一种<a href="https://blankspace.blog.csdn.net/article/details/113792569">等价关系</a>，满足自反性、对称性、传递性。</p><p>依据等势关系$\sim$对集合族$S$进行划分，得到商集$S/\sim$，进而可以得到基数类的概念。</p><h2 id="基数类"><a href="#基数类" class="headerlink" title="基数类"></a>基数类</h2><p>$S$是集合族，$\sim$是$S$上的等势关系，相对$\sim$的等价类称为基数类。</p><p>给定集合$A$，$A$属于的基数类，称为$A$的基数，记作$K[A]$。<br>如$A={1,2}$，$A\in[2]$，$K[A]=[2]$，简记成$K[A]=2$。<br>如$B={a,b,c}$，$B\in[3]$，$K[B]=[3]$，简记成$K[B]=3$。</p><h2 id="可数集合及其基数"><a href="#可数集合及其基数" class="headerlink" title="可数集合及其基数"></a>可数集合及其基数</h2><p>凡是和某个自然数$n$等势的集合，都称之为有限集合，否则是无限集合。</p><p>$N$不可能与某个自然数$n$等势，所以$N$的基数不能是有限数，就用一个无限大的数$\aleph_{0}$表示，即$K[N]=\aleph_{0}$。</p><p>与自然数集合$N$等势的集合被称为可数集合。</p><p>以下三例均为可数集合：<br>$A={0,2,4,6,8,…}$，$f:N→A$，$f(n)=2n$<br>$B={1,3,5,7,9,…}$，$g:N→B$，$g(n)=2n+1$<br>$C={10^{0},10^{1},10^{2},10^{3},10^{4},…}$，$h:N→C$，$h(n)=10^{n}$</p><p>集合$A$是可数集合，当且仅当可以将$A$的元素写成序列形式，即$A={a_{0},a_{1},a_{2},a_{3},…}$。</p><p>有限集合和可数集合统称为至多可数集合。</p><h2 id="不可数集合及其基数"><a href="#不可数集合及其基数" class="headerlink" title="不可数集合及其基数"></a>不可数集合及其基数</h2><p>实数轴上$(0,1)$区间内的实数是不可数的。</p><p>$(0,1)$区间的基数是一个比$N$的基数$\aleph_{0}$更大的无限大的数，用$\aleph$表示，即$\aleph&gt;\aleph_{0}$。<br>整个实数集合$R\sim(0,1)$（说明：可以构造函数$f:(0,1)→R$，$f(x)=\tan(\pi{x}-\frac{\pi}{2})$，这是一个双射函数……）<br>实数轴上的任何一段连续区间$(a,b)$的基数都是$\aleph$，所以称之为连续统基数。</p><p>$K[A_{1}]=K[A_{2}]=…=K[A_{n}]=\aleph$，则$K[A_{1}\cup{A_{2}}\cup{…}\cup{A_{n}}]=\aleph$</p><p>$K[A]=K[B]=\aleph$，则$K[A\times{B}]=\aleph$</p><p>$K[A]=\aleph$，$K[B]=\aleph_{0}$（或$K[B]=n$），B是至多可数集，则$K[A-B]=\aleph$</p><h2 id="基数的比较"><a href="#基数的比较" class="headerlink" title="基数的比较"></a>基数的比较</h2><p>基数的比较问题，是一个无限集合的次序问题。</p><p>在比较两个集合基数相等时，要看这两个集合之间是否存在双射，但是找双射可能并不简单，下面的内容有助于解决这个问题。</p><p>定理：如果集合$A$到$B$存在入射函数，则$K[A]≤K[B]$。</p><p>Zermelo定理：$A$和$B$是任何集合，则以下三条必有一条成立：</p><ul><li>$K[A]&lt;K[B]$</li><li>$K[B]&lt;K[A]$</li><li>$K[A]=K[B]$</li></ul><p>Contor-Schroder-Bernstein定理：$A$和$B$是任何集合，如果$K[A]≤K[B]$且$K[B]≤K[A]$，则$K[A]=K[B]$。</p><p>定理：设$A$是有限集合，则$K[A]&lt;\aleph_{0}&lt;\aleph$。</p><p>定理：设$A$是无限集合，则$\aleph_{0}≤K[A]$。</p><p>连续统<strong>假设</strong>：$\aleph$是大于$\aleph_{0}$的最小基数，不存在集合$A$使得$\aleph_{0}&lt;K[A]&lt;\aleph$</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二元运算的性质</title>
      <link href="/2021/02/26/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/er-yuan-yun-suan-de-xing-zhi/"/>
      <url>/2021/02/26/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/er-yuan-yun-suan-de-xing-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="总体假设"><a href="#总体假设" class="headerlink" title="总体假设"></a>总体假设</h1><p>设$X$是个集合，$f:X^{n}→Y$是个映射，则称$f$是$X$上的$n$元运算。<br>$X^{n} =X×X×…×X$，即$n$个$X$的笛卡尔积。<br>如果$Y⊆X$，则称运算$f$在$X$上是封闭的。</p><p>$&lt;X,\bigstar&gt;$和$&lt;X,\bigstar,\circ&gt;$是代数系统，$\bigstar$和$\circ$是二元运算。</p><h1 id="封闭性"><a href="#封闭性" class="headerlink" title="封闭性"></a>封闭性</h1><p>$∀x∀y((x\in{X}\wedge{y\in{X}})→x\bigstar{y}\in{X})$</p><h1 id="交换性"><a href="#交换性" class="headerlink" title="交换性"></a>交换性</h1><p>$∀x∀y((x\in{X}\wedge{y\in{X}})→x\bigstar{y}=y\bigstar{x})$</p><h1 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h1><p>$∀x(x\in{X}→x\bigstar{x}={x})$</p><h1 id="有幺元"><a href="#有幺元" class="headerlink" title="有幺元"></a>有幺元</h1><p>$∃e∀x((e\in{X}\wedge{x\in{X}})→e\bigstar{x}=x\bigstar{e}=x)$</p><p>有左幺元：$∃e_{L}∀x((e_{L}\in{X}\wedge{x\in{X}})→e_{L}\bigstar{x}=x)$</p><p>有右幺元：$∃e_{R}∀x((e_{R}\in{X}\wedge{x\in{X}})→x\bigstar{e_{R}}=x)$</p><h1 id="有零元"><a href="#有零元" class="headerlink" title="有零元"></a>有零元</h1><p>$∃\theta∀x((\theta\in{X}\wedge{x\in{X}})→\theta\bigstar{x}=x\bigstar{\theta}=\theta)$</p><p>有左零元：$∃\theta_{L}∀x((\theta_{L}\in{X}\wedge{x\in{X}})→\theta_{L}\bigstar{x}=\theta_{L})$</p><p>有右零元：$∃\theta_{R}∀x((\theta_{R}\in{X}\wedge{x\in{X}})→x\bigstar{\theta_{R}}=\theta_{R})$</p><h1 id="结合性"><a href="#结合性" class="headerlink" title="结合性"></a>结合性</h1><p>$∀x∀y∀z((x\in{X}\wedge{y\in{X}}\wedge{z\in{X}})→(x\bigstar{y})\bigstar{z}=x\bigstar{(y\bigstar{z})})$</p><h1 id="有逆元"><a href="#有逆元" class="headerlink" title="有逆元"></a>有逆元</h1><p>$∃x((x\in{X}\wedge{x^{-1}\in{X}})→x\bigstar{x^{-1}}=x^{-1}\bigstar{x}=e)$</p><h1 id="可消去性"><a href="#可消去性" class="headerlink" title="可消去性"></a>可消去性</h1><p>$∃a∀x∀y((a\in{X}\wedge{x\in{X}}\wedge{y\in{X}}\wedge((a\bigstar{x}=a\bigstar{y})\vee(x\bigstar{a}=y\bigstar{a})))→x=y)$</p><h1 id="分配律"><a href="#分配律" class="headerlink" title="分配律"></a>分配律</h1><p>$∀x∀y∀z((x\in{X}\wedge{y\in{X}}\wedge{z\in{X}})→((x\bigstar{(y\circ{z})}=(x\bigstar{y})\circ(x\bigstar{z}))\vee{(x\bigstar{(y\circ{z})}=(x\bigstar{z})\circ(y\bigstar{z}))}))$</p><h1 id="吸收律"><a href="#吸收律" class="headerlink" title="吸收律"></a>吸收律</h1><p>$∀x∀y((x\in{X}\wedge{y\in{X}})→((x\bigstar{(x\circ{y})}=x)\wedge{(x\circ{(x\bigstar{y})}=x)}))$</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件项目中的用户</title>
      <link href="/2021/02/25/ruan-jian-gong-cheng/ruan-jian-xiang-mu-zhong-de-yong-hu/"/>
      <url>/2021/02/25/ruan-jian-gong-cheng/ruan-jian-xiang-mu-zhong-de-yong-hu/</url>
      
        <content type="html"><![CDATA[<h1 id="终端用户"><a href="#终端用户" class="headerlink" title="终端用户"></a>终端用户</h1><p>终端用户既指软件的最终操作者，也是软件工程内的一个概念，指终端用户的抽象集合，用于区分单纯使用软件的用户和进行软件开发的开发者。这种抽象主要在设计用户界面时有用，用于代表普通用户的共同特性。在以用户为中心的设计中通常会创建多个用户画像以代表典型的最终用户，每个用户画像都可能包括对不同界面的接受程度，以及在某一专业领域的知识。</p><p>虽然终端用户类别没有限制，在软件设计时通常会假设终端用户拥有极少的技术知识和训练，特别是在为普通大众设计程序时。在这个环境下，为了增加易用性，通常倾向于实现易于学习的图形用户界面（可能有触摸屏），而非复杂的命令行界面。</p><p>终端用户开发的概念模糊了通常的用户和开发者之间的界限，给予非专业人士在不了解编程语言的情况下创造复杂对象的能力。</p><h1 id="用户在软件项目中承担的工作"><a href="#用户在软件项目中承担的工作" class="headerlink" title="用户在软件项目中承担的工作"></a>用户在软件项目中承担的工作</h1><p>用户在软件项目中可以承担的工作有很多：</p><ul><li>作为设计组、专题讨论会的成员，参与设计用户界面。</li><li>作为知识来源，提供任务、商业过程的当前执行情况。</li><li>参与需求讨论会，提出构想、确定问题。</li><li>作为测试用户，在验收时测试系统，检查它能否正常工作。</li><li>作为审查者评估用户界面。</li><li>进行可用性测试，尝试用新的用户界面执行任务。</li><li>作为项目管理委员会的成员。</li></ul><h1 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h1><p>用户体验(UE/UX)，即用户在使用一个产品或系统之前、使用期间和使用之后的全部感受，包括情感、信仰、喜好、认知印象、生理和心理反应、行为和成就等各个方面。</p><p>三个影响用户体验的因素：系统、用户、使用环境。</p><p>用户体验是用户在使用产品过程中建立起来的一种纯主观感受。但是对于一个界定明确的用户群体来讲，其用户体验的共性是能够经由良好设计实验来认识到。</p><h1 id="用户友好"><a href="#用户友好" class="headerlink" title="用户友好"></a>用户友好</h1><p>需求分析阶段，客户和产品的未来用户与用户界面的快速原型交互是很重要的。鼓励用户试验使用人机界面大大降低完成的产品将不得不改变的风险。特别是，这项试验有助于获得用户界面的友好性，这是所有软件产品的一个至关重要的目标。</p><p><strong>用户友好</strong>一词指人类与软件产品沟通的容易性。如果用户对学习如何使用一个软件产品感到困难，或者发现屏幕令人困惑或不高兴，那么他们将不使用该产品，或者不正确地使用它。为了解决这个问题，可以引入菜单驱动的软件产品，让用户从一系列可能的响应中选择即可。</p><p>基础的菜单是基于命令行的，后来更多的是基于图形用户界面。窗口、图标、下拉式菜单是GUI的要素。后来，Web应用显然比GUI应用更广泛，也支持菜单。</p><h1 id="以用户为中心的设计"><a href="#以用户为中心的设计" class="headerlink" title="以用户为中心的设计"></a>以用户为中心的设计</h1><p>当程序完全按照用户的想法行事时，用户界面设计得很好，这就体现了以用户为中心的设计。</p><p>用户界面是重要的。用户界面强烈影响软件的感知，可用的软件销售更好，不可用的软件则会被抛弃。</p><p>用户界面设计不当要付出不菲的的代价，因为用户的时间不会变得廉价。如果当前设计不当，之后将付出代价。</p><p>用户界面设计是困难的。UI关乎与用户的交流。因为设计者不能站在用户视角，而大多数软件工程师只与其他程序员沟通。</p><p>通常，用户的需求总是正确的，一贯的问题是系统错误。遗憾的是，用户并不总是正确的，他们不是设计师，需要引导。因此，用户界面构建是困难的。</p><p>UI需要大量软件开发工作，消耗至少50%的设计时间、实现时间、维护时间、代码量。</p><h1 id="利益相关的用户"><a href="#利益相关的用户" class="headerlink" title="利益相关的用户"></a>利益相关的用户</h1><p>用户是软件项目的利益相关者。</p><p>利益相关者是在软件项目中存在利害关系的人，任何受到系统影响或对系统开发产生影响的人，都是利益相关者。</p><p>一般存在两组主要的利益相关者：</p><ul><li>用户（用户或系统所有者）</li><li>开发者（分析员、设计员、程序员）</li></ul><p>用户是为开发付款并负责决策的人。<br>即使用户并不总是正确的，开发者也不能随意改变或拒绝用户的需求，任何冲突的、不可行的或非法的需求都必须与用户再次协商。</p><p>用户导致项目失败的可能是：</p><ul><li>用户的需求被误解了，或者没有被完全捕获。</li><li>用户的需求变更的过于频繁。</li><li>用户没有准备为项目提供足够的资源。</li><li>用户不想与开发者合作。</li><li>用户怀有不切实际的期望。</li><li>系统对用户不再有利。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象的分析、设计与编程</title>
      <link href="/2021/02/25/ruan-jian-gong-cheng/mian-xiang-dui-xiang/mian-xiang-dui-xiang-de-fen-xi-she-ji-yu-bian-cheng/"/>
      <url>/2021/02/25/ruan-jian-gong-cheng/mian-xiang-dui-xiang/mian-xiang-dui-xiang-de-fen-xi-she-ji-yu-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="分析与设计"><a href="#分析与设计" class="headerlink" title="分析与设计"></a>分析与设计</h1><p>分析强调对问题的调查 而不是如何确定解决方案。</p><p>设计强调的是问题的逻辑解决方案 。</p><h1 id="结构化方法与面向对象方法"><a href="#结构化方法与面向对象方法" class="headerlink" title="结构化方法与面向对象方法"></a>结构化方法与面向对象方法</h1><p>结构化方法也称功能分解法，总的指导思想是：自顶向下、逐步求精、单入口、单出口，基本原则是抽象和功能分解。</p><ul><li>结构化分析</li><li>结构化设计<ul><li>结构化设计的两个基本原则：高内聚、低耦合。</li><li>结构化设计技术只是帮助系统设计者完成部分而不是全部系统设计生命周期阶段。</li></ul></li><li>结构化编程：结构化程序具有一个开始和一个结束的程序或程序模块，并且在程序执行中的每一步都由“顺序、选择和循环”之一组成。</li></ul><p>面向对象方法着重描述现实世界，其出发点和基本原则是尽可能模拟人类习惯的思维方式，使开发软件的方法有过程尽可能接近人类认识世界的方法与过程。</p><ul><li>面向对象分析：定义在系统中工作的所有类型的对象，并显示这些对象如何通过相互作用来完成任务。</li><li>面向对象设计：定义在系统中人机进行通讯所必须的所有类型的对象，并对每一种类型的对象进行细化。</li><li>面向对象编程：定义各类对象的行为，包括对象间的消息传递。</li></ul><h1 id="面向对象分析与设计"><a href="#面向对象分析与设计" class="headerlink" title="面向对象分析与设计"></a>面向对象分析与设计</h1><p>面向对象的分析与设计的精髓是按照对象（事物、概念、或实体）的观点考虑问题域和逻辑解决方案。</p><p><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%86%E6%9E%90%E3%80%81%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%BC%96%E7%A8%8B/1.png"></p><p>下面分别介绍面向对象分析(OOA)、面向对象设计(OOD)、面向对象编程(OOP)。OOA的结果可以作为OOD的模型，OOD的结果可作为OOP的蓝图，OOP依据OOD提供的蓝图实现一个系统。</p><h2 id="面向对象分析"><a href="#面向对象分析" class="headerlink" title="面向对象分析"></a>面向对象分析</h2><blockquote><p><strong>面向对象分析</strong>是一种分析方法，这种方法利用从问题域的词汇表中找到的类和对象来分析需求。</p></blockquote><p>传统的结构化分析方法注重系统中的数据流，而面向对象分析方法从面向对象的观点看待世界。</p><p>面向对象分析(OOA)的重点在于发现并描述问题域中的对象或概念。OOA的常用工件是“域模型”，并可以用UML的类图来可视化表示域模型。</p><h2 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h2><blockquote><p><strong>面向对象设计</strong>是一种设计方法，包括面向对象分解的过程和一种表示法，这种表示法用于展现被设计系统的逻辑模型和物理模型、静态模型和动态模型。</p></blockquote><p>关键点：</p><ol><li>面向对象设计导致了面向对象的分解。</li><li>面向对象设计使用了不同的表示法来表达系统逻辑设计（类和对象）和物理设计（模块和处理架构）的不同模型，以及系统的静态和动态特征。</li></ol><p>面向对象设计(OOD)的重点在于定义那些能最终用面向对象程序设计语言实现的逻辑软件对象。OOD常用的工件是“设计模型”，可以用UML的包图、类图和交互图来可视化表示设计模型。</p><p>成功运用OOA/OOD重点不在表示符号（如UML）上而在于如何用对象来思考，也就是要掌握对象设计时要应用的原则和模式。</p><p>OOA/OOD不适合瀑布式的开发流程，而应在迭代过程里应用OOA/OOD，如RUP或XP。</p><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><blockquote><p><strong>面向对象编程</strong>是一种实现的方法，在这种方法中，程序被组织成许多互相协作的对象，每个对象代表某个类的一个实例，而类则属于一个通过继承关系形成的层次结构。</p></blockquote><p>关键点：</p><ol><li>利用对象作为面向对象编程的基本逻辑构建块，而不是利用算法。</li><li>每个对象都是某个类的一个实例。</li><li>类和类之间可以通过继承关系联系起来。</li></ol><p>事实上，当且仅当一种语言满足下列需求时，它才是面向对象的：</p><ol><li>支持对象，这些对象是具有命名的操作接口和隐藏的内部状态的数据抽象。</li><li>对象具有相关的类型。</li><li>类型可以从超类型中继承属性。</li></ol><h1 id="概念模型、逻辑模型、物理模型"><a href="#概念模型、逻辑模型、物理模型" class="headerlink" title="概念模型、逻辑模型、物理模型"></a>概念模型、逻辑模型、物理模型</h1><p>随着系统开发的推进与成熟，系统模式可能代表了不同的细节层次。</p><p>系统的模式包含概念模型、逻辑模型、物理模型。<br>这部分不难令我想到<a href="https://blankspace.blog.csdn.net/article/details/104487978">数据库系统的模式分层与数据独立性</a>涉及到的子模式、逻辑模式、物理模式。</p><p>概念模型记录了系统中存在或将存在的领域实体以及它们与系统中其他领域实体的关系。<br>概念建模是利用业务领域的术语完成的，应该是技术无关的。</p><p>逻辑模型利用了概念模型中提出的概念，建立起关键抽象和机制的意义，并确定系统的架构和整体设计。</p><p>物理模型描述了系统实现的具体软件和硬件的构成。<br>物理模型显然是技术相关的。</p><p>对于一个项目来说，随着时间的推移，系统的设计将会从概念成熟发展到逻辑成熟，最后物理成熟。<br>对于某个具体的项目而言，分析和设计的产物是通过这些模型表示的。总得来说，这些不同的模型的语义是丰富的：它们的表达能力足够强，让开发者能够记录系统分析和架构阐述时所有感兴趣的战略和战术决策；它们也足够完整，可以作为大多数面向对象语言实现的蓝图。</p><p>另外，概念、逻辑、物理三个层面再一次印证了计算机科学或软件工程的许多理论是相通的、相似的。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件生命周期</title>
      <link href="/2021/02/19/ruan-jian-gong-cheng/ruan-jian-sheng-ming-zhou-qi/"/>
      <url>/2021/02/19/ruan-jian-gong-cheng/ruan-jian-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="生命周期的主要阶段"><a href="#生命周期的主要阶段" class="headerlink" title="生命周期的主要阶段"></a>生命周期的主要阶段</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>此阶段专注于系统需求，确定和详细说明建模需求，开发和集成系统的功能和数据模型，并捕获非功能性需求的功能和数据模型，并捕获非功能性需求和其他系统约束。</p><p>需求分析员确定了需求，而系统分析员对需求进行了详细规格说明。</p><p>需求是系统服务或约束的陈述。<br>服务陈述描述了关于单个用户或整个用户群体，系统应该如何运行。它实际上定义了一个必须一直要服从的业务规则，也可以是系统必须执行的一些计算。<br>约束陈述表达了在系统行为或开发上的限制。</p><p>需求确定阶段的任务是同客户一起确定、分析和协商需求，涉及从客户那里获得信息的各种技术。</p><p>需求分析包括开发者与客户之间的协商，对于消除矛盾的需求和重叠的需求，以及遵照项目预算和期限来说，是必要的。</p><p>需求阶段的输出是需求文档，它大多是一种叙述性的、带有一些非正式图表的文本文档，不包含正式模型，或许包含一些易于流行的、能使客户轻松理解并促进开发者与客户之间沟通的符号。</p><p>理想的情况下，规格说明模型应该独立于部署系统的软硬件平台。理由是：</p><ul><li>软硬件考虑因素加强了对建模语言的词汇约束。</li><li>这些词汇可能造成客户理解上的困难，抑制了开发者和客户之间的互动。</li></ul><p>当然，如果约束陈述中存在了软硬件平台的考虑因素，那另当别论。</p><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><p>按照体系结构和技术解决方案，对涉及客户端的用户界面和服务器端的数据库对象的程序设计进行解释，提出系统的可理解性、可维护性和可扩展性的各种设计问题，并对其文档化。</p><h3 id="体系结构设计"><a href="#体系结构设计" class="headerlink" title="体系结构设计"></a>体系结构设计</h3><p>根据其模块（组件）而进行的系统描述称为体系结构设计。<br>体系结构设计包括对客户端和服务器方面的解决方案策略的决定，它也关注对解决方案策略的选择和系统的模块化。<br>解决方案策略既需要解决客户端（用户界面）和服务器（数据库）问题，也需要将客户端和服务器过程黏合在一起的任何中间件。相对地独立于解决方案策略，但是组件的详细设计必须符合所选择的C/S解决方案。</p><p>C/S模型经常会被扩展，提供三层体系结构，即表示层、逻辑层、数据访问层。</p><p>体系结构设计的质量对系统的可适应性（可理解+可维护+可扩展）是重要的。如果没有这些特性，软件解决方案所固有的复杂性就会失去控制。</p><p>体系结构设计交付的是一个可适应的系统结构，编程期间应该坚持该结构，并在系统交付后精心地进行维护，这是至关重要的。</p><p>尽管设计从分析进行延伸，但是体系结构设计可以看做一个相对自治性的活动，旨在使用良好的并且已证实能够获得优秀体系结构的设计实践。</p><h3 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h3><p>每个软件组件内部运行的描述称为详细设计，它为每个组件开发了详细的算法和数据结构。<br>这些组件最终被部署在基础实现平台的客户端、服务器或中间件过程上。<br>算法和数据结构是对基础实现平台的约束而定制的。</p><p>详细设计是直接从分析模型中产生的。</p><p>客户端的设计需要符合特定的GUI接口文档，浏览器端的设计需要符合Web浏览器支持的GUI设计规范。<br>面向对象GUI设计的一个主要原则是用户控制而不是程序控制。</p><p>服务器的详细设计定义了数据库服务器上的对象，其中有些对象是数据容器（表和视图等），其他对象则是过程（如存储过程和触发器等）。</p><p>中间件的详细设计与应用逻辑和业务逻辑有关，这里提供了解决方案中的用户界面与数据库之间的分隔和映射。</p><h2 id="系统实现"><a href="#系统实现" class="headerlink" title="系统实现"></a>系统实现</h2><p>此阶段由客户端应用程序和服务器数据库的编码活动组成，强调了<strong>增量和迭代</strong>的实现过程。在设计模型与客户端应用程序和服务器数据库的实现之间的双向工程对成功的产品交付来说是必要的。</p><p>除了编码以外，实现过程涉及测试的加载和数据库的加载、测试、用户培训、硬件事务等。</p><p>用户界面的详细设计容易引起实现的变化，服务器数据库的实现可能会强制改变设计文档。</p><h2 id="系统集成和部署"><a href="#系统集成和部署" class="headerlink" title="系统集成和部署"></a>系统集成和部署</h2><p>现代软件以较小的模块（组件）进行开发，在为客户用于生产而部署之前，这些组件需要与已经操作的模块组装且集成在一起。</p><p>增量开发意味着软件模块的增量集成和部署。对于大型系统来说，模块集成会比任何早期的生命周期阶段花费更多的时间和精力。须知：整体大于部分之和！</p><p>必须从软件生命周期的开始就仔细地规划模块集成，在系统分析的初期阶段就识别单独实现的软件单元，并且要在体系结构设计过程期间详细地再次处理，实现的次序必须使增量集成尽可能地平稳进行。</p><p>增量集成的主要困难在于模块之间交错循环的相互依赖。设计良好的系统应该是尽可能降耦甚至消除耦合的，线性耦合是获得系统期望功能的一种方式。</p><p>为了能在其他模块完成之前就交付一个模块，正确的方法是用特殊代码来填补其他模块提供的功能，这部分模拟所缺模块活动的程序被称为stub。stub是重要的概念，在集成测试那里还会用到，跟集成息息相关。</p><p>OO的系统必须为集成和部署而设计。每个模块尽可能独立，在分析和设计阶段识别耦合并将其降低到最低。</p><h2 id="系统运行和维护"><a href="#系统运行和维护" class="headerlink" title="系统运行和维护"></a>系统运行和维护</h2><p>当原先存在的业务解决方案或系统被逐步淘汰，并且新系统接管了日常操作时，运维阶段开始。运行阶段也标志着系统维护的开始，包括任何对软件的修正和扩展。时代与业务环境的经常变化要求软件有规律的变更。</p><p>运维针具了软件生命周期的大部分（有一说是75%）。</p><p>运行标志着现有业务解决方案到新方案的转换，而无论这种转换是否在软件中，转换通常是渐进的过程。如果可能的话，新老系统应该并行地运行一段时间，如果新系统不能支撑起业务，则撤回老系统。</p><p>维护分为三个阶段：</p><ul><li>内务处理：涉及执行必要的日常维护任务，以保护用户对系统的可访问性和可操作性。</li><li>适应性维护：设计对系统的监控和审核，对系统功能的调整以满足变化的环境和非功能性的要求。</li><li>完善性维护：对系统的重新设计和修改，以适应新的或有实质性变化的需求。</li></ul><h1 id="跨越生命周期的活动"><a href="#跨越生命周期的活动" class="headerlink" title="跨越生命周期的活动"></a>跨越生命周期的活动</h1><h2 id="项目规划"><a href="#项目规划" class="headerlink" title="项目规划"></a>项目规划</h2><ul><li>最终软件产品交付什么、花费、时间、风险、里程碑、资源分配，也包括开发方法、过程、工具、标准和团队组织的选择。</li><li>典型的约束是时间和费用，每个项目都有清晰的期限和紧张的预算。</li></ul><h2 id="项目度量"><a href="#项目度量" class="headerlink" title="项目度量"></a>项目度量</h2><ul><li>测量开发时间、工作量等，常常在软件质量和复杂性的范围内讨论度量。</li><li>用于测量正确性、有效性、完整性、可用性、可维护性、灵活性、可测试性等测量因素。</li><li>度量还可以在生命周期的不同阶段测量开发模型，评估过程的效果并改善工作质量。</li></ul><h2 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h2><ul><li>跨越整个软件生命周期的一项活动，系统涉及变化就需要测试。</li><li>黑盒测试、白盒测试。</li><li>单元测试、集成测试、系统测试、确认测试、验收测试、回归测试。</li></ul><h1 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h1><ol><li>如果存在大量明显看不懂的内容，说明你的软件工程基础较差。</li><li>除了那些贯穿整个生命周期的内容以外，我们必须清楚，软件开发是迭代增量的，理解这点十分关键。如果不理解迭代增量，那就会想当然的认为软件开发是一个线性的过程，这样就陷入了瀑布模型等线性模型的困局。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件开发</title>
      <link href="/2021/02/19/ruan-jian-gong-cheng/ruan-jian-kai-fa/"/>
      <url>/2021/02/19/ruan-jian-gong-cheng/ruan-jian-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="软件开发的本质"><a href="#软件开发的本质" class="headerlink" title="软件开发的本质"></a>软件开发的本质</h1><p>软件开发的本质体现在<strong>其本身固有的困难中</strong>，软件的本质问题是由软件固有的复杂性、一致性、可变性和不可见性所导致的。</p><ul><li>软件本身就是复杂的，复杂性是<strong>软件规模</strong>（以代码行表示）的函数，以及组成软件产品组件之间相互依存关系的函数。软件复杂性随着软件应用领域的性质不同而不同，计算密集型$&lt;$数据密集型。</li><li>一致性、可变性、不可见性加重了软件本身固有的困难。</li><li>一致性说的是软件必须与其基于的特定软硬件平台相一致，也必须与现有的信息系统相符合，并集成在一起。</li><li>可变性说的是业务过程和需求是不断变化的。</li><li>不可见性说的是负责输出的代码往往隐藏在不可见的程序语句、二进制代码库以及周边的系统软件中。</li></ul><p>软件的本质困难定义了软件开发的不变事实，即软件是一种创造性开发行为的产品，不是制造业重复性行为的结果。<strong>软件是开发出来的，不是批量制造出来的。</strong></p><p>一个组织不可能找到一个软件框架来实现它的核心业务活动，支持核心业务活动的软件很少有机会依赖软件组件或框架。此外，支持其他业务活动的软件必须包含有针对性的或独特的解决方案，来为组织提供竞争优势。</p><p>各种情况下，开发过程都应该使用<strong>组件技术</strong>。<br>组件是软件的一个<strong>可执行单元</strong>，具有明确定义的功能（服务）及与其他组件之间的通信协议（接口）。可以对组件进行配置以满足应用需求。<br>面向服务的体系结构（SOA）提倡由服务，也就是运行的软件实例（而不是组件）来构建系统。<br>组件不同于运行的软件实例，组件需要经历加载、安装、组合、部署、初始化并运行起来才算是运行的软件实例。</p><p><strong>软件包、组件、服务以及类似的技术并没有改变软件生产的本质问题，尤其是需求分析与系统设计的原则和任务保持不变。</strong></p><h1 id="软件开发方法"><a href="#软件开发方法" class="headerlink" title="软件开发方法"></a>软件开发方法</h1><p>过程式逻辑是僵化的，并且无法对突发事件做出恰当的响应。一旦开始，程序便以或多或少的确定性方式来执行，直至完成。偶尔，程序会要求用户输入信息，然后将沿着不同的路径执行。一般来说，与用户的交互是受限制的，不同执行路径的数目也是预先确定了的，此时，起控制作用的是程序而不是用户。</p><p>GUI则是事件驱动的，基于鼠标、键盘或其他输入设备而引发的，以随机且不可预知的方法来执行事件。<br>GUI环境中，用户很大程度上控制着程序的执行。每个事件的背后都有一个软件对象，知道如何在程序执行的当前状态下为该事件服务。一旦完成了服务，控制权就返回给用户。</p><h2 id="结构化方法"><a href="#结构化方法" class="headerlink" title="结构化方法"></a>结构化方法</h2><p>传统软件开发方法是结构化方法，以过程为中心。<br>结构化方法开发的系统在功能分解活动中被分解为可管理的单元，并将系统有层次的划分为由数据流连接的业务过程。</p><p>UML不是系统开发的结构化方法的建模技术。结构化方法的建模工具：</p><ul><li>数据流图DFD，过程建模，结构化方法的开发驱动力。</li><li>实体关系模型ERD，数据建模。</li></ul><p>结构化方法不适于现代软件开发原因：</p><ul><li>结构化方法是顺序，转换的方法，而不是迭代增量的方式，现代软件要求迭代增量。</li><li>写好的软件不可变无弹性，即很难对业务功能集进行扩展和沿伸，重用性差。</li><li>基本上所有的软件从零开始写，不支持已存在组件的复用。</li></ul><h2 id="面向对象方法"><a href="#面向对象方法" class="headerlink" title="面向对象方法"></a>面向对象方法</h2><p>现代软件开发方法是面向对象方法，面向对象方法基本特点是交互性。</p><p>面向对象方法基于事件驱动，由用户控制着程序的执行。软件执行的顺序不能事先预知，而软件服务的响应也是不可预测的。</p><p>面向对象方法以数据为中心，在分析阶段不需要定义类的操作，只需要定义类的属性，遵循迭代增量的过程。</p><p>面向对象的优点：</p><ul><li>封装的优点：<ul><li>提高了安全性，防止一些误操作。</li><li>提高了复用性，封装之后便于调用。</li><li>信息隐藏，隐藏了实现细节。</li></ul></li><li>继承的优点：<ul><li>继承可提高代码的复用性。</li><li>继承可提高代码的稳定性。</li><li>继承让类与类之间产生关系，是多态的前提。</li></ul></li><li>多态性优点：<ul><li>提高了代码的维护性（继承保证）。</li><li>提高了代码的扩展性（由多态保证）。</li></ul></li></ul><p>面向对象方法存在问题：</p><ul><li>理解较困难，结构较复杂，分析阶段在一个相当高的抽象层面进行。</li><li>数据库大多数是关系型数据库，怎么把对象存在数据库里。</li><li>项目管理更加困难。</li></ul><h1 id="软件集成开发"><a href="#软件集成开发" class="headerlink" title="软件集成开发"></a>软件集成开发</h1><p>如今，只是用手动过程自动化来开发新软件几乎是不存在的。大部分项目取代或扩展了现存的软件解决方案，或将它们集成为更大的、提供新的自动化水平的解决方案。</p><p>集成开发与从零开始的软件开发相比，具有共同的迭代生命周期方法，生产相同的软件产品模型，但是所强调的集成技术和使能技术不同。</p><p>集成方法可分为三种基本类型：</p><ul><li>面向信息的集成或面向门户的集成<ul><li>面向信息的集成：关注源应用程序和目标应用程序之间信息的实时交换，这是在数据库应用程序接口API层次的集成，这种集成使信息具体化以供其他应用程序使用。</li><li>面向门户的集成：是一种特殊的面向信息的集成，将来自多个软件系统的信息具体化到一个共同的用户界面。需要来自后台系统的具体信息进行人为干预。</li></ul></li><li>面向接口的集成：将应用接口（通过接口抽象定义的服务）连接在一起。接口显示了一个应用系统向其他应用系统所提供的有益服务。</li><li>面向过程的集成：将应用系统连接在一起，方法是在现有应用系统的已有过程集和数据集的顶部定义一个新的过程层。这是最终的集成方案，具有战略高度，旨在提升现有的业务过程并带来竞争优势。</li></ul><h1 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h1><p>开发者还需要工具，为软件开发过程提供的先进的、基于计算机的环境。这样的工具和环境称为计算机辅助软件工程(CASE)。</p><p>CASE使得在中央存储库中实现模型的存储和检索成为可能，并在计算机屏幕上进行模型的图形和文字操作。</p><p>通过引入CASE，计算机可以帮助完成与软件开发有关的大部分繁重工作，包括创建并组织所有诸如计划、合同、规格说明、设计、源代码和管理信息这样的人工制品。</p><p>在理想的情况下，存储库应当能够为共享的多个用户（多个开发者）提供对模型的访问。</p><p>CASE存储库的典型功能有：</p><ul><li>协调对模型的访问</li><li>促进开发者之间的合作</li><li>存储模型的多个版本</li><li>识别版本间的区别</li><li>允许在不同的模型中共享相同的概念</li><li>检查模型的一致性和完整性</li><li>生成项目报告和文档</li><li>生成数据结构和程序代码(正向工程)</li><li>从已有的实现中生成模型(逆向工程)</li></ul><p>CASE包含计算机支持软件工程的方方面面。</p><p>CASE生成的程序只是一个代码骨架，具体算法还需要编程人员编码实现。</p><p>CASE工作平台是一些工具的集合，共同支持一个或两个活动。<br>活动是相关任务的集合。活动与生命周期模型的工作流不能等同，活动的任务甚至可以跨越工作流。</p><p>将CASE技术从工具到工作平台再发展下去，就是CASE环境，支持软件开发过程的大部分甚至整个软件开发过程。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件项目的利益相关者与系统相关人员</title>
      <link href="/2021/02/18/ruan-jian-gong-cheng/ruan-jian-xiang-mu-de-li-yi-xiang-guan-zhe-yu-xi-tong-xiang-guan-ren-yuan/"/>
      <url>/2021/02/18/ruan-jian-gong-cheng/ruan-jian-xiang-mu-de-li-yi-xiang-guan-zhe-yu-xi-tong-xiang-guan-ren-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="利益相关者"><a href="#利益相关者" class="headerlink" title="利益相关者"></a>利益相关者</h1><p>利益相关者是在软件项目中存在利害关系的人，任何受到系统影响或对系统开发产生影响的人，都是利益相关者。</p><p>一般存在两组主要的利益相关者：</p><ul><li>客户（用户或系统所有者）</li><li>开发者（分析员、设计员、程序员）</li></ul><p>客户是为开发付款并负责决策的人。<br>即使客户并不总是正确的，开发者也不能随意改变或拒绝客户的需求，任何冲突的、不可行的或非法的需求都必须与客户再次协商。</p><p>客户导致项目失败的可能是：</p><ul><li>客户的需求被误解了，或者没有被完全捕获</li><li>客户的需求变更的过于频繁</li><li>客户没有准备为项目提供足够的资源</li><li>客户不想与开发者合作</li><li>客户怀有不切实际的期望</li><li>系统对客户不再有利</li></ul><p>随着软件复杂性的增加，人们越来越认识到，开发者的技能和知识是至关重要的。良好的开发者能够交付一个可接受的解决方案；卓越的开发者能够交付一个更优秀的解决方案。</p><p>为了确保开发者的杰出和投入，应该做到：</p><ul><li>雇佣最好的开发者</li><li>为现有的开发者提供持续的培训和教育</li><li>鼓励开发者之间进行信息交流和互动，使他们互相促进</li><li>通过排除阻力以及将他们的精力引导到生产性工作中，来激励开发人员</li><li>提供一个令人振奋的工作环境</li><li>将个人目标同组织策略和目标统一起来</li><li>强调团队工作</li></ul><h1 id="系统相关人员"><a href="#系统相关人员" class="headerlink" title="系统相关人员"></a>系统相关人员</h1><p>说明：<strong>利益相关者≠系统相关人员</strong>！</p><p>相关人员是指那些直接或间接从开发的系统中受益的人。</p><p>进行相关人员分析有助于发现所有可能的需求源。</p><p>识别系统相关人员的方法：</p><ul><li>发掘系统潜在的最终用户</li><li>发掘系统打算支持的业务过程描述以及与这些过程相关的人</li><li>与管理部门讨论，询问谁会受到系统引入的影响</li><li>考虑使用系统的组织的客户</li><li>开发人员和运维人员原则上不是系统相关人员，不应写进系统相关人员列表中</li><li>考虑可能希望给系统添加需求的监管机构和认证机构</li></ul><p>请看下面的一个实例：</p><blockquote><p>项目背景：<br>在高校教育阶段，为提高政府教育管理的针对性与有效性，需要从学生和教师获知其对学校、 专业、教学情况、教学资源配套、学校管理水平等多方面评价的信息收集。互联网是效率最高、短 时间内涉及人员广的渠道之一，所以依托互联网的调查问卷需求应运而生，通过信息的反馈，进行信息的初步帅选与分析，能够及时反应当前高校情况，为管理手段和政策方针提供依据。<br>项目简介：<br>1、项目发布功能，根据调查内容和性质的不同可定义成不同的项目，在每个项目下可定义问卷。<br>2、设计问卷，调查问卷可进行问卷题目编辑，题型包含单选题和填空题两种类型。<br>3、待问卷人员导入，包括学生和教师两种角色，通过excel模板导入待问卷人员信息，学生包括 学号、姓名、所属学校、专业、班级、性别、手机号、电子邮箱。教师包括教师号、姓名、所 属院校、性别、手机号码、电子邮箱。<br>4、发布问卷，通过系统将问卷发布到待问卷人员，可通过短信和邮件两种方式获得问卷链接地址。<br>5、问卷被提交后，结果被记录。<br>6、系统对问卷结果进行统计并进行分析，可查看总体参与人数，答题选项比例、不同学生、不同 学校、不同年级、不同专业、不同院校级别、不同性别的答题报表或图表分析。</p></blockquote><p>对于此实例的系统相关人员分析有这样一个版本：</p><table><thead><tr><th align="center">角色名</th><th align="center">角色说明</th></tr></thead><tbody><tr><td align="center">一级管理员（政府）</td><td align="center">政府相关部门通过系统发布相关问卷格式，可以针对同一问卷同时发布不止一个模板并下发给每个需要参与问卷调查的学校，再以短信或者邮箱的形式发送给学校管理员。政府通过老师和学生填写调查问卷的形式获取想要的相关信息，以实现教学管理的高效性、针对性。在此系统中政府不但需要能够发布问卷，还需要能从系统中总结出相关统计结果，要求系统能给出不同的数据可视化形式（条形图、折线图、饼状图等）和简单的结果分析。</td></tr><tr><td align="center">二级管理员（学校管理员）</td><td align="center">学校在政府发布问卷模板之后，收到短信提示或者邮箱通知，在政府发布的问卷模板中有针对性的选择适合自己学校的调查问卷并发布给老师和学生，发布属于自己学校的问卷同样通过该系统发布。不同的学校管理员登陆系统只能看到自己学校的问卷填写结果，无权查看其他学校的情况。系统可以生成专属于某个学校的统计结果。学校管理员根据政府的要求选择上传统计结果给政府或是整理问卷提交给政府，上级管理员有权查看这些数据。</td></tr><tr><td align="center">问卷系统使用者（老师和学生）</td><td align="center">学校发放问卷给老师和学生，学生和老师通过自己专属的账号密码登录系统，系统会记录某个人在系统上填写过的问卷以及需要填写但还未填写的问卷，在系统进行填写并提交。</td></tr><tr><td align="center">开发人员</td><td align="center">系统开发人员根据客户（政府）提出的需求来开发该系统，由需求获取人员通过各种需求获取方式获取详细需求并生成需求规格文件；交给架构师确认和评估最终生成一份可行的需求规格说明书。开发人员根据需求规格说明书进行后续的软件架构、详细设计和编程实现。</td></tr></tbody></table><p>这合理吗？</p><p>当然是不合理的，因为开发人员原则上不算系统相关人员。</p><p>利益相关者≠系统相关人员！</p><p>修改后的表格如下：</p><table><thead><tr><th align="center">参与者</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">一级管理员（政府教育部门管理员）</td><td align="center">政府教育部门的一级管理员通过系统发布相关问卷格式，可以针对同一次调查同时发布至少一个模板并下发给每个需要参与问卷调查的学校，再以短信或者邮箱的形式发送给二级管理员。政府通过在校师生填写的调查问卷获取想要的相关信息，以实现教学管理的高效性、针对性。<br>在此系统中的一级管理员不但需要能够发布问卷模板，还需要能从系统中分析出相关统计结果（在系统的支持下），系统能给出不同的数据可视化形式（条形图、折线图、饼状图等）和简单的结果分析。具体的详细分析还要靠一级管理员。<br>所以说，这里的“一级管理员”包含了数据分析的能力。</td></tr><tr><td align="center">二级管理员（学校管理员）</td><td align="center">二级管理员在一级管理员发布问卷模板之后，收到短信提示或者邮箱通知，在政府发布的问卷模板中有针对性的选择适合自己学校的调查问卷模板并完善之。设计完成的问卷由二级管理员通过系统发放待填写问卷的本校师生。<br>不同学校的二级管理员登陆系统只能看到自己学校的问卷填写结果，无权查看其他学校的情况。<br>系统可以帮助二级管理员生成专属于本学校的统计结果。二级管理员根据上级的要求选择上传统计结果给一级管理员或是整理问卷提交给政府，一级管理员有权查看这些数据。<br>所以说，这里的“二级管理员”也包含了数据分析的能力，只是要求可能比“一级管理员”略低。</td></tr><tr><td align="center">问卷填写者（教师和学生）</td><td align="center">二级管理员把问卷发放给需要填写问卷的本校师生，填写者通过自己专属的账号密码登录系统并验证个人信息。<br>填写者打开问卷并在截止日期之前进行填写，填写完毕符合提交要求可以提交，他们的信息会被保护，但无权查看其他人的结果。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法解决线段覆盖问题</title>
      <link href="/2021/02/17/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-xian-duan-fu-gai-wen-ti/"/>
      <url>/2021/02/17/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-xian-duan-fu-gai-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>快 noip 了，yyy 很紧张！</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>现在各大 oj 上有 $n$ 个比赛，每个比赛的开始、结束的时间点是知道的。</p><p>yyy 认为，参加越多的比赛，noip 就能考的越好（假的）。</p><p>所以，他想知道他最多能参加几个比赛。</p><p>由于 yyy 是蒟蒻，如果要参加一个比赛必须善始善终，而且不能同时参加 $2$ 个及以上的比赛。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>第一行是一个整数 $n$  ，接下来 $n$ 行每行是 $2$ 个整数 $a_{i},b_{i}$ ( $a_{i}&lt;b_{i}$ )，表示比赛开始、结束的时间。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>一个整数最多参加的比赛数目。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">30 22 41 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>对于 $20%$ 的数据， $n \le 10$。</p><p>对于 $50%$ 的数据， $n \le 10^3$。</p><p>对于 $70%$ 的数据， $n \le 10^{5}$。</p><p>对于 $100%$ 的数据， $1\le n \le 10^{6}$ ， $0 \le a_{i} &lt; b_{i} \le 10^6$。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>这题是一个线段覆盖问题，但并不是很复杂，也是贪心思想。</p><p>想要尽可能放线段，不能重合（可以正好相交），那就可以每一次只关注右端点，尽可能地选择剩余未选的线段中右端点最左且左端点不越过已覆盖区域最右端的一条，如此反复，即为贪心。</p><p>贪心嘛，往往与sort绑定，但左右端点是相关的，所谓关联数组，那不如建一个结构体数组然后自定义排序。</p><p>所以我们建一个结构体，含有一个左端点一个右端点表示所谓的时间整数（不会爆int），然后将结构体依据右端点排序。</p><p>按上述思路扫一遍结构体数组，计数，即可。</p><h1 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">oj</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span>oj a<span class="token punctuation">,</span> oj b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>end <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>end <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    oj ojs<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> ojs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin <span class="token operator">&gt;&gt;</span> ojs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>ojs<span class="token punctuation">,</span> ojs<span class="token operator">+</span>n<span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> ojs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">;</span>    result<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ojs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            end <span class="token operator">=</span> ojs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">;</span>            result<span class="token operator">++</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>ojs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h1><p><a href="https://www.luogu.com.cn/problem/P1803">洛谷 P1803 凌乱的yyy / 线段覆盖</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据的特点</title>
      <link href="/2021/02/16/ji-suan-ji-ke-xue-ji-chu/da-shu-ju-de-te-dian/"/>
      <url>/2021/02/16/ji-suan-ji-ke-xue-ji-chu/da-shu-ju-de-te-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="大数据的特点"><a href="#大数据的特点" class="headerlink" title="大数据的特点"></a>大数据的特点</h1><h2 id="数据量大"><a href="#数据量大" class="headerlink" title="数据量大"></a>数据量大</h2><p>根据IDC作出的估测，数据一直都在以每年50%的速度增长，也就是说每两年就增长一倍（大数据摩尔定律）。</p><p>人类在最近两年产生的数据量相当于之前产生的全部数据量。</p><p>数据量的量级：<strong>bit</strong>、<strong>Byte</strong>、<strong>KB</strong>、<strong>MB</strong>、<strong>GB</strong>、<strong>TB</strong>、<strong>PB</strong>、<strong>EB</strong>、<strong>ZB</strong>、<strong>YB</strong>、<strong>BB</strong>、<strong>NB</strong>、<strong>DB</strong>。<br>除了<strong>1Byte=8bit</strong>以外，全是$2^{10}=1024$进制。</p><h2 id="数据类型繁多"><a href="#数据类型繁多" class="headerlink" title="数据类型繁多"></a>数据类型繁多</h2><p>大数据是由结构化数据、半结构化数据和非结构化数据组成的。</p><ul><li>非结构化数据是数据结构不规则或不完整，没有预定义的数据模型，不方便用数据库二维逻辑表来表现的数据。包括所有格式的办公文档、文本、图片、XML, HTML、各类报表、图像和音频/视频信息等等。<a href="https://baike.baidu.com/item/%E9%9D%9E%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/309808">[1]</a></li><li>和普通纯文本相比，半结构化数据具有一定的结构性，OEM(Object exchange Model)是一种典型的半结构化数据模型。<a href="https://baike.baidu.com/item/%E5%8D%8A%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE">[2]</a></li><li>结构化数据，简单来说就是数据库。结合到典型场景中更容易理解，比如企业ERP、财务系统；医疗HIS数据库；教育一卡通；政府行政审批；其他核心数据库等。<a href="https://baike.baidu.com/item/%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE">[3]</a></li></ul><p>20%的结构化数据，存储在数据库中；剩余80%都是以文件形式存在的非结构化和半结构化数据，日志文件、机器数据等又占据非结构化数据的90%。</p><h2 id="处理速度快"><a href="#处理速度快" class="headerlink" title="处理速度快"></a>处理速度快</h2><p>从数据的生成到消耗，时间窗口非常小，可用于生成决策的时间非常少。</p><p>1秒定律是互联网进入DT时代对数据处理速度的要求。当然并非严格的1秒，只是秒级的时间内给出结果，这也是大数据技术有别于传统数据技术的重要一点, 时间太长，就失去意义了。这一点也是和传统的数据挖掘技术有着本质的不同。<a href="https://zhuanlan.zhihu.com/p/27064882">[4]</a></p><h2 id="价值密度低，商业价值高"><a href="#价值密度低，商业价值高" class="headerlink" title="价值密度低，商业价值高"></a>价值密度低，商业价值高</h2><p>以视频为例，连续不间断监控过程中，可能有用的数据仅仅有一两秒，但是具有很高的商业价值。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法解决0-1背包问题</title>
      <link href="/2021/02/15/suan-fa-fen-xi-yu-she-ji/hui-su-suan-fa-jie-jue-0-1-bei-bao-wen-ti/"/>
      <url>/2021/02/15/suan-fa-fen-xi-yu-she-ji/hui-su-suan-fa-jie-jue-0-1-bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给定$n$种物品和一背包。物品$i$的重量是$w_{i}&gt;0$，其价值为$v_{i}&gt;0$，背包的容量为$c$。问应如何选择装入背包中的物品，使得装入背包中物品的总价值最大？</p><h1 id="编程任务"><a href="#编程任务" class="headerlink" title="编程任务"></a>编程任务</h1><p>利用回溯法试设计一个算法求出0-1背包问题的解，也就是求出一个解向量$x_{i}$（$x_{i}=0$或$x_{i}=1$，$x_{i}=0$表示物体$i$不放入背包，$x_{i}=1$表示把物体i放入背包），使得尽量多的价值装入背包。</p><h1 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h1><p>由文件<strong>input.txt</strong>提供输入数据$n$，$c$，及每个物品的重量$w[]$和价值$v[]$。</p><h1 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h1><p>程序运行结束时，将最优解输出到文件<strong>output.txt</strong>中。</p><h1 id="自定义输入文件示例"><a href="#自定义输入文件示例" class="headerlink" title="自定义输入文件示例"></a>自定义输入文件示例</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">452 1 3 212 10 20 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">{</span>    <span class="token comment">// 物品数目</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token comment">// 背包最大承重</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> maxWeight<span class="token punctuation">;</span>    <span class="token comment">// n件物品的重量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weight<span class="token punctuation">;</span>    <span class="token comment">// n件物品的价值</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>    <span class="token comment">// 背包中当前重量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> currentWeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 背包中当前价值</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> currentValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 当前最优价值</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> bestValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 物品</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Item</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span>    <span class="token comment">// 记录当前规则中物品放了与否</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tempX<span class="token punctuation">;</span>    <span class="token comment">// 记录最优规则的物品放了与否</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bestX<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>        <span class="token comment">// 物品编号</span>        <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token comment">// 该物品单位质量的价格</span>        <span class="token keyword">double</span> averagePrice<span class="token punctuation">;</span>        <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token keyword">double</span> averagePrice<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">=</span>id<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>averagePrice<span class="token operator">=</span>averagePrice<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 回溯算法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 超出层数，当前背包中的价值就是最优值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">&gt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bestValue <span class="token operator">=</span> currentValue<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bestX<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tempX<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 可以放入下一个物品</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentWeight <span class="token operator">+</span> weight<span class="token punctuation">[</span>items<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> maxWeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tempX<span class="token punctuation">[</span>items<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            currentWeight <span class="token operator">+=</span> weight<span class="token punctuation">[</span>items<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>            currentValue <span class="token operator">+=</span> value<span class="token punctuation">[</span>items<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            currentWeight <span class="token operator">-=</span> weight<span class="token punctuation">[</span>items<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>            currentValue <span class="token operator">-=</span> value<span class="token punctuation">[</span>items<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 进入右子树</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bound</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> bestValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tempX<span class="token punctuation">[</span>items<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 进入右子树时计算上界</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">bound</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> topBound <span class="token operator">=</span> currentValue<span class="token punctuation">;</span><span class="token comment">//上界</span>        <span class="token keyword">double</span> leftWeight <span class="token operator">=</span> maxWeight <span class="token operator">-</span> currentWeight<span class="token punctuation">;</span>        <span class="token comment">// 将整件物品放入</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">&lt;=</span> num <span class="token operator">&amp;&amp;</span> leftWeight <span class="token operator">&gt;=</span> weight<span class="token punctuation">[</span>items<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            leftWeight <span class="token operator">-=</span> weight<span class="token punctuation">[</span>items<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>            topBound <span class="token operator">+=</span> value<span class="token punctuation">[</span>items<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>            t<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 不能整件放入的切开放</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">&lt;=</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            topBound <span class="token operator">+=</span> leftWeight <span class="token operator">*</span> items<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>averagePrice<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> topBound<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/bt/input2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"src/bt/output2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxWeight <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> values <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            weight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">[</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            tempX <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            bestX <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>weights<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 按照每个物品的单位质量的价格降序排列</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span>averagePrice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bestX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span> result <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bestValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">1 1 0 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法解决装载问题</title>
      <link href="/2021/02/15/suan-fa-fen-xi-yu-she-ji/hui-su-suan-fa-jie-jue-zhuang-zai-wen-ti/"/>
      <url>/2021/02/15/suan-fa-fen-xi-yu-she-ji/hui-su-suan-fa-jie-jue-zhuang-zai-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>有一批共$n$个集装箱要装上$2$艘载重量分别为$c_{1}$和$c_{2}$的轮船，其中集装箱$i$的重量为$w_{i}$，且$\sum{w_{i}≤c_{1}+c_{2}}$，要求确定是否有一个合理的装载方案可将这$n$个集装箱装上这$2$艘轮船。如果有，请给出该方案。</p><h1 id="编程任务"><a href="#编程任务" class="headerlink" title="编程任务"></a>编程任务</h1><p>利用回溯法试设计一个算法求出该装载问题的解。</p><h1 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h1><p>由文件<strong>input.txt</strong>提供输入数据。文件的第$1$行中有$2$个正整数$n$及$c$，表示有$n$个集装箱，第一艘船的载重量为$c$。接下来的一行为每个集装箱的重量。</p><h1 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h1><p>程序运行结束时，将计算出的最优解输出到文件<strong>output.txt</strong>中，如果某集装箱被装入船上，则对应的解为$1$，如果不能装入则为$0$。</p><h1 id="自定义输入文件示例"><a href="#自定义输入文件示例" class="headerlink" title="自定义输入文件示例"></a>自定义输入文件示例</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">3 3016 15 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">{</span>    <span class="token comment">// 集装箱数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token comment">// 集装箱重量数组</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights<span class="token punctuation">;</span>    <span class="token comment">// 第一艘轮船的载重量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> costs<span class="token punctuation">;</span>    <span class="token comment">// 当前载重量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> tempWeight<span class="token punctuation">;</span>    <span class="token comment">// 当前最优载重量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> bestWeight<span class="token punctuation">;</span>    <span class="token comment">// 剩余集装箱重量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> left<span class="token punctuation">;</span>    <span class="token comment">// 当前解</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tempX<span class="token punctuation">;</span>    <span class="token comment">// 当前最优解</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bestX<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">backtrace</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 到达叶子结点  i此时的值=叶节点+1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> num<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tempWeight <span class="token operator">&gt;</span> bestWeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bestX<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tempX<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bestWeight <span class="token operator">=</span> tempWeight<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        left <span class="token operator">-=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 递归搜索 左子树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempWeight <span class="token operator">+</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> costs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tempX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            tempWeight <span class="token operator">+=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">backtrace</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 回溯</span>            tempWeight <span class="token operator">-=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 递归搜索 右子树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempWeight <span class="token operator">+</span> left <span class="token operator">&gt;</span> bestWeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tempX<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">backtrace</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        left <span class="token operator">+=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/bt/input1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"src/bt/output1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> line1 <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            costs <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            weights <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            tempX <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            bestX <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            tempWeight <span class="token operator">=</span> bestWeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                left <span class="token operator">+=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">backtrace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bestX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span> result <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最优解："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最优值："</span> <span class="token operator">+</span> bestWeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">0 1 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划算法解决租用游艇问题</title>
      <link href="/2021/02/15/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-zu-yong-you-ting-wen-ti/"/>
      <url>/2021/02/15/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-zu-yong-you-ting-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>长江游艇俱乐部在长江上设置了$n$个游艇出租站$1,2,…,n$。游客可在这些游艇出租站租用游艇，并在下游的任何一个游艇出租站归还游艇。游艇出租站$i$到游艇出租站$j$之间的租金为$r(i,j)$，$1≤i&lt;j≤n$。试设计一个算法，计算出从游艇出租站$1$到游艇出租站$n$所需的最少租金。</p><h1 id="编程任务"><a href="#编程任务" class="headerlink" title="编程任务"></a>编程任务</h1><p>对于给定的游艇出租站i到游艇出租站j之间的租金为$r(i,j)$，$1≤i&lt;j≤n$，编程计算从游艇出租站$1$到游艇出租站$n$所需的最少租金。</p><h1 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h1><p>由文件<strong>input.txt</strong>提供输入数据。文件的第$1$行中有一个正整数$n(n&lt;=200)$，表示有$n$个游艇出租站。接下来的$n-1$行是$r(i,j)$，$1≤i&lt;j≤n$。</p><h1 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h1><p>程序运行结束时，将计算出的从游艇出租站$1$到游艇出租站$n$所需的最少租金输出到文件<strong>output.txt</strong>中。</p><h1 id="自定义输入文件示例"><a href="#自定义输入文件示例" class="headerlink" title="自定义输入文件示例"></a>自定义输入文件示例</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">35 157<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * 租用游艇问题 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cost<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token comment">/**     * Floyd 求最短路     * 动态规划思想，适用于有向图，仅能从上游移动到下游     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shortestPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 只从上游到下游，i不必大于等于k</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// j大于i即可</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> INF <span class="token operator">&amp;&amp;</span> cost<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> INF <span class="token operator">&amp;&amp;</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/dp/input2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"src/dp/output2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">//求最短路并输出到文件</span>            <span class="token function">shortestPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 标准输出各顶点之间的最短路径</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> INF <span class="token operator">||</span> i <span class="token operator">&gt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"INF\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划算法解决找零钱问题</title>
      <link href="/2021/02/15/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-zhao-ling-qian-wen-ti/"/>
      <url>/2021/02/15/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-zhao-ling-qian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>设有$n$种不同面值的硬币，各硬币的面值存于数组$T[1:n]$中。现要用这些面值的硬币来找钱，可以实用的各种面值的硬币个数不限。当只用硬币面值$T[1],T[2],…,T[i]$时，可找出钱数$j$的最少硬币个数记为$C(i,j)$。若只用这些硬币面值，找不出钱数$j$时，记$C(i,j)=∞$。 </p><h1 id="编程任务"><a href="#编程任务" class="headerlink" title="编程任务"></a>编程任务</h1><p>设计一个动态规划算法，对$1≤j≤L$，计算出所有的$C(n,j)$。算法中只允许实用一个长度为$L$的数组。用$L$和$n$作为变量来表示算法的计算时间复杂性。</p><h1 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h1><p>由文件<strong>input.txt</strong>提供输入数据。文件的第$1$行中有$1$个正整数$n(n&lt;=13)$，表示有$n$种硬币可选。接下来的一行是每种硬币的面值。由用户输入待找钱数$j$。</p><h1 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h1><p>程序运行结束时，将计算出的所需最少硬币个数输出到文件<strong>output.txt</strong>中。</p><h1 id="自定义输入文件示例"><a href="#自定义输入文件示例" class="headerlink" title="自定义输入文件示例"></a>自定义输入文件示例</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">31 2 59<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> amount<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token comment">/**     * 求出凑到指定金额的最小硬币数     * 思路近似于完全背包问题     * @return 不能凑出返回-1，能凑出返回硬币数量     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> inf <span class="token operator">=</span> amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// dp 大小比硬币数量多1</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> inf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// dp[i] 表示凑出i需要的最少硬币数，dp[i] == inf 表示凑不出i</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 凑出0需要0块硬币</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> val <span class="token operator">=</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>val<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DP array: "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">==</span> inf<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/dp/input1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"src/dp/output1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Info] The number of coins is 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            coins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            amount <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[Info] The target amount is 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The result is: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法解决归并排序问题</title>
      <link href="/2021/02/15/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-gui-bing-pai-xu-wen-ti/"/>
      <url>/2021/02/15/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-gui-bing-pai-xu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>目前的网上拍卖系统会显示很多待拍卖的物品，通常这些系统具有按照某个关键字对打出的广告进行排序列出的功能，并且能够按照用户输入的某个关键字进行过虑，找到某些特定的物品。</p><h1 id="编程任务"><a href="#编程任务" class="headerlink" title="编程任务"></a>编程任务</h1><p>定义一个Advertisement类，该类中至少包含该物品的数量，名称，联系人e-mail，最好有开拍时间及关闭时间，根据用户输入的关键字比如名称，mail，时间等，利用非递归的归并排序对所有的广告进行排序，并列出所有排好序的广告。</p><h1 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h1><p>由文件<strong>input.txt</strong>提供输入的所有广告信息。程序中由用户输入要排序的关键字。</p><h1 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h1><p>程序运行结束时，排好序的广告输出到文件<strong>output.txt</strong>中，并为每个广告添加序号。</p><h1 id="自定义输入文件示例"><a href="#自定义输入文件示例" class="headerlink" title="自定义输入文件示例"></a>自定义输入文件示例</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Coat3a@mail.com2016032712123320190403184029Skirt5b@mail.com2017012721433420190403142059Cap7c@mail.com2018083014260820190512165752Bag12a@mail.com2018083014260720190512165752Title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Advertisement</span><span class="token punctuation">[</span><span class="token punctuation">]</span> advertisements<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Advertisement</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advertisement</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">// 名称</span>        <span class="token class-name">Integer</span> num<span class="token punctuation">;</span> <span class="token comment">// 数量</span>        <span class="token class-name">String</span> email<span class="token punctuation">;</span> <span class="token comment">// 电子邮件</span>        <span class="token class-name">String</span> startTime<span class="token punctuation">;</span> <span class="token comment">// 开始时间</span>        <span class="token class-name">String</span> endTime<span class="token punctuation">;</span> <span class="token comment">// 结束时间</span>        <span class="token class-name">Advertisement</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span> <span class="token class-name">String</span> startTime<span class="token punctuation">,</span> <span class="token class-name">String</span> endTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>startTime <span class="token operator">=</span> startTime<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>endTime <span class="token operator">=</span> endTime<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Advertisement</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nameResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> numResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> emailResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> startTimeResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startTime<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> endTimeResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>endTime<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>nameResult <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> nameResult <span class="token operator">:</span> numResult <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> numResult <span class="token operator">:</span> emailResult <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> emailResult <span class="token operator">:</span>                    startTimeResult <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> startTimeResult <span class="token operator">:</span> endTimeResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> first1<span class="token punctuation">,</span> <span class="token keyword">int</span> last1<span class="token punctuation">,</span> <span class="token keyword">int</span> last2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//定义辅助数组temp</span>        <span class="token class-name">Advertisement</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Advertisement</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//设置两个待合并的起止区间</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> first1<span class="token punctuation">,</span> j <span class="token operator">=</span> last1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">=</span> first1<span class="token punctuation">;</span>        <span class="token comment">//依次取两序列中小者放入temp</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> last1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> last2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>advertisements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>advertisements<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> advertisements<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> advertisements<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//对第一个子序列进行收尾处理</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> last1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> advertisements<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//对第二个子序列进行收尾处理</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> last2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> advertisements<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//将合并后的结果传回数组record</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> first1<span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> last2<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            advertisements<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergePass</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//有两个长度为h的子序列</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> num <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">*</span>h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">merge</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token operator">+</span>h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">+=</span> <span class="token number">2</span><span class="token operator">*</span>h<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//子序列有一个长度小于h</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> num<span class="token operator">-</span>h<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">merge</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token operator">+</span>h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//初始时子序列长度为1</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//一趟排序</span>            <span class="token function">mergePass</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            h<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/dc/input3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"src/dc/output3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>            advertisements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Advertisement</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                advertisements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Advertisement</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Advertisement</span> obj <span class="token operator">=</span> advertisements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>num <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>email <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>startTime <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>endTime <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">1Bag12a@mail.com20180830142607201905121657522Cap7c@mail.com20180830142608201905121657523Coat3a@mail.com20160327121233201904031840294Skirt5b@mail.com2017012721433420190403142059<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法解决Gray码问题</title>
      <link href="/2021/02/15/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-gray-ma-wen-ti/"/>
      <url>/2021/02/15/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-gray-ma-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><strong>Gray码</strong>是一个长度为$2n$的序列。序列中无相同的元素，每个元素都是长度为$n$位的串，相邻元素恰好只有一位不同。用分治策略设计一个算法对任意的$n$构造相应的Gray码。  </p><h1 id="编程任务"><a href="#编程任务" class="headerlink" title="编程任务"></a>编程任务</h1><p>利用分治策略试设计一个算法对任意的$n$构造相应的Gray码。</p><h1 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h1><p>由文件<strong>input.txt</strong>提供输入数据$n$。</p><h1 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h1><p>程序运行结束时，将得到的所有编码输出到文件<strong>output.txt</strong>中。</p><h1 id="求解思路"><a href="#求解思路" class="headerlink" title="求解思路"></a>求解思路</h1><p>把原问题分解为两个子问题，分别对两个子问题的每个数组后一位加$0$和$1$。</p><h1 id="自定义输入文件示例"><a href="#自定义输入文件示例" class="headerlink" title="自定义输入文件示例"></a>自定义输入文件示例</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/dc/input2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"src/dc/output2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> bitNum <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> bitNum<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> i<span class="token punctuation">;</span>                <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> bitNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&gt;&gt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">000001011010110111101100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法解决中位数问题</title>
      <link href="/2021/02/15/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-zhong-wei-shu-wen-ti/"/>
      <url>/2021/02/15/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-zhong-wei-shu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>设$X[0:n-1]$和$Y[0:n–1]$为两个数组，每个数组中含有$n$个已排好序的数。找出$X$和$Y$的$2n$个数的中位数。  </p><h1 id="编程任务"><a href="#编程任务" class="headerlink" title="编程任务"></a>编程任务</h1><p>利用分治策略试设计一个$O(\log{n})$时间的算法求出这$2n$个数的中位数。</p><h1 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h1><p>由文件<strong>input.txt</strong>提供输入数据。文件的第$1$行中有$1$个正整数$n(n≤200)$，表示每个数组有$n$个数。接下来的两行分别是$X$，$Y$数组的元素。</p><h1 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h1><p>程序运行结束时，将计算出的中位数输出到文件<strong>output.txt</strong>中。</p><h1 id="求解思路"><a href="#求解思路" class="headerlink" title="求解思路"></a>求解思路</h1><p>比较两个序列的中位数大小，如果两个数相等，则该数为整个$2n$个数据的中位数，否则通过比较，分别减少两个序列的查找范围，确定查找的起止位置，继续查找。</p><h1 id="自定义输入文件示例"><a href="#自定义输入文件示例" class="headerlink" title="自定义输入文件示例"></a>自定义输入文件示例</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">35 15 183 14 21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * 获取两有序等长数组的中位数 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> la<span class="token punctuation">,</span> <span class="token keyword">int</span> ra<span class="token punctuation">,</span> <span class="token keyword">int</span> lb<span class="token punctuation">,</span> <span class="token keyword">int</span> rb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ma <span class="token operator">=</span> <span class="token punctuation">(</span>la <span class="token operator">+</span> ra<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mb <span class="token operator">=</span> <span class="token punctuation">(</span>lb <span class="token operator">+</span> rb <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>la <span class="token operator">==</span> ra<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>lb <span class="token operator">==</span> rb<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>la<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>lb<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>la<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>rb<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lb <span class="token operator">==</span> rb<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>lb<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>ra<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>la <span class="token operator">==</span> ra<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> lb <span class="token operator">==</span> rb<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//第一个序列求中位数方法不变，第二个序列变为与第一序列相同的方法求得中位数</span>            mb <span class="token operator">=</span> <span class="token punctuation">(</span>lb <span class="token operator">+</span> rb<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span>ma<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>mb<span class="token punctuation">]</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>ma<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>ma<span class="token punctuation">]</span> <span class="token operator">&gt;</span> b<span class="token punctuation">[</span>mb<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token function">search</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> la<span class="token punctuation">,</span> ma <span class="token punctuation">,</span>mb<span class="token punctuation">,</span> rb<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">search</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> ma<span class="token punctuation">,</span> ra<span class="token punctuation">,</span> lb<span class="token punctuation">,</span> mb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/dc/input1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"src/dc/output1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1 <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h1><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能基础</title>
      <link href="/2021/02/13/ji-suan-ji-ke-xue-ji-chu/ren-gong-zhi-neng-ji-chu/"/>
      <url>/2021/02/13/ji-suan-ji-ke-xue-ji-chu/ren-gong-zhi-neng-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="智能Agent"><a href="#智能Agent" class="headerlink" title="智能Agent"></a>智能Agent</h1><p><strong>Agent</strong>是可以感知环境并在环境中行动的事物，它通过传感器感知环境并对所处环境产生影响。</p><p><strong>感知</strong>表示任何给定时刻Agent的感知输入，感知序列表示该Agent所收到的所有输入数据的完整历史。<br>一般地，Agent在任何给定时刻的行动选择依赖于到那个时刻为止该Agent的整个感知序列，而不是那些它感知不到的东西。</p><p><strong>Agent函数</strong>指定了Agent响应任何感知序列所采取的行动，它将任意给定感知序列映射为行动。</p><p><strong>人造Agent</strong>的Agent函数通过<strong>Agent程序</strong>实现。</p><p>Agent函数是抽象的数学表述；而Agent程序则是具体的实现，它运行在一些物理系统的内部。</p><p><strong>理性Agent</strong>是能把事情做对的Agent。对理性的判断基于以下四方面：</p><ul><li>定义成功标准的性能度量。</li><li>Agent对环境的先验知识。</li><li>Agent可以完成的行动。</li><li>Agent截止到此时的感知序列。</li></ul><p><strong>性能度量</strong>评价Agent在环境中的行为表现。给定Agent的感知序列，理性Agent行动值追求性能度量的预期值最大化。</p><p>理性Agent不仅应该<strong>收集信息</strong>，还要从它所感知的信息中尽可能多地<strong>学习</strong>。<br>所有的Agent都可以通过学习来改进它们的性能。</p><p>如果Agent依赖于设计人员的先验知识而不是它自身感知的知识，则Agent是缺乏<strong>自主性</strong>的。</p><p><strong>全知Agent</strong>明确地知道它的行动产生的实际结果并做出相应的动作，这在现实生活中是不可能存在的。</p><p><strong>任务环境</strong>的规范包括性能度量、外部环境、执行器和传感器。<br>设计Agent时，第一步总要把任务空间定义的尽可能完全。<br>任务环境从不同的维度看有很多变化，它们可能是完全或部分可观察的，单人Agent或多Agent的，确定性的或随机的，片段式的或延续式的，静态的或动态的，离散的或连续的，已知的或未知的。</p><p>$$Agent=体系结构+程序$$</p><p>四种基本的Agent程序是：</p><ul><li><strong>简单反射Agent</strong>直接对感知信息做出反应。</li><li><strong>基于模型的反射Agent</strong>保持内部状态，追踪记录记录当前感知信息中反映不出来的世界各方面。</li><li><strong>基于目标的反射Agent</strong>的行动是为了达到目标。</li><li><strong>基于效用的Agent</strong>试图最大化它期望的性能。</li></ul><p>这些Agent都应该被转换为<strong>学习Agent</strong>，以提高性能以便更好地行动。</p><p><strong>基于知识的Agent</strong>不依靠反射机制而是对知识的内部表示进行操作的推理，它的核心部件是其<strong>知识库</strong>(KB)。知识库是一个语句集合，这些语句使用知识表达语言表达，表示了对世界的某些断言。当某些语句是直接给定的而不是推导得到的时候，我们称其为<strong>公理</strong>。</p><h1 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol><li>用二叉树方法给出$(P\wedge(Q→R))→(S\vee{\sim{R}})$的所有指派。</li><li>将$(P\wedge(Q→R))→S$化成合取范式。</li><li>设$\alpha$有四个原子命题$P_{1}$、$P_{2}$、$P_{3}$、$P_{4}$，其所有成假指派为$xtxt$、$ftfx$、$txtf$，写出命题公式$\alpha$。</li><li>将$(∀xA(x)→∃xB(x))\vee(Q→R)$化为子句形式。</li></ol><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><p>1.将$P$用$t$代入作为左分支，$f$代入作为右分支，依次代入$Q$、$R$、$S$得：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%9F%BA%E7%A1%80/1.png"></p><ul><li>成真指派：$fxxx$、$txfx$、$txtt$</li><li>成假指派：$txfx$</li></ul><p><strong>说明：这个图我画的不是很好，分完$P$再分最多的$R$会更好一些。</strong></p><p>2.化简过程如下：<br>$$(P\wedge(Q→R))→S\⇔(P\wedge(¬Q\vee{R}))→S\⇔¬(P\wedge(¬Q\vee{R}))\vee{S}\⇔(¬P\vee¬(¬Q\vee{R}))\vee{S}\⇔(¬P\vee(Q\wedge{¬R}))\vee{S}\⇔((¬P\vee{Q})\wedge(¬P\vee{¬R}))\vee{S}\⇔(¬P\vee{Q}\vee{S})\wedge(¬P\vee{¬R}\vee{S})$$</p><p>3.可以直接写出命题公式如下：<br>$$¬((P_{2}\wedge{P_{4}})\vee(¬P_{1}\wedge{P_{2}}\wedge{¬P_{3}})\vee(P_{1}\wedge{P_{3}}\wedge{¬P_{4}}))$$</p><p>化简过程如下：<br>$$¬((P_{2}\wedge{P_{4}})\vee(¬P_{1}\wedge{P_{2}}\wedge{¬P_{3}})\vee(P_{1}\wedge{P_{3}}\wedge{¬P_{4}}))\⇔¬(P_{2}\wedge{P_{4}})\wedge¬(¬P_{1}\wedge{P_{2}}\wedge{¬P_{3}})\wedge¬(P_{1}\wedge{P_{3}}\wedge{¬P_{4}})\⇔(¬P_{2}\vee{¬P_{4}})\wedge(P_{1}\vee{¬P_{2}}\vee{P_{3}})\wedge(¬P_{1}\vee{¬P_{3}}\vee{P_{4}})$$</p><p>4.子句形式需要化简出前束合取范式，化简过程如下：<br>$$(∀xA(x)→∃xB(x))\vee(Q→R)\⇔(∀xA(x)→∃yB(y))\vee(Q→R)\⇔(¬∀xA(x)\vee{∃yB(y)})\vee(¬Q\vee{R})\⇔(∃xA(x)\vee{∃yB(y)})\vee(¬Q\vee{R})\⇔(∃x∃y(A(x)\vee{B(y))})\vee(¬Q\vee{R})\⇔∃x∃y(A(x)\vee{B(y)\vee¬Q\vee{R}})$$</p><p>所以子句形式为：$A(a)\vee{B(b)\vee¬Q\vee{R}}$</p><h1 id="基于线性神经网络迭代求解线性方程组"><a href="#基于线性神经网络迭代求解线性方程组" class="headerlink" title="基于线性神经网络迭代求解线性方程组"></a>基于线性神经网络迭代求解线性方程组</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>已知如下的线性方程组：</p><p>$\begin{bmatrix} 1 &amp; 0 &amp; -1 &amp; 0 \ -1 &amp; 0 &amp; 0 &amp; 1 \ 0 &amp; -1 &amp; 1 &amp; -1 \ -1 &amp; -1 &amp; -1 &amp; 0 \end{bmatrix} \begin{bmatrix} W_{1} \ W_{2} \ W_{3} \ W_{4} \end{bmatrix}=\begin{bmatrix} 1 \ 2 \ 3 \ 4 \end{bmatrix}$</p><p>要求基于简单的线性神经网络模型求解，并将训练得到的$(W1,W2,W3,W4)$与求解方程组得到的$(W1,W2,W3,W4)$进行对比，分析差别。</p><h2 id="实现要点"><a href="#实现要点" class="headerlink" title="实现要点"></a>实现要点</h2><p>实现要点：</p><ul><li>网络学习规则采用$Delt$规则：$\Delta{w_{ij}} =\eta(t_{i}-a_{i})\cdot{a_{j}}$</li><li>随机置初始权重：$W_{1}=W_{2}=W_{3}=W_{4}=0$</li><li>置一个较小的学习率：$η=0.5$</li><li>判断网络学习的准确程度，利用目标值与实际输出误差指标函数：$E=\sqrt{(\sum(t_{ie}-a_{ie})^2)}$</li><li>迭代到偏差小于$1\times{10^{-10}}$或者迭代$500$轮即停止迭代</li></ul><h2 id="Python编程实现"><a href="#Python编程实现" class="headerlink" title="Python编程实现"></a>Python编程实现</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token keyword">def</span> <span class="token function">get_output</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> weights<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> weights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> weights<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> weights<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> weights<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_lr</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">max</span> <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        row <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>        len2 <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len2 <span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">:</span>            <span class="token builtin">max</span> <span class="token operator">=</span> len2    <span class="token keyword">return</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token builtin">max</span><span class="token keyword">def</span> <span class="token function">optimizer</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> lr<span class="token punctuation">)</span><span class="token punctuation">:</span>    eta <span class="token operator">=</span> <span class="token number">0.5</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> weight <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> weight <span class="token operator">+</span> eta <span class="token operator">*</span> loss <span class="token operator">*</span> lr <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_loss</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> label <span class="token operator">-</span> output<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    inputs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">]</span>    ilr <span class="token operator">=</span> get_lr<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>    weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        total_loss <span class="token operator">=</span> <span class="token number">0.0</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> row <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            output <span class="token operator">=</span> get_output<span class="token punctuation">(</span>row<span class="token punctuation">,</span> weights<span class="token punctuation">)</span>            a_label <span class="token operator">=</span> label<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            loss <span class="token operator">=</span> get_loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span> a_label<span class="token punctuation">)</span>            optimizer<span class="token punctuation">(</span>row<span class="token punctuation">,</span> weights<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> ilr<span class="token punctuation">)</span>            total_loss <span class="token operator">+=</span> loss <span class="token operator">*</span> loss        total_loss <span class="token operator">=</span> sqrt<span class="token punctuation">(</span>total_loss<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第{}轮的loss为：{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> total_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> total_loss <span class="token operator">&lt;</span> <span class="token number">1e-10</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二元关系传递闭包的Warshall算法</title>
      <link href="/2021/02/11/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/er-yuan-guan-xi-chuan-di-bi-bao-de-warshall-suan-fa/"/>
      <url>/2021/02/11/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/er-yuan-guan-xi-chuan-di-bi-bao-de-warshall-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>$|X|=n$，$R⊆X\times{X}$，令$M_{R}=A$，$R^{2}$的矩阵为$A^{(2)}$，……，$R^{k}$的矩阵为$A^{(k)}$，$t(R)$的矩阵记作为$M_{R+}=A+A^{(2)}+…+A^{(k)}+…$（此处$+$表示逻辑加）。</p><h1 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h1><ol><li>置新矩阵$A:=M_{R}$</li><li>置$i=1$</li><li>对所有的$j$，如果$A[j,i]=1$，则对$k=1,2,…,n$，$A[j,k]:=A[j,k]+A[i,k]$</li><li>$i:=i+1$</li><li>如果$i≤n$，回到第3步，否则停止。</li></ol><p>注意此处矩阵元素的加法是逻辑加。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>令$X={1,2,3,4}$，$X$中关系$R$图如下所示，用<strong>Warshall</strong>算法求$t(R)$的矩阵。<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB%E4%BC%A0%E9%80%92%E9%97%AD%E5%8C%85%E7%9A%84Warshall%E7%AE%97%E6%B3%95/1.png"></p><ul><li>$n=4$，下面的下标索引值从$1$开始</li><li>$i=1$，$\begin{bmatrix} 0 &amp; 1 &amp; 0 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 0 &amp; 1 &amp; 1  \end{bmatrix}$，$j=4$符合要求<ul><li>$j=4$，$A[j,i]=1$，第$1$行加到第$4$行，$\begin{bmatrix} 0 &amp; 1 &amp; 0 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}$</li></ul></li><li>$i=2$，$\begin{bmatrix} 0 &amp; 1 &amp; 0 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}$，$j=1$、$j=2$、$j=4$符合要求<ul><li>$j=1$，$A[j,i]=1$，第$2$行加到第$1$行，$\begin{bmatrix} 0 &amp; 1 &amp; 1 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}$</li><li>$j=2$，$A[j,i]=1$，第$2$行加到第$2$行，$\begin{bmatrix} 0 &amp; 1 &amp; 1 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}$，不变</li><li>$j=4$，$A[j,i]=1$，第$2$行加到第$4$行，$\begin{bmatrix} 0 &amp; 1 &amp; 1 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}$，不变</li></ul></li><li>$i=3$，$\begin{bmatrix} 0 &amp; 1 &amp; 1 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}$，$j=1$、$j=2$、$j=4$符合要求<ul><li>$j=1$，$A[j,i]=1$，第$3$行加到第$1$行，$\begin{bmatrix} 0 &amp; 1 &amp; 1 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}$，不变</li><li>$j=2$，$A[j,i]=1$，第$3$行加到第$2$行，$\begin{bmatrix} 0 &amp; 1 &amp; 1 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}$，不变</li><li>$j=4$，$A[j,i]=1$，第$3$行加到第$4$行，$\begin{bmatrix} 0 &amp; 1 &amp; 1 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}$，不变</li></ul></li><li>$i=4$，$\begin{bmatrix} 0 &amp; 1 &amp; 1 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}$，$j=1$、$j=4$符合要求<ul><li>$j=1$，$A[j,i]=1$，第$4$行加到第$1$行，$\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}$</li><li>$j=4$，$A[j,i]=1$，第$4$行加到第$4$行，$\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}$，不变</li></ul></li><li>结束，得到矩阵$\begin{bmatrix} 1 &amp; 1 &amp; 1 &amp; 1 \ 0 &amp; 1 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 \ 1 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}$</li></ul><p>得到下面的有向关系图：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB%E4%BC%A0%E9%80%92%E9%97%AD%E5%8C%85%E7%9A%84Warshall%E7%AE%97%E6%B3%95/2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二元关系基础理论</title>
      <link href="/2021/02/11/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/er-yuan-guan-xi-ji-chu-li-lun/"/>
      <url>/2021/02/11/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/er-yuan-guan-xi-ji-chu-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="序偶"><a href="#序偶" class="headerlink" title="序偶"></a>序偶</h1><p><strong>序偶</strong>，也称<strong>有序二元组</strong>，是由两个对象$x$、$y$组成的序列，记作$&lt;x,y&gt;$。称$x$、$y$分别为序偶$&lt;x,y&gt;$的第一元素和第二元素。</p><p>序偶$&lt;x,y&gt;$与集合${x,y}$不同。序偶$&lt;x,y&gt;$的元素$x$和$y$是有次序的；而集合${x,y}$的元素$x$和$y$的次序是无关紧要的。</p><p>设$&lt;x,y&gt;$、$&lt;u,v&gt;$是两个序偶，如果$x=u$和$y=v$，则称$&lt;x,y&gt;$和$&lt;u,v&gt;$相等，记作$&lt;x,y&gt;=&lt;u,v&gt;$。</p><h2 id="序偶的推广"><a href="#序偶的推广" class="headerlink" title="序偶的推广"></a>序偶的推广</h2><p>有序三元组是一个序偶，其第一个元素也是个序偶。有序三元组$&lt;&lt; a,b&gt;,c&gt;$可以简记成$&lt;a,b,c&gt;$。注意，$&lt;a,&lt;b,c&gt;&gt;$不是有序三元组。</p><p>有序$n$元组是一个序偶，其第一个元素本身是个有序$n-1$元组,记作$&lt;&lt;x_{1}, x_{2}, …, x_{n-1}&gt;, x_{n}&gt;$。且可以简记成$&lt;x_{1}, x_{2},…, x_{n-1}, x_{n}&gt;$。</p><p>$&lt;x_{1}, x_{2}, …, x_{n}&gt;=&lt;y_{1}, y_{2}, …, y_{n}&gt;⇔(x_{1}=y_{1})∧(x_{2}=y_{2})∧…∧(x_{n}=y_{n})$</p><h2 id="集合的笛卡尔积"><a href="#集合的笛卡尔积" class="headerlink" title="集合的笛卡尔积"></a>集合的笛卡尔积</h2><p>设$A$、$B$是集合，由$A$的元素为第一元素，$B$的元素为第二元素组成序偶的集合，称为$A$和$B$的笛卡尔积，记作$A×B$，即$A×B={&lt;x,y&gt;|x\in{A}∧y\in{B}}$。</p><h2 id="序偶的性质"><a href="#序偶的性质" class="headerlink" title="序偶的性质"></a>序偶的性质</h2><ol><li>如果$A$、$B$都是有限集，且$|A|=m$，$|B|=n$，则$|A\times{B}|=mn$</li><li>$A\times{\Phi}=\Phi\times{B}=\Phi$</li><li>$\times$对$\cup$和$\cap$满足分配律。设$A$、$B$、$C$是任意集合，则<ol><li>$A\times{(B\cup{C})}=(A\times{B})\cup{(A\times{C})}$</li><li>$A\times{(B\cap{C})}=(A\times{B})\cap{(A\times{C})}$</li><li>$(A\cup{B})\times{C}=(A\times{C})\cup{(B\times{C})}$</li><li>$(A\cap{B})\times{C}=(A\times{C})\cap{(B\times{C})}$</li></ol></li><li>若$C≠\Phi$，则$A⊆B⇔A\times{C}⊆B\times{C}⇔C\times{A}⊆C\times{B}$</li><li>设$A$、$B$、$C$、$D$为非空集合，则$A\times{B}⊆C\times{D}⇔A⊆C\wedge{B⊆D}$</li></ol><h1 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h1><p>设$A$、$B$是集合，如果$R⊆A×B$，则称$R$是一个从$A$到$B$的二元关系。</p><p>如果$R⊆A×A$，则称$R$是$A$上的<strong>二元关系</strong>，简称<strong>关系</strong>。</p><p>任何序偶的集合，都是一个二元关系。</p><h2 id="关系的定义域与值域"><a href="#关系的定义域与值域" class="headerlink" title="关系的定义域与值域"></a>关系的定义域与值域</h2><p>定义域(domain)：设$R⊆A×B$，由所有$&lt;x,y&gt;\in{R}$的第一个元素组成的集合，称为$R$的定义域，记作$dom R$，即<br>$dom R={x|∃y(&lt;x,y&gt;\in{R})}$</p><p>值域(range)：设$R⊆A×B$，由所有$&lt;x,y&gt;\in{R}$的第二个元素组成的集合，称为$R$的值域，记作$ran R$，即$ran R={y|∃x(&lt;x,y&gt;\in{R})}$</p><h2 id="关系的表示方法"><a href="#关系的表示方法" class="headerlink" title="关系的表示方法"></a>关系的表示方法</h2><ul><li>枚举法</li><li>谓词公式法</li><li>有向图法</li><li>矩阵表示法</li></ul><h2 id="特殊的关系"><a href="#特殊的关系" class="headerlink" title="特殊的关系"></a>特殊的关系</h2><p>因为$Φ⊆A×B$(或$Φ⊆A×A$)，所以$Φ$也是一个从$A$到$B$(或$A$上)的关系，这个关系是<strong>空关系</strong>。空关系是没有任何元素的关系，它的关系图中只有结点而没有任何边，它的关系矩阵中全是$0$。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/1.png"></p><p>$A×B$(或$A×A$)本身也是一个从$A$到$B$(或$A$上)的关系，这个关系是<strong>完全关系</strong>。完全关系是含有全部序偶的关系，它的关系矩阵中全是$1$。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/2.png"></p><p>$I_{A}⊆A×A$，且$I_{A}={&lt;x,x&gt;|x∈A}$，这个关系是$A$上的恒等关系。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/3.png"></p><h3 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h3><p>设$R$是$A$上的关系，如果$R$是<strong>自反</strong>的、<strong>对称</strong>的和<strong>传递</strong>的，则称$R$是$A$上的<strong>等价关系</strong>。</p><p>等价关系求等价类示例：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/4.png"></p><ul><li>$R_{1}$存在$1$个等价关系、$3$个等价类（${1}$，${2}$，${3}$），商集为${ {1},{2},{3} }$</li><li>$R_{2}$存在$3$个等价关系、$2$个等价类（${1}$，${2,3}$），商集为${ {1},{2,3} }$</li><li>$R_{3}$存在$1$个等价关系、$1$个等价类（${1,2,3}$），商集为${ {1,2,3} }$</li></ul><h3 id="相容关系"><a href="#相容关系" class="headerlink" title="相容关系"></a>相容关系</h3><p>设$R$是$A$上的关系，如果$R$是<strong>自反</strong>的和<strong>对称</strong>的，则称$R$是$A$上的<strong>相容关系</strong>。</p><p>相容关系的有向关系图和关系矩阵可以简化：</p><ul><li>将相容关系的有向关系图简化，不画环、两条对称边用一条无向直线代替</li><li>将相容关系的关系矩阵简化，只保留下三角矩阵，这是因为此矩阵是对称矩阵且对角线元素全为$1$</li></ul><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/5.png"> <img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/6.png"></p><p>简化图找最大相容类的方法：找<strong>最大完全正多边形</strong>（所有结点之间都连起来，包括对角线，$n$个结点有$C_{n}^{2}$条边，$1$个结点和$2$个结点也算）。</p><p>上图的${x_{1},x_{2},x_{3},x_{4}}$，${x_{3},x_{4},x_{5}}$，${x_{1},x_{7}}$，${x_{6}}$都是最大相容类。</p><p>新的例子：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/7.png"></p><p>上图的${x_{1},x_{2},x_{5}}$，${x_{1},x_{4},x_{5}}$，${x_{2},x_{3}}$，${x_{3},x_{4}}$都是最大相容类。</p><p>【感想】<strong>最大完全正多边形</strong>这是关键，一定要悟透，其实不难，可惜我第一次学的时候没弄明白QAQ。</p><h3 id="偏序关系"><a href="#偏序关系" class="headerlink" title="偏序关系"></a>偏序关系</h3><p>设$R$是$A$上的关系，如果$R$是<strong>自反</strong>的、<strong>反对称</strong>的和<strong>传递</strong>的，则称$R$是$A$上的<strong>偏序关系</strong>，称$&lt;A,R&gt;$是<strong>偏序集</strong>。</p><p>典型的偏序关系：</p><ul><li>$≤$</li><li>$≥$</li><li>$⊆$</li></ul><p>规定，用$≤$代指偏序关系，此处的$≤$有了更广泛的含义。</p><p>假设$R_{1}$是$S_{1}$上的偏序，$R_{2}$是$S_{2}$上的偏序，可以用$R_{1}$和$R_{2}$在$S_{1}\times{S_{2}}$上定义一个关系$R$为$(a_{1},a_{2})R(b_{1},b_{2})$当且仅当下列条件之一为真：</p><ol><li>$a_{1}≠a_{2}$且$a_{1}R_{1}b_{1}$</li><li>$a_{1}=a_{2}$且$a_{2}R_{2}b_{2}$</li></ol><p>这种关系称为$S_{1}\times{S_{2}}$上的<strong>字典序</strong>，它是$S_{1}\times{S_{2}}$上的偏序关系。</p><p>$&lt;A,≤&gt;$是偏序集，$x,y\in{A}$，如果要么$x≤y$，要么$y≤x$，则称$x$和$y$是可比较的。</p><p>偏序关系中有一个<strong>全序关系</strong>的概念，它在偏序集的基础上要求任意不同的两个元素之间都是<strong>可比较的</strong>。<br>全序关系一定是偏序关系，偏序关系不一定是全序关系。</p><p>构造某一个给定偏序的全序的过程称为<strong>拓扑排序</strong>。<br>对有限集$S$上任意给定的偏序$R$，拓扑排序算法可以产生一个全序$T$，使得$xRy$蕴含$xTy$：</p><ol><li>初始化：令$k=1$，$S’=S$</li><li>取下一个元素循环直至$S’$为空集：<ol><li>关于$R$在$S’$上诱导出来的偏序，选取任意一个极小元记为$s_{k}$</li><li>从$S’$中删去$s_{k}$</li><li>令k=k+1</li></ol></li><li>定义$S$上的全序$T$：$s_{i}Ts_{j}$当且仅当$i≤j$</li></ol><p>如果$x≤y$，$x≠y$，且不存在$z\in{A}$使得$z≠x\wedge{z≠y}\wedge{x≤z}\wedge{z≤y}$，则称元素y盖住元素x。</p><p>$&lt;A,≤&gt;$是偏序集，如果对$A$的任何非空子集$B$，都有最小元，则称$≤$是$A$上的良序，并称$&lt;A,≤&gt;$为良序集。<br>所有良序集，一定是全序集。<br>有限的全序集，一定是良序集。</p><p>良序原理指出：每一个非空正整数集合都含有最小元素。</p><p>令$&lt;A,≤&gt;$是偏序集，绘制Hasse图的要点：</p><ol><li>用$\circ$表示$A$中的元素。</li><li>如果$x≤y$且$x≠y$，则结点$y$要画在结点$x$上方。</li><li>如果$x≤y$且$y$盖住$x$，$x$与$y$之间连一条直线。</li><li>一般先从最下层结点（全是射出的边与之相连，不考虑环），逐层向上画，直到最上层结点（全是射入的边与之相连）。采用抓两头，带中间的方法。</li></ol><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/8.png"> <img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/9.png"></p><h2 id="关系的运算"><a href="#关系的运算" class="headerlink" title="关系的运算"></a>关系的运算</h2><p>由于关系就是集合，所以集合的交运算$\cap$、并运算$\cup$、差运算$-$、绝对补集运算$\sim$、对称差运算$\oplus$也适用。</p><p>此外，关系还支持复合、求逆、闭包运算。</p><h3 id="关系的复合"><a href="#关系的复合" class="headerlink" title="关系的复合"></a>关系的复合</h3><ul><li>$R⊆A\times{B}$</li><li>$S⊆B\times{C}$</li><li>$T_{1}⊆C\times{D}$</li><li>$T_{2}⊆B\times{C}$</li></ul><ol><li><strong>不满足</strong>交换律，$R\circ{S}=S\circ{R}$<strong>不成立</strong></li><li>满足结合律，$R\circ{(S\circ{T_{1}})}=(R\circ{S})\circ{T_{1}}$</li><li>并集满足分配律，$R\circ{(S\cup{T_{2}})}=(R\circ{S})\cup{(R\circ{T_{2}})}$</li><li>交集<strong>不满足</strong>分配律，$R\circ{(S\cap{T_{2}})}⊆(R\circ{S})\cap{(R\circ{T_{2}})}$</li><li>$R\circ{I_{B}}=I_{A}\circ{R}=R$</li><li>由于复合运算满足结合律，所以同关系复合可以写成幂乘的形式，即：<ol><li>$R^{0}=I_{A}$</li><li>$R^{1}=R^{1+0}=R\circ{R^{0}}=R\circ{I_{A}}=R$</li><li>$R^{2}=R\circ{R}$</li><li>……</li><li>$R^{m}\circ{R^{n}}=R^{m+n}$</li><li>$(R^{m})^{n}=R^{mn}$</li></ol></li></ol><h3 id="关系的求逆"><a href="#关系的求逆" class="headerlink" title="关系的求逆"></a>关系的求逆</h3><ul><li>$R⊆A×B$</li><li>$S⊆A×B$</li><li>$T⊆B×C$</li></ul><ol><li>$(R^{C})^{C}=R$</li><li>${(R\cup{S})}^{C}=R^{C}\cup{S^{C}}$</li><li>${(R\cap{S})}^{C}=R^{C}\cap{S^{C}}$</li><li>${(R-S)}^{C}=R^{C}-S^{C}$</li><li>${(\sim{R})}^{C}=\sim{R^{C}}$</li><li>$R⊆S⇔R^{C}⊆S^{C}$</li><li>$(R\circ{T})^{C}=T^{C}\circ{R^{C}}$</li></ol><h3 id="关系闭包"><a href="#关系闭包" class="headerlink" title="关系闭包"></a>关系闭包</h3><p>给定$A$中的一个关系$R$，分别求得$A$上的另一个关系$R’$，使得它是包含$R$的序偶最少的分别具有自反性（对称性、传递性）的关系，$R’$被称为$R$的自反（对称、传递）闭包。</p><p>关系闭包的分类：</p><ul><li>自反闭包，记作$r(R)$</li><li>对称闭包，记作$s(R)$</li><li>传递闭包，记作$t(R)$</li></ul><p>关系闭包的计算方法：</p><ul><li>自反闭包：$r(R)=R\cup{I_{A}}$</li><li>对称闭包：$s(R)=R\cup{R^{C}}$</li><li>传递闭包：<ul><li>$t(R)=R\cup{R^{2}}\cup{R^{3}}\cup{…}$</li><li>$A$是有限集，$|A|=n$，$t(R)=R\cup{R^{2}}\cup{…}\cup{R^{n}}$</li><li><a href="https://blankspace.blog.csdn.net/article/details/113791915">Warshall算法</a></li></ul></li></ul><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/10.png"></p><p>关系闭包的性质：</p><ol><li>二元关系$R$具有自反性/对称性/传递性的充要条件是$R$等于$R$的自反闭包/对称闭包/传递闭包<ol><li>$R是自反的⇔r(R)=R$</li><li>$R是对称的⇔s(R)=R$</li><li>$R是传递的⇔t(R)=R$</li></ol></li><li>自反性、对称性、传递性分别可以推出其他闭包的该性质<ol><li>$R是自反的⇒s(R)和t(R)也是自反的$</li><li>$R是对称的⇒r(R)和t(R)也是对称的$</li><li>$R是传递的⇒r(R)也是传递的$</li></ol></li><li>$R_{1}$、$R_{2}$是$A$上的关系，如果$R_{1}⊆R_{2}$，则<ol><li>$r(R_{1})⊆r(R_{2})$</li><li>$s(R_{1})⊆s(R_{2})$</li><li>$t(R_{1})⊆t(R_{2})$</li></ol></li><li>具备多重性质的二元关系$R$<ol><li>$sr(R)=rs(R)$</li><li>$tr(R)=rt(R)$</li><li>$st(R)⊆ts(R)$</li></ol></li></ol><h2 id="关系的性质"><a href="#关系的性质" class="headerlink" title="关系的性质"></a>关系的性质</h2><p><strong>二元关系的主要性质有：自反性、反自反性、对称性、反对称性、传递性。</strong></p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/11.png"></p><h3 id="自反性"><a href="#自反性" class="headerlink" title="自反性"></a>自反性</h3><p>设$R$是集合$A$中的关系，如果对于任意$x\in{A}$都有$&lt;x,x&gt;\in{R(xRx)}$，则称$R$是$A$中的<strong>自反关系</strong>。</p><p>$$R是集合A中的自反关系⇔∀x(x\in{A}→xRx)$$</p><ul><li><strong>关系有向图</strong>：每个结点都有环</li><li><strong>关系矩阵</strong>：主对角线都为1</li></ul><p>自反关系举例：</p><ul><li>实数集合的$≤$关系</li></ul><p>$R_{1}$、$R_{3}$、$R_{4}$是自反的。</p><h3 id="反自反性"><a href="#反自反性" class="headerlink" title="反自反性"></a>反自反性</h3><p>设$R$是集合$A$中的关系，如果对于任意$x\in{A}$都有$&lt;x,x&gt;\notin{R}$，则称$R$是$A$中的<strong>反自反关系</strong>。</p><p>$$R是集合A中的反自反关系⇔∀x(x\in{A}→&lt;x,x&gt;\notin{R})$$</p><ul><li><strong>关系有向图</strong>：每个结点都无环</li><li><strong>关系矩阵</strong>：主对角线都为0</li></ul><p>反自反关系举例：</p><ul><li>实数集合的$&gt;$关系</li><li>父子关系</li></ul><p>$R_{2}$、$R_{5}$、$R_{8}$是反自反的。</p><h3 id="对称性"><a href="#对称性" class="headerlink" title="对称性"></a>对称性</h3><p>设$R$是集合$A$中的关系，如果对于任意$x,y\in{A}$，如果有$xRy$，就有$yRx$，则称$R$是$A$中的<strong>对称关系</strong>。</p><p>$$R是集合A中的对称关系⇔∀x∀y((x\in{A}\wedge{y\in{A}}\wedge{xRy})→yRx)$$</p><ul><li><strong>关系有向图</strong>：两个不同的结点之间，如果有边，则有方向相反的两条边 <strong>（没边也可以）</strong></li><li><strong>关系矩阵</strong>：对称矩阵</li></ul><p>对称关系举例：</p><ul><li>邻居关系</li><li>朋友关系</li></ul><p>$R_{3}$、$R_{4}$、$R_{6}$、$R_{8}$是对称的。</p><h3 id="反对称性"><a href="#反对称性" class="headerlink" title="反对称性"></a>反对称性</h3><p>设$R$是集合$A$中的关系，如果对于任意$x,y\in{A}$，如果有$xRy$和$yRx$，就有$x=y$，则称$R$是$A$中的<strong>反对称关系</strong>。</p><p>$$R是集合A中的对称关系⇔∀x∀y((x\in{A}\wedge{y\in{A}}\wedge{xRy}\wedge{yRx})→x=y)$$</p><ul><li><strong>关系有向图</strong>：两个不同的结点之间，最多有一条边 <strong>（没边也可以）</strong></li><li><strong>关系矩阵</strong>：关于主对角线对称的两个元素最多有一个1</li></ul><p>$R_{1}$、$R_{2}$、$R_{4}$、$R_{5}$、$R_{8}$是反对称的。</p><h3 id="传递性"><a href="#传递性" class="headerlink" title="传递性"></a>传递性</h3><p>设$R$是集合$A$中的关系，如果对于任意$x,y,z\in{A}$，如果有$xRy$和$yRz$，就有$xRz$，则称$R$是$A$中的<strong>传递关系</strong>。</p><p>$$R是集合A中的传递关系⇔∀x∀y∀z((x\in{A}\wedge{y\in{A}}\wedge{z\in{A}}\wedge{xRy}\wedge{yRz})→xRz)$$</p><p><strong>关系有向图</strong>和<strong>关系矩阵</strong>不易直接看出传递性，应该根据定义来检查：</p><ul><li><strong>关系有向图</strong>：如果有边$&lt;a,b&gt;$、$&lt;b,c&gt;$，则有边$&lt;a,c&gt;$（或者前件为假）</li><li><strong>关系矩阵</strong>：如果$a_{ij}=1$、$a_{jk}=1$，则有边$a_{ik}=1$（或者前件为假）</li></ul><p>传递关系举例：</p><ul><li>实数集合的$≤$、$&lt;$关系</li><li>集合的$⊆$、$⫋$关系</li></ul><p>$R_{1}$、$R_{3}$、$R_{4}$、$R_{5}$、$R_{8}$是传递的。</p><h3 id="对比自反性与反自反性"><a href="#对比自反性与反自反性" class="headerlink" title="对比自反性与反自反性"></a>对比自反性与反自反性</h3><p>一个关系，如果不是自反的，也不一定是反自反的。</p><p>以有向关系图为例，自反性要求图中每个结点都有环，反自反性要求图中每个结点都无环，但显然可能会存在部分结点有环部分节点无环的情况，这就是我们所说的。</p><p>$R_{6}$、$R_{7}$既不是自反的也不是反自反的。</p><h3 id="对比对称性与反对称性"><a href="#对比对称性与反对称性" class="headerlink" title="对比对称性与反对称性"></a>对比对称性与反对称性</h3><p>一个关系，如果不是对称的，也不一定是反对称的；如果是对称的，还有可能是反对称的。</p><p>空关系和恒等关系既是对称的，还是反对称的。<br>关系有向图中，如果部分边满足对称性的条件，部分边满足反对称的条件，则该关系既不是对称的，也不是反对称的。</p><p>$R_{4}$、$R_{8}$既是对称的，还是反对称的。<br>$R_{7}$既不是对称的，也不是反对称的。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合论基础理论归纳</title>
      <link href="/2021/02/10/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/ji-he-lun-ji-chu-li-lun-gui-na/"/>
      <url>/2021/02/10/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/ji-he-lun-ji-chu-li-lun-gui-na/</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合与元素"><a href="#集合与元素" class="headerlink" title="集合与元素"></a>集合与元素</h2><p><strong>集合</strong>是由确定的对象(客体)构成的集体。用大写的英文字母表示。</p><ul><li>“确定”的含义：论域内任何客体，要么属于这个集合，要么不属于这个集合，是唯一确定的。</li><li>集合中的元素间次序是无关紧要的，但是必须是可以区分的，即是不同的。</li><li>对集合中的元素无任何限制。</li><li>常用的集合符号：自然数集合$N$、整数集合$I$、实数集合$R$、有理数集合$Q$。</li><li>集合中的元素也可以是集合。</li></ul><p><strong>元素</strong>是集合中的对象。<br>$\in$表示元素与集合的属于关系。</p><h2 id="有限集合与无限集合"><a href="#有限集合与无限集合" class="headerlink" title="有限集合与无限集合"></a>有限集合与无限集合</h2><p><strong>有限集合</strong>是元素是有限个的集合。</p><p><strong>无限集合</strong>是元素是无限个的集合。</p><h2 id="集合的表示方法"><a href="#集合的表示方法" class="headerlink" title="集合的表示方法"></a>集合的表示方法</h2><p><strong>列举法</strong>：将集合中的元素一一列出，写在大括号内。</p><p><strong>描述法</strong>：用句子(或谓词公式)描述元素的属性。一般地，$A={x|P(x)}$,其中$P(x)$是描述元素$x$的特性的谓词公式，如果论域内客体$a$使得$P(a)$为真，则$a∈A$，否则$a\notin{A}$。</p><p><strong>Venn图法</strong></p><h1 id="集合间的关系"><a href="#集合间的关系" class="headerlink" title="集合间的关系"></a>集合间的关系</h1><h2 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h2><p>$A$、$B$是集合，如果$A$中元素都是$B$中元素，则称$B$包含$A$，$A$包含于$B$，也称$A$是$B$的子集。记作$A\subseteq{B}$。</p><p>$A\subseteq{B}⇔∀x(x∈A→x∈B)$</p><p><img src="https://img-blog.csdnimg.cn/dba3e0c5588e4b7a87ee886161422435.png" alt="在这里插入图片描述"></p><p>包含关系具有的性质：</p><ul><li><strong>自反性</strong>：对任何集合$A$有$A\subseteq{A}$。</li><li><strong>传递性</strong>：对任何集合$A$、$B$、$C$，有$A\subseteq{B}$且$B\subseteq{C}$ ，则$A\subseteq{C}$。</li><li><strong>反对称性</strong>：对任何集合$A$、$B$，有$A\subseteq{B}$且$B\subseteq{A}$，则$A=B$。</li></ul><h2 id="相等关系"><a href="#相等关系" class="headerlink" title="相等关系"></a>相等关系</h2><p>$A$、$B$是集合，如果它们的元素完全相同，则称$A$与$B$相等。记作$A=B$。</p><p>$A=B$，当且仅当$A\subseteq{B}$且$B\subseteq{A}$。</p><p>$A=B$<br>$⇔A⊆B\wedge{B⊆A}$<br>$⇔∀x(x∈A→x∈B)\wedge∀x(x∈B→x∈A)$<br>$⇔∀x((x∈A→x∈B)\wedge(x∈B→x∈A))$<br>$⇔∀x(x∈A↔x∈B)$</p><p>相等关系具有的性质：</p><ul><li>自反性，对任何集合$A$，有$A=A$。</li><li>传递性，对任何集合$A$、$B$、$C$，如果有$A=B$且$B=C$，则$A=C$。</li><li>对称性，对任何集合$A$、$B$，如果有$A=B$，则$B=A$。</li></ul><h2 id="真包含关系"><a href="#真包含关系" class="headerlink" title="真包含关系"></a>真包含关系</h2><p>$A$、$B$是集合，如果$A⊆B$且$A≠B$，则称$B$真包含$A$，$A$真包含于$B$，也称$A$是$B$的真子集。记作$A⊂B$。</p><p>$A⊂B$<br>$⇔A⊆B∧A≠B$<br>$⇔∀x(x∈A→x∈B)∧¬∀x(x∈A↔x∈B)$<br>$⇔∀x(x∈A→x∈B)∧(¬∀x(x∈A→x∈B)∨¬∀x(x∈B→x∈A))$<br>$⇔(∀x(x∈A→x∈B)∧¬∀x(x∈A→x∈B))∨(∀x(x∈A→x∈B)∧¬∀x(x∈B→x∈A))$<br>$⇔∀x(x∈A→x∈B)∧∃x(x∈B∧x\notin{A})$</p><p>真包含关系具有的性质：</p><ul><li>有传递性，对任何集合$A$、$B$、$C$，如果有$A⊂B$且$B⊂C$ ，则$A⊂C$。</li></ul><h1 id="特殊集合"><a href="#特殊集合" class="headerlink" title="特殊集合"></a>特殊集合</h1><h2 id="全集"><a href="#全集" class="headerlink" title="全集"></a>全集</h2><p>包含所讨论的所有集合的集合，称之为全集，记作$E$。</p><p><img src="https://img-blog.csdnimg.cn/f438b8b67afc4be0a17f7109c75b7f28.png" alt="在这里插入图片描述"></p><h2 id="空集"><a href="#空集" class="headerlink" title="空集"></a>空集</h2><p>没有元素的集合，称之为空集，记作$Φ$。</p><p>因为论域内如何客体$x∈Φ$是矛盾式，所以要用一个矛盾式定义$Φ$。$Φ={x| P(x)∧¬P(x)}$。</p><h2 id="幂集"><a href="#幂集" class="headerlink" title="幂集"></a>幂集</h2><p>对于集合$A$，它的幂集是$A$的所有子集的集合。</p><p>我们知道，一个集合由$n$个元素组成，则它的子集数为$2^n$，所以幂集的元素数为$2^n$。</p><p>例如$A={a,b}$，则$P(A)={\Phi,{a},{b},{a,b}}$。</p><p>比较复杂的情况是套有$\Phi$的集合。例如，设$A={\Phi}$，求$B=P(P(A))$。<br>将$\Phi$单纯的看做一个元素即可，则$P(A)={\Phi,{\Phi}}$，$P(P(A))={\Phi,{\Phi},,{\Phi,{\Phi}}}$。</p><h1 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h1><p>交运算$\cap$、并运算$\cup$、差运算$-$、绝对补集运算$\sim$、对称差运算$\oplus$</p><h1 id="集合的包含排斥原理"><a href="#集合的包含排斥原理" class="headerlink" title="集合的包含排斥原理"></a>集合的包含排斥原理</h1><p>包含排斥原理是集合论的基本内容，用于解决集合的计数问题。</p><p>一般地，有$n$个有限集合$A_{1},A_{2},…,A_{n}$，则有：<br><img src="https://img-blog.csdnimg.cn/20210211002726995.png" alt="在这里插入图片描述"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>【例题】求1到1000之间不能被5、6、8整除的整数的个数。</p><p>【解】设全集$E={x|x\in{Z}\wedge{1≤x≤1000}}$，则$|E|=1000$。<br>设$A_{5}$、$A_{6}$、$A_{8}$是$E$的子集并分别表示可被$5$、$6$、$8$整除的整数的集合。<br>设$⌊x⌋$表示小于或等于$x$的最大整数，$LCM(x,y)$表示$x$和$y$两个数的最小公倍数。</p><p>$$|A_{5}|=⌊\frac{1000}{5}⌋=200$$</p><p>$$|A_{6}|=⌊\frac{1000}{6}⌋=166$$</p><p>$$|A_{8}|=⌊\frac{1000}{8}⌋=125$$</p><p>$$|A_{5}\cap{A_{6}}|=⌊\frac{1000}{LCM(5,6)}⌋=⌊\frac{1000}{30}⌋=33$$</p><p>$$|A_{5}\cap{A_{8}}|=⌊\frac{1000}{LCM(5,8)}⌋=⌊\frac{1000}{40}⌋=25$$</p><p>$$|A_{6}\cap{A_{8}}|=⌊\frac{1000}{LCM(6,8)}⌋=⌊\frac{1000}{24}⌋=41$$</p><p>$$|A_{5}\cap{A_{6}}\cap{A_{8}}|=⌊\frac{1000}{LCM(5,6,8)}⌋=⌊\frac{1000}{120}⌋=8$$</p><p>不能被5、6、8整除的整数集合为$\sim(A_{5}\cup{A_{6}}\cup{A_{8}})$</p><p>$|\sim(A_{5}\cup{A_{6}}\cup{A_{8}})|=|E|-|A_{5}\cup{A_{6}}\cup{A_{8}}|=|E|-(|A_{5}|+|A_{6}|+|A_{8}|-|A_{5}\cap{A_{6}}|-|A_{5}\cap{A_{8}}|-|A_{6}\cap{A_{8}}|+|A_{5}\cap{A_{6}}\cap{A_{8}}|)=1000-(200+166+125-33-25-41+8)=600$</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li>向上取整符号：⌈⌉</li><li>向下取整符号：⌊⌋</li></ul><h1 id="集合的划分与覆盖"><a href="#集合的划分与覆盖" class="headerlink" title="集合的划分与覆盖"></a>集合的划分与覆盖</h1><p>设$X$是一个非空集合，$A={A_{1},A_{2},…,A_{n}}$，$A_{i}≠\Phi$，$A_{i}⊆X$，$i=1,2,…,n$，如果满足$A_{1}\cup{A_{2}}\cup{…}\cup{A_{n}}=X$，$i=1,2,…,n$，则称$A$为集合$X$的覆盖。</p><p>设$A=A_{1}\cup{A_{2}}\cup{…}\cup{A_{n}}$是$X$的一个覆盖，且$A_{i}\cap{A_{j}}=\Phi$，$i≠j$，$1≤i≤n$，$1≤j≤n$，则称$A$为集合$X$的划分，每个$A_{i}$均称为这个划分的一个划分类。</p><p>划分一定是覆盖，覆盖不一定是划分。</p><p>最小划分指划分块最少的划分，即只有一个划分块的划分，即$X$本身。<br>最大划分指划分块最多的划分，即每个划分块里只有一个元素的划分。</p><p>若$A=A_{1}\cup{A_{2}}\cup{…}\cup{A_{m}}$与$B=B_{1}\cup{B_{2}}\cup{…}\cup{B_{n}}$都是集合$X$的划分，则其中所有的$A_{i}\cap{B_{j}}$组成的集合$C$被称为$A$和$B$的交叉划分。</p><p>设$A=A_{1}\cup{A_{2}}\cup{…}\cup{A_{m}}$与$B=B_{1}\cup{B_{2}}\cup{…}\cup{B_{n}}$都是集合$X$的划分，若对于任何$A_{i}\in{A}$，都存在$B_{j}\in{B}$，使得$A_{i}⊆B_{j}$，则称$A$是$B$的划分加细。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谓词逻辑基础理论</title>
      <link href="/2021/02/10/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/wei-ci-luo-ji-ji-chu-li-lun/"/>
      <url>/2021/02/10/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/wei-ci-luo-ji-ji-chu-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="谓词逻辑"><a href="#谓词逻辑" class="headerlink" title="谓词逻辑"></a>谓词逻辑</h1><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/113765513">命题逻辑</a></p><h2 id="客体与客体变元"><a href="#客体与客体变元" class="headerlink" title="客体与客体变元"></a>客体与客体变元</h2><p><strong>客体</strong>(个体)是能够独立存在的事物。客体可以是具体的事物，也可以是抽象的事物。客体通常用小写英文字母$a$、$b$、$c$、$…$表示。</p><p>用小写英文字母$x$、$y$、$z$、$…$表示任何客体，则称这些字母为<strong>客体变元</strong>。值得一提的是，客体变元本身不是客体。</p><h2 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h2><p><strong>谓词</strong>是用以表示客体的属性或者客体之间的关系的大写英文字母，字母右面有括号，括号内是若干个客体变元。<br>$n$元谓词是括号内有$n$个客体变元的谓词。<br>当命题函数$P(x_{1},x_{2},…,x_{n})$的$n=0$时，$n$元谓词即为$0$元谓词，表示不含有客体变元的谓词，它本身就是一个命题。</p><p>谓词本身并不是命题，只有谓词的括号内填入足够的客体，才变成命题。</p><h2 id="命题函数"><a href="#命题函数" class="headerlink" title="命题函数"></a>命题函数</h2><p><strong>命题函数</strong>包括简单命题函数与复合命题函数。<br><strong>简单命题函数</strong>是$n$元谓词$P(x_{1},x_{2},…,x_{n})$。<br><strong>复合命题函数</strong>是将若干个简单命题函数用逻辑联结词联结起来构成的表达式。</p><h2 id="论域"><a href="#论域" class="headerlink" title="论域"></a>论域</h2><p><strong>论域</strong>(个体域)是命题函数中客体变元的取值范围。<br><strong>全总个体域</strong>是由所有客体构成的论域。全总个体域是“最大”的论域。<br>对于一个命题函数，如果没有给定论域，则假定该论域是全总个体域。</p><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p><strong>量词</strong>是在命题中表示对客体数量化的词。<br><strong>存在量词</strong>：记作$∃$，表示“有些”、“一些”、“某些”、“至少一个”等。<br><strong>全称量词</strong>：记作$∀$，表示“每个”、“任何一个”、“一切”、“所有的”、“凡是”、“任意的”等。</p><p>量词后边要有一个客体变元，用以指明对哪个客体变元量化，称此客体变元是<strong>量词后的指导变元</strong>。</p><h1 id="谓词公式"><a href="#谓词公式" class="headerlink" title="谓词公式"></a>谓词公式</h1><h2 id="客体函数"><a href="#客体函数" class="headerlink" title="客体函数"></a>客体函数</h2><p>客体函数与谓词是不同的，不可混淆。</p><p>例如：</p><ul><li><strong>所有的自然数都是整数。</strong><br>设$N(x)$：$x$是自然数，$I(x)$：$x$是整数<br>$∀x(N(x)→I(x))$</li><li><strong>有些自然数是偶数。</strong><br>设$N(x)$：$x$是自然数，$E(x)$：$x$是偶数<br>$∃x(N(x)\wedge{E(x)})$</li><li><strong>每个人都有一个生母。</strong><br>设$P(x)$：$x$是人，$M(x,y)$：$y$是$x$的生母<br>$∀x(P(x)→∃y(P(y)\wedge{M(x,y)}))$</li><li><strong>如果x是奇数，则2x是偶数。</strong><br>设谓词$O(x)$：$x$是奇数，$E(x)$：$x$是偶数<br>设客体函数$g(x)=2x$<br>$∀x(O(x)→E(g(x)))$</li></ul><p>从上面的例子中，我们不难发现：</p><ul><li>客体函数是 <strong>从论域到论域</strong> 的映射。</li><li>谓词是 <strong>从论域到${T, F}$</strong> 的映射。</li></ul><h2 id="谓词公式-1"><a href="#谓词公式-1" class="headerlink" title="谓词公式"></a>谓词公式</h2><p>称$n$元谓词$P(x_{1},x_{2},…,x_{n})$为<strong>原子谓词公式</strong>。</p><p>谓词合式公式(wff)，也称<strong>谓词公式</strong>，简称公式。</p><p>谓词公式的递归定义如下：</p><ol><li>原子谓词公式是合式公式。</li><li>如果$A$是合式公式，则$¬A$也是合式公式。</li><li>如果$A$、$B$是合式公式，则$(A∧B)$、$(A∨B)$、$(A→B)$、$(A↔B)$都是合式公式。</li><li>如果$A$是合式公式，$x$是$A$中的任何客体变元，则$∀xA$和$∃xA$也是合式公式。</li><li>只有有限次地按规则$1$至$4$求得的公式才是合式公式。</li></ol><p>为了方便，最外层括号可以省略，但是若量词后边有括号，则此括号不能省。说明：公式$∃x(A(x)→B(x))$中$∃x$后边的括号不是最外层括号，所以不可以省略。</p><p>在谓词公式中，量词的作用范围称之为量词的<strong>作用域</strong>，也叫量词的<strong>辖域</strong>。<br>一般地，如果量词后边只是一个原子谓词公式时，则该量词的辖域就是此原子谓词公式；如果量词后边是括号，则此括号所表示<br>的区域就是该量词的辖域；如果多个量词紧挨着出现，则后边的量词及其辖域就是前边量词的辖域。</p><h2 id="自由变元与约束变元"><a href="#自由变元与约束变元" class="headerlink" title="自由变元与约束变元"></a>自由变元与约束变元</h2><p>如果客体变元x在$∀x$或者$∃x$的辖域内，则$x$在此辖域内约束出现，称$x$在此辖域内是<strong>约束变元</strong>。否则$x$在此辖域内自由出现，称x在此辖域内是<strong>自由变元</strong>。</p><p>对自由变元和约束变元的说明：</p><ul><li>对约束变元用什么符号表示无关紧要。</li><li>一个谓词公式如果无自由变元，它就表示一个命题。</li><li>一个$n$元谓词$P(x_{1},x_{2},…,x_{n})$，若在前边添加$k$个量词，使其中的$k$个客体变元变成约束变元，则此$n$元谓词就变成了$n-k$元谓词。</li></ul><p>在一个谓词公式中，如果某个客体变元既以约束变元形式出现，又以自由变元形式出现，或者同一个客体变元受多个量词的约束，就容易产生混淆。为了避免此现象发生，可以对客体变元更改名称。</p><p>约束变元的改名规则：</p><ol><li>对约束变元可以更改名称，量词后的指导变元以及该量词的辖域内此客体变元出现的各处同时换名。</li><li>改名后用的客体变元名称，不能与该公式中其它客体变元名称相同。</li></ol><p>自由变元的代入规则：</p><ol><li>对谓词公式中的自由变元可以作代入。代入时需要对公式中出现该变元的每一处，同时作代入。</li><li>代入后的变元名称要与公式中的其它变元名称不同。</li></ol><h2 id="命题的符号化"><a href="#命题的符号化" class="headerlink" title="命题的符号化"></a>命题的符号化</h2><p>在谓词演算中，命题的符号化比较复杂，命题的符号表达式与论域有关系。</p><p>命题的符号表达式与论域有关。当论域扩大时，需要添加用来表示客体特性的谓词，称此谓词为<strong>特性谓词</strong>。特性谓词往往就是给定命题中量词后边的那个名词。<br>如何添加特性谓词，这是个十分重要的问题，这与前边的量词有关。如果前边是全称量词，特性谓词后边是蕴含联结词$→$；如果前边是存在量词，特性谓词后边是合取联结词$∧$。</p><h1 id="含有两个量词的谓词逻辑公式"><a href="#含有两个量词的谓词逻辑公式" class="headerlink" title="含有两个量词的谓词逻辑公式"></a>含有两个量词的谓词逻辑公式</h1><ol><li>$∀x∀yA(x,y)⇔∀y∀xA(x,y)$</li><li>$∀x∀yA(x,y)⇒∃y∀xA(x,y)$</li><li>$∃y∀xA(x,y)⇒∀x∃yA(x,y)$</li><li>$∀x∃yA(x,y)⇒∃y∃xA(x,y)$</li><li>$∀y∀xA(x,y)⇒∃x∀yA(x,y)$</li><li>$∃x∀yA(x,y)⇒∀y∃xA(x,y)$</li><li>$∀y∃xA(x,y)⇒∃x∃yA(x,y)$</li><li>$∃x∀∃A(x,y)⇔∃y∃xA(x,y)$</li></ol><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%B0%93%E8%AF%8D%E9%80%BB%E8%BE%91/1.png"></p><h1 id="前束范式"><a href="#前束范式" class="headerlink" title="前束范式"></a>前束范式</h1><p>如果一个谓词公式符合下面条件，它就是<strong>前束范式</strong>：</p><ul><li>所有量词前面都没有联接词。</li><li>所有量词都在公式的左面。</li><li>所有量词的辖域都延伸到公式的末尾。</li></ul><p>给定一个带有量词的谓词公式，前束范式的写法：</p><ol><li>为了便于量词辖域的扩充，消去公式中的联接词$→$和$↔$。</li><li>如果量词前有$¬$，则用量词否定公式将$¬$后移。再用摩根定律或求公式的否定公式，将$¬$后移到原子谓词公式之前。</li><li>为了便于量词辖域的扩充，用约束变元的改名规则或自由变元的代入规则对变元换名。</li><li>用量词辖域扩充公式提取量词，使之成为前束范式形式。</li></ol><p><strong>前束析取范式</strong>是量词后的括号内是析取范式形式的前束范式。<br><strong>前束合取范式</strong>是量词后的括号内是合取范式形式的前束范式。</p><h1 id="谓词逻辑推理"><a href="#谓词逻辑推理" class="headerlink" title="谓词逻辑推理"></a>谓词逻辑推理</h1><p>可以从<a href="https://blankspace.blog.csdn.net/article/details/113765513">命题逻辑推理</a>中引入推理规则$P$(引入前提规则)、推理规则$T$(引入结论规则)、推理规则$CP$(条件证明规则)。</p><p>新引入四种推理规则：</p><ul><li>全称特指规则$US$ (Universal Specialization)<ul><li>形式： $∀xA(x)⇒A(c)$ (其中$c$是论域内指定客体)。</li><li>含义：如果$∀xA(x)$为真，则在论域内任何指定客体$c$，都使得$A(c)$为真。</li><li>作用：去掉全称量词。</li><li>要求：$c$不是$A(x)$中的符号。</li></ul></li><li>存在特指规则$ES$ (Existential Specialization)<ul><li>形式：$∃xA(x)⇒A(c)$ (其中$c$是论域内指定客体)。</li><li>含义：如果$∃xA(x)$为真，则在论域内指定客体$c$，都使得$A(c)$为真。</li><li>作用：去掉存在量词。</li><li>要求：<ul><li>$c$不是$A(x)$中的符号。</li><li>用$ES$指定的客体$c$不应该是在此之前用$US$规则或者用$ES$规则所指定的客体$c$(即本次用$ES$特指客体$c$，不应该是以前特指的客体)。</li></ul></li></ul></li><li>存在推广规则$EG$ (Existential Generalization)<ul><li>形式：$A(c)⇒∃xA(x)$ (其中$c$是论域内指定客体)。</li><li>含义：如果在论域内指定客体$c$使得$A(c)$为真，则$∃xA(x)$为真。</li><li>作用：添加存在量词。</li><li>要求：$x$不是$A(c)$中的符号。</li></ul></li><li>全称推广规则$UG$ (Universal Generalization)<ul><li>形式：$A(c)⇒∀xA(x)$ (其中$c$是论域内任何指定客体)。</li><li>含义：如果在论域内任何指定客体$c$都使得$A(c)$为真，则$∀xA(x)$为真。</li><li>作用：添加全称量词。</li><li>要求：<ul><li>$x$不是$A(c)$中的符号。</li><li>$c$一定是任意的客体，否则不可全称推广。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重要等价公式和重言蕴含式</title>
      <link href="/2021/02/10/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/chong-yao-deng-jie-gong-shi-he-chong-yan-yun-han-shi/"/>
      <url>/2021/02/10/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/chong-yao-deng-jie-gong-shi-he-chong-yan-yun-han-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="等价公式"><a href="#等价公式" class="headerlink" title="等价公式"></a>等价公式</h1><ol><li>$¬¬P⇔P$</li><li>$P\wedge{Q}⇔Q\wedge{P}$</li><li>$P\vee{Q}⇔Q\vee{P}$</li><li>$(P\wedge{Q})\wedge{R}⇔P\wedge{(Q\wedge{R})}$</li><li>$(P\vee{Q})\vee{R}⇔P\vee{(Q\vee{R})}$</li><li>$P\wedge{(Q\vee{R})}⇔{(P\wedge{Q})}\vee{(P\wedge{R})}$</li><li>$P\vee{(Q\wedge{R})}⇔{(P\vee{Q})}\wedge{(P\vee{R})}$</li><li>$\textcolor{red}{¬{(P\wedge{Q})}⇔{¬P}\vee{¬Q}}$</li><li>$¬{(P\vee{Q})}⇔{¬P}\wedge{¬Q}$</li><li>$P\vee{P}⇔P$</li><li>$P\wedge{P}⇔P$</li><li>$R\vee{(P\wedge{¬P})}⇔R$</li><li>$R\wedge{(P\vee{¬P})}⇔R$</li><li>$R\vee{(P\vee{¬P})}⇔T$</li><li>$R\wedge{(P\wedge{¬P})}⇔F$</li><li>$\textcolor{red}{P→Q⇔¬P\vee{Q}}$</li><li>$¬(P→Q)⇔P\wedge{¬Q}$</li><li>$P→Q⇔¬Q→¬P$</li><li>$P→(Q→R)⇔(P\wedge{Q})→R$</li><li>$\textcolor{red}{P↔Q⇔(P→Q)\wedge{(Q→P})⇔(¬P\vee{Q})\wedge{(P\vee{¬Q})}}$</li><li>$\textcolor{red}{P↔Q⇔(P\wedge{Q})\vee{(¬P\wedge{¬Q})}}$</li><li>$¬(P↔Q)⇔P↔¬Q$</li><li>$(∃x)(A(x)∨B(x))⇔(∃x)A(x)∨(∃x)B(x)$</li><li>$(∀x)(A(x)∧B(x))⇔(∀x)A(x)∧(∀x)B(x)$</li><li>$\textcolor{red}{¬(∃x)A(x)⇔(∀x)¬A(x)}$</li><li>$\textcolor{red}{¬(∀x)A(x)⇔(∃x)¬A(x)}$</li><li>$(∀x)(A∨B(x))⇔A∨(∀x)B(x)$</li><li>$(∃x)(A∧B(x))⇔A∧(∃x)B(x)$</li><li>$(∃x)(A(x)→B(x))⇔(∀x)A(x)→(∃x)B(x)$</li><li>$\textcolor{red}{(∀x)A(x)→B⇔(∃x)(A(x)→B)}$</li><li>$\textcolor{red}{(∃x)A(x)→B⇔(∀x)(A(x)→B)}$</li><li>$A→(∀x)B(x)⇔(∀x)(A→B(x))$</li><li>$A→(∃x)B(x)⇔(∃x)(A→B(x))$</li></ol><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>E1也称<strong>对合律</strong></li><li>E2、E3也称<strong>交换律</strong></li><li>E4、E5也称<strong>结合律</strong></li><li>E6、E7也称<strong>分配律</strong></li><li>E8、E9也称<strong>德摩根律</strong></li><li>E10、E11也称<strong>幂等律</strong></li><li>E12、E13也称<strong>同一律</strong></li><li>E14、E15也称<strong>零律</strong></li><li>$P\vee{(P\wedge{Q})}⇔P$、$P\wedge{(P\vee{Q})}⇔P$也称<strong>吸收律</strong></li><li>$P\vee{¬P}⇔T$、$P\wedge{¬P}⇔F$也称<strong>互补律</strong></li><li>可以结合<strong>对偶原理</strong>来理解记忆</li></ol><h1 id="重言蕴含式"><a href="#重言蕴含式" class="headerlink" title="重言蕴含式"></a>重言蕴含式</h1><ol><li>$P\wedge{Q}⇒P$</li><li>$P\wedge{Q}⇒Q$</li><li>$\textcolor{red}{P⇒P\vee{Q}}$</li><li>$\textcolor{red}{Q⇒P\vee{Q}}$</li><li>$¬P⇒P→{Q}$</li><li>$Q⇒P→{Q}$</li><li>$\textcolor{red}{¬(P→{Q})⇒P}$</li><li>$\textcolor{red}{¬(P→{Q})⇒¬Q}$</li><li>$P,Q⇒P\wedge{Q}$</li><li>$¬P\wedge{(P\vee{Q})}⇒Q$</li><li>$\textcolor{red}{P\wedge{(P→{Q})}⇒Q}$</li><li>$\textcolor{red}{¬Q\wedge{(P→{Q})}⇒¬P}$</li><li>$(P→{Q})\wedge{(Q→{R})}⇒P→{R}$</li><li>$\textcolor{red}</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命题逻辑基础理论</title>
      <link href="/2021/02/08/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/ming-ti-luo-ji-ji-chu-li-lun/"/>
      <url>/2021/02/08/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/ming-ti-luo-ji-ji-chu-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="数理逻辑"><a href="#数理逻辑" class="headerlink" title="数理逻辑"></a>数理逻辑</h1><p>逻辑是是研究人的思维的科学。逻辑包括辩证逻辑和形式逻辑。辩证逻辑是研究人的思维中的辩证法；形式逻辑是研究人的思维的形式和一般规律。离散数学只研究<strong>形式逻辑</strong>，数理逻辑正是用数学的方法研究形式逻辑。</p><p>形式逻辑主要研究推理。推理是由若干个已知的判断(前提)，推出新的判断(结论)的思维过程。推理可以分为类比推理、归纳推理、演绎推理。类比推理由个别事实推出个别结论；归纳推理由若干个别事实推出一般结论；演绎推理由一般规律推出个别事实。形式逻辑主要是研究<strong>演绎推理</strong>的。</p><p>数理逻辑的主要内容包括：逻辑演算、证明论、公理集合论、递归论、模型论。数理逻辑最基础的内容就是<strong>命题逻辑</strong>和<strong>谓词逻辑</strong>。</p><h1 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h1><p><strong>命题</strong>是一个能确定是真的或是假的判断。命题的判断都是用陈述句表示的。</p><p>一个命题所作的判断有两种可能：是正确的判断或者是错误的判断。所以，一个命题的真值有两个：“<strong>真</strong>”或“<strong>假</strong>”。命题真值为真，即一个命题所作的判断与客观一致,则称该命题的真值为真，记作$T$(True)；命题真值为假，即一个命题所作的判断与客观不一致，则称该命题的真值为假，记作$F$(False)。</p><p><strong>简单命题</strong>，也称原子命题，是由最简单的陈述句构成的命题。描述简单命题的陈述句不能分解成更简单的句子。简单命题通常用大写英文字母表示。</p><p><strong>复合命题</strong>是用<strong>联结词</strong>将原子命题联结起来构成的。常见的六种逻辑联结词是：否定($¬$)、合取($\wedge$)、析取($\vee$)、异或($\overline\vee$)、蕴含($→$)、等价($↔$)。</p><h1 id="联结词的自然语言表述"><a href="#联结词的自然语言表述" class="headerlink" title="联结词的自然语言表述"></a>联结词的自然语言表述</h1><ul><li><strong>否定</strong>：$¬$<ul><li>……不成立</li><li>不……</li></ul></li><li><strong>合取</strong>：$\wedge$<ul><li>并且</li><li>不但……而且……</li><li>既……又……</li><li>尽管……还……</li></ul></li><li><strong>析取</strong>：$\vee$<ul><li>或者（注意语义）</li></ul></li><li><strong>异或</strong>：$\overline\vee$<ul><li>或者（注意语义）</li></ul></li><li><strong>蕴含</strong>：$→$<ul><li>如果……则……</li><li>只要……就……</li><li>若……则……</li><li>只有……才……</li><li>仅当……，……</li><li>……，仅当……</li></ul></li><li><strong>等价</strong>：$↔$<ul><li>当且仅当</li><li>充分且必要</li></ul></li></ul><h2 id="逻辑蕴含"><a href="#逻辑蕴含" class="headerlink" title="逻辑蕴含"></a>逻辑蕴含</h2><p>逻辑蕴含式$P→Q$中，$P$是$Q$的充分条件，$Q$是$P$的必要条件。</p><p>充分条件：只要条件成立，结论就成立。</p><p>自然语言中表示充分条件的词语：</p><ul><li>如果……则……</li><li>只要……就……</li><li>若……则……</li></ul><p>必要条件：如果该条件不成立，则结论就不成立。</p><p>自然语言中表示必要条件的词语：</p><ul><li>只有……才……</li><li>仅当……，……</li><li>……，仅当……</li></ul><p>例题：$P$：天气好，$Q$：我去公园。</p><ol><li>如果天气好，我就去公园：$P→Q$</li><li>只要天气好，我就去公园：$P→Q$</li><li>天气好，我就去公园：$P→Q$</li><li>仅当天气好，我才去公园：$Q→P$</li><li>只有天气好，我才去公园：$Q→P$</li><li>我去公园，仅当天气好：$Q→P$</li></ol><h1 id="命题公式"><a href="#命题公式" class="headerlink" title="命题公式"></a>命题公式</h1><p><strong>加粗样式</strong>常值命题：即前面所说的命题，它是有具体含义(真值)的。</p><p><strong>命题变元</strong>：用大写的英字母如$P$、$Q$等表示任何命题，这些字母为命题变元。<br>对命题变元作<strong>指派</strong>(给命题变元一个解释)：将一个常值命题赋予命题变元的过程，或者是直接赋给命题变元真值$T$或$F$的过程。<br>命题变元本身不是命题，只有给它作指派，才变成命题。</p><p><strong>合式公式</strong>(wff)的定义是递归的，1是递归的基础，由1开始，使用2和3规则，可以得到任意的合式公式。</p><ol><li>单个命题变元是个合式公式。</li><li>若$A$是合式公式，则$¬A$是合式公式。</li><li>若$A$和$B$是合式公式，则$(A∧B)$，$(A∨B)$、$(A→B)$、$(A↔B)$都是合式公式。</li><li>当且仅当有限次地应用1、2、3得到的含有命题变元、联结词和括号的符号串是合式公式。</li></ol><p>这里所谓的合式公式可以解释为合法的命题公式之意，也称之为<strong>命题公式</strong>，有时也简称<strong>公式</strong>。按照合式公式的定义，最外层的括号必须写。方便起见，可以约定，最外层括号可以省略。一个命题公式不是复合命题，所以它没有真值，但是给其中的所有命题变元作指派以后它就有了真值。</p><p>由于对每个命题变元可以有两个真值$(T,F)$被指派，所以有$n$个命题变元的命题公式$A(P_{1},P_{2},…,P_{n})$的<strong>真值表</strong>有$2^n$行。<br>为有序地列出$A(P_{1},P_{2},…,P_{n})$的真值表，可将$F$看成$0$、$T$看成$1$，按二进制数次序列表。<br>真值表示例：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/1.png"></p><h1 id="命题符号化"><a href="#命题符号化" class="headerlink" title="命题符号化"></a>命题符号化</h1><p>所谓命题符号化，就是用命题公式的符号串来表示给定的命题。</p><p>命题符号化的方法：</p><ol><li>首先要明确给定命题的含义。</li><li>对于复合命题，找联结词，用联结词断句，分解出各个原子命题。</li><li>设原子命题符号，并用逻辑联结词联结原子命题符号，构成给定命题的符号表达式。</li></ol><h2 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h2><p>说离散数学无用且枯燥无味是不对的。</p><p>$P$：离散数学是有用的<br>$Q$：离散数学是枯燥无味的</p><p>$¬(¬P\wedge{Q})$</p><h2 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h2><p>如果小张与小王都不去，则小李去。</p><p>P：小张去<br>Q：小王去<br>R：小李去</p><p>$(¬P\wedge{¬Q})→R$</p><p>如果小张与小王不都去，则小李去。</p><p>$¬(P\wedge{Q})→R$</p><p>$(¬P\vee{¬Q})→R$</p><h2 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h2><p>仅当天不下雨且我有时间，才上街。<br>P：天下雨<br>Q：我有时间<br>R：我上街</p><p>$R→(¬P\wedge{Q})$</p><h2 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h2><p>人不犯我，我不犯人；人若犯我，我必犯人。</p><p>P：人犯我<br>Q：我犯人</p><p>$P↔Q$</p><h2 id="例5"><a href="#例5" class="headerlink" title="例5"></a>例5</h2><p>若天不下雨，我就上街；否则在家。</p><p>P：天下雨<br>Q：我上街<br>R：我在家</p><p>$\textcolor{red}{(¬P→Q)\wedge(P→R)}$</p><p>注意中间的联结词是$\wedge$，而不是$\vee$或者$⊻$。<br>因为原命题表示：“天不下雨时我做什么，天下雨我又做什么”的两种作法，其中有一种作法是假的，则我说的就是假话，所以中间的联结词一定是$\wedge$。<br>如果用$\vee$，就表明两种作法都是假的时候，我说的才是假话，这显然不对。而实际上此时表达式真值总是真的，这更不符合实际了。<br>如果用$⊻$，则“天没下雨而我没上街”时，即$P$、$Q$均假的时候，表达式为真，这不合实际。</p><h1 id="重言式和重言蕴含式"><a href="#重言式和重言蕴含式" class="headerlink" title="重言式和重言蕴含式"></a>重言式和重言蕴含式</h1><p>不论$P$取什么真值，$¬P∨P$的真值总是为真，$¬P∨P$的真值总是为假。$¬P∨P$是重言式(永真式)，称$¬P∧P$为矛盾式(永假式)。</p><p>$A(P_{1},P_{2},…,P_{n})$是含有命题变元$P_{1},P_{2},…,P_{n}$的命题公式，如不论对$P_{1},P_{2},…,P_{n}$作任何指派，都使得$A(P_{1},P_{2},…,P_{n})$为真(假)，则称之为<strong>重言式</strong>(<strong>矛盾式</strong>), 也称之为<strong>永真式</strong> (<strong>永假式</strong>)。</p><p>重言式的证明方法：</p><ul><li>列真值表。</li><li>利用公式作等价变换，化简成$T$。</li><li>用公式的主析取范式。</li></ul><p>而对于重言式：</p><ol><li>如果$A$是永真式，则$¬A$是永假式。</li><li>如果$A$、$B$是永真式，则$(A∧B)$、$(A∨B)$、$(A→B)$和$(A↔B)$也都是永真式。</li><li>如果$A$是永真式，则$A$的置换例式也是永真式。</li></ol><p>$A(P_{1},P_{2},…,P_{n})$是含有命题变元$P_{1},P_{2},…,P_{n}$的命题公式，如果用合式公式$X$替换某个$P_{i}$(如果$P_{i}$在$A(P_{1},P_{2},…,P_{n})$中多处出现，则各处均用X替换 )，其余变元不变，替换后得到新的公式$B$，则称$B$是$A(P_{1},P_{2},…,P_{n})$ 的<strong>置换例式</strong>。</p><p>如果可以断定给定公式是某个重言式的置换例式的话，则这个公式也是重言式。</p><p>如果公式$A→B$是重言式，则称$A$重言(永真)蕴涵$B$，记作$A⇒B$。<br>符号$⇒$不是联结词，它是表示公式间的重言蕴涵关系，也可以看成是推导关系。即$A⇒B$可以理解成由$A$可推出$B$，即由$A$为真，可以推出$B$也为真。</p><p>重言蕴涵式的证明方法：</p><ul><li>列真值表。</li><li>假设前件为真，推出后件也为真。</li><li>假设后件为假，推出前件也为假。</li></ul><p>重言蕴涵式的性质：</p><ul><li>自反性：对任何命题公式$A$，有$A⇒A$。</li><li>传递性：若$A⇒B$且$B⇒C$，则$A⇒C$</li><li>反对称性：若$A⇒B$且$B⇒A$，则$A⇔B$(符号$⇔$表示等价)</li></ul><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/113780786">重要等价公式和重言蕴含式</a></p><h1 id="等价公式"><a href="#等价公式" class="headerlink" title="等价公式"></a>等价公式</h1><p>$A$、$B$是含有命题变元$P_{1},P_{2},…,P_{n}$的命题公式，如不论对$P_{1},P_{2},…,P_{n}$作任何指派，都使得$A$和$B$的真值相同，则称之为$A$与$B$等价，记作$A⇔B$。</p><p>等价公式的证明方法：</p><ul><li>列真值表。</li><li>用公式的等价变换。</li></ul><p>置换定律：$A$是一个命题公式，$X$是$A$中的一部分且也是合式公式，如果$X⇔Y$，用$Y$代替$A$中的$X$得到公式$B$，则$A⇔B$。<br>应用置换定律以及已知的等价公式可以对给定公式进行等价变换。</p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/113780786">重要等价公式和重言蕴含式</a></p><p>等价公式的性质：</p><ul><li>有自反性：任何命题公式$A$，有$A⇔A$。</li><li>有对称性：若$A⇔B$，则$B⇔A$。</li><li>有传递性：若$A⇔B$且$B⇔C$，则$A⇔C$。</li><li>如果$A(P_{1},P_{2},…,P_{n})⇔B(P_{1},P_{2},…,P_{n})$，则$A(¬P_{1},¬P_{2},…,¬P_{n})⇔B(¬P_{1},¬P_{2},…,¬P_{n})$。</li></ul><p>在一个只含有联结词$¬$、$∨$、$∧$的公式$A$中，将$∨$换成$∧$，$∧$换成$∨$，$T$换成$F$，$F$换成$T$，其余部分不变，得到另一个公式$A^{<em>}$，称$A$与$A^{</em>}$互为<strong>对偶式</strong>。</p><p>令$A(P_{1},P_{2},…,P_{n})$是一个只含有联结词$¬$、$∨$、$∧$的命题公式，则$¬A(P_{1},P_{2},…,P_{n})⇔A^{<em>}(¬P_{1},¬P_{2},…,¬P_{n})$。<br>推论：$A(¬P_{1},¬P_{2},…,¬P_{n})⇔¬A^{</em>}(P_{1},P_{2},…,P_{n})$。</p><p>对偶原理：令$A(P_{1},P_{2},…,P_{n})$、$B(P_{1},P_{2},…,P_{n})$是只含有联结词$¬$、$∨$、$∧$的命题公式，则如果$A(P_{1},P_{2},…,P_{n})⇔B(P_{1},P_{2},…,P_{n})$则$A^{<em>}(P_{1},P_{2},…,P_{n})⇔B^{</em>}(P_{1},P_{2},…,P_{n})$。</p><h1 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h1><p>范式就是命题公式形式的规范形式。约定在范式中只含有联结词$¬$、$∨$、$∧$。</p><p>合取式是用“∧”联结命题变元或变元的否定构成的式子。析取式是用“∨” 联结命题变元或变元的否定构成的式子。</p><p>析取范式以$\vee$连接的合取式组成。合取范式以$\wedge$连接的析取式组成。</p><p>小项要求n个命题变元的合取式中，每个变元出现且只出现一次。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/2.png"></p><p>小项的性质：</p><ul><li>有$n$个变元，就有$2^{n}$个小项</li><li>每组指派有且只有一个小项为T</li></ul><p>析取各个小项组成的析取范式被称为主析取范式。</p><p>大项要求n个命题变元的析取式中，每个变元出现且只出现一次。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91/3.png"></p><p>大项的性质：</p><ul><li>有$n$个变元，就有$2^{n}$个大项</li><li>每组指派有且只有一个小项为F</li></ul><p>合取各个大项组成的合取范式被称为主合取范式。</p><h1 id="命题逻辑推理"><a href="#命题逻辑推理" class="headerlink" title="命题逻辑推理"></a>命题逻辑推理</h1><p><strong>推理</strong>就是根据一个或几个已知的判断得出一个新的判断的思维过程。这些已知的判断为<strong>前提</strong>。得到的新的判断为前提的<strong>有效结论</strong>。</p><p>推理方法：</p><ul><li>直接推理，从前提直接推出结论。要写明：步骤号、给定前提或得出的结论、推理时所用规则、此结论是从哪几步得到的以及所用公式。<ul><li>推理规则$P$(引入前提规则)：在推理过程中，可以随时引入前提。</li><li>推理规则$T$(引入结论规则)：在推理过程中，如果前边有一个或几个公式永真蕴涵公式S，则可将S纳入推理过程中。</li></ul></li><li>条件论证，如果$H_{1}∧H_{2}∧…∧H_{n}∧R⇒Ｓ$，则$H_{1}∧H_{2}∧…∧H_{n}⇒R→S$。<ul><li>推理规则$CP$(条件证明规则)：如果$H_{1}∧H_{2}∧…∧H_{n}∧R⇒Ｓ$，则$H_{1}∧H_{2}∧…∧H_{n}⇒R→S$。</li><li>P(附加前提)</li></ul></li><li>反证法，若要证明相容的公式集合${H_{1},H_{2},… H_{n}}$可以推出公式$C$，只要证明$H_{1}∧H_{2}∧…∧H_{n}∧¬C$是个矛盾式即可。<ul><li>P(假设前提)</li></ul></li></ul><h1 id="联结词的全功能集"><a href="#联结词的全功能集" class="headerlink" title="联结词的全功能集"></a>联结词的全功能集</h1><p>给定一个联结词集合，如果任何一个命题公式都可以用此集合中的联结词表示，则称为此联结词集合是<strong>全功能集</strong>。</p><p>如果一个联结词的全功能集中不含有冗余的联结词，则称它是<strong>极小全功能集</strong>。</p><p>除了常见的逻辑联结词$¬$、$\wedge$、$\vee$、$→$、$↔$，以外，还可以定义两个比较特殊的联结词：</p><ul><li>$↑$：$P↑Q⇔¬(P\wedge{Q})$</li><li>$↓$：$P↓Q⇔¬(P\vee{Q})$</li></ul><p>真正的极小全功能集有：${¬, \wedge}$、${¬, \vee}$、${↑}$、${↓}$。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分层抽象</title>
      <link href="/2021/02/06/ji-suan-ji-ke-xue-ji-chu/fen-ceng-chou-xiang/"/>
      <url>/2021/02/06/ji-suan-ji-ke-xue-ji-chu/fen-ceng-chou-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="分层抽象"><a href="#分层抽象" class="headerlink" title="分层抽象"></a>分层抽象</h1><p>分层抽象是计算机科学和软件工程的重要思想，是<a href="https://blankspace.blog.csdn.net/article/details/113634653">控制复杂性的重要手段</a>。</p><h1 id="电子计算机的分层抽象"><a href="#电子计算机的分层抽象" class="headerlink" title="电子计算机的分层抽象"></a>电子计算机的分层抽象</h1><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/113634653">电子计算机的分层抽象</a></p><p>下图是对电子计算机的分层抽象，这里将计算机分为九层：应用程序层、操作系统层、体系结构层、微结构层、逻辑层、数字电路层、模拟电路层、器件层、物理层。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/1.png"></p><p>下面自顶向下地介绍电子计算机的每一层：</p><ol><li>应用软件基于操作系统实现多种多样的应用功能。</li><li>操作系统是和硬件最为密切的程序，既是资源分配器，又控制各着种I/O设备和用户程序的需求。</li><li>体系结构描述的是程序员观点的计算机抽象。</li><li>微结构层将逻辑组件组合在一起以实现体系结构中定义的指令。</li><li>逻辑层关注的是由数字电路层的逻辑门构成的逻辑组件，如加法器等。</li><li>数字电路层关注的是逻辑门，电压被控制为离散的值表示为0和1。</li><li>模拟电路层关注的是器件组合在一起构成的放大器等组件，输入输出都是连续的电压值。</li><li>器件层关注的是晶体管、真空管等电子元器件，这些器件都有明确的外部连接点terminal，建立起了每个terminal上电压与电流之间的关系模型。</li><li>物理层关注的是电子运动，由麦克斯韦方程组、量子力学等支持。</li></ol><h1 id="网络通信的分层抽象"><a href="#网络通信的分层抽象" class="headerlink" title="网络通信的分层抽象"></a>网络通信的分层抽象</h1><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/105528356">计算机网络核心知识归纳总结</a></p><p>OSI七层参考模型：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/2.png"></p><p>TCP/IP五层参考模型：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/3.png"></p><p>计算机网络中：</p><ul><li>实体表示任何可发送或接收信息的硬件或软件进程。 </li><li>协议是控制两个对等实体进行通信的规则的集合。 <ul><li>在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。</li><li>要实现本层协议，还需要使用下层所提供的服务。 </li><li>本层的服务用户只能看见服务而无法看见下面的协议。</li><li>下面的协议对上面的服务用户是透明的。 </li><li>协议是“水平的”，即协议是控制对等实体之间通信的规则。</li></ul></li><li>接口定义了下层向上层提供的原语操作和服务。</li><li>服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。</li><li>同一系统相邻两层的实体进行交互的地方，称为服务访问点 SAP(Service Access Point)。</li></ul><p>下面自顶向下地介绍TCP/IP五层模型的每一层：</p><ul><li>应用层：应用层为用于通信的应用程序和用于消息传输的底层网络提供接口，是应用层协议得以存在和网络应用得以实现的地方。</li><li>传输层：传输层为两个不同主机上的进程提供逻辑上的通信，又称为端到端的通信。所谓“逻辑通信”的意思是：运输层之间的通信好像是沿水平方向传送数据，但事实上这两个运输层之间并没有一条水平方向的物理连接。运输层的一个很重要的功能就是复用和分用。应用层不同进程的报文通过不同的端口向下交到运输层，再往下就共用网络层提供的服务。</li><li>网络层：网络层将报文段从发送端主机传送到接收端主机。在发送端，将报文段封装成数据报；在接收端，将报文段传输到传输层。路由器检查每个到达的IP数据报的首部，进行路由选择和转发。</li><li>数据链路层：数据链路层提供帧同步、寻址、流量控制、差错控制、数据和控制信息的识别、透明传输、链路管理等服务。</li><li>物理层：物理层为数据端设备提供传送数据通路、传输数据。</li></ul><h1 id="操作系统的分层抽象"><a href="#操作系统的分层抽象" class="headerlink" title="操作系统的分层抽象"></a>操作系统的分层抽象</h1><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/128744560">操作系统</a></p><p>基于适当的硬件支持，操作系统可分成许多块。分块后的操作系统能更好地控制计算机并使用计算机的应用程序，在改变系统的内部工作和创建模块操作系统时，开发人员也能有更多自由。因此，操作系统的设计者可以采用自顶向下的方法，可先确定总的功能和特征，再划分成模块。信息隐藏也很重要，因为它在保证程序接口不变和程序执行功能不变的前提下，允许程序员自由实现低层程序。</p><p>操作系统的模块化有许多方法，其中之一就是分层法。所谓分层法，即操作系统分成若干层(级)。最低层是硬件，最高层是<a href="https://blankspace.blog.csdn.net/article/details/113446238">用户接口</a>。而中间的各个操作系统层采用抽象对象类型ADT，包括数据结构和一组可为更高层所调用的程序集，该层可调用更低层的操作。</p><p>分层法构造操作系统的主要优点在于简化了构造和调试。所选的层次要求每层只能调用更低层的功能和服务，大大简化了系统的调试和验证。第一层可先调试而无需考虑系统其他部分，这是因为根据定义，它只使用了基本硬件(假设硬件是正确的)，以便实现功能。一旦第一层调试后，可认为它能正确运行，这样就可调试第二层，如此向上逐层调试。如果在调试某层时发现错误，那么错误可以定位到这一层。</p><p>分层操作系统的每层的实现都只是利用更低层所提供的操作，且只需知道这些操作做了什么，而并不需要知道这些操作是如何实现的。因此，每层要为更高层隐藏一定的数据结构、操作和硬件。</p><p>分层法的主要难点在于合理定义各层。由于每层只能利用更低层的功能，因此有必要仔细规划。</p><p>分层实现的主要问题之一是效率较低。例如，当一个用户程序执行I/O操作时，它执行系统调用并陷入IO层，IO层会调用内存管理层，内存管理层接着调用CPU调度层,最后传递到硬件。在每一层，参数可能会被修改，数据可能需要传递，这些操作都会降低执行效率、增加额外开销。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/4.png"></p><h1 id="软件架构的分层抽象"><a href="#软件架构的分层抽象" class="headerlink" title="软件架构的分层抽象"></a>软件架构的分层抽象</h1><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>三层架构每一层的职能如下：</p><ul><li>表示层：表示层为用户提供了一种交互式操作界面。</li><li>业务逻辑层：业务逻辑层是表示层与数据访问层的桥梁，负责数据的处理和传递，执行复杂业务逻辑。</li><li>数据访问层：数据访问层实现了对数据的增删改查操作。</li></ul><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/5.png"></p><p>比起三层架构，更简单的两层架构是这样的：数据访问和业务逻辑混在一起；用户界面直接调用数据访问；整个系统功能放在同一个项目中实现。</p><p>这是很多不熟悉三层架构的初学者喜欢的模式，它的问题主要是：难以适应需求的变化、不易维护、安全性差。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/6.png"></p><p>而对于三层架构，当数据库或用户界面发生改变时，不需要完全重新开发，只需做简单调整即可。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/7.png"></p><h2 id="三层架构的层间关系"><a href="#三层架构的层间关系" class="headerlink" title="三层架构的层间关系"></a>三层架构的层间关系</h2><p>层间依赖关系：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/8.png"></p><p>层间数据流向：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/9.png"></p><h2 id="三层架构与实体类"><a href="#三层架构与实体类" class="headerlink" title="三层架构与实体类"></a>三层架构与实体类</h2><p>三层架构的层与层之间传递的是实体对象。实体对象是实体类的实例化，是完全受控制的对象。实体对象消除了关系数据和对象之间的差异，具有OOP的基本特征，可以自定义行为。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/10.png"></p><p>软件工程实践中，实体类有很多种，例如BO、DAO、DO、DTO、PO、POJO、VO，其中最常经典的是DAO、PO、VO。</p><p>DAO通常和PO结合使用，用于访问数据库，包含了各种数据库的操作方法，这些方法能实现功能；配合VO，提供数据库的CRUD操作。</p><p>PO是在O/R映射的时候出现的概念，如果没有O/R映射，就没有这个概念存在了。PO通常对应数据模型(数据库表)，本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的Java对象。最简单的PO就是对应数据库中某个表中的一条记录，多个记录可以用PO的集合。PO中应该不包含任何对数据库的操作。</p><p>VO通常用于业务层之间的数据传递，和PO一样也是仅仅包含数据而已。VO抽象出的业务对象，可以和表对应，也可以不对应，可根据业务的需要自己选择。VO主要对应界面显示的数据对象。对于一个Web页面，或者Swing等的一个界面，用一个VO对象对应整个界面的值。</p><h2 id="三层架构和MVC模式"><a href="#三层架构和MVC模式" class="headerlink" title="三层架构和MVC模式"></a>三层架构和MVC模式</h2><ul><li>MVC是一种设计模式，我们可以用它来创建在域对象和UI表示层对象之间的区分。</li><li>同样是架构级别的，相同的地方在于二者都有一个表现层，但是他们不同的地方在于其他的两个层。</li><li>三层架构中没有定义Controller的概念，这是两者最不同的地方。而MVC也没有把业务的逻辑访问看成两个层，这是采用三层架构或MVC搭建程序最主要的区别。</li><li>三层架构中也提到了Model，但是三层架构中Model的概念与MVC中Model的概念是不一样的。三层架构中典型的Model层是以实体类构成的；而MVC里Model则是由业务逻辑与访问数据组成的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电子计算机的分层抽象</title>
      <link href="/2021/02/04/ji-suan-ji-ke-xue-ji-chu/dian-zi-ji-suan-ji-de-fen-ceng-chou-xiang/"/>
      <url>/2021/02/04/ji-suan-ji-ke-xue-ji-chu/dian-zi-ji-suan-ji-de-fen-ceng-chou-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="控制复杂性的方法"><a href="#控制复杂性的方法" class="headerlink" title="控制复杂性的方法"></a>控制复杂性的方法</h1><p>电子计算机有着比较复杂的结构，而<a href="https://blankspace.blog.csdn.net/article/details/101912284">控制复杂性</a>的关键做法之一正是抽象，即隐蔽不需要的细节。</p><p>补充~控制复杂性的方法：</p><ol><li><p>抽象（abstraction）<br>抽象是控制复杂性的关键技术，它的目的在于隐蔽不需要的细节。<br>一个系统可以从多个不同层面抽象，抽象到何种层次合适由问题本身决定，需要具体问题具体分析。<br>值得指出的是，当处于某个抽象层次的时候，最好是对当前抽象层次之上和之下都有一定的了解。计算机科学家不可能在不理解程序运行平台体系系结构的情况下充分优化代码；器件工程师也不可能在不了解晶体管具体用途的情况下在设计晶体管的时候作出明智的选择。</p></li><li><p>约束（discipline）<br>约束是对设计选择的一种内在限制，通过这种限制可以更有效地在更高地抽象层次上工作。<br> 部件可互换、可由不同地方生产，但每个合格的组件都被限定为一个误差允许范围内的标准集合，从而可以简单快速的组件系统，降低复杂度。</p></li><li><p>三Y原则 </p><ol><li>层次化（hierarchy）<br> 将系统划分为若干模块，然后更进一步划分每个模块直到这些模块可以很容易理解。<br> 这种模块被组件化，可以规则性地描述。</li><li>模块化（modularity）<br> 所有模块定义好的功能和接口，以便它们之间可以很容易地相互连接而不是会产生意想不到的副作用。<br> 每个模块都需要有明确的功能和接口，且不对其他模块产生影响。<br> 模块之间的耦合通过接口进行，而非通过某种具体实现。</li><li>规整化（regularity）<br>     在模块之间寻求一致，通用的模块可以重新使用多次，以减少不同模块的数量。<br>     此外，做到了规整化，互换部件也是可实现的好方法。</li></ol></li></ol><h1 id="电子计算机分层抽象"><a href="#电子计算机分层抽象" class="headerlink" title="电子计算机分层抽象"></a>电子计算机分层抽象</h1><p>下图是对电子计算机的分层抽象，这里将计算机分为九层：应用程序层、操作系统层、体系结构层、微结构层、逻辑层、数字电路层、模拟电路层、器件层、物理层。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%94%B5%E5%AD%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/1.png" alt="电子计算机的分层抽象"></p><p>下面<strong>自底向上</strong>地简单介绍一下各层：</p><ol><li>物理层关注的是电子运动，由麦克斯韦方程组、量子力学等支持。</li><li>器件层关注的是晶体管、真空管等电子元器件，这些器件都有明确的外部连接点terminal，建立起了每个terminal上电压与电流之间的关系模型。</li><li>模拟电路层关注的是器件组合在一起构成的放大器等组件，输入输出都是连续的电压值。</li><li>数字电路层关注的是逻辑门，电压被控制为离散的值表示为0和1。</li><li>逻辑层关注的是由数字电路层的逻辑门构成的逻辑组件，如加法器等。</li><li>微结构层将逻辑组件组合在一起以实现体系结构中定义的指令。</li><li>体系结构描述的是程序员观点的计算机抽象。</li><li>操作系统是和硬件最为密切的程序，既是资源分配器，又控制各着种I/O设备和用户程序的需求。</li><li>应用软件基于操作系统实现多种多样的应用功能。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制、进制转换和数据运算</title>
      <link href="/2021/02/04/ji-suan-ji-ke-xue-ji-chu/jin-zhi-jin-zhi-zhuan-huan-he-shu-ju-yun-suan/"/>
      <url>/2021/02/04/ji-suan-ji-ke-xue-ji-chu/jin-zhi-jin-zhi-zhuan-huan-he-shu-ju-yun-suan/</url>
      
        <content type="html"><![CDATA[<h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><h2 id="进制规则"><a href="#进制规则" class="headerlink" title="进制规则"></a>进制规则</h2><p>我们可以用这样的方式来表示一个十进制数：将每个阿拉伯数字乘以一个以该数字所处位置为指数，以$10$为底数的幂之和的形式。例如$123$可表示为$1\times{10}^{2}+2\times{10}^{1}+3\times{10}^{0}$ 这样的形式。</p><p>与之相似的，对二进制数来说，也可表示成每个二进制数码乘以一个以该数字所处位置为指数，以$2$ 为底数的幂之和的形式。  </p><p>一般说来，任何一个正整数$R$都可以被选来作为一个数制系统的基数。至于负整数$-R$，算法题中可能会人为定义这样的数制系统。</p><p>例如当$R=7$时，所需用到的数码是$0,1,2,3,4,5,6$。如果作为基数的数绝对值超过$10$，则为了表示这些数码，通常使用英文字母来表示那些大于$9$的数码。例如对$16$进制数来说，用$A$表示$10$，用$B$表示$11$，用$C$表示$12$，以此类推。</p><h2 id="二的幂次"><a href="#二的幂次" class="headerlink" title="二的幂次"></a>二的幂次</h2><p>下面列出$2$的常见幂次：</p><ul><li>${2}^{0}=1$</li><li>${2}^{1}=2$</li><li>${2}^{2}=4$</li><li>${2}^{3}=8$</li><li>${2}^{4}=16$</li><li>${2}^{5}=32$</li><li>${2}^{6}=64$</li><li>${2}^{7}=128$</li><li>${2}^{8}=256$</li><li>${2}^{9}=512$</li><li>${2}^{10}=1024$</li><li>${2}^{11}=2048$</li><li>${2}^{12}=4096$</li><li>${2}^{13}=8192$</li><li>${2}^{14}=16384$</li><li>${2}^{15}=32768$</li><li>${2}^{16}=65536$</li><li>$……$</li><li>${2}^{31}=2147483648$</li><li>${2}^{32}=4294967296$</li><li>$……$</li><li>${2}^{63}=9223372036854775808$</li><li>${2}^{64}=18446744073709551616$</li><li>$……$</li></ul><h2 id="有符号数、无符号数"><a href="#有符号数、无符号数" class="headerlink" title="有符号数、无符号数"></a>有符号数、无符号数</h2><p>有符号数是针对二进制来讲的，其最高位作为符号位，$0$代表$+$，$1$代表$-$，其余数位用作数值位，代表数值。</p><p>计算机中的有符号数用二进制表示，其符号也只用$0$或$1$表示。一般用最高有效位(MSB)来表示数的符号，正数用0表示，负数用1表示。</p><p>无符号数是相对于有符号数而言的，其整个机器字长的全部二进制位均表示数值位，相当于数的绝对值。</p><p>实际的数值总位数只能是$2$的整数幂次，一般是$8$、$16$、$32$、$64$，其对应的有符号数数值范围分别是$-({2}^{7}-1)\sim({2}^{7}-1)$、$-({2}^{15}-1)\sim({2}^{15}-1)$、$-({2}^{31}-1)\sim({2}^{31}-1)$、$-({2}^{63}-1)\sim({2}^{63}-1)$，无符号数数值范围分别是$-({2}^{8}-1)\sim({2}^{8}-1)$、$-({2}^{16}-1)\sim({2}^{16}-1)$、$-({2}^{32}-1)\sim({2}^{32}-1)$、$-({2}^{64}-1)\sim({2}^{64}-1)$。</p><h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><p>原码是一种计算机中对数字的二进制定点表示方法。原码表示法的数值最高一位是符号位，若数值为正数则该位为$0$，若数值为负数则该位为$1$，数值$0$有$+0$和$-0$两种表示；其余位表示数值的大小。</p><p>反码通常是用来由原码求补码或者由补码求原码的过渡码。原码为正数时，反码跟原码相同；原码为负数时，反码就是原码符号位保留后，其他位按位取反。<br>反码是数值存储的一种，多应用于系统环境设置，如Linux平台的目录和文件的默认权限的设置umask，就是使用反码原理。</p><p>正整数的补码是其二进制表示，与原码相同；负整数的补码是其原码除符号位外的所有位取反后加1的结果。补码涉及“怪异数”问题，详见下节介绍。</p><p>补码是计算机把减法运算转化为加法运算的关键编码。在计算机系统中，数值一律用补码来表示和存储，有如下两个原因：</p><ul><li>可以将符号位和数值域统一处理</li><li>加法和减法也可以统一处理（详见下文）。</li></ul><p>移码通常用于表示浮点数的阶码。移码的表示形式与补码相似，只是其符号位用$1$表示正数，用$0$表示负数，数值部分与补码相同。</p><h2 id="二进制“怪异数”"><a href="#二进制“怪异数”" class="headerlink" title="二进制“怪异数”"></a>二进制“怪异数”</h2><p>根据上文所述，无符号K位二进制取值范围：$[0, 2^K-1]$，有符号的二进制补码取值范围：$[-2^{K-1}, 2^{K-1}-1]$。</p><p>为什么不是$[-2^{K-1}+1, 2^{K-1}-1]$呢？为什么能取到$-2^{K-1}$呢？<br>其实这个$-2^{K-1}$被称为“怪异数”，也确实很诡异。</p><p>其实如果精通原理，也不难理解：<br>以$4$位二进制数为例，取值范围$[-8,7]$<br>$-8$怎么表示？<br>$-8_{10}=1000_{2}$</p><p>补码$1000-1=0111$得到补码，按位取反得到$1000$，还是这个数，所以用它表示$-8$。</p><p>怪异数的存在其实还化解了$±0$的问题。<br>因为按理说，$1000$表示$-0$，$0000$表示$+0$，但这就很离谱，所以让$1000$表示$-8$是合理的。</p><h2 id="比特"><a href="#比特" class="headerlink" title="比特"></a>比特</h2><p>计算机的组织在很大程度上取决于它如何表示数字、字符和控制信息。</p><p>数字计算机中最基本的信息单位称为<strong>比特</strong>(bit)，是二进制数字的缩写。具体而言，比特无非是计算机电路中“开”或“关”(或者“高”或“低”)的状态。1964年，IBM System/360大型计算机的设计者制定了使用8位组作为可寻址计算机存储基本单元的约定。他们称这个8位的集合为一个<strong>字节</strong>。计算机字由两个或多个相邻字节组成，这些字节有时被寻址并且几乎总是被共同操作。<strong>字</strong>大小表示特定体系结构最有效处理的数据大小。字可以是16位、32位、64位或在计算机组织上下文中有意义的任何其他大小，甚至不是8的倍数也可以。一个8位字节可以分为两个4位的一半，称为<strong>半字节</strong>。因为一个字节的每一位在位置编号系统中都有一个值，所以包含最小值二进制数字的半字节称为<strong>低位半字节</strong>，另一半称为<strong>高位半字节</strong>。</p><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><h2 id="整数进制转换"><a href="#整数进制转换" class="headerlink" title="整数进制转换"></a>整数进制转换</h2><h3 id="十进制数转X进制数"><a href="#十进制数转X进制数" class="headerlink" title="十进制数转X进制数"></a>十进制数转X进制数</h3><p>以二进制数为例：<br>$$22_{10}=1\times2^4+1\times2^2+1\times2^1=10110_{2}$$</p><p>以三进制为例：<br>$$32_{10}=1\times3^3+1\times3^1+2\times3^0=1012_{3}$$</p><p>一个比较直观有效的方式是列出从$X^0$到$X^m$的所有十进制数据，从小于当前的最大值开始取，特别注意的是最低位对应的是$X^0$而不是$X^1$。</p><p>八进制和十六进制既可以单独算也可以先算二进制再转换。</p><h3 id="X进制数转十进制数"><a href="#X进制数转十进制数" class="headerlink" title="X进制数转十进制数"></a>X进制数转十进制数</h3><p>以二进制数为例：<br>$$10111011_{2}=1\times2^7+1\times2^5+1\times2^4+1\times2^3+1\times2^1+1\times2^0=187_{10}$$</p><p>以十六进制数为例：<br>$$54D_{16}=5\times16^2+4\times16^1+13\times16^0=1357_{10}$$</p><p>求解的关键在于数清楚数位，$X$进制第$m$位对应$X^{m-1}$，将各个数位加权累加起来，就是十进制。</p><p>例如<a href="https://www.luogu.com.cn/problem/P2084">洛谷 P2084 进制转换</a>：</p><blockquote><p>请你编程实现，将一个$M$进制的数$N$转换成十进制表示的式子。</p></blockquote><p>实现代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> radix <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>radix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"^"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="X进制转Y进制"><a href="#X进制转Y进制" class="headerlink" title="X进制转Y进制"></a>X进制转Y进制</h3><p>一个比较笨的方法就是以十进制为桥梁，$X$进制→十进制→$Y$进制。</p><p>当然，复杂的进制转化一般只有算法题才会涉及。例如<a href="https://www.luogu.com.cn/problem/P1143">洛谷 P1143 进制转换</a>：</p><blockquote><p>请你编一程序实现两种不同进制之间的数据转换。<br>输入数据共三行，第一行是一个正整数，表示需要转换的数的进制$n(2≤n≤16)$，第二行是一个n进制数，若$n&gt;10$则用大写字母$A-F$表示数码$10-15$，并且该$n$进制数对应的十进制的值不超过$1000000000$，第三行也是一个正整数，表示转换之后的数的进制$m(2≤m≤16)$。</p></blockquote><p>实现代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> origin_radix <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> now_radix <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> origin_radix<span class="token punctuation">)</span><span class="token punctuation">,</span> now_radix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="负进制"><a href="#负进制" class="headerlink" title="负进制"></a>负进制</h3><p>常用的一般只有二进制、十进制、十六进制。负进制一般都是人为定义的。例如<a href="https://www.luogu.com.cn/problem/P1017">洛谷 P1017 [NOIP2000 提高组] 进制转换</a>：</p><blockquote><p>我们可以用这样的方式来表示一个十进制数：将每个阿拉伯数字乘以一个以该数字所处位置为指数，以$10$为底数的幂之和的形式。例如$123$可表示为$1\times{10}^{2}+2\times{10}^{1}+3\times{10}^{0}$ 这样的形式。<br>与之相似的，对二进制数来说，也可表示成每个二进制数码乘以一个以该数字所处位置为指数，以$2$ 为底数的幂之和的形式。<br>一般说来，任何一个正整数$R$或一个负整数$-R$都可以被选来作为一个数制系统的基数。如果是以$R$或$-R$为基数，则需要用到的数码为$0,1,….R-1$。<br>例如当$R=7$时，所需用到的数码是$0,1,2,3,4,5,6$，这与其是$R$或$-R$无关。如果作为基数的数绝对值超过$10$，则为了表示这些数码，通常使用英文字母来表示那些大于$9$的数码。例如对$16$进制数来说，用$A$表示$10$，用$B$表示$11$，用$C$表示$12$，以此类推。<br>在负进制数中是用$-R$作为基数，例如$(-15)<em>{2}$相当于$(110001)</em>{-2}$，并且它可以被表示为 $2$ 的幂级数的和数：$110001=1\times (-2)^5+1\times (-2)^4+0\times (-2)^3+0\times (-2)^2+0\times (-2)^1 +1\times (-2)^0$</p></blockquote><p>实现代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> radix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> remainder <span class="token operator">=</span> num <span class="token operator">%</span> radix<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainder <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            remainder <span class="token operator">-=</span> radix<span class="token punctuation">;</span>            num <span class="token operator">+=</span> radix<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainder <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            remainder <span class="token operator">+=</span> <span class="token char">'A'</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            remainder <span class="token operator">+=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">toString</span><span class="token punctuation">(</span>num<span class="token operator">/</span>radix<span class="token punctuation">,</span> radix<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>remainder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> origin_num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> radix <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>origin_num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">toString</span><span class="token punctuation">(</span>origin_num<span class="token punctuation">,</span> radix<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"(base"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>radix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小数进制转换"><a href="#小数进制转换" class="headerlink" title="小数进制转换"></a>小数进制转换</h2><p>以二进制为例，先说二进制小数转十进制小数，再说十进制小数转二进制小数。</p><p>关于二进制转十进制，定点小数可以用负指数理解，如$2^{-2}=0.25$，加起来就行。</p><p>例如：<br>$$0.0101_{2}=1\times2^{-2}+1\times2^{-4}=0.3125_{10}$$</p><p>关于十进制转二进制，小数部分可以×2再取整。</p><p>例如：<br>$$0.8125×2=1.625\0.625×2=1.25\0.25×2=0.5\0.5×2=1$$</p><p>即<br>$$0.8125_{10}=0.1101_{2}$$</p><h1 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h1><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><p><strong>逻辑运算</strong>是指那些应用于模式中的一个二进制位，或在两个模式中相应的两个二进制位的相同基本运算。</p><h3 id="位层次上的逻辑运算"><a href="#位层次上的逻辑运算" class="headerlink" title="位层次上的逻辑运算"></a>位层次上的逻辑运算</h3><ul><li>非运算</li><li>与运算</li><li>或运算</li><li>异或运算</li></ul><h3 id="模式层次上的逻辑运算"><a href="#模式层次上的逻辑运算" class="headerlink" title="模式层次上的逻辑运算"></a>模式层次上的逻辑运算</h3><p>上述四个运算可以被应用到$n$位模式。</p><ul><li>置位操作：对应位或$1$，其余位或$0$。</li><li>复位操作：对应位与$0$，其余位与$1$。</li><li>反转操作：对应位异或$1$，其余位异或$0$。</li></ul><h2 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h2><p>移动模式中的位，改变位的位置。</p><h3 id="逻辑移位运算"><a href="#逻辑移位运算" class="headerlink" title="逻辑移位运算"></a>逻辑移位运算</h3><p>应用于无符号整数。</p><ul><li>逻辑右移：最右位丢弃，最左位填$0$。</li><li>逻辑左移：最左位丢弃，最右位填$0$。</li><li>循环右移：最右位被移动，成为最左位。</li><li>循环左移：最左位被移动，成为最右位。</li></ul><h3 id="算术移位运算"><a href="#算术移位运算" class="headerlink" title="算术移位运算"></a>算术移位运算</h3><p>应用于以补码表示的带符号整数。</p><ul><li>算术右移：保留符号位，并且复制符号位，放入相邻的右边的位中。</li><li>算术左移：丢弃符号位，接受右边的位为符号位，与逻辑左移相同；如果新的符号位与原先相同，运算成功；否则，发生上溢或下溢。</li></ul><h3 id="逻辑移位与算术移位的区别"><a href="#逻辑移位与算术移位的区别" class="headerlink" title="逻辑移位与算术移位的区别"></a>逻辑移位与算术移位的区别</h3><p>二者的左移是相同的，不同体现在算术右移与逻辑右移。</p><ul><li>算术右移：保留并复制符号位。</li><li>逻辑右移：最左位填$0$。</li></ul><h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><p>适用于整数和浮点数的加、减、乘、除。</p><p>请注意：这里不是<code>算数运算</code>，而是算术运算。</p><p>对于二进制补码整数的加法进位，最左边一列的进位被舍去，发生溢出。想要避免溢出，获得准确解，就应该扩增位数或使用双符号位表示法。</p><p>不同指数的浮点数的加法调整，应该比较阶码，如果不同，则将较小的数的尾数移位，使阶码对齐。</p><p>算法题中可能涉及非常见进制的算术运算，例如<a href="https://www.luogu.com.cn/problem/P1604">洛谷 P1604 B进制星球</a>：</p><blockquote><p>话说有一天，小$Z$乘坐宇宙飞船，飞到一个美丽的星球。因为历史的原因，科技在这个美丽的星球上并不很发达，星球上人们普遍采用$B$（$2≤B≤36$）进制计数。星球上的人们用美味的食物招待了小$Z$，作为回报，小$Z$希望送一个能够完成$B$进制加法的计算器给他们。 现在小$Z$希望你可以帮助他，编写实现$B$进制加法的程序。</p></blockquote><p>实现代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span>radix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span>radix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>radix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加法算术运算溢出问题"><a href="#加法算术运算溢出问题" class="headerlink" title="加法算术运算溢出问题"></a>加法算术运算溢出问题</h3><p>Java语句<code>System.out.println(Integer.MAX_VALUE+1);</code>获得的输出是<code>-2147483648</code>，显然是遇到了溢出问题。</p><p>下面用二进制的基础知识解析这一过程。</p><p>首先明确<code>Integer.MAX_VALUE</code>的值是$2^{31}-1$，也就是$+2147483647$。</p><table><thead><tr><th>0</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th></tr></thead></table><p>该数值是正数，因此原码、反码、补码相同。</p><p>其反码是：</p><table><thead><tr><th>0</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th></tr></thead></table><p>其补码是：</p><table><thead><tr><th>0</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th></tr></thead></table><p>使其补码与$1$相加得到以下补码：</p><table><thead><tr><th>1</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th></tr></thead></table><p>显然，这是上文提到过的“怪异数”，其真实值为$-2^{31}=-2147483648$。</p><h3 id="二进制加减法不用原码的原因"><a href="#二进制加减法不用原码的原因" class="headerlink" title="二进制加减法不用原码的原因"></a>二进制加减法不用原码的原因</h3><p>原因一：不易确定加法还是减法。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%BF%9B%E5%88%B6%E3%80%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E5%92%8C%E6%95%B0%E6%8D%AE%E8%BF%90%E7%AE%97/1.png"></p><p>原因二：最终结果的符号不易确定。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%BF%9B%E5%88%B6%E3%80%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E5%92%8C%E6%95%B0%E6%8D%AE%E8%BF%90%E7%AE%97/2.png"></p><h3 id="加法器的构建"><a href="#加法器的构建" class="headerlink" title="加法器的构建"></a>加法器的构建</h3><ul><li><a href="https://blankspace.blog.csdn.net/article/details/102710189">Logisim构建四位行波进位加法/减法器</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/102709660">Logisim构建四位行波进位加法器</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/102709061">Logisim构建全加器</a></li></ul><h3 id="计算机不需要整数减法器的原因"><a href="#计算机不需要整数减法器的原因" class="headerlink" title="计算机不需要整数减法器的原因"></a>计算机不需要整数减法器的原因</h3><p>如上探讨，我们明确了二进制加减法不用原码的原因，也清楚了二进制原码运算对于加减法是比较不好直接确定的，解决方法是什么呢？</p><p>其实大家所熟知的补码正是为了<strong>消灭减法</strong>产生的。<br>理由是：正数的补码正是自身，而负数的补码是一个减法的差，所以求一个数的补码正是一次减法过程。</p><p>基于补码的机制，减法可以转化为加法，计算机只需拥有加法器，不许要减法器。</p><h3 id="逻辑运算和算术运算的区别"><a href="#逻辑运算和算术运算的区别" class="headerlink" title="逻辑运算和算术运算的区别"></a>逻辑运算和算术运算的区别</h3><ul><li>逻辑运算用于二进制位和模式，类型包括与、或、非、异或等。</li><li>算术运算用于整数和浮点数，类型包括加、减、乘、除等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法分析与设计习题分享</title>
      <link href="/2021/02/04/suan-fa-fen-xi-yu-she-ji/suan-fa-fen-xi-yu-she-ji-xi-ti-fen-xiang/"/>
      <url>/2021/02/04/suan-fa-fen-xi-yu-she-ji/suan-fa-fen-xi-yu-she-ji-xi-ti-fen-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h1><p>1.算法的复杂度即算法在计算机上的运行时间。<br>$×$</p><p>2.时间复杂度是衡量算法性能的最重要标准。<br>$×$</p><p>3.能够在计算机上运行的计算过程即是算法。<br>$×$</p><p>4.计算机无法解决的问题的数量远多于计算机可以解决问题的数量。<br>$√$</p><p>5.通过算法分析可以为计算任务选择有效的计算设备。<br>$√$</p><p>6.选择<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/1.png"></p><p>7.填空<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/2.png"></p><p>8.简答<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/3.png"></p><p>9.选择<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/4.png"></p><p>10.选择<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/5.png"></p><p>11.选择<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/6.png"></p><p>12.判断<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/7.png"></p><p>13.选择<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/8.png"></p><p>14.判断<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/9.png"></p><p>15.简答<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/10.png"></p><p>16.简答<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/11.png"></p><p>17.简答<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/12.png"></p><p>18.判断<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/13.png"></p><p>19.选择<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/14.png"></p><p>20.填空<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/15.png"></p><p>21.填空<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/16.png"></p><p>22.简答<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/17.png"></p><p>23.简答<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/18.png"></p><p>24.简答<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/19.png"></p><p>25.简答<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E4%B9%A0%E9%A2%98%E5%88%86%E4%BA%AB/20.png"></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学实验汇总</title>
      <link href="/2020/09/26/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/chi-san-shu-xue-shi-yan-hui-zong/"/>
      <url>/2020/09/26/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/chi-san-shu-xue-shi-yan-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="实验1：自动逻辑推理问题求解"><a href="#实验1：自动逻辑推理问题求解" class="headerlink" title="实验1：自动逻辑推理问题求解"></a>实验1：自动逻辑推理问题求解</h1><p>一个公安人员审查一件盗窃案，已知的事实如下：</p><ol><li>A或B盗窃了x;</li><li>若A盗窃了x，则作案时间不能发生在午夜前；</li><li>若B证词正确，则在午夜时屋里灯光未灭；</li><li>若B证词不正确，则作案时间发生在午夜前；</li><li>午夜时屋里灯光灭了；</li></ol><p>求解谁是盗贼，并打印输出。<br>要求封装逻辑表达式函数（析取、合取）。</p><p>下面给出了两种大致相同的代码实现（Java）：<br>个人感觉第二个更好一点点。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Reasoning</span> <span class="token punctuation">{</span>        <span class="token comment">//int转boolean</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">changeType</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">//合取</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token class-name">Conjunction</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var2<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var3<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var4<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var5<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>var1 <span class="token operator">&amp;&amp;</span> var2 <span class="token operator">&amp;&amp;</span> var3 <span class="token operator">&amp;&amp;</span> var4 <span class="token operator">&amp;&amp;</span> var5<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//析取</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token class-name">Disjunctive</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var1 <span class="token operator">||</span> var2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">//逻辑推理最终表达式真伪</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var2<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var3<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var4<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var5<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Conjunction</span><span class="token punctuation">(</span><span class="token class-name">Disjunctive</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Disjunctive</span><span class="token punctuation">(</span><span class="token operator">!</span>var1<span class="token punctuation">,</span> <span class="token operator">!</span>var3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Disjunctive</span><span class="token punctuation">(</span><span class="token operator">!</span>var4<span class="token punctuation">,</span> <span class="token operator">!</span>var5<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Disjunctive</span><span class="token punctuation">(</span>var4<span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">,</span> var5<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">//输出结果</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var2<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>var1 <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>var2 <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>var3 <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结论是:A偷窃了x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>var3 <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结论是:B偷窃了x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">//main方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> e <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> e<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token function">changeType</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token function">changeType</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">C</span> <span class="token operator">=</span> <span class="token function">changeType</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">D</span> <span class="token operator">=</span> <span class="token function">changeType</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">E</span> <span class="token operator">=</span> <span class="token function">changeType</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Reasoning2</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//合取</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token class-name">Conjunction</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var2<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> var3<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var4<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var5<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>var1 <span class="token operator">&amp;&amp;</span> var2 <span class="token operator">&amp;&amp;</span> var3 <span class="token operator">&amp;&amp;</span> var4 <span class="token operator">&amp;&amp;</span> var5<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//析取</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token class-name">Disjunctive</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var1 <span class="token operator">||</span> var2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">//逻辑推理最终表达式真伪</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var2<span class="token punctuation">,</span>             <span class="token keyword">boolean</span> var3<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var4<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var5<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Conjunction</span><span class="token punctuation">(</span><span class="token class-name">Disjunctive</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Disjunctive</span><span class="token punctuation">(</span><span class="token operator">!</span>var1<span class="token punctuation">,</span> <span class="token operator">!</span>var3<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Disjunctive</span><span class="token punctuation">(</span><span class="token operator">!</span>var4<span class="token punctuation">,</span> <span class="token operator">!</span>var5<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Disjunctive</span><span class="token punctuation">(</span>var4<span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">,</span> var5<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">//输出结果</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var2<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>var1 <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>var2 <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>var3 <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结论是:A偷窃了x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>var3 <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结论是:B偷窃了x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">//main方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span> a <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span> b <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span> c <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span> d <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span> e <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>均输出：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">结论是<span class="token operator">:</span><span class="token class-name">B</span>偷窃了x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自行验证，结果OK。</p><h1 id="实验2：三人表决器设计与实现"><a href="#实验2：三人表决器设计与实现" class="headerlink" title="实验2：三人表决器设计与实现"></a>实验2：三人表决器设计与实现</h1><p>这个表决器就是支持/反对/弃权，由三个人投票，多数人支持则通过，可以弃权（输入不合法默认弃权）。<br>其实本问题可以作为离散数学中的基本命题逻辑问题，也可以作为一个最基本的电路逻辑问题。<br>这里我们只用最基本的逻辑来实现这个表决器，而且要求必须抽取出合取、析取的方法封装起来使用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Voter</span><span class="token punctuation">{</span>        <span class="token comment">//int转boolean</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">changeType</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//合取</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token class-name">Conjunction</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>var1 <span class="token operator">&amp;&amp;</span> var2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//分析主析取范式(┓A∧B∧C) ∨(A∧┓B∧C)∨(A∧B∧┓C)∨(A∧B∧C)的真值</span>    <span class="token comment">//只要ABC中有至少两个同意（输入true）就可以</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token class-name">Disjunctive</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var2<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var3<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>var1 <span class="token operator">||</span> var2 <span class="token operator">||</span> var3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//输出表决结果</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜，表决通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"很遗憾，表决没有通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> a <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您的表决值！1代表同意，0代表反对，其余输入均无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> x <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                        a <span class="token operator">=</span> <span class="token function">changeType</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                        b <span class="token operator">=</span> <span class="token function">changeType</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                        c <span class="token operator">=</span> <span class="token function">changeType</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您的输入错误，表决无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">Disjunctive</span><span class="token punctuation">(</span><span class="token class-name">Conjunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Conjunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Conjunction</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实验3：旅行线路规划问题"><a href="#实验3：旅行线路规划问题" class="headerlink" title="实验3：旅行线路规划问题"></a>实验3：旅行线路规划问题</h1><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>1.实验目的：加深图的汉密尔顿路及最短路径的理解与应用<br>2.实验内容：搜索某旅游城市地图（至少包含10个景点），随机选取出发地点，基于图论理论建立模型，给出合理的旅行路线。要求考虑时间、成本等因素。<br>3.实验原理和方法：<br>(1) 不多于3名同学一组，选择某一旅游城市为研究对象，考察该城市至少10个景点在地图中的位置，根据景点间的路径绘制路线图。<br>(2) 考虑两个景点间的距离、交通工具等因素，设置路线权重。<br>(3) 随机从任意一点出发，基于图论理论建立模型，给出合理的旅行路线。<br>4.参考案例<br>该问题是一个典型的旅行商问题，通常用加权图表示。如果已知顶点u和顶点v的距离是r，连接u和v这两点权重就是r。图中一个圈C的权指的是C中所有边的权重之和。为了解决旅行商问题，我们需要确定加权图中哈密尔顿图的最小权值。以推销员在城市间巡回旅行为例，介绍该问题的求解。<br>问题：一个推销员计划在一些城市间巡回旅行，城市间的距离如图所示的加权图G，那么他这次旅行的最小距离是多少？<br><img src="https://img-blog.csdnimg.cn/2020031810141177.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg5NjMxOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解答：因为图G是5阶图，因此G中有(5-1)!/2=12个哈密尔顿圈，每个圈及其权重列表如下：</p><table><tbody><tr><th>哈密尔顿圈</th><th>圈的权重</th></tr><tr><td>S1=(C1,C2,C3,C4,C5,C1)</td><td>7+10+8+6+12=43</td></tr><tr><td>S2=(C1,C2,C3,C5,C4,C1)</td><td>7+10+4+6+9=36</td></tr><tr><td>S3=(C1,C2,C4,C3,C5,C1)</td><td>44</td></tr><tr><td>S4=(C1,C2,C4,C5,C3,C1)</td><td>41</td></tr><tr><td>S5=(C1,C2,C5,C3,C4,C1)</td><td>42</td></tr><tr><td>S6=(C1,C2,C5,C4,C3,C1)</td><td>46</td></tr><tr><td>S7=(C1,C3,C2,C4,C5,C1)</td><td>52</td></tr><tr><td>S8=(C1,C3,C2,C5,C4,C1)</td><td>50</td></tr><tr><td>S9=(C1,C3,C4,C2,C5,C1)</td><td>58</td></tr><tr><td>S10=(C1,C3,C5,C2,C4,C1)</td><td>51</td></tr><tr><td>S11=(C1,C4,C2,C3,C5,C1)</td><td>48</td></tr><tr><td>S12=(C1,C4,C3,C2,C5,C1)</td><td>53</td></tr></tbody></table>因此，从表中可读出哈密尔顿圈的最小权重为36.为了获得此权重，G中的点按照C1,C2,C3,C5,C4,C1或者C1,C4,C5,C3,C2,C1的顺序访问。5.实验过程：6.遇到的问题和解决方案：<h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><img src="https://img-blog.csdnimg.cn/20200318101211315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg5NjMxOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h2><p><img src="https://img-blog.csdnimg.cn/20200318101333946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg5NjMxOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="输入数据"><a href="#输入数据" class="headerlink" title="输入数据"></a>输入数据</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//运行时将下面这些信息直接复制到控制台, 回车即可:(本行不要录入)</span><span class="token number">10</span>北京天津上海重庆呼市乌鲁木齐拉萨银川南宁哈尔滨<span class="token number">125</span><span class="token number">1239</span><span class="token number">3026</span><span class="token number">480</span><span class="token number">3300</span><span class="token number">3736</span><span class="token number">1192</span><span class="token number">2373</span><span class="token number">1230</span><span class="token number">1150</span><span class="token number">1954</span><span class="token number">604</span><span class="token number">3330</span><span class="token number">3740</span><span class="token number">1316</span><span class="token number">2389</span><span class="token number">1207</span><span class="token number">1945</span><span class="token number">1717</span><span class="token number">3929</span><span class="token number">4157</span><span class="token number">2092</span><span class="token number">1892</span><span class="token number">2342</span><span class="token number">1847</span><span class="token number">3202</span><span class="token number">2457</span><span class="token number">1570</span><span class="token number">993</span><span class="token number">3156</span><span class="token number">2825</span><span class="token number">3260</span><span class="token number">716</span><span class="token number">2657</span><span class="token number">1710</span><span class="token number">2668</span><span class="token number">2111</span><span class="token number">4279</span><span class="token number">4531</span><span class="token number">2547</span><span class="token number">3431</span><span class="token number">4967</span><span class="token number">2673</span><span class="token number">2422</span><span class="token number">3592</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> selected<span class="token punctuation">;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Edge</span><span class="token punctuation">{</span>    <span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hamilton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Edge</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allEdges<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please enter the number of the city: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allPoints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        allEdges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the name of the city %d: "</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            allPoints<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            allPoints<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PLease enter the value between %s and %s: "</span><span class="token punctuation">,</span> allPoints<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> allPoints<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> v <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    allEdges<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                    allEdges<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> allPoints<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    allEdges<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> allPoints<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    count <span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> rst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Point</span> start <span class="token operator">=</span> allPoints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        rst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        start<span class="token punctuation">.</span>selected <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>c <span class="token operator">&lt;</span> n <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Point</span> next <span class="token operator">=</span> <span class="token function">getMinPoint</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> allPoints<span class="token punctuation">)</span><span class="token punctuation">;</span>            rst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            next<span class="token punctuation">.</span>selected <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            start <span class="token operator">=</span> next<span class="token punctuation">;</span>            c <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        rst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>allPoints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rst<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> rst<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>rst<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>rst<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"---&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValueOfPoints</span><span class="token punctuation">(</span><span class="token class-name">Point</span> p1<span class="token punctuation">,</span> <span class="token class-name">Point</span> p2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Edge</span> edge <span class="token operator">:</span> allEdges<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> p1 <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">.</span>points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> p2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>edge<span class="token punctuation">.</span>points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> p1 <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">.</span>points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> edge<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Point</span> <span class="token function">getMinPoint</span><span class="token punctuation">(</span><span class="token class-name">Point</span> p1<span class="token punctuation">,</span> <span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ps<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>ps<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>selected <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getValueOfPoints</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> ps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> min<span class="token punctuation">)</span><span class="token punctuation">{</span>                min <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ps<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法设计方法</title>
      <link href="/2020/09/26/suan-fa-fen-xi-yu-she-ji/suan-fa-she-ji-fang-fa/"/>
      <url>/2020/09/26/suan-fa-fen-xi-yu-she-ji/suan-fa-she-ji-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="重要的算法问题类型"><a href="#重要的算法问题类型" class="headerlink" title="重要的算法问题类型"></a>重要的算法问题类型</h1><ul><li><strong>查找问题</strong></li><li><strong>排序问题</strong></li><li><strong>图问题</strong></li><li><strong>组合问题</strong></li><li><strong>几何问题</strong></li></ul><h1 id="思想1：分治法"><a href="#思想1：分治法" class="headerlink" title="思想1：分治法"></a>思想1：分治法</h1><ul><li><strong>基本思想</strong>：把一个规模为$n$的问题分解为两个或者多个较小的、与原问题类型相同的子问题，再对子问题求解，然后把子问题的解合并起来从而得到整个问题的解，即对问题分而治之。如果子问题的规模仍然相当大，不能容易地求解得到它们的解，这时可以对子问题重复地利用分治策略。</li><li><strong>适用特征</strong>：<ul><li>问题具有最优子结构性质，可以被分解为若干个规模较小的、独立的子问题。</li><li>问题在规模缩小到一定程度时容易求解。</li><li>可以自底向上的合并子问题的解，得到最终的解。</li></ul></li><li><strong>算法实现</strong>：可以递归实现，也可以非递归实现。一般用递归算法实现；如果使用非递归算法求解，常常使用栈来辅助实现，对二叉树或者类似情形也可以使用队列。</li><li><strong>效率分析</strong>：如果每次分成的各个问题规模相等或者近似相等，则分治策略的效率比较高。</li><li><strong>应用问题</strong>：<ul><li><strong>排序问题</strong>：<ul><li>归并排序</li><li>快速排序</li></ul></li><li><strong>组合问题</strong>：<ul><li>最大子段和问题</li><li>棋盘覆盖问题</li></ul></li><li><strong>几何问题</strong>：<ul><li>最近对问题</li><li>凸包问题</li></ul></li></ul></li></ul><h1 id="思想2：减治法"><a href="#思想2：减治法" class="headerlink" title="思想2：减治法"></a>思想2：减治法</h1><ul><li><strong>基本思想</strong>：为求解一个规模为$n$的问题，先求解规模比原规模降低一个常数或者降低一半的、与原问题类型相同的子问题，求出子问题的解之后再回来求解问题规模为$n$的原问题。</li><li><strong>应用问题</strong>：<ul><li><strong>查找问题</strong>：<ul><li>二分查找</li><li>二叉查找树</li><li>选择问题</li></ul></li><li><strong>排序问题</strong>：<ul><li>插入排序</li><li>堆排序</li></ul></li><li><strong>组合问题</strong>：<ul><li>淘汰赛冠军问题</li><li>假币问题</li></ul></li></ul></li></ul><h1 id="思想3：蛮力法"><a href="#思想3：蛮力法" class="headerlink" title="思想3：蛮力法"></a>思想3：蛮力法</h1><ul><li><strong>应用问题</strong>：<ul><li><strong>查找问题</strong>：<ul><li>顺序查找</li><li>串的匹配问题</li></ul></li><li><strong>排序问题</strong>：<ul><li>选择排序</li><li>冒泡排序</li></ul></li><li><strong>组合问题</strong>：<ul><li>0/1背包问题</li><li>任务分配问题</li></ul></li><li><strong>图问题</strong>：<ul><li>汉密尔顿回路问题</li><li>TSP问题</li></ul></li><li><strong>几何问题</strong>：<ul><li>最近对问题</li><li>凸包问题</li></ul></li></ul></li></ul><h1 id="思想4：动态规划法"><a href="#思想4：动态规划法" class="headerlink" title="思想4：动态规划法"></a>思想4：动态规划法</h1><ul><li><strong>基本思想</strong>：有些问题在分解时经常会产生许多子问题，且分解出的子问题相互交织，因而在解这些问题的时候，将可能重复多次解同一个问题。这种重复当然是不必要的，解决方法也可以在解决每个子问题后把它的解（包括其子子问题的解）保存到一个表格中，若遇到求解与之相同的子问题的解时，就可以从表中把解找出来直接使用。</li><li><strong>适用特征</strong>：<ul><li>问题的最优解所包含的子问题的解也是最优的，即具备最优子结构性质。</li><li>子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到，即具备重叠子问题性质。</li><li>某状态以后的过程不会影响以前的状态，只与当前状态有关。</li></ul></li><li><strong>算法实现</strong>：动态规划算法的实现往往需要一个一维或多维数组存储子问题求解结果，它的时间复杂度是多项式的，空间复杂度与开辟的额外存储空间有关，所以往往能通过优化动态转移方程和压缩维数降低求解复杂度，提升效率。</li><li><strong>应用问题</strong>：<ul><li><strong>查找问题</strong>：<ul><li>最优二叉查找树</li><li>近似串匹配问题</li></ul></li><li><strong>组合问题</strong>：<ul><li>最长递增子序列问题</li><li>最长公共子序列问题</li><li>0/1背包问题</li></ul></li><li><strong>图问题</strong>：<ul><li>多段图的最短路径问题</li><li>多源点的最短路径问题</li><li>TSP问题</li></ul></li></ul></li></ul><h1 id="思想5：贪心法"><a href="#思想5：贪心法" class="headerlink" title="思想5：贪心法"></a>思想5：贪心法</h1><ul><li><strong>基本思想</strong>：当追求的目标是一个问题的最优解时，设法把对整个问题的求解动作分成若干个步骤来完成。在其中的每一个阶段都选择局部看来是最优的方案，以期望通过各个阶段的局部最优选择来达到整体的最优。</li><li><strong>适用特征</strong>：<ul><li>问题待求解组合数较大。</li><li>问题是最优化问题。</li></ul></li><li><strong>核心要点</strong>：<ul><li>贪心法是一种不追求最优解，只希望得到比较满意解的方法。</li><li>贪心法一般可以快速得到满意的解，因为它省去了为了找最优解要穷尽所有可能而必须耗费的大量时间。</li><li>贪心法常常以当前情况为基础作出最优选择，而不考虑各种可能的整体情况，所以贪心法不需要回溯。</li><li>贪心法也称为分步求解法，求解问题时常把用于选择的数组按照问题需要从大到小或者从小到大排序，再逐个取出进行判断。</li><li>由于贪心法需要明确知道哪一种情况是当前最优的，所以实际求解往往与排序相关。</li><li>很多最优解相关问题都不能使用贪心法得到，一旦能用，复杂度往往比较低。</li><li>在问题极其复杂的时候，近似最优解可能也是我们需要的。</li></ul></li><li><strong>适用特征</strong>：<ul><li>问题局部最优策略能导致产生全局最优解，即最优子结构性质。</li><li>问题是一维问题（多维可选动态规划）。</li></ul></li><li><strong>应用问题</strong>：<ul><li><strong>组合问题</strong>：<ul><li>背包问题</li><li>活动安排问题</li><li>多机调度问题</li></ul></li><li><strong>图问题</strong>：<ul><li>TSP问题</li><li>图的着色问题</li><li>最小生成树问题</li></ul></li></ul></li></ul><h1 id="思想6：回溯法"><a href="#思想6：回溯法" class="headerlink" title="思想6：回溯法"></a>思想6：回溯法</h1><ul><li><strong>基本思想</strong>：采用一步一步向前试探的方法，当某一步有多种选择时，可以先任意选择一种，只要这种选择暂时可行就继续向前，一旦发现到达某一步以后无法再前进，说明前面已经做的选择可能有问题，就可以向后退，回到上一步或者之前的某一步重新选择。</li><li><strong>核心要点</strong>：<ul><li>如果把问题的求解过程看做是一棵解答树，回溯法常常采用深度优先策略，从根结点出发进行搜索。若进入某子结点为根的子树以后没有找到解（或者需要找到全部解），则需要从子结点退回到父结点，从而可以选择其他子结点进行搜索。</li><li>回溯法可以系统地搜索一个问题的所有解或者任一解。</li><li>回溯法常常可以避免搜索所有可能的解，所以，它往往比蛮力搜索的算法效率更高，适用于求解组合数组较大的问题。</li></ul></li><li><strong>算法实现</strong>：用回溯法求解的问题常使用递归方法，并使用栈记录回退的路径。</li><li><strong>应用问题</strong>：<ul><li><strong>组合问题</strong>：<ul><li>八皇后问题</li><li>批处理作业调度问题</li></ul></li><li><strong>图问题</strong>：<ul><li>图的着色问题</li><li>汉密尔顿回路问题</li></ul></li></ul></li></ul><h1 id="思想7：分支限界法-剪枝法"><a href="#思想7：分支限界法-剪枝法" class="headerlink" title="思想7：分支限界法(剪枝法)"></a>思想7：分支限界法(剪枝法)</h1><ul><li><strong>基本思想</strong>：在广度优先遍历过程中，对已经处理的每一个结点根据限界函数估算目标函数的可能值，从中选取使目标函数取得极值（极大或极小）的结点优先进行广度优先搜索，从而不断调整搜索方向，尽快找到问题的解。</li><li><strong>核心要点</strong>：<ul><li>与回溯法类似的是，分支限界法也是一种在问题解空间中进行查找的方法。</li><li>与回溯法不同的是，回溯法使用了深度优先策略，而分支限界法可采用广度优先策略。</li><li>分支限界法在查找过程中利用了对最优解的限制，剪去不必再花时间查找的分支。</li><li>因为限界函数常常是基于问题的目标函数而确定的，所以，分支限界法适用于求解最优化问题。</li></ul></li><li><strong>应用问题</strong>：<ul><li><strong>组合问题</strong>：<ul><li>0/1背包问题</li><li>任务分配问题</li><li>批处理作业调度问题</li></ul></li><li><strong>图问题</strong>：<ul><li>TSP问题</li><li>多段图的最短路径问题</li></ul></li></ul></li></ul><h1 id="思想8：近似算法"><a href="#思想8：近似算法" class="headerlink" title="思想8：近似算法"></a>思想8：近似算法</h1><ul><li><strong>应用问题</strong>：<ul><li><strong>组合问题</strong>：<ul><li>装箱问题</li><li>子集和问题</li></ul></li><li><strong>图问题</strong>：<ul><li>顶点覆盖问题</li><li>TSP问题</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法解决查找第K大小元素问题</title>
      <link href="/2020/09/26/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-cha-zhao-di-k-da-xiao-yuan-su-wen-ti/"/>
      <url>/2020/09/26/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-cha-zhao-di-k-da-xiao-yuan-su-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>就是给出一个随机序列，序列元素可比较，查出第K大元素或者第K小元素。<br>这是一个经典的算法题，之前也写过，这里总结一下思路。</p><h1 id="思路介绍"><a href="#思路介绍" class="headerlink" title="思路介绍"></a>思路介绍</h1><h2 id="思路一：先排序再直接取元素"><a href="#思路一：先排序再直接取元素" class="headerlink" title="思路一：先排序再直接取元素"></a>思路一：先排序再直接取元素</h2><p>对于一个随机序列，快排的性能应该是最好的啦（基础排序算法），稍加优化性能更佳。<br>我们先对序列用 <font color="red">数组/顺序</font> 表存储起来，再快排（如果懒得写，Java可用java.util.Arrays.sort()，C++可用STL的sort()）。<br>排完以后就利用其直接访问的特点取第K大/小元素即可。</p><p>该策略时间复杂度$O(n\log{n})$。</p><h2 id="思路二：维护一个大小为K的乱序数组进行替换"><a href="#思路二：维护一个大小为K的乱序数组进行替换" class="headerlink" title="思路二：维护一个大小为K的乱序数组进行替换"></a>思路二：维护一个大小为K的乱序数组进行替换</h2><p>我们可以先取下来随机序列前$K$个元素，放在一个乱序的数组中，每次都换掉其中最小/大的元素（前提是比这个元素大/小）。<br>这样就不需要完整地排序，时间复杂度$O(n×k)$。<br>当$k&gt;\log{n}$的情况下，不如直接排序。</p><h2 id="思路三：维护一个堆最后直接取堆顶元素"><a href="#思路三：维护一个堆最后直接取堆顶元素" class="headerlink" title="思路三：维护一个堆最后直接取堆顶元素"></a>思路三：维护一个堆最后直接取堆顶元素</h2><p>我们上面的算法时间复杂度之所以需要乘以$K$，是因为乱序，每次要找最小/大元素，那我们不如维护一个大小为$K$的堆。求第$K$大就建立小根堆，最后直接取堆顶；求第$K$小就建立大根堆，最后也是直接取堆顶。</p><p>具体操作就是先拿前$K$个元素建立二叉小根堆/大根堆，需要时间$O(k)$，然后每次调整也就是$O(\log{k})$，次数是$(n-k)$，所以是$O(k+\log{k}(n-k))$，如果说$K&lt;&lt;N$，就近似于$O(n\log{k})$，这就能实现很大程度上的优化了。</p><h2 id="思路四：分治法"><a href="#思路四：分治法" class="headerlink" title="思路四：分治法"></a>思路四：分治法</h2><p>这个思路很秀，简单说一下。<br>怎么分治呢？大家还记得快排吧，其实很相似，我们利用了与其“划分”很类似的做法。<br>以第$K$小元素为例：<br>取一个中间元素放到最左边，比其小的换到左边，比其大的不动，完成划分，不必排序。<br>划分完成就看看选取的中间值的id与$K$的关系，最后当$K$与id吻合时，左边的元素就是比$K$小的元素，划分中值就是第$K$小元素。<br>该算法的时间复杂度甚至能达到$O(n)$。</p><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><h2 id="第K小元素-思路一-Java编程实现"><a href="#第K小元素-思路一-Java编程实现" class="headerlink" title="第K小元素-思路一-Java编程实现"></a>第K小元素-思路一-Java编程实现</h2><p><a href="https://www.luogu.com.cn/problem/P1138">洛谷 P1138 第K小整数</a></p><p>以下代码通过TreeSet实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TreeSet</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NO RESULT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>                counter<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第K大元素-思路三-Java编程实现"><a href="#第K大元素-思路三-Java编程实现" class="headerlink" title="第K大元素-思路三-Java编程实现"></a>第K大元素-思路三-Java编程实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findNumberK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 用前k个元素构建小顶堆</span>        <span class="token function">buildHeap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 继续遍历数组，和堆顶比较</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">downAdjust</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 返回堆顶元素</span>        <span class="token keyword">return</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buildHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从最后一个非叶子节点开始，依次下沉调整</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>length<span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">downAdjust</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">downAdjust</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 保存父节点值，用于最后的赋值</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> childIndex <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>childIndex <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果有右孩子，且右孩子小于左孩子的值，则定位到右孩子</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>childIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>childIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                childIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 如果父节点小于任何一个孩子的值，直接跳出</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;=</span> array<span class="token punctuation">[</span>childIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 无需真正交换，单向赋值即可</span>            array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>childIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> childIndex<span class="token punctuation">;</span>            childIndex <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> childIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">findNumberK</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第K小元素-思路四-Java编程实现"><a href="#第K小元素-思路四-Java编程实现" class="headerlink" title="第K小元素-思路四-Java编程实现"></a>第K小元素-思路四-Java编程实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> num<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left_mid<span class="token operator">=</span>left<span class="token punctuation">,</span> right_mid<span class="token operator">=</span>right<span class="token punctuation">,</span> mid<span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left_mid <span class="token operator">&lt;=</span> right_mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right_mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                right_mid<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left_mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                left_mid<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left_mid <span class="token operator">&lt;=</span> right_mid <span class="token operator">&amp;&amp;</span> right_mid <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>left_mid<span class="token punctuation">,</span> right_mid<span class="token punctuation">)</span><span class="token punctuation">;</span>                left_mid<span class="token operator">++</span><span class="token punctuation">;</span>                right_mid<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> right_mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right_mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left_mid <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sort</span><span class="token punctuation">(</span>left_mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right_mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> line1 <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        k <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第K小元素-思路四-C-编程实现"><a href="#第K小元素-思路四-C-编程实现" class="headerlink" title="第K小元素-思路四-C++编程实现"></a>第K小元素-思路四-C++编程实现</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">5000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> num<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> left_mid <span class="token operator">=</span> left<span class="token punctuation">,</span> right_mid <span class="token operator">=</span> right<span class="token punctuation">,</span> mid <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left_mid <span class="token operator">&lt;=</span> right_mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right_mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            right_mid<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left_mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            left_mid<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left_mid <span class="token operator">&lt;=</span> right_mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left_mid<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right_mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            left_mid<span class="token operator">++</span><span class="token punctuation">;</span>            right_mid<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> right_mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right_mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left_mid <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>left_mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">[</span>right_mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第K小元素-C-内置函数调用"><a href="#第K小元素-C-内置函数调用" class="headerlink" title="第K小元素-C++内置函数调用"></a>第K小元素-C++内置函数调用</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> num<span class="token punctuation">,</span> k<span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">5000010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">nth_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> nums <span class="token operator">+</span> k<span class="token punctuation">,</span> nums <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划算法解决开心的金明问题</title>
      <link href="/2020/09/26/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-kai-xin-de-jin-ming-wen-ti/"/>
      <url>/2020/09/26/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-kai-xin-de-jin-ming-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过$N$元钱就行”。今天一早金明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的$N$元。于是，他把每件物品规定了一个重要度，分为$5$等：用整数$1-5$表示，第$5$等最重要。他还从因特网上查到了每件物品的价格（都是整数元）。他希望在不超过$N$元（可以等于$N$元）的前提下，使每件物品的价格与重要度的乘积的总和最大。</p><p>设第$j$件物品的价格为$v[j]$，重要度为$w[j]$，共选中了$k$件物品，编号依次为$j_1,j_2,…,j_k$，则所求的总和为：</p><p>$v[j_1] \times w[j_1]+v[j_2] \times w[j_2]+ …+v[j_k] \times w[j_k]$。</p><p>请你帮助金明设计一个满足要求的购物单。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>第一行，为$2$个正整数，用一个空格隔开：$n,m$（其中$N(&lt;30000)$表示总钱数，$m(&lt;25)$为希望购买物品的个数。）</p><p>从第$2$行到第$m+1$行，第$j$行给出了编号为$j-1$的物品的基本数据，每行有$2$个非负整数$ v p$（其中$v$表示该物品的价格$(v \le 10000)$，$p$表示该物品的重要度($1-5$)</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>$1$个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值$(&lt;100000000)$。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">1000 5800 2400 5300 5400 3200 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">3900<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>NOIP 2006 普及组 第二题</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>经典的0/1背包问题，<a href="https://www.kancloud.cn/kancloud/pack/70124">《背包九讲》</a>中提到的典例。</p><p>动态转移方程：$f[j] = Math.max(f[j], f[j-v[i]]+w[i])$</p><h1 id="Java编程实现"><a href="#Java编程实现" class="headerlink" title="Java编程实现"></a>Java编程实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><p><a href="https://www.luogu.com.cn/problem/P1060">洛谷 P1060 [NOIP2006 普及组] 开心的金明</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯2020年Java组模拟赛题解</title>
      <link href="/2020/09/26/suan-fa-fen-xi-yu-she-ji/lan-qiao-bei-2020-nian-java-zu-mo-ni-sai-ti-jie/"/>
      <url>/2020/09/26/suan-fa-fen-xi-yu-she-ji/lan-qiao-bei-2020-nian-java-zu-mo-ni-sai-ti-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><p>问题描述<br>　　1200000有多少个约数（只计算正约数）。<br>答案提交<br>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><p>分析：<br>填空题+小数据，暴力求解即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1200000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1200000</span> <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                counter<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案：<kbd>96</kbd></p><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><p>问题描述<br>　　在计算机存储中，15.125GB是多少MB？<br>答案提交<br>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><p>分析：<br>1GB=1024MB。</p><p>答案：<kbd>15488</kbd></p><h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><p>问题描述<br>　　一棵包含有2019个结点的二叉树，最多包含多少个叶结点？<br>答案提交<br>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><p>分析：<br>我记不得是不是二叉树了，如果是二叉树，结果就是1010（(2019+1)/2）；否则如果是树，就是2018。</p><h1 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h1><p>问题描述<br>　　在1至2019中，有多少个数的数位中包含数字9？<br>　　注意，有的数中的数位中包含多个9，这个数只算一次。例如，1999这个数包含数字9，在计算只是算一个数。<br>答案提交<br>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><p>分析：<br>这题本该是有讲究的，可惜数据量小还是填空题，就可以开暴力：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2019</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                counter<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案：<kbd>544</kbd></p><h1 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h1><p>问题描述<br>　　一个正整数如果任何一个数位不大于右边相邻的数位，则称为一个数位递增的数，例如1135是一个数位递增的数，而1024不是一个数位递增的数。<br>　　给定正整数 n，请问在整数 1 至 n 中有多少个数位递增的数？<br>输入格式<br>　　输入的第一行包含一个整数 n。<br>输出格式<br>　　输出一行包含一个整数，表示答案。<br>样例输入<br>30<br>样例输出<br>26<br>评测用例规模与约定<br>　　对于 40% 的评测用例，1 &lt;= n &lt;= 1000。<br>　　对于 80% 的评测用例，1 &lt;= n &lt;= 100000。<br>　　对于所有评测用例，1 &lt;= n &lt;= 1000000。</p><p>分析：<br>　　开暴力求解，利用char[]来逐一比较。</p><p>答案：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span>        <span class="token keyword">char</span> prev<span class="token punctuation">;</span>        outer<span class="token operator">:</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            prev <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">&gt;</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span> outer<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                prev <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            counter<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="T6"><a href="#T6" class="headerlink" title="T6"></a>T6</h1><p>问题描述<br>　　小明对类似于 hello 这种单词非常感兴趣，这种单词可以正好分为四段，第一段由一个或多个辅音字母组成，第二段由一个或多个元音字母组成，第三段由一个或多个辅音字母组成，第四段由一个或多个元音字母组成。<br>　　给定一个单词，请判断这个单词是否也是这种单词，如果是请输出yes，否则请输出no。<br>　　元音字母包括 a, e, i, o, u，共五个，其他均为辅音字母。<br>输入格式<br>　　输入一行，包含一个单词，单词中只包含小写英文字母。<br>输出格式<br>　　输出答案，或者为yes，或者为no。<br>样例输入<br>lanqiao<br>样例输出<br>yes<br>样例输入<br>world<br>样例输出<br>no<br>评测用例规模与约定<br>　　对于所有评测用例，单词中的字母个数不超过100。</p><p>分析：<br>　　使用正则表达式即可，matches()是since1.4的，就能用。<br>注意这个正则怎么写的，我们把元音字母1+和辅音字母1+分别做成正则表达式的子表达式，最后使用字符串连接凑成完整的正则表达式。<br>$[aeiou]+$ 表示任意 a、e、i、o、u 元素连续出现一次以上的贪婪匹配，<br>$[bcdfghjklmnpqrstvwxyz]+$ 表示辅音字母元素连续出现一次以上的贪婪匹配。<br>　　由于是贪婪匹配，所以能尽可能多的匹配，而不会导致意外的Bug。</p><p>答案：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> regex1 <span class="token operator">=</span> <span class="token string">"[aeiou]+"</span><span class="token punctuation">,</span> regex2 <span class="token operator">=</span> <span class="token string">"[bcdfghjklmnpqrstvwxyz]+"</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex2<span class="token operator">+</span>regex1<span class="token operator">+</span>regex2<span class="token operator">+</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"yes"</span> <span class="token operator">:</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="T7"><a href="#T7" class="headerlink" title="T7"></a>T7</h1><p>问题描述<br>　　在数列 a[1], a[2], …, a[n] 中，如果对于下标 i, j, k 满足 0&lt;i&lt;j&lt;k&lt;n+1 且 a[i]&lt;a[j]&lt;a[k]，则称 a[i], a[j], a[k] 为一组递增三元组，a[j]为递增三元组的中心。<br>　　给定一个数列，请问数列中有多少个元素可能是递增三元组的中心。<br>输入格式<br>　　输入的第一行包含一个整数 n。<br>　　第二行包含 n 个整数 a[1], a[2], …, a[n]，相邻的整数间用空格分隔，表示给定的数列。<br>输出格式<br>　　输出一行包含一个整数，表示答案。<br>样例输入<br>5<br>1 2 5 3 5<br>样例输出<br>2<br>样例说明<br>　　a[2] 和 a[4] 可能是三元组的中心。<br>评测用例规模与约定<br>　　对于 50% 的评测用例，2 &lt;= n &lt;= 100，0 &lt;= 数列中的数 &lt;= 1000。<br>　　对于所有评测用例，2 &lt;= n &lt;= 1000，0 &lt;= 数列中的数 &lt;= 10000。</p><p>分析：<br>　　开三指针即可，一个从1开始移动，剩下两个就在两侧移动，只要找到一组符合要求的就可以counter++。</p><p>答案：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        outer<span class="token operator">:</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        counter<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span> outer<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="T8"><a href="#T8" class="headerlink" title="T8"></a>T8</h1><p>问题描述<br>　　小明有一块空地，他将这块空地划分为 n 行 m 列的小块，每行和每列的长度都为 1。<br>　　小明选了其中的一些小块空地，种上了草，其他小块仍然保持是空地。<br>　　这些草长得很快，每个月，草都会向外长出一些，如果一个小块种了草，则它将向自己的上、下、左、右四小块空地扩展，这四小块空地都将变为有草的小块。<br>　　请告诉小明，k 个月后空地上哪些地方有草。<br>输入格式<br>　　输入的第一行包含两个整数 n, m。<br>　　接下来 n 行，每行包含 m 个字母，表示初始的空地状态，字母之间没有空格。如果为小数点，表示为空地，如果字母为 g，表示种了草。<br>　　接下来包含一个整数 k。<br>输出格式<br>　　输出 n 行，每行包含 m 个字母，表示 k 个月后空地的状态。如果为小数点，表示为空地，如果字母为 g，表示长了草。<br>样例输入<br>4 5<br>.g…<br>…..<br>..g..<br>…..<br>2<br>样例输出<br>gggg.<br>gggg.<br>ggggg<br>.ggg.<br>评测用例规模与约定<br>　　对于 30% 的评测用例，2 &lt;= n, m &lt;= 20。<br>　　对于 70% 的评测用例，2 &lt;= n, m &lt;= 100。<br>　　对于所有评测用例，2 &lt;= n, m &lt;= 1000，1 &lt;= k &lt;= 1000。</p><p>分析：<br>　　开一个BFS，注意判断防止重复搜索。<br>搜的时候，使用双队列，一个装x一个装y，每一轮都让原队列元素出队，周围能种草的位置入队。<br>　　循环k轮，效率不至于太差。<br>　　注意判越界。</p><p>答案：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//sb Java6</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue_x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue_y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> line1 <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'g'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue_x<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue_y<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> queue_x<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> x <span class="token operator">=</span> queue_x<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> queue_y<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> graph<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue_x<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue_y<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    graph<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'g'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> graph<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue_x<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue_y<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    graph<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'g'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue_x<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue_y<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'g'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">!=</span> m<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue_x<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue_y<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'g'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">StringBuilder</span> result<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="T9"><a href="#T9" class="headerlink" title="T9"></a>T9</h1><p>问题描述<br>　　小明想知道，满足以下条件的正整数序列的数量：<br>　　1. 第一项为 n；<br>　　2. 第二项不超过 n；<br>　　3. 从第三项开始，每一项小于前两项的差的绝对值。<br>　　请计算，对于给定的 n，有多少种满足条件的序列。<br>输入格式<br>　　输入一行包含一个整数 n。<br>输出格式<br>　　输出一个整数，表示答案。答案可能很大，请输出答案除以10000的余数。<br>样例输入<br>4<br>样例输出<br>7<br>样例说明<br>　　以下是满足条件的序列：<br>　　4 1<br>　　4 1 1<br>　　4 1 2<br>　　4 2<br>　　4 2 1<br>　　4 3<br>　　4 4<br>评测用例规模与约定<br>　　对于 20% 的评测用例，1 &lt;= n &lt;= 5；<br>　　对于 50% 的评测用例，1 &lt;= n &lt;= 10；<br>　　对于 80% 的评测用例，1 &lt;= n &lt;= 100；<br>　　对于所有评测用例，1 &lt;= n &lt;= 1000。</p><p>分析：<br>　　使用动态规划求解，动态转移方程：$f[i][j] = f[j][1] + … + f[j][abs(i-j)-1] + 1$</p><p>答案：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            counter <span class="token operator">+=</span> <span class="token function">count</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter <span class="token operator">%</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> array<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> <span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> array<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="T10"><a href="#T10" class="headerlink" title="T10"></a>T10</h1><p>问题描述<br>　　小明要组织一台晚会，总共准备了 n 个节目。然后晚会的时间有限，他只能最终选择其中的 m 个节目。<br>　　这 n 个节目是按照小明设想的顺序给定的，顺序不能改变。<br>　　小明发现，观众对于晚上的喜欢程度与前几个节目的好看程度有非常大的关系，他希望选出的第一个节目尽可能好看，在此前提下希望第二个节目尽可能好看，依次类推。<br>　　小明给每个节目定义了一个好看值，请你帮助小明选择出 m 个节目，满足他的要求。<br>输入格式<br>　　输入的第一行包含两个整数 n, m ，表示节目的数量和要选择的数量。<br>　　第二行包含 n 个整数，依次为每个节目的好看值。<br>输出格式<br>　　输出一行包含 m 个整数，为选出的节目的好看值。<br>样例输入<br>5 3<br>3 1 2 5 4<br>样例输出<br>3 5 4<br>样例说明<br>　　选择了第1, 4, 5个节目。<br>评测用例规模与约定<br>　　对于 30% 的评测用例，1 &lt;= n &lt;= 20；<br>　　对于 60% 的评测用例，1 &lt;= n &lt;= 100；<br>　　对于所有评测用例，1 &lt;= n &lt;= 100000，0 &lt;= 节目的好看值 &lt;= 100000。</p><p>答案：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> line1 <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> line2 <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> likes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> sorted_likes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sorted_likes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> likes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sorted_likes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> m<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sorted_likes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> likes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法解决排队接水问题</title>
      <link href="/2020/09/26/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-pai-dui-jie-shui-wen-ti/"/>
      <url>/2020/09/26/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-pai-dui-jie-shui-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>有 $n$ 个人在一个水龙头前排队接水，假如每个人接水的时间为 $T_i$，请编程找出这 $n$ 个人排队的一种顺序，使得 $n$ 个人的平均等待时间最小。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>第一行为一个整数 $n$。</p><p>第二行 $n$ 个整数，第 $i$ 个整数 $T_i$ 表示第 $i$ 个人的等待时间 $T_i$。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>输出文件有两行，第一行为一种平均时间最短的排队顺序；第二行为这种排列方案下的平均等待时间（输出结果精确到小数点后两位）。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">10 56 12 1 99 1000 234 33 55 99 812<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">3 2 7 8 1 4 9 6 10 5291.90<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>$n \leq 1000,t_i \leq 10^6$，不保证 $t_i$ 不重复。</p><p>当 $t_i$ 重复时，按照输入顺序即可（sort 是可以的）</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>龙头只有一个，可以插队接水，目标是总等待接水时间最短。<br>本题背景类似于操作系统的<a href="https://blankspace.blog.csdn.net/article/details/113360821">进程的SJF调度算法</a>，可以用贪心算法求解。</p><p>SJF算法想要取得进程最少的平均等待时间，就必须优先处理执行时间短的进程。同理，这个问题中，让接水时间最短的人先接水，可以让总的接水等待时间最短，因此平均接水等待时间也最短。</p><p>贪心需要先执行自定义排序，两个排序key，第一优先级是time，第二优先级是id。</p><h1 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> time<span class="token punctuation">;</span>        <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>person <span class="token operator">-&gt;</span> person<span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> waitingTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Person</span> p <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>            waitingTime <span class="token operator">+=</span> sum<span class="token punctuation">;</span>            sum <span class="token operator">+=</span> p<span class="token punctuation">.</span>time<span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> waitingTime<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h1><p><a href="https://www.luogu.com.cn/problem/P1223">洛谷 P1223 排队接水</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计Java语言Castle代码修改整理</title>
      <link href="/2020/09/26/ruan-jian-gong-cheng/mian-xiang-dui-xiang/mian-xiang-dui-xiang-cheng-xu-she-ji-java-yu-yan-castle-dai-ma-xiu-gai-zheng-li/"/>
      <url>/2020/09/26/ruan-jian-gong-cheng/mian-xiang-dui-xiang/mian-xiang-dui-xiang-cheng-xu-she-ji-java-yu-yan-castle-dai-ma-xiu-gai-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="课程信息"><a href="#课程信息" class="headerlink" title="课程信息"></a>课程信息</h1><p>最近闲来无事刷刷MOOC，找到以前看的浙大翁凯老师的《面向对象程序设计——Java语言》课程，重新过一遍仍觉受益颇深。<br>其中有一个Castle的例子，原始代码很烂，翁凯老师在后面几章不断地带领观看者修改这个代码，那我也大概整理一下这部分的内容吧。</p><p><a href="https://www.icourse163.org/course/ZJU-1001542001">面向对象程序设计——Java语言</a></p><h1 id="原版代码"><a href="#原版代码" class="headerlink" title="原版代码"></a>原版代码</h1><p>即使类的设计很糟糕，也还是有可能实现一个应用程序，使之运行并完成所需的工作。一个已完成的应用程序能够运行，但并不能表明程序内部的结构是否良好。当维护程序员想要对一个已有的软件做修改的时候，问题才会浮现出来。比如，程序员试图纠正已有软件的缺陷，或者为其增加一些新的功能。显然，如果类的设计良好，这个任务就可能很轻松；而如果类的设计很差，那就会变得很困难，要牵扯大量的工作。在大的应用软件中，这样的情形在最初的实现中就会发生了。如果以不好的结构来实现软件，那么后面的工作可能变得很复杂，整个程序可能根本无法完成，或者充满缺陷，或者花费比实际需要多得多的时间才能完成。在现实中，一个公司通常要维护、扩展和销售一个软件很多年，很可能今天在商店买到的软件，其最初的版本是在十多年前就开始了的。在这种情形下，任何软件公司都不能忍受不良结构的代码。既然很多不良设计的效果会在试图调整或扩展软件时明显地展现出来，那么就应该以调整或扩展软件来鉴别和发现这样的不良设计。</p><p>这里将使用一个叫作城堡游戏的例子，这个例子很简单，基本实现了一个基于字符的探险游戏。起初这个游戏并不十分强大，因为还没全部完成，你可以运用你的想像力来设计和实现这个的游戏，让它更有趣更好玩……</p><p>那么，首先，从下边这个糟糕的代码开始吧！</p><h2 id="Room类"><a href="#Room类" class="headerlink" title="Room类"></a>Room类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">castle</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Room</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Room</span> northExit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Room</span> southExit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Room</span> eastExit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Room</span> westExit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token class-name">String</span> description<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setExits</span><span class="token punctuation">(</span><span class="token class-name">Room</span> north<span class="token punctuation">,</span> <span class="token class-name">Room</span> east<span class="token punctuation">,</span> <span class="token class-name">Room</span> south<span class="token punctuation">,</span> <span class="token class-name">Room</span> west<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>north <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            northExit <span class="token operator">=</span> north<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>east <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            eastExit <span class="token operator">=</span> east<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>south <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            southExit <span class="token operator">=</span> south<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>west <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            westExit <span class="token operator">=</span> west<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Game类"><a href="#Game类" class="headerlink" title="Game类"></a>Game类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Room</span> currentRoom<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">createRooms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createRooms</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">Room</span> outside<span class="token punctuation">,</span> lobby<span class="token punctuation">,</span> pub<span class="token punctuation">,</span> study<span class="token punctuation">,</span> bedroom<span class="token punctuation">;</span>              <span class="token comment">//制造房间</span>        outside <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token string">"城堡外"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lobby <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token string">"大堂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token string">"小酒吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        study <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token string">"书房"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bedroom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token string">"卧室"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//初始化房间的出口</span>        outside<span class="token punctuation">.</span><span class="token function">setExits</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> lobby<span class="token punctuation">,</span> study<span class="token punctuation">,</span> pub<span class="token punctuation">)</span><span class="token punctuation">;</span>        lobby<span class="token punctuation">.</span><span class="token function">setExits</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> outside<span class="token punctuation">)</span><span class="token punctuation">;</span>        pub<span class="token punctuation">.</span><span class="token function">setExits</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> outside<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        study<span class="token punctuation">.</span><span class="token function">setExits</span><span class="token punctuation">(</span>outside<span class="token punctuation">,</span> bedroom<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bedroom<span class="token punctuation">.</span><span class="token function">setExits</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> study<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentRoom <span class="token operator">=</span> outside<span class="token punctuation">;</span>  <span class="token comment">//从城堡门外开始</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printWelcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎来到城堡！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个超级无聊的游戏。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如果需要帮助，请输入 'help' 。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在你在"</span> <span class="token operator">+</span> currentRoom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"出口有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>northExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"north "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>eastExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"east "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>southExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"south "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>westExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"west "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 以下为用户命令</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"迷路了吗？你可以做的命令有：go bye help"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如：\tgo east"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">goRoom</span><span class="token punctuation">(</span><span class="token class-name">String</span> direction<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token class-name">Room</span> nextRoom <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>direction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"north"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextRoom <span class="token operator">=</span> currentRoom<span class="token punctuation">.</span>northExit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>direction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"east"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextRoom <span class="token operator">=</span> currentRoom<span class="token punctuation">.</span>eastExit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>direction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"south"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextRoom <span class="token operator">=</span> currentRoom<span class="token punctuation">.</span>southExit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>direction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"west"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextRoom <span class="token operator">=</span> currentRoom<span class="token punctuation">.</span>westExit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextRoom <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"那里没有门！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            currentRoom <span class="token operator">=</span> nextRoom<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你在"</span> <span class="token operator">+</span> currentRoom<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"出口有: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>northExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"north "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>eastExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"east "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>southExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"south "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>westExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"west "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>game<span class="token punctuation">.</span><span class="token function">printWelcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> line <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"help"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        game<span class="token punctuation">.</span><span class="token function">printHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"go"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        game<span class="token punctuation">.</span><span class="token function">goRoom</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"感谢您的光临。再见！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="熟悉代码"><a href="#熟悉代码" class="headerlink" title="熟悉代码"></a>熟悉代码</h1><ol><li>这个应用程序的任务是什么？ 通过接受用户的输入，改变当前所在的位置。</li><li>这个应用程序接受什么样的命令？ help、go、bye。</li><li>每个命令做什么？ help：显示使用说明；go：切换当前的房子；bye：退出应用程序。</li><li>在场景中有多少间房?  大堂、酒吧、书房、卧室 共四间房子。</li><li>画出现有的房间的地图：  <pre class="line-numbers language-java" data-language="java"><code class="language-java">小酒吧<span class="token operator">--</span><span class="token operator">--</span>城堡外<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>大堂            <span class="token operator">|</span>           书房<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>卧室<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1Java%E8%AF%AD%E8%A8%80Castle%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E6%95%B4%E7%90%86/1.png"></li></ol><h1 id="消除代码重复"><a href="#消除代码重复" class="headerlink" title="消除代码重复"></a>消除代码重复</h1><p>程序中存在相似甚至相同的代码块，是非常低级的代码质量问题。</p><p>代码复制存在的问题是，如果需要修改一个副本，那么就必须同时修改所有其他的副本，否则就存在不一致的问题。这增加了维护程序员的工作量，而且存在造成错误的潜在危险。很可能发生的一种情况是，维护程序员看到一个副本被修改好了，就以为所有要修改的地方都已经改好了。因为没有任何明显迹象可以表明另外还有一份一样的副本代码存在，所以很可能会遗漏还没被修改的地方。</p><p>我们从消除代码复制开始。消除代码复制的两个基本手段，就是函数和父类。</p><p>代码复制是不良设计的一种表现，而上面的代码中并不少见，比如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在你在"</span> <span class="token operator">+</span> currentRoom<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"出口有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>northExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"north "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>eastExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"east "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>southExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"south "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>westExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"west "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理方式就是单独封装成一个函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在你在"</span> <span class="token operator">+</span> currentRoom<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"出口有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>northExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"north "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>eastExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"east "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>southExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"south "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>westExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"west "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="注意可扩展性"><a href="#注意可扩展性" class="headerlink" title="注意可扩展性"></a>注意可扩展性</h1><p>可扩展性也是必须注意的事情，简单的讲就是“<strong>面对未来未知的变化，能够以不变应万变，以最小的代价和最小的影响来拥抱变化</strong>”（非官方的说法，个人觉得更容易理解）。<br>可运行的代码≠良好的代码，虽代码做维护的时候更能看出代码的质量（无论是自己维护还是交给他人维护）。</p><p>比如说上面的代码，我们在Room类中用的是north、south、east、west，如果要加入up、down，则不仅要改Room，还要改Game，而且是大改，这样影响程序的可扩展性、可维护性。</p><h1 id="做好封装"><a href="#做好封装" class="headerlink" title="做好封装"></a>做好封装</h1><p>要评判某些设计比其他的设计优秀，就得定义一些在类的设计中重要的术语，以用来讨论 设计的优劣。对于类的设计来说，有两个核心术语：<strong>耦合</strong>和<strong>聚合</strong>。<strong>耦合这个词指的是类和类之间的联系</strong>。之前的章节中提到过，程序设计的目标是一系列通过定义明确的接口通信来协同工作的类。耦合度反映了这些类联系的紧密度。我们努力要获得低的耦合度，或者叫作<strong>松耦合</strong>（loose coupling）。</p><p><strong>耦合度决定修改应用程序的容易程度</strong>。在一个紧耦合的结构中，对一个类的修改也会导致对其他一些类的修改。这是要努力避免的，否则，一点小小的改变就可能使整个应用程序发生改变。另外，要想找到所有需要修改的地方，并一一加以修改，却是一件既困难又费时的事情。另一方面，在一个松耦合的系统中，常常可以修改一个类，但同时不会修改其他类，而且整个程序还可以正常运作。</p><p><strong>聚合与程序中一个单独的单元所承担的任务的数量和种类相对应有关，它是针对类或方法这样大小的程序单元而言的</strong>。理想情况下，一个代码单元应该负责一个聚合的任务（也就是说，一个任务可以被看作是一个逻辑单元）。一个方法应该实现一个逻辑操作，而一个类应该代表一定类型的实体。聚合理论背后的要点是重用：如果一个方法或类是只负责一件定义明确的事情，那么就很有可能在另外不同的上下文环境中使用。遵循这个理论的一个额外的好处是，当程序某部分的代码需要改变时，在某个代码单元中很可能会找到所有需要改变的相关代码段。</p><p>当然，以上面的代码为例，其余细节暂且不论，把属性设置成public，直接访问，这完全不符合封装的原则。<br>再细说一下这里的封装问题：Room和Game都有大量代码和出口相关，尤其是Room的四大属性，这样的设计大大加强了耦合度，不利于维护。</p><p>那是不是用“初学OOP经典大法”——[private]属性+[public]getter方法？<br>比如说<code>public Room northExit;</code>改成：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Room</span> <span class="token function">getNorth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>northExit<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其实真不是，这真的是很多人的一个误区。<br>诚然，写setter/getter比起public的属性已经好了很多，但你细品，持有引用的类还是需要知道被引用的类的细节，二者还是紧紧耦合在一起的。<br>那我们需要什么呢？<br>我们需要这样一个函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getExitDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>northExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"north "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>southExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"south "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eastExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"east "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>westExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"west "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此基础上，我们也知道之前为了避免代码重复而写了这样一个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在你在"</span> <span class="token operator">+</span> currentRoom<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"出口有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>northExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"north "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>eastExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"east "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>southExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"south "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span>westExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"west "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们为了降低耦合度，需要将其改为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在你在"</span> <span class="token operator">+</span> currentRoom<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"出口有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>currentRoom<span class="token punctuation">.</span><span class="token function">getExitDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着看，之前由于去重代码，goRoom()已经是这个样子了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">goRoom</span><span class="token punctuation">(</span><span class="token class-name">String</span> direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Room</span> nextRoom <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>direction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"north"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextRoom <span class="token operator">=</span> currentRoom<span class="token punctuation">.</span>northExit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>direction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"east"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextRoom <span class="token operator">=</span> currentRoom<span class="token punctuation">.</span>eastExit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>direction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"south"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextRoom <span class="token operator">=</span> currentRoom<span class="token punctuation">.</span>southExit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>direction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"west"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextRoom <span class="token operator">=</span> currentRoom<span class="token punctuation">.</span>westExit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextRoom <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"那里没有门！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        currentRoom <span class="token operator">=</span> nextRoom<span class="token punctuation">;</span>        <span class="token function">showPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但其实这里还是重度耦合，我们要将这个事交还给Room来做：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Room</span> <span class="token function">getExit</span><span class="token punctuation">(</span><span class="token class-name">String</span> direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Room</span> nextRoom <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>direction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"north"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextRoom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>northExit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>direction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"east"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextRoom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eastExit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>direction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"south"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextRoom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>southExit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>direction<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"west"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextRoom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>westExit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nextRoom<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而goRoom()则变成了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">goRoom</span><span class="token punctuation">(</span><span class="token class-name">String</span> direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Room</span> nextRoom <span class="token operator">=</span> currentRoom<span class="token punctuation">.</span><span class="token function">getExit</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextRoom <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"那里没有门！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        currentRoom <span class="token operator">=</span> nextRoom<span class="token punctuation">;</span>        <span class="token function">showPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，Room和Game之间的耦合度大大降低了，至少没了直接的属性调用，Game不必完全知道Room的细节了。</p><h1 id="使用接口增强可扩展性"><a href="#使用接口增强可扩展性" class="headerlink" title="使用接口增强可扩展性"></a>使用接口增强可扩展性</h1><p>上面的修改完成之后还有哪些不足呢？<br>上面的代码修改针对Room类实现的新方法，虽说把方向的细节正是隐藏在Room内部了，今后方向如何实现也与外部无关了，但还是一种“硬编码”的方式。<br>Game与Room松耦合，但Room本身还是“硬编码”，一旦方向变化，则需要大量的重写代码，可扩展性还是不好。<br>那怎么处理呢？<br>答案是：使用集合容器，比如HashMap。</p><p>修改方法就是删去所有的属性，转而换成一个Map属性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span> <span class="token class-name">Room</span><span class="token punctuation">&gt;</span></span> exits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这么改可还行，问题是之前的全被推翻了，那就重写呗！<br>比如说这个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setExits</span><span class="token punctuation">(</span><span class="token class-name">Room</span> north<span class="token punctuation">,</span> <span class="token class-name">Room</span> east<span class="token punctuation">,</span> <span class="token class-name">Room</span> south<span class="token punctuation">,</span> <span class="token class-name">Room</span> west<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>north <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        northExit <span class="token operator">=</span> north<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>east <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        eastExit <span class="token operator">=</span> east<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>south <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        southExit <span class="token operator">=</span> south<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>west <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        westExit <span class="token operator">=</span> west<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>肯定是不能要了，那就重写一个getExit()：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setExit</span><span class="token punctuation">(</span><span class="token class-name">String</span> dir<span class="token punctuation">,</span> <span class="token class-name">Room</span> room<span class="token punctuation">)</span> <span class="token punctuation">{</span>    exits<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> room<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同样地，之前有一个修改后加进去的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getExitDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>northExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"north "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>southExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"south "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eastExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"east "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>westExit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"west "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也是涉及方向细节，要改：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getExitDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> entry <span class="token operator">:</span> exists<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上一次重写的getExit()也要改：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Room</span> <span class="token function">getExit</span><span class="token punctuation">(</span><span class="token class-name">String</span> direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> exits<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要说明的是，永远不要认为这样一行代码的方法没有存在的意义，因为这最关键的是表示一个接口，提供这种服务，如果以后不这么写了呢？对吧，大家都是聪明人，不必多言。</p><p>Game类也受到点“波及”：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createRooms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Room</span> outside<span class="token punctuation">,</span> lobby<span class="token punctuation">,</span> pub<span class="token punctuation">,</span> study<span class="token punctuation">,</span> bedroom<span class="token punctuation">;</span>    <span class="token comment">//制造房间</span>    outside <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token string">"城堡外"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lobby <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token string">"大堂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token string">"小酒吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    study <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token string">"书房"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bedroom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token string">"卧室"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化房间的出口</span>    outside<span class="token punctuation">.</span><span class="token function">setExits</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> lobby<span class="token punctuation">,</span> study<span class="token punctuation">,</span> pub<span class="token punctuation">)</span><span class="token punctuation">;</span>    lobby<span class="token punctuation">.</span><span class="token function">setExits</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> outside<span class="token punctuation">)</span><span class="token punctuation">;</span>    pub<span class="token punctuation">.</span><span class="token function">setExits</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> outside<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    study<span class="token punctuation">.</span><span class="token function">setExits</span><span class="token punctuation">(</span>outside<span class="token punctuation">,</span> bedroom<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bedroom<span class="token punctuation">.</span><span class="token function">setExits</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> study<span class="token punctuation">)</span><span class="token punctuation">;</span>    currentRoom <span class="token operator">=</span> outside<span class="token punctuation">;</span>  <span class="token comment">//从城堡门外开始</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里要改，但很简单，反正不过是初始化而已，调用getExit()改一改就行了。<br>而此时我们发现其他部分不需要改，这就是松耦合的好处啊！</p><h1 id="框架-数据"><a href="#框架-数据" class="headerlink" title="框架+数据"></a>框架+数据</h1><p>从程序中识别出框架和数据，以代码实现框架，将部分功能以数据的方式加载，这样能在很大程度上实现可扩展性。</p><p>这个框架不是我们说的“Spring”、”MyBatis”那种。我们不想“if-else-”泛滥，就可以使用Handler，再使用Map来保存命令和Handler之间的关系，进而破除“if-else-”硬编码。</p><p>我们使用Map是一个很秀的想法，但是函数不是对象，而Map的value必须是对象，所以我们才用的Handler。</p><p>Handler被定义为一个类，这样会很好：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCmd</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//TODO something</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而Game需要一个Map：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Handler</span><span class="token punctuation">&gt;</span></span> handlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么在初始化Game的时候，在构造器中直接使用put()初始化必要的命令：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    handlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"go"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HandlerGo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HandlerHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HandlerBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">createRooms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还需要一个play()方法，把main()的死循环扔进去：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> line <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"help"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            game<span class="token punctuation">.</span><span class="token function">printHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"go"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            game<span class="token punctuation">.</span><span class="token function">goRoom</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法需要改一改：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> line <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Handler</span> handler <span class="token operator">=</span> handlers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            handler<span class="token punctuation">.</span><span class="token function">doCmd</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个没改好，因为没考虑退出的问题，但你要是考虑退出的问题，就需要if特判，就又绕回去了，所以需要再考虑：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    handler<span class="token punctuation">.</span><span class="token function">doCmd</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token function">isBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的，Handler也要完善一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Game</span> game<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Game</span> game<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>game <span class="token operator">=</span> game<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCmd</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之前我们也发现了HandlerGo、HandlerHelp、HandlerBye还没出现，自然是都要extends类Handler，把板子做出来：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerGo</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">HandlerGo</span><span class="token punctuation">(</span><span class="token class-name">Game</span> game<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCmd</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        game<span class="token punctuation">.</span><span class="token function">goRoom</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerHelp</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">HandlerHelp</span><span class="token punctuation">(</span><span class="token class-name">Game</span> game<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCmd</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"迷路了吗？你可以做的命令有：go bye help"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如：\tgo east"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerBye</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">HandlerBye</span><span class="token punctuation">(</span><span class="token class-name">Game</span> game<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而goRoom()要改成public：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">goRoom</span><span class="token punctuation">(</span><span class="token class-name">String</span> direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Room</span> nextRoom <span class="token operator">=</span> currentRoom<span class="token punctuation">.</span><span class="token function">getExit</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextRoom <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"那里没有门！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        currentRoom <span class="token operator">=</span> nextRoom<span class="token punctuation">;</span>        <span class="token function">showPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再就是，构造Game对象的时候要传this：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    handlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"go"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HandlerGo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HandlerHelp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HandlerBye</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">createRooms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就完成了基本的修改，只需微调即可完成系统修改。</p><p>这里直接使用了普通类来表示Handler，其实也可以考虑接口与抽象类，这里点到为止。</p><h1 id="匿名内部类让代码更优雅"><a href="#匿名内部类让代码更优雅" class="headerlink" title="匿名内部类让代码更优雅"></a>匿名内部类让代码更优雅</h1><p>在评论区看到下面的代码（仅限于Game类的构造器），写的很不错，还做了扩展：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 匿名类</span>    handlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"go"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCmd</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">goRoom</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCmd</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"迷路了吗？你可以做的命令有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如： go east"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"gorandom"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCmd</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">goRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rooms <span class="token operator">=</span> <span class="token function">createRooms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是不是更秀了呢？哈哈，根本不再需要每一个具体的Handler类，也不需要this传参，Nice！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文总结了一下如何修改给出的Castle代码，使之基本做到高内聚、低耦合和具备可扩展性，也说明了很多编程的注意事项。<br>原版代码和课程讲评来自浙江大学翁凯老师，感兴趣的读者可以去查看相关的资源！</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Java的面向对象编程范式</title>
      <link href="/2020/09/26/ruan-jian-gong-cheng/mian-xiang-dui-xiang/ji-yu-java-de-mian-xiang-dui-xiang-bian-cheng-fan-shi/"/>
      <url>/2020/09/26/ruan-jian-gong-cheng/mian-xiang-dui-xiang/ji-yu-java-de-mian-xiang-dui-xiang-bian-cheng-fan-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="课程信息"><a href="#课程信息" class="headerlink" title="课程信息"></a>课程信息</h1><p>学习链接：<a href="https://www.icourse163.org/course/NJU-1002246017">中国大学慕课-南京大学-基于Java的面向对象编程范式</a></p><h1 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h1><ol><li>面向对象的世界观里，类有两种职责：数据职责和行为职责，这两种职责并存于类中。</li><li>类和对象都是职责的体现，不同的是一个抽象一个具体。</li><li>面向对象编程是有职责的对象之间的协作。</li><li>不同的视角：结构化方法→行为视角、数据为中心方法→数据视角、面向对象方法→职责视角。</li><li>想要解决一个问题，我们会希望在问题空间找到一种建模的方式，然后将问题空间的问题转化为解空间的答案。</li><li>对象是一种建模方法，它既表示客观世界的问题空间中某个具体的事物，又表示软件系统解空间的基本元素。</li><li>没有行为的类，可以被设计为某个其他类的属性。</li><li>类是描述相同事物的集合，它以概要的方式描述了相同事物集合中的所有元素，但却允许类中的每个实体元素可以在非本质特征上变化。</li><li>为什么不要重复造轮子？因为轮子的设计已经足够应对变更了（疯狂暗示软件复用）。</li><li>代码提交前必须进行单元测试。单元测试针对于软件设计的最小单位方法展开正确性检验。</li><li>单元测试有两种情况：独立且与其他方法无关（独立测试即可）；半独立且只与同类中的方法有依赖关系（先测被依赖的方法）。</li><li>一种好的类设计方案：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token class-name">Position</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// calculate and return the distance from this object to position</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">heading</span><span class="token punctuation">(</span><span class="token class-name">Position</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// calculate and return the heading from this object to position</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> latitude<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> longitude<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>封装可以将将潜在的变更与外界隔离开来。</li><li>封装具有三原则：将数据与操作数据的行为放在一起；用职责驱动的设计原则来决定数据和行为在一起；职责要具有完备性。</li><li>关于类设计完备性的说明。<br>完备性是一个数学上的概念，下面举例说明：<br>比如我们有一个水杯，它只进水不出水就是不完备的……<br>特殊情况下，设计可能不能是完备的，比如会计打发票，就算打错了，可以红冲处理掉但不可能把已发生的支付过程取消掉……</li><li>静态不能访问非静态。</li><li>一个对象的整体协议可能会分为多个内聚的逻辑行为组。划分后的每个逻辑行为组就描述了对象的一个独立职责，体现了对象的一个独立角色。如果一个对象拥有多个行为组，就意味着该对象拥有多个不同的职责，需要扮演多个不同的角色。每个角色都是对象的一个职责的体现，所有的角色是对象所有职责的体现。理想的单一职责对象应该仅仅扮演一个角色。</li><li>职责的分配原则：覆盖到所有重要的方面，寻找需要执行的动作以及需要维护和生成的信息。</li><li>单一职责的实施：当发现两变化同时要求我们修改这个类时，就要考虑拆分这个类。</li><li>一组对象共同协作履行整个应用软件的责任。</li><li>系统职责的划分可以是从小到大，将小职责聚合为大职责；也可以是从大到小，将大职责分配给小对象。自底向上和自顶向下往往是同时使用的。</li><li>对于一个对象来说，它可以与四种对象协作：它自身、任何以参数形式传入的对象、被该对象直接创建的对象、其所持有的对象引用。总结就是：一个对象可以和能拿到引用的对象协作。</li><li>面向对象程序设计的一些关系：<br>一般关系：依赖<br>对象层次的关系：连接、关联<br>类层次的关系：继承、实现</li><li>依赖体现了一种物理关系，因为这种依赖关系不仅仅体现在类和类之间，甚至可以存在于其他的软件工程元素之间。<br>我们可以说，一个类依赖于另一个类，一个对象依赖于另外一个对象，一个用例依赖于另外一个用例，一个包依赖于另外一个包，总之依赖表达了一种物理上的连接。</li><li>连接表达了对象与对象之间的一种连接，它是一种表达一种联系的具体的实例。</li><li>关联体现了对象与对象之间的一种逻辑关系，可分为：普通关联、聚合、组合。</li><li>关系的强度：<kbd>依赖 &lt; 普通关联 &lt; 聚合 &lt; 组合</kbd></li><li>依赖是一种“…uses a…”关系，就是某个对象的功能依赖于另外的某个对象，而被依赖的对象仅仅作为一种工具在使用，该对象不持有被依赖对象的引用。UML中依赖关系表现为[虚线+鱼骨箭头]。</li><li>关联是一种“…has a…”关系，就是某个对象会长期持有另一个对象的引用，而二者的关联往往也是相互的。关联的两个对象彼此之间没有任何强制性的约束，只要是二者同意，可以随时解除关系或进行关联，它们在生命周期上没有任何约定。被关联的对象还可以被别的对象关联，所以被关联对象是可以共享的。关联可以是单向的也可以是双向的，可以是普通关联也可以是可导航关联。</li><li>关联的多重性通过一条实线来表达，可接鱼骨箭头表示方向性。</li><li>聚合是一种“…owns a…”关系，是一种强版本的关联，它暗含一种所属关系以及生命周期关系。UML中聚合关系中间一条实线，一端是指向所有方的空心菱形，另一端是指向被所有方的鱼骨箭头。被聚合的对象还可以被别的对象关联，所以被聚合对象是可以共享的。</li><li>组合是一种“…is a part of…”关系，是一种最强版本的关联，它直接要求包含对象对被包含对象的拥有以及被包含对象生命周期的关系。UML中组合关系中间一条实线，一端是指向所有方的实心菱形，另一端是指向被所有方的鱼骨箭头。被组合的对象还可以被别的对象关联，所以被聚合对象是可以共享的，然而绝不存在两个包含对象对同一个被包含对象的共享。</li><li>组合不但把关联到的对象作为一个成员变量，并在此处new了一个对象。这一点是非常重要的。</li><li>可修改性有三重含义：狭义可修改性（对已有实现的修改不影响到其他实现）、可扩展性（对新的实现的扩展不影响到已有的其他实现）、灵活性（实现动态配置）。</li><li>继承的由来：利用泛化关系实现代码重用和抽象等。备注：泛化≠继承。</li><li>可以继承什么、可以覆盖什么：<br>子类继承了父类所有的成员变量和成员方法。<br>子类可以增加父类的成员变量和成员方法。<br>子类可以覆盖父类的成员方法。<br>子类不可以覆盖父类的成员变量。</li><li>继承是一种“…is a…”关系，“A is B, B is C → A is C”。</li><li>编译时，编译器根据引用变量的类型（而不是引用变量指向的类型）决定能否调用某个方法；执行时，JVM依据实际引用变量指向对象的类型决定实际哪个方法被调用。这就是所谓“编译时类型”和“运行时类型”的区别，即所谓“编译时类型”是我们的Java代码中定义的变量类型，“运行时类型”看的是这个对象到底是什么类型（被new成了什么），这是学习多态时必须理解的。如此，我们就对<code>SuperClass obj = new SubClass();</code>有了更深刻的理解。</li><li>多态通过分离“做什么”和“怎么做”，从另一个角度将接口和实现分离开来。多态不仅能够改善代码的组织结构和可读性，还能创建“可扩展”的程序，即无论在项目最初创建时，还是在需要添加新功能时，都可以进行扩充。</li><li>多态使得系统更容易理解，其作用之一就是消除类型之间的耦合关系。多态方法调用允许一种类型表现出与其他相似类型之间的区别，只要他们都是从同一基类导出来的。这种区别是根据方法行为的不同而表示出来的，虽然这些方法都可以通过同一个基类来调用。</li><li>多态的意思是多种形式，多种形式的意思是可以出现不同的计算类型，并且在运行的时候动态的确定正确的计算。</li><li>多态是指一个多个方法使用同一个名字却有多种解释，当使用这个名字去调用方法时，系统将选择重载自动的选择其中的一个方法。在多态中只关心一个对象做什么，而不关心如何去做。</li><li>子类对象可以赋给父类引用变量，父类对象不可以赋给子类引用对象。</li><li>Overriding的限制：参数必须一致，返回值必须兼容，方法的可达性不能降低。</li><li>非抽象类中不可以有抽象方法，抽象类中可以有非抽象方法。</li><li>抽象方法的存在就是为了多态，具体的类必须实现所有的抽象方法，实现抽象方法就像子类覆盖父类的方法一样。</li><li>子类继承父类，就会把父类完全继承过来，二者之间存在一种规约，即父类拥有什么接口，子类也具有什么接口。父类变子类也要变；而组合的两端没有“契约”的存在，有时会显得更好。</li><li>组合和继承要注意：确保继承是一种“…is a…”的关系；使用继承不要仅仅是为了代码复用或是体现多态。</li><li>父类接口的脆弱性会给子类带来很大的麻烦。</li><li>继承的一些问题（补充向）：<br>(1) 我们肯定是要重写一些什么的，但如果重写一切，那父类就不该是一个类而应该是一个接口；另外，如果不使用任何继承的方法，那继承也毫无意义。<br>(2) 我们不希望堆栈支持所有的父类方法，这是一个问题。<br>(3) 继承的父类与子类存在共有接口的耦合性，当父类接口发生改变时，子类接口也随之改变。<br>(4) 当子类创建对象的时候，就决定了其实现选择，无法实现动态的修改。</li><li>接口定义了一种规约，而类实现了一种规约。</li><li>含有继承关系的初始化：<ol><li>从main()方法开始，加载父类，直到加载到根节点。</li><li>静态初始化根节点类，然后逐步静态初始化其子类。</li><li>所有的成员变量都赋初值为0/0.0/false/null。</li><li>父类的构造函数被调用。</li><li>成员变量按照文字顺序初始化。</li><li>构造函数的剩余部分被调用。</li></ol></li><li>新覆盖的方法会在对象创建之前被调用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习</title>
      <link href="/2020/09/26/ji-suan-ji-ke-xue-ji-chu/ji-qi-xue-xi/"/>
      <url>/2020/09/26/ji-suan-ji-ke-xue-ji-chu/ji-qi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习常用术语"><a href="#机器学习常用术语" class="headerlink" title="机器学习常用术语"></a>机器学习常用术语</h1><ul><li><strong>观察值</strong>（<em>observation</em>）：我们观察到的单个单位——例如，一个人、一次销售或一条记录。</li><li><strong>学习算法</strong>（<em>learning algorithm</em>）：用来学习模型的最佳参数的算法——例如，线性回归、朴素贝叶斯或决策树。</li><li><strong>模型</strong>（<em>model</em>）：学习算法的输出。学习算法训练出来的模型可以用来做预测。</li><li><strong>参数</strong>（<em>parameter</em>）：一个模型在训练过程中学到的权重或系数。</li><li><strong>超参数</strong>（<em>hyperparameter</em>）：一个学习算法在训练前需要设置的一组参数。</li><li><strong>性能</strong>（<em>performance</em>）：用来评估模型的指标。</li><li><strong>损失</strong>（<em>loss</em>）：一个需要在训练中最小化或最大化的指标。</li><li><strong>训练</strong>（<em>train</em>）：使用类似梯度下降之类的数学方法将一个学习算法应用到数据上。</li><li><strong>拟合</strong>（<em>fit</em>）：使用分析方法将一个机器学习算法应用到数据上。</li><li><strong>数据</strong>（<em>data</em>）：一组观察值。</li></ul><p>更多术语：<a href="https://developers.google.cn/machine-learning/glossary?hl=zh-cn">轻戳这里</a></p><h1 id="机器学习处理不均衡分类"><a href="#机器学习处理不均衡分类" class="headerlink" title="机器学习处理不均衡分类"></a>机器学习处理不均衡分类</h1><p>在真实的场景中，不均衡的分类到处可见，比如大多数访客都不会单击“购买”按钮，大多数用户都不会付费成为“VIP”，有些癌症或遗传病也是十分罕见的。因此，处理不均衡分类就称为机器学习的一个常见任务。</p><p>对此，最好的解决方案是收集更多的观观察值——尤其是占少数的分类的观察值。可惜的是，这可能很难做到，所以我们需要求助于其他手段。</p><p>次优的解决方案是选择更适用于评估不均衡数据的标准。准确率常常被作为评估模型性能的标准，但用准确率来评估不均衡分类是不合适的。例如，如果样本中只有0.5%的人得了某种罕见的癌症，那么即使我们的模型预测没有人会得这种癌症，准确率也只能达到99.5%。很明显，这也不是我们想要的。一些更有效的评估标准，如混淆矩阵、精确度、召回率、F1值以及ROC曲线都是值得学习的。</p><p>第三个解决方案是在一些分类器模型中使用分类权重参数，这样就能针对不均衡的分类来调整算法。scikit-learn的很多分类器都有class_weight参数，便于使用。</p><p>第四个方案和第五个方案是相关的：下采样和上采样。在下采样中，需要从占多数的分类中创建一个子集，其观察之数量与占少数的分类的观察值数量相等。在上采样中，采用有放回的方式对占少数的分类重复采样，一次创建与占多数的分类有相同数量观察值的数据集。到底是下采样还是上采样，需要根据实际场景做决定。通常情况下，应该同时尝试两种方法，看看哪种效果更好。</p><h1 id="机器学习中的缺失值及其填充处理"><a href="#机器学习中的缺失值及其填充处理" class="headerlink" title="机器学习中的缺失值及其填充处理"></a>机器学习中的缺失值及其填充处理</h1><p>大多数机器学习算法不允许目标值或特征数组中存在缺失值。因此，不能简单的忽略数据中的缺失值，而是要在数据预处理阶段解决这个问题。</p><p>最简单的解决方法是删除所有含其缺失值的观察值，用Numpy或Pandas很容易实现。</p><p>即便如此，删除带缺失值的观察值也是一件令人心痛的决定，因为这样做会让算法丢失那些观察值中那些非缺失值的信息，所以删除观察值只能作为最终别无他法时不得已的选择。</p><p>还有一点很重要，删除观察值可能会在数据中引入偏差，这主要由缺失值的成因决定。</p><p>缺失值一共有三种类型：</p><ul><li>完全随机缺失（MCAR）<br>数据缺失的可能性与任何其他东西无关。<br>例如，某个接受问卷调查的人会在回答问题前先掷一个骰子，如果掷出了6，那她就跳过那个问题不做回答。</li><li>随机缺失（MAR）<br>数据缺失的可能性不是完全随机的，与已经存在的其他特征有关。<br>例如，在一次问卷调查中会问及性别和薪资水平，那么接受调查的女性更可能会跳过薪资的问题，但她们选择是否作答要看我们是否已经得知其性别信息。</li><li>完全非随机缺失（MNAR）<br>数据缺失的可能性完全是非随机的，并且与未在特征中反映出的信息有关。<br>例如，一个问卷调查中会问及薪资水平，那么接受问卷调查的女性更可能会跳过薪资的问题，但是我们的数据中没有关于性别的特征。</li></ul><p>如果观察值是MCAR或者MAR，那么有时候删除它们是可以接受的。<br>如果它们是MNAR，那么数据缺失本身其实就是一个信息。删除MNAR观察值会导致数据产生偏差，因为这些观察值是由未观察到的系统效应产生的。</p><p>接下来说说缺失值的填充处理策略，主要有两种，各有利弊。</p><p>首先，可以使用机器学习来预测缺失值。为了达到目的，可以将带有缺失值的特征当作一个目标向量，然后使用剩余的特征来预测缺失值。虽然可以使用各种机器学习算法来做预测，但是流行的选择是KNN，作为一种机器学习算法，KNN使用k个最临近的观察值（根据某种距离度量算法计算得到）来预测缺失值。KNN的不足是，为了知道哪些观察值距离缺失值最近，需要计算每一个观察值与缺失值之间的距离。对于小数据集，这样处理没有问题，但是如果数据集中有成千上万的观察值，计算量将成为一个很严重的问题。</p><p>一个比较容易扩展到大数据集的方案是使用平均值来代替缺失值。尽管这样做的效果没有使用KNN来得好，但是“平均值填充策略”很容易扩展到包含成千上万观察值的大数据集。</p><p>最后说一下，如果要采用填充策略，最好是创建一个二元特征来表明该观察值是否包含填充值。</p><h1 id="机器学习中的异常值的识别和处理"><a href="#机器学习中的异常值的识别和处理" class="headerlink" title="机器学习中的异常值的识别和处理"></a>机器学习中的异常值的识别和处理</h1><p>用于机器学习的数据难免有异常值的存在，这就需要我们识别并处理异常值。</p><p>可惜，并没有一个通用的识别异常值的解决方案，每种方法都有自己的优势和不足，尝试综合使用多种技术（如基于EllipticEnvelope和基于IQR的识别）并从整体上来看结果。</p><p>对于被判定为异常值的数据，我们不妨也关注一下。比如我们的数据集是一个关于房子的数据集，其中一个特征是房间数。此时，如果一个房子因为拥有100+个房间被判定为异常值，那我们可以问问自己：这个数据真的是异常数据，还是它本质是一个旅馆呢？</p><p>再说说处理异常值，它和识别异常值一样，没有什么绝对的准则。我们可以从两个角度（方面）来考虑对异常值的处理：<br>第一，要弄清楚是什么让它们成为异常值的。如果你认为它们是错误的观察值，比如他们来自一个坏掉的传感器或者是被记错了的值，那么就要丢弃他们或者使用NaN来替换异常值，因为这些数据无法被我们信任。但是，如果我们认为这些异常值时极端值（比如一个超级豪宅有100间卧室），那么把它们标记为异常值或者对它们的值进行转换是比较合适的。<br>第二，应该基于机器学习的目标来处理异常值。例如，如果想要基于房屋的特征来预测其价格，那么可以合理的假设有100间卧室的大宅子的价格是由不同于普通家庭住宅的特征驱动的。此外，如果使用一个在线住房贷款的Web应用的部分数据来训练一个模型，那么就要假设潜在用户中不存在想要买一栋有几百间卧室的豪宅的亿万富翁。</p><p>所以，处理异常值，首先要想想为什么这个（些）数据是异常值，然后对于数据要有一个最终的目标。最重要的是，要记住“决定不处理异常值”本身就是一个有潜在影响的决定。（想想Java的异常处理吧，发现异常全都不处理的话要异常处理体系干嘛呢？）</p><p>另外，如果数据中有异常值，那么采用标准化方法做缩放就不太合适了，因为平均值和方差受异常值的影响很大。这种情况下，需要针对异常值使用一个鲁棒性更高的缩放方法，比如RobustScaler。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程</title>
      <link href="/2020/09/16/ruan-jian-gong-cheng/ruan-jian-guo-cheng/"/>
      <url>/2020/09/16/ruan-jian-gong-cheng/ruan-jian-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>你知道什么是软件吗？</p><p><strong>软件（IEEE）</strong>：计算机程序、规程，以及与运行计算机系统可能需要的相关文档和数据。</p><ul><li><strong>计算机程序</strong>：计算机设备可接受的一系列指令和说明，它用 来让计算机执行一个运算或操作。</li><li><strong>计算机数据</strong>：事实、概念或指令的一种结构化表示，能够被计算机设备所接受、理解或处理。数据可以是外部的（以计算机可读形式存在）或内置在计算机设备中。</li><li><strong>计算机程序文档</strong>：包括计算机程序列表和可读的打印输出物 ，包括需求、设计、和其他有关的计算机程序细节，以及使用和维护程序的说明。</li></ul><h2 id="软件的特点"><a href="#软件的特点" class="headerlink" title="软件的特点"></a>软件的特点</h2><ul><li>软件是<strong>设计开发</strong>的，而不是传统意义上生产制造的。</li><li>软件不会磨损，而会<strong>退化</strong>。</li><li>软件是根据实际的客户<strong>需求</strong>定制的。</li></ul><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/1.png"></p><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/2.jpg"></p><h2 id="软件分类"><a href="#软件分类" class="headerlink" title="软件分类"></a>软件分类</h2><ul><li><strong>系统软件</strong>：一套服务于其他程序的程序。</li><li><strong>应用软件</strong>：一些可以满足特定业务需要的独立应用程序。</li><li><strong>工程/科学软件</strong>：聚焦在科学和工程领域的应用软件。</li><li><strong>嵌入式软件</strong>：存在于某个产品或者系统中，可实现和控制面向最终使用者 和系统本身的特性和功能。</li><li><strong>产品线软件</strong>：为多个不同用户的使用提供特定功能，关注有限的特定市场 或者大众消费品市场。</li><li><strong>Web应用软件</strong>：基于Web应用的应用软件。</li><li><strong>人工智能软件</strong>：利用非数值算法解决计算和直接分析无法解决的复杂问题。</li></ul><h2 id="软件工程-1"><a href="#软件工程-1" class="headerlink" title="软件工程"></a>软件工程</h2><h3 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h3><p><strong>软件过程 (IEEE）</strong>：将系统化、规范的、可量化的方法应用于软件的开发、运行和维护，即将工程化方法应用于软件。</p><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/3.png"></p><h3 id="软件工程是一种层次化技术"><a href="#软件工程是一种层次化技术" class="headerlink" title="软件工程是一种层次化技术"></a>软件工程是一种层次化技术</h3><ul><li><strong>质量关注点</strong>：软件工程的<strong>根基</strong>，任何工程方法必须以组织对质量的承诺为基础。</li><li><strong>过程</strong>：软件工程的<strong>基础</strong>，定义了一个框架，将各个技术层次结合在一起，并实施合理地、及时地开发计算机软件，建立了一个环境以便于技术方法的采用、工作产品的产生、里程碑的建立、质量的保证等。</li><li><strong>方法</strong>：为建造软件提供<strong>技术上的解决方法</strong>。</li><li><strong>工具</strong>：为过程和方法提供自动化和半自动化的支持，即软件开发的<strong>支撑系统</strong>。</li></ul><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/4.png"></p><h1 id="过程综述"><a href="#过程综述" class="headerlink" title="过程综述"></a>过程综述</h1><h2 id="过程和软件过程"><a href="#过程和软件过程" class="headerlink" title="过程和软件过程"></a>过程和软件过程</h2><h3 id="过程和软件过程-1"><a href="#过程和软件过程-1" class="headerlink" title="过程和软件过程"></a>过程和软件过程</h3><p><strong>过程</strong>：过程是一组为达成某一确定目标而执行的一系列活动、包 括工具、方法、资源和人。<br><strong>软件过程</strong>：软件开发中所遵循的过程称为软件过程。</p><h3 id="过程与质量"><a href="#过程与质量" class="headerlink" title="过程与质量"></a>过程与质量</h3><ul><li>过程是质量三角的一个顶点，通常也被看作是其他两个方面的“粘合剂 ” 。</li><li>产品的高质量依赖于过程的高质量，过程、人、技术是产品的成本、进度、质量的决定性因素。</li></ul><p><strong>85%的问题源于系统而非人！</strong></p><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/5.png"></p><h2 id="过程框架"><a href="#过程框架" class="headerlink" title="过程框架"></a>过程框架</h2><h3 id="过程框架-1"><a href="#过程框架-1" class="headerlink" title="过程框架"></a>过程框架</h3><p>过程框架定义了若干小的框架活动，为完整的软件开发过程建立了基础。过程框架还包含一些适用于各个软件过程的普适性活动。<br>框架中每一个活动都是由一组软件工程动作组成的，每一个软件工程动作都由若干个任务集构成。</p><p>普适性活动贯穿整个软件过程，主要关注于项目管理、跟踪和控制，包括：</p><ul><li>软件项目跟踪和协调</li><li>风险管理</li><li>技术评审</li><li>度量</li><li>软件配置管理</li><li>可复用管理</li><li>工作产品的准备和生产</li></ul><p>对软件过程的适应性调整，是软件项目成功的关键。</p><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/6.png"></p><h3 id="通用过程框架"><a href="#通用过程框架" class="headerlink" title="通用过程框架"></a>通用过程框架</h3><p>五个基本框架活动：</p><ul><li>沟通：包含了与客户（共利益者）之间大量的交流和协作，还包括需求获 取以及其他相关活动。</li><li>策划：为后续的软件工程工作制定计划，描述了需要执行的技术任务，可 能的风险，资源需求，工作产品和工作进度计划。</li><li>建模：包括创建模型和设计两方面，创建模型有助于客户和开发人员更好 地理解软件需求；设计可以实现需求。</li><li>构建：包括编码和测试。</li><li>部署：软件交付到用户，用户对其进行评测并给出反馈意见。</li></ul><h3 id="任务集"><a href="#任务集" class="headerlink" title="任务集"></a>任务集</h3><p>任务集由<strong>工作任务</strong>、<strong>工作产品</strong>、<strong>质量保证点</strong>、<strong>项目里程碑</strong>组成。</p><ul><li>小型项目[获取需求]： <ol><li>制定一个项目的共利益者列表</li><li>邀请所有共利益者参加一个非正式会议</li><li>咨询所有共利益者对于软件特征和功能的需求</li><li>讨论需求，并确定最终的需求列表</li><li>划定需求优先级</li><li>把不确定的地方标出来</li></ol></li><li>大型项目[获取需求]：<ol><li>制定一个项目的共利益者列表</li><li>和共利益者每个成员分别单独讨论，获取所有的要求</li><li>建立初步的软件特征和功能的需求</li><li>安排一系列促进需求获取的会议</li><li>举行一系列会议</li><li>在每次会议上建立非正式的用户场景</li><li>根据共利益者的反馈，进一步细化用户场景</li><li>建立一个修正的需求列表</li><li>使用质量功能部署技术将需求划分优先级</li><li>讨论系统的验证方法</li></ol></li></ul><h2 id="过程模式"><a href="#过程模式" class="headerlink" title="过程模式"></a>过程模式</h2><h3 id="过程模式-1"><a href="#过程模式-1" class="headerlink" title="过程模式"></a>过程模式</h3><ul><li><strong>模式名称</strong>：该模式在软件过程中的功能</li><li><strong>目的</strong>：模式的目的</li><li><strong>类型</strong>：<ul><li><strong>任务模式</strong>：定义过程中软件工程动作或工作任务，以保证成功执行软件工程实践</li><li><strong>步骤模式</strong>：定义过程的框架活动，包含很多任务</li><li><strong>阶段模式</strong>：定义在过程中发生的框架活动序列</li></ul></li><li><strong>启动条件</strong>：模式应用的前提条件</li><li><strong>问题</strong>：模式将要解决的问题</li><li><strong>解决办法</strong>：模式的实现</li><li><strong>结束条件</strong>：模式成功执行之后的结果</li><li><strong>相关模式</strong>：该模式相关的其他模式</li><li><strong>已知应用实例</strong>：该模式应用的具体实例</li></ul><h3 id="过程模式举例"><a href="#过程模式举例" class="headerlink" title="过程模式举例"></a>过程模式举例</h3><p>当利益共同体对工作成果有大致的想法，但对具体的软件需求不确认时，下述简化的过程模 式描述了可采用的方法。</p><ul><li><strong>模式名称</strong>：原型开发</li><li><strong>目的</strong>：构造一个便于利益共同体反复评估的模型（原型），以便识别和确定软件需求。</li><li><strong>类型</strong>：阶段模式</li><li><strong>启动条件</strong>：在模式启动之前必须满足以下四个条件<br>（1）确定共利益者；<br>（2）已经建立起共利益者和软件开发队伍之间的沟通方式；<br>（3）共利益者确定了需要解决的主要问题；<br>（4）对项目范围、基本业务需求和项目约束条件有了初步了解。</li><li><strong>问题</strong>：需求模糊或者不存在，但都清楚地认识到项目存在的问题，且该问题必须通过软件解决。共利益者不确认他们想要什么，即他们无法详细描述软件需求。</li><li><strong>解决办法</strong>：描述了原型开发过程。</li></ul><p><strong>结束条件</strong>：共利益者已经开发了一个软件原型，识别了基本的需求。随后，可能有两种结果<br>（1）原型系统可以通过一系列的增量开发成为软件产品<br>（2）原型系统被抛弃，采用其他过程模式建立了软件产品。</p><ul><li><strong>相关模式</strong>：客户沟通、迭代设计、迭代开发、客户评估、需求抽取。</li><li><strong>已知应用实例</strong>：当需求不确定时，推荐原型开发方法。</li></ul><h2 id="过程评估"><a href="#过程评估" class="headerlink" title="过程评估"></a>过程评估</h2><h3 id="过程评估方法"><a href="#过程评估方法" class="headerlink" title="过程评估方法"></a>过程评估方法</h3><ul><li>用于过程改进的标准CMMI评估方法：提供了五步的过程评估模型，包括启动、诊断、建立、执行和学习 。</li><li>软件ISO 9001：2000：这是一个通用标准，任何开发组织如果希望提高所提供的产品、系统或服务的整体质量，都可采用这个标准。因此，该标准可直接应用于软件组织和公司。</li><li>SPICE(ISO/IEC 15504)：该标准定义了软件过程评估计的一系列要求。该标准的目的是帮助软件开发组织建立客观的评价体系，以评估定义的软件过程的有效性。</li></ul><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/7.png"></p><h3 id="ISO-9001-2000"><a href="#ISO-9001-2000" class="headerlink" title="ISO 9001:2000"></a>ISO 9001:2000</h3><p>采用“<strong>计划-实施-检查-行动</strong>”循环，将其应用于软件项目的质量管理环节。</p><h3 id="PDCA模型（阶段性、持续性）"><a href="#PDCA模型（阶段性、持续性）" class="headerlink" title="PDCA模型（阶段性、持续性）"></a>PDCA模型（阶段性、持续性）</h3><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/8.png"></p><h3 id="CMMI"><a href="#CMMI" class="headerlink" title="CMMI"></a>CMMI</h3><p>是一个全面的过程模型，描述了成熟软件过程应该具备的特定目标、实践和能力，并根据能力水平评定为以下几级：</p><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/9.png"><br><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/10.png"></p><table><thead><tr><th>Category</th><th>Process Areas</th></tr></thead><tbody><tr><td>过程管理类</td><td>组织过程聚焦、组织过程定义、组织培训、 组织过程性能、组织革新和部署</td></tr><tr><td>项目管理类</td><td>项目策划、项目监督和控制、供方协定管理、 集成项目管理、风险管理、定量项目管理</td></tr><tr><td>工程化类</td><td>需求管理、需求开发、技术解决、产品集成、 验证、确认</td></tr><tr><td>支持类</td><td>配置管理、过程和产品质量保证、测量与分析、 原因分析和决定、决策分析和决定</td></tr></tbody></table><h2 id="CMMI与ISO9001的不同点"><a href="#CMMI与ISO9001的不同点" class="headerlink" title="CMMI与ISO9001的不同点"></a>CMMI与ISO9001的不同点</h2><p>ISO9001和CMMI的共同点是二者都强调了软件产品的质量。所不同的是，ISO9001强调的是衡量的准则，例如应该做什么、什么算好、什么算不好，却没有告诉软件开发人员如何达到好的目标，如何避免差错。<br>CMMI则提供了一整套较为完善的软件研发项目管理的方法。</p><h3 id="CMMI优劣评估"><a href="#CMMI优劣评估" class="headerlink" title="CMMI优劣评估"></a>CMMI优劣评估</h3><p>主旨普遍接受，但当构建大型系统时（几百人参加需要几年 完成），部分详细需求应慎重考虑。</p><h1 id="过程模型"><a href="#过程模型" class="headerlink" title="过程模型"></a>过程模型</h1><h2 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h2><p>瀑布模型又称为<strong>经典生命周期</strong>。<br>它提供了一个系统的、顺序的线性软件开发方法。从用户需求规格说明开始，通过策划、建模、构建和部署的过程，最终提供一个完整的软件并提供持续的技术支持。</p><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/11.png"></p><p><strong>应用实践</strong>： </p><ul><li>对一个已有系统进行明确定义的适应性调整或增强</li><li>需求准确定义和相对稳定的新的开发项目；</li></ul><p><strong>优势</strong>： 项目管理线性，相对简单<br><strong>不足</strong>：</p><ul><li>实际项目很少遵守瀑布模型，随着项目的进度，变更可能带来混乱</li><li>客户难以清楚地描述所有的需求，而瀑布模型却要求明确需求，因此，很难适应许多项目的不确定性</li><li>项目接近尾声才能拿到可执行程序，客户需要耐心，如果有重大缺陷没有发现，损失惨重。</li></ul><h2 id="增量过程模型"><a href="#增量过程模型" class="headerlink" title="增量过程模型"></a>增量过程模型</h2><p>增量模型是以增量的形式生产软件产品的过程模型。</p><p>应用实践： 在许多情况下，初始的软件需求有明确的定义，但是整个开发过程却不宜单纯运用线性模型。同时，可能迫切需要为用户迅速提供一套功能有限的软件产品，然后在后续版本中再细化和拓展功能。</p><p>分类：</p><ul><li>增量模型</li><li>RAD模型</li></ul><h3 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h3><p>增量模型发布一系列称为增量的版本，随着每个版本交付，逐步为 用户提供更多的功能。以迭代的方式运用瀑布模型。</p><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/12.png"></p><p>应用实践：</p><ul><li>初始阶段需求很明确，同时，迫切需要为用户提供一套功能有限的软件产品，然后在后续版本中再细化和拓展功能。</li><li>客户要求在一个不可能完成的时间提交产品。</li><li>在项目既定的商业要求期限之前不可能找到足够的开发人员。</li></ul><p>优点：</p><ul><li>规避人员和技术风险。</li><li>每个增量版本为用户评价提供了一个平台，有利于满足客户需求。</li></ul><h3 id="RAD模型"><a href="#RAD模型" class="headerlink" title="RAD模型"></a>RAD模型</h3><p>快速应用程序开发模型（Rapid Application Development）是一 种侧重于短暂的开发周期的增量软件过程模型。</p><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/13.png"></p><p>应用实践： 每个主要功能都能在3个月内完成，适合采用RAD模型。</p><p>优点： 可以使开发团队在一段非常短的时间内创造出 “全功能系统”。</p><p>不足：</p><ul><li>对于大型可伸缩项目，需要大量的人力资源来构建多个相对独立的 RAD团队。</li><li>如果开发者和客户没有为短时间内急速完成整个系统作好准备，RAD 项目将会失败。</li><li>如果一个系统不能合理模块化，RAD组件建立会有问题。</li></ul><h2 id="演化过程模型"><a href="#演化过程模型" class="headerlink" title="演化过程模型"></a>演化过程模型</h2><p>演化模型是迭代的过程模型。</p><p>应用实践： 在开发过程中，业务和产品需求经常发生变化，同时严格的交付时间使得开发团队不可能圆满完成软件产品，但是必须交付功能有限的版本以应对竞争或商业压力；很好的理解了核心产品和系统需求，但是产品或者系统扩展的细节问题却没有定义。</p><p>分类： </p><ul><li>原型开发</li><li>螺旋开发</li></ul><h3 id="原型开发"><a href="#原型开发" class="headerlink" title="原型开发"></a>原型开发</h3><p>原型开发提供了定义软件需求的一种机制。</p><p>应用场景：当需求很模糊的时候，原型开发帮助软件工程师和客户更好的理解究竟需求是什么。</p><p>不足：</p><ul><li>客户看到了产品，容易希望在这个原型上完善。</li><li>含有很多不合适的技术和方法。</li></ul><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/14.png"></p><h3 id="螺旋开发"><a href="#螺旋开发" class="headerlink" title="螺旋开发"></a>螺旋开发</h3><p>螺旋模型结合了原型的迭代性质和瀑布模型的系统性和可控性。具有快速开发越来越完善软件版本的潜力 。第一圈开发出产品的规格说明、开发原型系统，并在每次迭代时，逐步完善，开发出不同的版本。</p><p>应用场景：</p><ul><li>能应用到开发的整个生命周期，从 概念开发到维护</li><li>开发大型系统和软件的方法</li></ul><p>不足： 很难说服客户演化的方法是可控的</p><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/15.png"></p><h2 id="专用过程模型"><a href="#专用过程模型" class="headerlink" title="专用过程模型"></a>专用过程模型</h2><p>专用过程模型应用面较窄，只适用于某些特定的软件工程方法：</p><ul><li><strong>基于组件的开发（复用）</strong>：强调组件复用和组装。由厂家作为产品供应，提供软件组件，在构建软件时使用。这些组件通过良好定义的接口提供特定的功能，能够集成到软件中。</li><li><strong>形式化方法模型</strong>：提倡采用数学的方法进行软件开发和验证。主要活动是生成计算机软件形式化的数学规格说明。形式化方法使软件工程师可以应用严格的数学符号说明、开发和验证基于计算机的系统。</li><li><strong>面向方面的软件开发</strong>：解决跨整个软件体系架构的横切关注点。方面包括：用户接口、协同工作、发布、持续性、存储器管理、事物处理、安全、完整性等。</li></ul><h2 id="统一过程模型"><a href="#统一过程模型" class="headerlink" title="统一过程模型"></a>统一过程模型</h2><p>统一过程模型（Unified Process Model）是一种“以用例驱动，以体系结构为核心，迭代和增量”的软件过程框架，由UML(Unified Modeling Language)方法和工具支持。应用在面象对象项目中。<br>这是一种增量模型，定义了五个阶段：</p><ol><li>起始阶段：包括用户沟通和计划，强调定义和细化用例，并将其作为 主要模型。</li><li>细化阶段：包括用户沟通和建模活动，重点是创建分析和设计模型， 强调类的定义和体系结构的表示。</li><li>构建阶段：细化设计模型，并将设计模型转化为软件组件实现。</li><li>转化阶段：将软件从开发人员传递给最终用户，并由用户完成测试和 验收测试。</li><li>生产阶段：持续地监控软件的运行、并提供技术支持。</li></ol><h2 id="极限编程模型"><a href="#极限编程模型" class="headerlink" title="极限编程模型"></a>极限编程模型</h2><p>极限编程(XP)是在一种颇有争议的软件开发方法。其第一步是软件开发小组确定客户希望产品支持的各种特性。对于每个特性，开发小组向客户通报实现这个特性所需要的时间和花费。</p><p>客户使用成本-效益分析法选择每个后续的组件所包含的特性，根据开发小组提供的时间、成本估算和该特性给客户带来的潜在收益来进行选择。提议的组件分成更小的部分，称为任务。</p><p>一个程序员首先制定出任务的测试用例，采用TDD，然后两个程序员在一台计算机前工作（结对编程），实现任务，确保全部测试用例正确工作。两个程序员每15~20分钟交替操作键盘，不进行键盘操作的程序员仔细检查同伴的代码。完成以上操作后，将这个任务集成到产品的当前版本中。</p><p>理想情况下，实现和集成一个任务只需要几个小时。通常结对的程序员并行地实现任务，以便集成可以连续地进行。如果可能，每天更换小组成员的编码同伴。从其他组员处的学习会提高每人的技能水平。各任务所使用的的TDD测试用例保留下来并应用到所有进一步的集成测试中。</p><p>结对编程的特点：</p><ul><li>要避免编写测试用例的程序员继续完成编码实现</li><li>当开发者离开一个项目，其积累的所有知识也离开了</li><li>经验不丰富的开发者可以从经验丰富的一方学习经验</li><li>强调无我小组</li></ul><p>结对编程的弊端：</p><ul><li>要求大块的不被打断的时间</li><li>不适用于害羞或专横的个人</li><li>不适用于两个没经验的程序员</li></ul><p>XP的特性：</p><ul><li>XP小组的计算机设在一个大房间的中心，大房间中有许多彼此相连的小隔间</li><li>一个客户代表一直与XP小组一起工作</li><li>没有一个人能连续两周超时工作</li><li>没有规格说明，而是XP小组的所有成员一同完成规格说明、分析、设计、编码、测试</li><li>在建造出各组件前没有概要设计，建造产品的过程中设计在不断调整(refactoring)</li></ul><h1 id="敏捷视角下的过程"><a href="#敏捷视角下的过程" class="headerlink" title="敏捷视角下的过程"></a>敏捷视角下的过程</h1><p><img src="/../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/16.jpg"></p><h2 id="敏捷"><a href="#敏捷" class="headerlink" title="敏捷"></a>敏捷</h2><p>2001年，Kent Beck和其他16位知名软件开发者、工程作家、咨询师共同签署了“敏捷软件开发宣言”：<br>我们正在通过亲身实践以及帮助他人实践的方式来揭示更好的软件开发之路，通过这项工作，我们认为： </p><ul><li>个体和交互胜过过程和工具</li><li>可工作软件胜过宽泛的文档</li><li>客户合作胜过合同谈判</li><li>响应变化胜过遵循计划</li></ul><p>敏捷方法是为了克服传统软件工程中<strong>认识和实践的弱点</strong>开发而成的。</p><h2 id="敏捷过程"><a href="#敏捷过程" class="headerlink" title="敏捷过程"></a>敏捷过程</h2><p>敏捷过程是增量的适应。必须在很短的时间间隔内交付软件 增量来适应变化的步伐。</p><p>敏捷可应用于任何软件过程，敏捷过程有如下特点：</p><ul><li>允许项目团队调整并合理安排任务，理解敏捷开发方法的 易变性并指定计划。</li><li>精简并维持最基本的工作产品。</li><li>强调增量交付策略，快速向客户提供适应产品类型和运行 环境的可运行软件。</li></ul><p>敏捷过程关注个人的才智和技巧，根据特定人员和团对来塑造过程。<br>基本能力、共同目标、决策能力、模糊问题解决能力、相互信任和尊重、自我组织。</p><h2 id="敏捷过程模型"><a href="#敏捷过程模型" class="headerlink" title="敏捷过程模型"></a>敏捷过程模型</h2><h3 id="极限编程"><a href="#极限编程" class="headerlink" title="极限编程"></a>极限编程</h3><p>极限编程（eXtreme Programming XP）是应用最广泛的敏捷过程,按照策划、设计、编码、测试4个框架活动组织，建议一系列新颖和有力的技术，保证创建能体现客户指定优先级特征和功能的频繁软件发布。</p><p>策划：开始于建立一系列描述待开发软件必要特征与功能。<br><kbd><strong>客户写在索引卡上-&gt;团队成员确认开发时间-&gt;长的话进一步细分-&gt;达成承诺实现</strong></kbd></p><p>设计：严格遵循KIS(keep it simple)原则。</p><p>编码：先设计单元测试内容，结对编程（一个负责实现设计，一个负责单元测试并检查是否符合编码规范）。</p><p>测试：单元测试纳入到通用测试集，每天进行系统的集成和确认测试。一旦发现问题，立刻修改。</p><h3 id="自适应软件开发"><a href="#自适应软件开发" class="headerlink" title="自适应软件开发"></a>自适应软件开发</h3><p>自适应软件开发（ASD）强调人的合作和团队的组织，按思考、协作和学习三个框架活动组织。</p><p>思考：启动项目并完成自适应循环策划。通过项目启动信息和基本需求来确定项目所需的一系列软件增量发布循环。(沟通、策划)</p><p>协作：团队个人的聪明才智凝聚成团队的力量。（沟通、建模）</p><p>学习：当ASD团队成员开始开发作为自适应循环一部分的组件时，其重点是朝着完成循环的方向完成尽可能多的东西。（构建）</p><h3 id="动态系统开发方法"><a href="#动态系统开发方法" class="headerlink" title="动态系统开发方法"></a>动态系统开发方法</h3><p>动态系统开发方法（DSDM）定义了三种不同的迭代循环：功能模型迭代、设计和构建迭代、实现迭代，前边还增加了可行研究和业务研究两个传统的生命周期活动。</p><p>可行性研究：建立业务需求，并评估采用DSDM是否可行。</p><p>业务研究：建立所需要功能需求，确定基本的系统架构。</p><p>功能模型迭代/设计和构建迭代：为客户开发一系列功能的增量原型，通过反馈获取额外需求。</p><p>实现迭代：将最终软件增量置于可操作环境。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法解决铺设道路问题</title>
      <link href="/2020/05/04/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-pu-she-dao-lu-wen-ti/"/>
      <url>/2020/05/04/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-pu-she-dao-lu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>NOIP2018 提高组 D1T1</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>春春是一名道路工程师，负责铺设一条长度为 $n$ 的道路。 </p><p>铺设道路的主要工作是填平下陷的地表。整段道路可以看作是 $n$ 块首尾相连的区域，一开始，第 $i$ 块区域下陷的深度为 $d_i$ 。 </p><p>春春每天可以选择一段连续区间 $[L,R]$ ，填充这段区间中的每块区域，让其下陷深度减少 $1$。在选择区间时，需要保证，区间内的每块区域在填充前下陷深度均不为 $0$ 。 </p><p>春春希望你能帮他设计一种方案，可以在最短的时间内将整段道路的下陷深度都变为 $0$ 。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>输入文件包含两行，第一行包含一个整数 $n$，表示道路的长度。 第二行包含 $n$ 个整数，相邻两数间用一个空格隔开，第 $i$ 个整数为 $d_i$ 。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>输出文件仅包含一个整数，即最少需要多少天才能完成任务。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">6   4 3 2 5 3 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>【样例解释】</p><p>一种可行的最佳方案是，依次选择：<br>$[1,6]$、$[1,6]$、$[1,2]$、$[1,1]$、$[4,6]$、$[4,4]$、$[4,4]$、$[6,6]$、$[6,6]$。   </p><p>【数据规模与约定】</p><p>对于 $30%$ 的数据，$1 ≤ n ≤ 10$ ；<br>对于 $70%$ 的数据，$1 ≤ n ≤ 1000$ ；<br>对于 $100%$ 的数据，$1 ≤ n ≤ 100000 , 0 ≤ d_i ≤ 10000$ 。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>基于贪心策略求解：若$a[i]&gt;a[i-1]$，计数器$sum+=a[i]-a[i-1]$，填深坑的同时把邻左的浅坑顺带着填平，最后补上最左坑的深度(基准)。</p><h1 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str_nums <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str_nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><p><a href="https://www.luogu.com.cn/problem/P5019">洛谷 P5019 [NOIP2018 提高组] 铺设道路</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法解决逆序对问题</title>
      <link href="/2020/04/28/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-ni-xu-dui-wen-ti/"/>
      <url>/2020/04/28/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-ni-xu-dui-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>猫猫 TOM 和小老鼠 JERRY 最近又较量上了，但是毕竟都是成年人，他们已经不喜欢再玩那种你追我赶的游戏，现在他们喜欢玩统计。</p><p>最近，TOM 老猫查阅到一个人类称之为“逆序对”的东西，这东西是这样定义的：对于给定的一段正整数序列，逆序对就是序列中 $a_i&gt;a_j$ 且 $i&lt;j$ 的有序对。知道这概念后，他们就比赛谁先算出给定的一段正整数序列中逆序对的数目。注意序列中可能有重复数字。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>第一行，一个数 $n$，表示序列中有 $n$个数。</p><p>第二行 $n$ 个数，表示给定的序列。序列中每个数字不超过 $10^9$。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>输出序列中逆序对的数目。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">65 4 2 6 3 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>对于 $25%$ 的数据，$n \leq 2500$</p><p>对于 $50%$ 的数据，$n \leq 4 \times 10^4$。</p><p>对于所有数据，$n \leq 5 \times 10^5$</p><p>请使用较快的输入输出</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>&lt;1, 2, 3, 4, 5&gt; 是一组数据，它是全部顺序无逆序的。<br>如果我们给出这样一组数据：&lt;1, 3, 2, 4, 5&gt; ，它只有 2、3 之间是反的，逆序对的数目是1。<br>如果我们给出这样一组数据：&lt;1, 3, 4, 2, 5&gt; ，它有 2、3 和 2、4 之间是反的，逆序对的数目是2。<br>……</p><p>$n \leq 5 \times 10^5$，$O(n^2)$的算法不可接受，要寻找$O(n\log{n})$的算法。</p><p>正确的思路是采用分治算法求解，参考<a href="https://blankspace.blog.csdn.net/article/details/113806051">归并排序</a>。</p><p>在每次合并的时候，要么顺序保留要么逆序交换，所以在合并和交换的时候做一下统计就能得到答案。</p><p>统计结果的时候，Java要用long，C++要用longlong。</p><p>读取数据的时候，Java要用java.io.BufferedReader，按行读取字符串。</p><h1 id="Java实现代码"><a href="#Java实现代码" class="headerlink" title="Java实现代码"></a>Java实现代码</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                result <span class="token operator">+=</span> mid<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> left<span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h1><p><a href="https://www.luogu.com.cn/problem/P1908">洛谷 P1226 【模板】快速幂||取余运算</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象编程的三大特性</title>
      <link href="/2020/04/02/ruan-jian-gong-cheng/mian-xiang-dui-xiang/java-mian-xiang-dui-xiang-bian-cheng-de-san-da-te-xing/"/>
      <url>/2020/04/02/ruan-jian-gong-cheng/mian-xiang-dui-xiang/java-mian-xiang-dui-xiang-bian-cheng-de-san-da-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>偶然读到这篇文章（《Java面向对象编程的三大特性》），想来这也算论文？这种还不满网络都是？读罢觉得写得还真不错，这里以我愚见，简单点评一二，不足之处还望指教。</p><h1 id="阅读笔记"><a href="#阅读笔记" class="headerlink" title="阅读笔记"></a>阅读笔记</h1><h2 id="笔记1"><a href="#笔记1" class="headerlink" title="笔记1"></a>笔记1</h2><p>文中有一句是这样说的：“<strong>将属性进行私有化操作，对每个属性创建 set 和 get 方法，如果这里存在一个带参数的构造函数，以此同时就必须存在一个不带参数的构造函数。</strong>”</p><blockquote><p>评注1：其实未必总要开set和get方法。<br>初学者可能刚接触的时候被告知写set和get，但其实set的存在可能破坏封装。<br>举个简单的例子，比如每个学生Student类都有一个s_id，这个属性在数据库表中对应着主键，应该是唯一且不可变的。如果我们简单地开一个public的set和一个public的get，就可能导致外部随意修改本不可变的s_id属性。</p></blockquote><blockquote><p>评注2：其实未必存在一个不带参数的构造函数。<br>有一说一，真的不必。只是，为了简便起见，可以都自动生成的。<br>另说，如果没指定构造器，默认有一个无参数构造器；如果存在了带参数的构造函数，就没有默认的这个无参数构造器了。<br>再说，如果注意构造器参数不全甚至没有，就导致我们想初始化某些属性就必须再指定set方法。</p></blockquote><h2 id="笔记2"><a href="#笔记2" class="headerlink" title="笔记2"></a>笔记2</h2><ul><li>封装的优点<br>（1）提高了安全性，防止一些误操作。<br>（2）提高了复用性，封装之后便于调用。<br>（3）信息隐藏，隐藏了实现细节。</li><li>继承的优点<br>（1）继承可提高代码的复用性。<br>（2）继承可提高代码的稳定性。<br>（3）继承让类与类之间产生关系，是多态的前提。</li><li>多态性优点<br>（1）提高了代码的维护性（继承保证）。<br>（2）提高了代码的扩展性（由多态保证）。</li></ul><p> 封装 -&gt; 继承 -&gt; 多态这不单单是三个名词的简单罗列，更是一步步递进的关系。对于面 向对象的程序设计，封装是基础，继承是多态 的前提条件，三者逻辑顺序不可颠倒。</p><blockquote><p>评注：封装、继承、多态，看似朴实的三个名词，想要理解透很难。甚至很多人在学完一两轮OOP相关之后还不能真正理解继承和多态。<br>这里的优点说的还很不错，给点个赞！</p></blockquote><h2 id="笔记3"><a href="#笔记3" class="headerlink" title="笔记3"></a>笔记3</h2><p>Java如果想实现多态必须存在以下几个条件才可以成功实现：</p><ul><li>继承：在多态的管理网中必须要有存在继承关系的子类和父类。 </li><li>重写：子类会针对父类中的一些特点方法进行自定义，后续在使用这些方法时会调用子类中重写的方法。 </li><li>向上转型：在多态当中需要把子类引用的对象赋值给到父类，只有这样做才能达到可以调用父类、子类方法的目的。</li></ul><p>满足了以上的几个条件，我们可以在同一个继承的结构中使用统一逻辑代码，进而去处理不同类别的对象，进而达到执行不同方法的目的。</p><blockquote><p>评注：没有继承哪有多态？确实要先理解继承才能理解多态。重写和向上转型确实也是很重要的环节。你直接定义SubClass obj = new SubClass();这样有什么意义呢？<br>另说，很多新手写Java代码的时候不习惯写List&lt;String&gt; list = new ArrayList&lt;&gt;();，而是只习惯写ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();，我这里不讨论具体在这个例子的问题，只据此说说继承与多态。<br>其实上面的ArrayList实现了List接口，这种implement也算一种接口继承（毕竟Java通过接口的实现和继承实现了更靠谱的多继承），根据《疯狂Java讲义》的说法，李刚老师称呼左边类型为“编译时类型”而右边类型为“运行时类型”，也蛮有趣的。<br>接着说下去，左边的编译时类型至少要是在继承树里不能低于右边类型的，这也体现了继承（甚至可能是“隔代继承”）和向上转型。<br>既然是继承，左边类型的方法可能被右边类型重写某些可重写（@Override）的方法，你不重写的话表示子类和父类在这种“行为”上时一致的，那要多态干啥？<br>根据上面的三点，基本可以实现简单的多态了，子类对象能体现出不同于父类的特点。编译时的类型是左边的，你要是调用某个左边不存在的方法还会编译错误，但你调用左边的一个方法，做的是右边的事。<br>再回到上面关于List的问题，我建议还是把接口类型放在左边，对于初学者来说这是一种好习惯，也能逐渐帮你理解继承和多态（前提是你用心啊）。<br>再就是，尝试多态最好还是多尝试接口多态而不是普通的继承多态，你慢慢体会就知道了。</p></blockquote><h1 id="文中的图"><a href="#文中的图" class="headerlink" title="文中的图"></a>文中的图</h1><p>下面是文中的一个图，鉴于知网版权保护不能贴文章，但图表可下载所以跟大家分享一下：<br><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/1.png"></p><h1 id="原文免费阅读地址"><a href="#原文免费阅读地址" class="headerlink" title="原文免费阅读地址"></a>原文免费阅读地址</h1><p><a href="http://kns.cnki.net/KXReader/Detail?TIMESTAMP=637214716324185000&amp;DBCODE=CJFQ&amp;TABLEName=CJFDLAST2020&amp;FileName=DZRU201924147&amp;RESULT=1&amp;SIGN=2m2px4lZAtjI8NcGBc8QFMX920A=">《Java面向对象编程的三大特性》</a></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1]岳青玲.Java面向对象编程的三大特性[J].电子技术与软件工程,2019(24):239-240.</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划算法解决装箱问题</title>
      <link href="/2020/03/13/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-zhuang-xiang-wen-ti/"/>
      <url>/2020/03/13/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-zhuang-xiang-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>有一个箱子容量为 $V$，同时有 $n$ 个物品，每个物品有一个体积。</p><p>现在从 $n$ 个物品中，任取若干个装入箱内（也可以不取），使箱子的剩余空间最小。输出这个最小值。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>第一行共一个整数 $V$，表示箱子容量。</p><p>第二行共一个整数 $n$，表示物品总数。</p><p>接下来 $n$ 行，每行有一个正整数，表示第 $i$ 个物品的体积。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><ul><li>共一行一个整数，表示箱子最小剩余空间。</li></ul><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">2468312797<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>对于 $100%$ 数据，满足 $0&lt;n \le 30$，$1 \le V \le 20000$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2001 普及组第四题</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>本题不能用贪心算法。<br>比如容量为$7$，有三个物品体积是$1,2,4$，要是先装小的，就只能装下$3$，剩下$4$，但实际上可以剩下$1$。<br>如果容量为$10$，三个物品体积是$2,2,2,2,2,9$，要是先装最大的，就只能装下$9$，剩下$1$，但实际上可以装满。</p><p>一个物体的体积，关系着它的价值，也关系着它的代价。本题可以看做一个基本的0/1背包问题，用动态规划求解。</p><p>至此，题目转化为：<br>有一个箱子容量为$V$（正整数，$0&lt;V≤20000$），同时有$n$个物品（$0&lt;n≤30$），每个物品有一个代价$V$和一个价值$V$。要求这$n$个物品中，任取若干个装入箱内，在不超出箱子容量的情况下，使总价值最大。</p><p>所以状态转移方程是：$f[j] = \max(f[j], f[j-cost[i]]+cost[i])$</p><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> v<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j<span class="token operator">-</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token operator">-</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><p><a href="https://www.luogu.com.cn/problem/P1049">P1049 [NOIP2001 普及组] 装箱问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划解决疯狂的采药问题</title>
      <link href="/2020/03/13/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-jie-jue-feng-kuang-de-cai-yao-wen-ti/"/>
      <url>/2020/03/13/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-jie-jue-feng-kuang-de-cai-yao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>LiYuxiang 是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同种类的草药，采每一种都需要一些时间，每一种也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是 LiYuxiang，你能完成这个任务吗？</p><p>此题和原题的不同点：</p><p>$1$. 每种草药可以无限制地疯狂采摘。</p><p>$2$. 药的种类眼花缭乱，采药时间好长好长啊！师傅等得菊花都谢了！</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>输入第一行有两个整数，分别代表总共能够用来采药的时间 $t$ 和代表山洞里的草药的数目 $m$。</p><p>第 $2$ 到第 $(m + 1)$ 行，每行两个整数，第 $(i + 1)$ 行的整数 $a_i, b_i$ 分别表示采摘第 $i$ 种草药的时间和该草药的价值。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>输出一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">70 371 10069 11 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">140<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><h2 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h2><ul><li>对于 $30%$ 的数据，保证 $m \le 10^3$ 。</li><li>对于 $100%$ 的数据，保证 $1 \leq m \le 10^4$，$1 \leq t \leq 10^7$，且 $1 \leq m \times t \leq 10^7$，$1 \leq a_i, b_i \leq 10^4$。</li></ul><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>设采第$i$种草药所需的时间为$t[i]$，价值为$p[i]$ 。<br>又设花费的采药时间最多为$j$，$f[i][j]$表示此时从前往后到第$i$种草药(可能有不采的)所能采到草药的最大总价值。</p><p>第$i$种草药有两种情况：采与不采。<br>若不采这种草药，则时间花费没有增多 ，经过的草药种数增加$1$， 采到草药价格不变 ，所以$f[i][j]=f[i-1][j]$。<br>若采这种草药，则 时间花费增加了$t[i]$， 种数增加$1$， 采到草药价格增加了$p[i]$，所以$f[i][j]=f[i-1][j-t[i]]+p[i]$。<br>要使$f[i][j]$尽可能大 ，即有$f[i][j]=max(f[i-1][j],f[i-1][j-t[i]]+p[i])$</p><h1 id="Java实现代码"><a href="#Java实现代码" class="headerlink" title="Java实现代码"></a>Java实现代码</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> time <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>time<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> time<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j<span class="token operator">-</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>time<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><p><a href="https://www.luogu.com.cn/problem/P1616">洛谷 P1616 疯狂的采药</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划算法解决采药问题</title>
      <link href="/2020/03/13/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-cai-yao-wen-ti/"/>
      <url>/2020/03/13/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-cai-yao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是辰辰，你能完成这个任务吗？</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>第一行有 $2$ 个整数 $T$（$1 \le T \le 1000$）和 $M$（$1 \le  M \le 100$），用一个空格隔开，$T$ 代表总共能够用来采药的时间，$M$ 代表山洞里的草药的数目。</p><p>接下来的 $M$ 行每行包括两个在 $1$ 到 $100$ 之间（包括 $1$ 和 $100$）的整数，分别表示采摘某株草药的时间和这株草药的价值。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>输出在规定的时间内可以采到的草药的最大总价值。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">70 371 10069 11 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p><strong>【数据范围】</strong></p><ul><li>对于 $30%$ 的数据，$M \le 10$；</li><li>对于全部的数据，$M \le 100$。</li></ul><p><strong>【题目来源】</strong></p><p>NOIP 2005 普及组第三题</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>推荐阅读：</p><ul><li><a href="https://www.luogu.com.cn/blog/interestingLSY/memdfs-and-dp">聊聊动态规划与记忆化搜索</a></li><li><a href="https://www.kancloud.cn/kancloud/pack/70124">背包九讲</a></li></ul><p>这个题可以压缩成一维得到状态转移方程：$f[j] = \max(f[j], f[j-cost[i]]+value[i])$。</p><h1 id="Java编程实现"><a href="#Java编程实现" class="headerlink" title="Java编程实现"></a>Java编程实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> time <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>time<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> time<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j<span class="token operator">-</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>time<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><p><a href="https://www.luogu.com.cn/problem/P1048">洛谷 P1048 [NOIP2005 普及组] 采药</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法解决混合牛奶问题</title>
      <link href="/2020/03/12/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-hun-he-niu-nai-wen-ti/"/>
      <url>/2020/03/12/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-hun-he-niu-nai-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>由于乳制品产业利润很低，所以降低原材料（牛奶）价格就变得十分重要。帮助 Marry 乳业找到最优的牛奶采购方案。</p><p>Marry 乳业从一些奶农手中采购牛奶，并且每一位奶农为乳制品加工企业提供的价格可能相同。此外，就像每头奶牛每天只能挤出固定数量的奶，每位奶农每天能提供的牛奶数量是一定的。每天 Marry 乳业可以从奶农手中采购到小于或者等于奶农最大产量的整数数量的牛奶。</p><p>给出 Marry 乳业每天对牛奶的需求量，还有每位奶农提供的牛奶单价和产量。计算采购足够数量的牛奶所需的最小花费。</p><p>注：每天所有奶农的总产量大于 Marry 乳业的需求量。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>第一行二个整数 $n,m$，表示需要牛奶的总量，和提供牛奶的农民个数。</p><p>接下来 $m$ 行，每行两个整数 $p_i,a_i$，表示第 $i$ 个农民牛奶的单价，和农民 $i$ 一天最多能卖出的牛奶量。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>单独的一行包含单独的一个整数，表示 Marry 的牛奶制造公司拿到所需的牛奶所要的最小费用。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">100 55 209 403 108 806 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">630<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>【数据范围】<br>对于 $100%$ 的数据：<br>$0 \le n,a_i \le 2 \times 10^6$，$0\le m \le 5000$，$0 \le p_i \le 1000$</p><p>题目翻译来自 NOCOW。</p><p>USACO Training Section 1.3</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>贪心算法求解，每次优先选择最省钱的买法。</p><p>要对奶农的价格进行排序，优先选择低价格的牛奶，选完当前奶农的全部牛奶再选价格次高的一位奶农的牛奶，如此进行下去。</p><p>输入数据量较大，该用java.io.BufferedReader。</p><h1 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> price<span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token punctuation">;</span>        <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> need <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>person <span class="token operator">-&gt;</span> person<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Person</span> p <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>need <span class="token operator">&gt;</span> p<span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> p<span class="token punctuation">.</span>num <span class="token operator">*</span> p<span class="token punctuation">.</span>price<span class="token punctuation">;</span>                need <span class="token operator">-=</span> p<span class="token punctuation">.</span>num<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> need <span class="token operator">*</span> p<span class="token punctuation">.</span>price<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><p><a href="https://www.luogu.com.cn/problem/P1208">洛谷 P1208 [USACO1.3]混合牛奶 Mixing Milk</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划算法解决最大子段和问题</title>
      <link href="/2020/03/12/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-zui-da-zi-duan-he-wen-ti/"/>
      <url>/2020/03/12/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-zui-da-zi-duan-he-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给出一个长度为 $n$ 的序列 $a$，选出其中连续且非空的一段使得这段和最大。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>第一行是一个整数，表示序列的长度 $n$。</p><p>第二行有 $n$ 个整数，第 $i$ 个整数表示序列的第 $i$ 个数字 $a_i$。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>输出一行一个整数表示答案。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h1 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h1><pre class="line-numbers language-none"><code class="language-none">72 -4 3 -1 2 -4 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h1><pre class="line-numbers language-none"><code class="language-none">4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><h2 id="样例-1-解释"><a href="#样例-1-解释" class="headerlink" title="样例 1 解释"></a>样例 1 解释</h2><p>选取 $[3, 5]$ 子段 ${3, -1, 2}$，其和为 $4$。</p><h1 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h1><ul><li>对于 $40%$ 的数据，保证 $n \leq 2 \times 10^3$。</li><li>对于 $100%$ 的数据，保证 $1 \leq n \leq 2 \times 10^5$，$-10^4 \leq a_i \leq 10^4$。</li></ul><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>尽管可以用分治算法求解，但使用动态规划算法求解更优。</p><p>动态规划的状态转移方程：$f[i]=max(f[i-1]+n[i], n[i])$。</p><p>但 $f[i]$ 未必是答案，这里涉及负数的问题：$n[i]$ 为负数，则 $f[i] &lt; f[i-1]$。所以还需要比较 $f[i]$ 和 $max$ 的大小。</p><p>拓展：<a href="https://www.luogu.com.cn/blog/RobertLYY/solution-p1115">贪心算法题解分析</a>。</p><h1 id="Java实现代码"><a href="#Java实现代码" class="headerlink" title="Java实现代码"></a>Java实现代码</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tempNum <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>tempNum<span class="token punctuation">,</span> tempNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h1><p><a href="https://www.luogu.com.cn/problem/P1115">洛谷 P1115 最大子段和</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware安装CentOS7系统</title>
      <link href="/2020/03/11/ji-suan-ji-ke-xue-ji-chu/vmware-an-zhuang-centos7-xi-tong/"/>
      <url>/2020/03/11/ji-suan-ji-ke-xue-ji-chu/vmware-an-zhuang-centos7-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="安装VMware"><a href="#安装VMware" class="headerlink" title="安装VMware"></a>安装VMware</h1><p>前往VMware官网下载安装<a href="https://www.vmware.com/products/workstation-player.html">VMware Workstation Player</a>或<a href="https://www.vmware.com/products/workstation-pro.html">VMware Workstation</a>。</p><p>VMware Workstation Player免费可用，VMware Workstation如何安装此处不介绍。</p><p>考虑到潜在的风险，博主尤其不建议公司随意使用特殊方法，其实也有VMware的替代品。</p><p>VMware的.wmx文件等内容可以设置安装到非C盘(系统盘)，节约系统盘空间。</p><h1 id="下载CentOS-iso镜像文件"><a href="#下载CentOS-iso镜像文件" class="headerlink" title="下载CentOS.iso镜像文件"></a>下载CentOS.iso镜像文件</h1><p>操作系统的iso镜像文件比较大，最好是用国内的镜像站点。这里推荐<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">阿里云镜像</a>，可以更快下载。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/1.png"></p><p>也可以选择<a href="http://isoredirect.centos.org/centos/7/isos/x86_64/">官方网站</a>，查看更多镜像：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/2.png"></p><p>下载后放进文件夹保存好，此文件今后也可复用。</p><h1 id="BIOS配置Intel-VT-x"><a href="#BIOS配置Intel-VT-x" class="headerlink" title="BIOS配置Intel VT-x"></a>BIOS配置Intel VT-x</h1><p>多数个人计算机是没有配开启虚拟化配置，因此无法启用虚拟机：<br><font color="red">虚拟机此主机支持 Intel VT-x，但 Intel VT-x 处于禁用状态…..</font></p><p>虚拟化技术，缩写是VT。Intel VT就是指Intel的虚拟化技术。这种技术简单来说就是让可以让一个CPU工作起来就像多个CPU并行运行，从而使得在一台电脑内可以同时运行多个操作系统。</p><p>英特尔(Intel)和AMD的大部分CPU均支持此技术，名称分别为VT-x、AMD-V。VT-x开启之后对VMware虚拟机的性能有非常大的提高。</p><p>BIOS，Basic Input Output System，基本输入输出系统。BIOS是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、开机后自检程序和系统自启动程序，它可从CMOS中读写系统设置的具体信息。 其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。</p><p>进入BIOS的方法：</p><ul><li>组装机以主板分，华硕用F8键、Intel用F12键，其他品牌用ESC键或F11键或F12键。</li><li>笔记本以品牌分，联想ThinkPad系列用F1键，其他品牌用F2键。</li><li>台式机按品牌分， 戴尔按ESC键，其他用F12键。</li><li>如果仍然不能进入BIOS，找找电脑(主板)说明书或者参考BIOS设置怎么进入图解教程。</li></ul><p>另一种方法：<br>开始菜单选择电源，按住Shift点击重启，蓝色页面中选择”疑难解答”，新页面选择”高级选项”，新页面选择”启动设置”，新页面选择”UEFI固件设置”。</p><p>还有一种方法：<br>开始菜单选择设置，选择更新和安全，选择恢复，选择”高级启动”中的”立即重启”。</p><p>重启后的设置问题推荐参考：<a href="https://www.kafan.cn/A/1nkpwwjz3k.html">WIN10如何进入BIOS设置开启VT</a>，剩余操作摘录如下：</p><ol><li>Phoenix BIOS机型<ol><li>进入BIOS，选择Configuration选项，选择Intel Virtual Technology并回车。注意：若无VT选项或不可更改，则表示你的电脑不支持VT技术。</li><li>将光标移动至Enabled处，并回车确定。</li><li>此时该选项将变为Enabled，最后按F10热键保存并退出即可开启VT功能。</li></ol></li></ol><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/3.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/4.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/5.png"></p><ol start="2"><li>Insyde BIOS机型<ol><li>进入BIOS，选择Configuration选项，选择Intel Virtual Technology并回车。</li><li>将光标移动至Enabled处，并回车确定。</li><li>此时该选项将变为Enabled，最后按F10热键保存并退出即可开启VT功能。</li></ol></li></ol><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/6.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/7.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/8.png"></p><h1 id="VMware安装配置CentOS"><a href="#VMware安装配置CentOS" class="headerlink" title="VMware安装配置CentOS"></a>VMware安装配置CentOS</h1><p>安装配置步骤：</p><ol><li>打开VMware选择文件，选择新建虚拟机。</li><li>选择稍后安装操作系统。</li><li>选择要安装的操作系统，选择Linux，选择CentOS 7 64位。</li><li>给操作系统分配磁盘大小，选择默认20G(最好给起码50GB)，选择将虚拟磁盘存储为单个文件。</li><li>选择Centos7镜像路径(前面提到的保存好的文件夹)。</li><li>选择安装的自然语言。</li><li>设置日期和时间。</li><li>选择需要安装的软件。</li><li>选择Server with GUI，点击Done。</li><li>选择安装位置，进行磁盘划分。</li><li>选择I wil configure partitioning，点击Done。</li><li>点击加号，选择/boot，给/boot分区分配空间，点击Add。</li><li>类似于11步骤，给其他分区分配好空间，点击Done。</li><li>查看弹出的摘要信息，点击Accept Changes。</li><li>设置主机名与网卡信息。</li><li>打开网卡，然后查看是否能获取到IP地址，更改主机名，点击Done。</li><li>点击Begin Installation。</li><li>设置root密码(很重要，一定要记住)。</li><li>点击USER CREATION以创建管理员用户。</li><li>等待系统安装完毕，重启系统。</li></ol><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/9.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/10.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/11.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/12.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/13.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/14.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/15.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/16.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/17.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/18.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/19.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/20.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/21.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/22.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/23.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/24.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/25.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/26.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/27.png"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VMware%E5%AE%89%E8%A3%85CentOS7%E7%B3%BB%E7%BB%9F/28.png"></p><h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><h2 id="初次登录"><a href="#初次登录" class="headerlink" title="初次登录"></a>初次登录</h2><p>如果没登录过Linux系统，输入密码的时候要知道不会出现<code>*****</code>，正常输入，回车确认即可。</p><h2 id="VMX文件损坏"><a href="#VMX文件损坏" class="headerlink" title="VMX文件损坏"></a>VMX文件损坏</h2><p>VMX文件损坏，如果无法修复，最简单有效的方法就是移除并重装。</p><h2 id="重装VMware"><a href="#重装VMware" class="headerlink" title="重装VMware"></a>重装VMware</h2><p>卸载VMware不影响已安装的.vmx文件，等重新安装以后还可以重新导入.vmx文件。</p><h2 id="安装VMwareTools"><a href="#安装VMwareTools" class="headerlink" title="安装VMwareTools"></a>安装VMwareTools</h2><p>官方教程：<a href="https://docs.vmware.com/cn/VMware-Workstation-Player-for-Windows/15.0/com.vmware.player.win.using.doc/GUID-D8892B15-73A5-4FCE-AB7D-56C2C90BD951.html">安装 VMware Tools</a></p><h1 id="学习Linux"><a href="#学习Linux" class="headerlink" title="学习Linux"></a>学习Linux</h1><p><a href="https://www.runoob.com/linux/linux-command-manual.html">菜鸟教程 - Linux教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序的正确性证明</title>
      <link href="/2020/03/05/suan-fa-fen-xi-yu-she-ji/cha-ru-pai-xu-de-zheng-que-xing-zheng-ming/"/>
      <url>/2020/03/05/suan-fa-fen-xi-yu-she-ji/cha-ru-pai-xu-de-zheng-que-xing-zheng-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h1><p><strong>Insertion-Sort(A)</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">to</span> <span class="token namespace">length</span><span class="token punctuation">[</span><span class="token class-name">A</span><span class="token punctuation">]</span>    <span class="token keyword">do</span> key ← <span class="token class-name">A</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token comment">// insert A[j] to sorted sequence A[1, ..., j-1]</span>        i ← j<span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> and <span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> key            <span class="token keyword">do</span> <span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> ← <span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i ← i<span class="token operator">-</span><span class="token number">1</span>        <span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> ← key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="循环不变量"><a href="#循环不变量" class="headerlink" title="循环不变量"></a>循环不变量</h1><p>在每次循环的开始，子数组$A[1, …, j-1]$包含原来数组中$A[1, …, j-1]$但已经是有序的。</p><h1 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>初始化，令$j=2$，$A[1, …, j-1] = A[1, 1] = A[1]$，已经有序。</p><h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2><p>每一层循环维护循环不变量。</p><h2 id="终止"><a href="#终止" class="headerlink" title="终止"></a>终止</h2><p>$j=n+1$，<br>$\therefore A[1, …, j-1] = A[1, n]$是有序的。</p><h1 id="得证"><a href="#得证" class="headerlink" title="得证"></a>得证</h1>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法解决纪念品分组问题</title>
      <link href="/2020/03/02/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-ji-nian-pin-fen-zu-wen-ti/"/>
      <url>/2020/03/02/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-ji-nian-pin-fen-zu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>元旦快到了，校学生会让乐乐负责新年晚会的纪念品发放工作。为使得参加晚会的同学所获得的纪念品价值相对均衡，他要把购来的纪念品根据价格进行分组，但每组最多只能包括两件纪念品，并且每组纪念品的价格之和不能超过一个给定的整数。为了保证在尽量短的时间内发完所有纪念品，乐乐希望分组的数目最少。</p><p>你的任务是写一个程序，找出所有分组方案中分组数最少的一种，输出最少的分组数目。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>共 $n+2$ 行：</p><p>第一行包括一个整数 $w$，为每组纪念品价格之和的上限。</p><p>第二行为一个整数 $n$，表示购来的纪念品的总件数 $G$。</p><p>第 $3\sim n+2$ 行每行包含一个正整数 $P_i$ 表示所对应纪念品的价格。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>一个整数，即最少的分组数目。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">100 9 90 20 20 30 50 60 70 80 90<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>$50%$ 的数据满足：$1\le n\le15$。</p><p>$100%$ 的数据满足：$1\le n\le3\times10^4$，$80\le w\le200$，$5 \le  P_i  \le  w$。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>此问题可用贪心算法解决，<a href="https://www.luogu.com.cn/blog/heidoudou/solution-p1094">这篇文章</a>证明了此题贪心法可解。</p><p>目标分组可能包括一个或两个纪念品，总价值不超界限。</p><p>对所有纪念品的价值进行默认的升序排列后，开启两端向中心的双指针移动。$i$指针指向当前最低价值的纪念品，$j$指针指向当前最高价值的纪念品。当双指针指向的纪念品价值和超出界限时，由于$i$指针只能右移不能左移，没有更小价值的纪念品可选，因此只选单一高价值纪念品，将$j$指针左移一位，$i$指针不动；当双指针指向的纪念品价值和不超出界限时，取当前两个纪念品组成一组，将$j$指针左移一位，将$i$指针右移一位。</p><h1 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> limit <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gifts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            gifts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>gifts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> counter<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>gifts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> gifts<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token operator">--</span>j<span class="token punctuation">;</span>                <span class="token operator">++</span>counter<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>                <span class="token operator">--</span>j<span class="token punctuation">;</span>                <span class="token operator">++</span>counter<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">++</span>counter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><p><a href="https://www.luogu.com.cn/problem/P1094">洛谷 P1094 [NOIP2007 普及组] 纪念品分组</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX符号语法总结</title>
      <link href="/2020/02/26/ji-suan-ji-ke-xue-ji-chu/latex-fu-hao-yu-fa-zong-jie/"/>
      <url>/2020/02/26/ji-suan-ji-ke-xue-ji-chu/latex-fu-hao-yu-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><table><thead><tr><th align="center">$\infty$ \infty</th><th align="center">$\neq$ \neq</th><th align="center">$\times$ \times</th><th align="center">$\div$ \div</th><th align="center">$\sim$ \sim</th></tr></thead><tbody><tr><td align="center">$\pm$ <strong>\pm</strong></td><td align="center">$\mp$ <strong>\mp</strong></td><td align="center">$\leq$ <strong>\leq</strong></td><td align="center">$\geq$ <strong>\geq</strong></td><td align="center">$\approx$ <strong>\approx</strong></td></tr><tr><td align="center">$%$ <strong>%</strong></td><td align="center">$\ast$ <strong>\ast</strong></td><td align="center">$\cdot$ <strong>\cdot</strong></td><td align="center">$\equiv$ <strong>\equiv</strong></td><td align="center">$\cong$ <strong>\cong</strong></td></tr><tr><td align="center">$\in$ <strong>\in</strong></td><td align="center">$\ni$ <strong>\ni</strong></td><td align="center">$\exists$ <strong>\exists</strong></td><td align="center">$\nexists$ <strong>\nexists</strong></td><td align="center">$\propto$ <strong>\propto</strong></td></tr><tr><td align="center">$\cup$ <strong>\cup</strong></td><td align="center">$\cap$ <strong>\cap</strong></td><td align="center">$\perp$ <strong>\perp</strong></td><td align="center">$\parallel$ <strong>\parallel</strong></td><td align="center">$\circ$ <strong>\circ</strong></td></tr><tr><td align="center">$\subseteq$ <strong>\subseteq</strong></td><td align="center">$⫋$ <strong>⫋</strong></td><td align="center">$∀$ <strong>∀</strong></td><td align="center">$\ncong$ <strong>\ncong</strong></td><td align="center">$\nsim$ <strong>\nsim</strong></td></tr><tr><td align="center">$=$ <strong>=</strong></td><td align="center">$+$ <strong>+</strong></td><td align="center">$\ll$ <strong>\ll</strong></td><td align="center">$\gg$ <strong>\gg</strong></td><td align="center">$\subset$ <strong>\subset</strong></td></tr><tr><td align="center">$\doteq$ <strong>\doteq</strong></td><td align="center">$&lt;$ <strong>&lt;</strong></td><td align="center">$&gt;$ <strong>&gt;</strong></td><td align="center">$\prec$ <strong>\prec</strong></td><td align="center">$\succ$ <strong>\succ</strong></td></tr><tr><td align="center">$\preceq$ <strong>\preceq</strong></td><td align="center">$\succeq$ <strong>\succeq</strong></td><td align="center">$\supset$ <strong>\supset</strong></td><td align="center">$\simeq$ <strong>\simeq</strong></td><td align="center">$\supseteq$ <strong>\supseteq</strong></td></tr><tr><td align="center">$\nsubseteq$ <strong>\nsubseteq</strong></td><td align="center">$\sqsubset$ <strong>\sqsubset</strong></td><td align="center">$\sqsupset$ <strong>\sqsupset</strong></td><td align="center">$\Join$ <strong>\Join</strong></td><td align="center">$\notin$ <strong>\notin</strong></td></tr><tr><td align="center">$\int$ <strong>\int</strong></td><td align="center">$\iint$ <strong>\iint</strong></td><td align="center">$\iiint$ <strong>\iiint</strong></td><td align="center">$\oiiint$ <strong>\oiiint</strong></td><td align="center">$\sum$ <strong>\sum</strong></td></tr><tr><td align="center">$\prod$ <strong>\prod</strong></td><td align="center">$\coprod$ <strong>\coprod</strong></td><td align="center">$\bigwedge$ <strong>\bigwedge</strong></td><td align="center">$\bigvee$ <strong>\bigvee</strong></td><td align="center">$\bigcap$ <strong>\bigcap</strong></td></tr><tr><td align="center">$\bigcup$ <strong>\bigcup</strong></td><td align="center">$\bigodot$ <strong>\bigodot</strong></td><td align="center">$\bigoplus$ <strong>\bigoplus</strong></td><td align="center">$\bigotimes$ <strong>\bigotimes</strong></td><td align="center">$\biguplus$ <strong>\biguplus</strong></td></tr><tr><td align="center">$\backslash$ <strong>\backslash</strong></td><td align="center">$/$ <strong>/</strong></td><td align="center">$\divideontimes$ <strong>\divideontimes</strong></td><td align="center">$\star$ <strong>\star</strong></td><td align="center">$\wr$ <strong>\wr</strong></td></tr><tr><td align="center">$\vartriangle$ <strong>\vartriangle</strong></td><td align="center">$\ddag$ <strong>\ddag</strong></td><td align="center">$\diamond$ <strong>\diamond</strong></td><td align="center">$\dag$ <strong>\dag</strong></td><td align="center">$\wedge$ <strong>\wedge</strong></td></tr><tr><td align="center">$\vee$ <strong>\vee</strong></td><td align="center">$\odot$ <strong>\odot</strong></td><td align="center">$\otimes$ <strong>\otimes</strong></td><td align="center">$\oplus$ <strong>\oplus</strong></td><td align="center">$\ominus$ <strong>\ominus</strong></td></tr><tr><td align="center">$\Cup$ <strong>\Cup</strong></td><td align="center">$\Cap$ <strong>\Cap</strong></td><td align="center">$\dotplus$ <strong>\dotplus</strong></td><td align="center">$\intercal$ <strong>\intercal</strong></td><td align="center">$\because$ <strong>\because</strong></td></tr><tr><td align="center">$\therefore$ <strong>\therefore</strong></td><td align="center">$\backsim$ <strong>\backsim</strong></td><td align="center">$\uplus$ <strong>\uplus</strong></td><td align="center">$\propto$ <strong>\propto</strong></td><td align="center">$\oiint$ <strong>\oiint</strong></td></tr><tr><td align="center">$\oint$ <strong>\oint</strong></td><td align="center">$\bigsqcup$ <strong>\bigsqcup</strong></td><td align="center">$\vdash$ <strong>\vdash</strong></td><td align="center">$\dashv$ <strong>\dashv</strong></td><td align="center">$\bowtie$ <strong>\bowtie</strong></td></tr><tr><td align="center">$\sqsubseteq$ <strong>\sqsubseteq</strong></td><td align="center">$\sqsupseteq$ <strong>\sqsupseteq</strong></td><td align="center">$\models$ <strong>\models</strong></td><td align="center">$\mid$ <strong>\mid</strong></td><td align="center">$\parallel$ <strong>\parallel</strong></td></tr><tr><td align="center">$\smile$ <strong>\smile</strong></td><td align="center">$\frown$ <strong>\frown</strong></td><td align="center">$\asymp$ <strong>\asymp</strong></td><td align="center">$:$ <strong>:</strong></td><td align="center">$\pm$ <strong>\pm</strong></td></tr><tr><td align="center">$\backprime$ \backprime</td><td align="center">$\prime$ \prime</td><td align="center">$⌈⌉$ <strong>⌈⌉</strong></td><td align="center">$⌊⌋$ <strong>⌊⌋</strong></td><td align="center"></td></tr></tbody></table><h1 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h1><table><thead><tr><th align="center">$\alpha$ \alpha</th><th align="center">$\beta$ \beta</th><th align="center">$\gamma$ \gamma</th><th align="center">$\delta$ \delta</th><th align="center">$\phi$ \phi</th></tr></thead><tbody><tr><td align="center">$\epsilon$ <strong>\epsilon</strong></td><td align="center">$\zeta$ <strong>\zeta</strong></td><td align="center">$\eta$ <strong>\eta</strong></td><td align="center">$\theta$ <strong>\theta</strong></td><td align="center">$\iota$ <strong>\iota</strong></td></tr><tr><td align="center">$\kappa$ <strong>\kappa</strong></td><td align="center">$\lambda$ <strong>\lambda</strong></td><td align="center">$\mu$ <strong>\mu</strong></td><td align="center">$\nu$ <strong>\nu</strong></td><td align="center">$\xi$ <strong>\xi</strong></td></tr><tr><td align="center">$\rho$ <strong>\rho</strong></td><td align="center">$\sigma$ <strong>\sigma</strong></td><td align="center">$\tau$ <strong>\tau</strong></td><td align="center">$\upsilon$ <strong>\upsilon</strong></td><td align="center">$\varphi$ <strong>\varphi</strong></td></tr><tr><td align="center">$\chi$ <strong>\chi</strong></td><td align="center">$\omega$ <strong>\omega</strong></td><td align="center">$\pi$ <strong>\pi</strong></td><td align="center">$\psi$ <strong>\psi</strong></td><td align="center">$\varepsilon$ <strong>\varepsilon</strong></td></tr><tr><td align="center">$\vartheta$ <strong>\vartheta</strong></td><td align="center">$o$ <strong>o</strong></td><td align="center">$\varpi$ <strong>\varpi</strong></td><td align="center">$\varrho$ <strong>\varrho</strong></td><td align="center">$\varsigma$ <strong>\varsigma</strong></td></tr><tr><td align="center">$\varphi$ <strong>\varphi</strong></td><td align="center">$\Xi$ <strong>\Xi</strong></td><td align="center">$\Gamma$ <strong>\Gamma</strong></td><td align="center">$\Delta$ <strong>\Delta</strong></td><td align="center">$\Lambda$ <strong>\Lambda</strong></td></tr><tr><td align="center">$\Omega$ <strong>\Omega</strong></td><td align="center">$\Phi$ <strong>\Phi</strong></td><td align="center">$\Psi$ <strong>\Psi</strong></td><td align="center">$\Pi$ <strong>\Pi</strong></td><td align="center">$\Sigma$ <strong>\Sigma</strong></td></tr><tr><td align="center">$\Theta$ <strong>\Theta</strong></td><td align="center">$\Upsilon$ <strong>\Upsilon</strong></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="字母类符号"><a href="#字母类符号" class="headerlink" title="字母类符号"></a>字母类符号</h1><table><thead><tr><th align="center">$\aleph$ \aleph</th><th align="center">$\beth$ \beth</th><th align="center">$\daleth$ \daleth</th><th align="center">$\gimel$ \gimel</th><th align="center">$\partial$ \partial</th></tr></thead><tbody><tr><td align="center">$\Finv$ <strong>\Finv</strong></td><td align="center">$\Re$ <strong>\Re</strong></td><td align="center">$\ell$ <strong>\ell</strong></td><td align="center">$\eth$ <strong>\eth</strong></td><td align="center">$\Im$ <strong>\Im</strong></td></tr><tr><td align="center">$\hslash$ <strong>\hslash</strong></td><td align="center">$\complement$ <strong>\complement</strong></td><td align="center">$\wp$ <strong>\wp</strong></td><td align="center">$\forall$ <strong>\forall</strong></td><td align="center"></td></tr></tbody></table><h1 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h1><table><thead><tr><th align="center">$($ (</th><th align="center">$)$ )</th><th align="center">$[$ [</th><th align="center">$]$ ]</th><th align="center">${$ \{</th></tr></thead><tbody><tr><td align="center">$}$ <strong>\}</strong></td><td align="center">$\vert$ <strong>\vert</strong></td><td align="center">$\Vert$ <strong>\Vert</strong></td><td align="center">$/$ <strong>/</strong></td><td align="center"></td></tr></tbody></table><h1 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h1><table><thead><tr><th align="center">$\leftarrow$ \leftarrow</th><th align="center">$\to$ \to</th><th align="center">$\rightarrow$ \rightarrow</th><th align="center">$\uparrow$ \uparrow</th><th align="center">$\downarrow$ \downarrow</th></tr></thead><tbody><tr><td align="center">$\longleftarrow$ <strong>\longleftarrow</strong></td><td align="center">$\longrightarrow$ <strong>\longrightarrow</strong></td><td align="center">$\Leftarrow$ <strong>\Leftarrow</strong></td><td align="center">$\Rightarrow$ <strong>\Rightarrow</strong></td><td align="center">$\mapsto$ <strong>\mapsto</strong></td></tr><tr><td align="center">$\leftrightarrow$ <strong>\leftrightarrow</strong></td><td align="center">$\nleftarrow$ <strong>\nleftarrow</strong></td><td align="center">$\nrightarrow$ <strong>\nrightarrow</strong></td><td align="center">$\rightharpoonup$ <strong>\rightharpoonup</strong></td><td align="center">$\leftharpoonup$ <strong>\leftharpoonup</strong></td></tr><tr><td align="center">$\nleftrightarrow$ <strong>\nleftrightarrow</strong></td><td align="center">$\Leftrightarrow$ <strong>\Leftrightarrow</strong></td><td align="center">$\nLeftrightarrow$ <strong>\nLeftrightarrow</strong></td><td align="center">$\nLeftarrow$ <strong>\nLeftarrow</strong></td><td align="center">$\nRightarrow$ <strong>\nRightarrow</strong></td></tr></tbody></table><h1 id="几何学"><a href="#几何学" class="headerlink" title="几何学"></a>几何学</h1><table><thead><tr><th align="center">$\angle$ \angle</th><th align="center">$\sphericalangle$ \sphericalangle</th><th align="center">$\nmid$ \nmid</th><th align="center">$\nparallel$ \nparallel</th><th align="center">$\blacksquare$ \blacksquare</th></tr></thead><tbody><tr><td align="center">$\star$ <strong>\star</strong></td><td align="center">$\bullet$ <strong>\bullet</strong></td><td align="center">$\bigstar$ <strong>\bigstar</strong></td><td align="center">$\square$ <strong>\square</strong></td><td align="center">$\circ$ <strong>\circ</strong></td></tr></tbody></table><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><table><thead><tr><th align="center">$\Pr$ \Pr</th><th align="center">$\sin$ \sin</th><th align="center">$\cos$ \cos</th><th align="center">$\exp$ \exp</th><th align="center">$\det$ \det</th></tr></thead><tbody><tr><td align="center">$\lim$ <strong>\lim</strong></td><td align="center">$\ln$ <strong>\ln</strong></td><td align="center">$\log$ <strong>\log</strong></td><td align="center">$\max$ <strong>\max</strong></td><td align="center">$\min$ <strong>\min</strong></td></tr><tr><td align="center">$\tan$ <strong>\tan</strong></td><td align="center">$\arg$ <strong>\arg</strong></td><td align="center">$\lg$ <strong>\lg</strong></td><td align="center">$\arcsin$ <strong>\arcsin</strong></td><td align="center">$\cot$ <strong>\cot</strong></td></tr><tr><td align="center">$\sh$ <strong>\sh</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="强调符号"><a href="#强调符号" class="headerlink" title="强调符号"></a>强调符号</h1><table><thead><tr><th align="center">$\dot{a}$ \dot{a}</th><th align="center">$\ddot{a}$ \ddot{a}</th><th align="center">$\hat{a}$ \hat{a}</th><th align="center">$\tilde{a}$ \tilde{a}</th><th align="center">$\bar{a}$ \bar{a}</th></tr></thead><tbody><tr><td align="center">$\vec{a}$ <strong>\vec{a}</strong></td><td align="center">$\overline{xyz}$ <strong>\overline{xyz}</strong></td><td align="center">$\widehat{xyz}$ <strong>\widehat{xyz}</strong></td><td align="center">$\widetilde{xyz}$ <strong>\widetilde{xyz}</strong></td><td align="center">$\check{a}$ <strong>\check{a}</strong></td></tr><tr><td align="center">$\acute{a}$ <strong>\acute{a}</strong></td><td align="center">$\grave{a}$ <strong>\grave{a}</strong></td><td align="center">$\breve{a}$ <strong>\breve{a}</strong></td><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="空白符号"><a href="#空白符号" class="headerlink" title="空白符号"></a>空白符号</h1><table><thead><tr><th align="center">$a\qquad{b}$ <strong>a\qquad{b}</strong></th><th align="center">$a\quad{b}$ <strong>a\quad{b}</strong></th><th align="center">$a \ b$ <strong>a \ b</strong></th><th align="center">$a ; b$ <strong>a\ ; b</strong></th><th align="center">$a , b$ <strong>a \, b</strong></th></tr></thead><tbody><tr><td align="center">$a b$ <strong>a b</strong></td><td align="center">$a ! b$ <strong>a \! b</strong></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="省略符号"><a href="#省略符号" class="headerlink" title="省略符号"></a>省略符号</h1><table><thead><tr><th align="center">$\cdots$ \cdots</th><th align="center">$\ldots$ \ldots</th><th align="center">$\vdots$ \vdots</th><th align="center">$\ddots$ \ddots</th></tr></thead></table><h1 id="数值编号"><a href="#数值编号" class="headerlink" title="数值编号"></a>数值编号</h1><table><thead><tr><th align="center">Ⅰ</th><th align="center">Ⅱ</th><th align="center">Ⅲ</th><th align="center">Ⅳ</th><th align="center">Ⅴ</th><th align="center">Ⅵ</th><th align="center">Ⅶ</th><th align="center">Ⅷ</th><th align="center">Ⅸ</th><th align="center">Ⅹ</th><th align="center">Ⅺ</th><th align="center">Ⅻ</th></tr></thead><tbody><tr><td align="center">①</td><td align="center">②</td><td align="center">③</td><td align="center">④</td><td align="center">⑤</td><td align="center">⑥</td><td align="center">⑦</td><td align="center">⑧</td><td align="center">⑨</td><td align="center">⑩</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">⑴</td><td align="center">⑵</td><td align="center">⑶</td><td align="center">⑷</td><td align="center">⑸</td><td align="center">⑹</td><td align="center">⑺</td><td align="center">⑻</td><td align="center">⑼</td><td align="center">⑽</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">㈠</td><td align="center">㈡</td><td align="center">㈢</td><td align="center">㈣</td><td align="center">㈤</td><td align="center">㈥</td><td align="center">㈦</td><td align="center">㈧</td><td align="center">㈨</td><td align="center">㈩</td><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="分式"><a href="#分式" class="headerlink" title="分式"></a>分式</h1><p>基本格式：<br><code>\frac{分子}{分母}</code> → $\frac{分子}{分母}$</p><p>样例：<br>$\frac{dy}{dx}$ ← <code>\frac{dy}{dx}</code></p><p>$\frac{\partial{y}}{\partial{x}}$ ← <code>\frac{\partial{y}}{\partial{x}}</code></p><h1 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h1><p>基本格式：<br><code>anytext_{downtext}^{uptext}</code> → $anytext_{downtext}^{uptext}$</p><p>也可以颠倒过来：<code>anytext^{uptext}\_{downtext}</code></p><p>还可以只加一种：<code>anytext_{downtext}</code> 或 <code>anytext^{uptext}</code></p><p>样例：<br><br>$x^{2}$ ← x^{2}<br><br>$H_{2}O$ ← H_{2}O</p><h1 id="根式"><a href="#根式" class="headerlink" title="根式"></a>根式</h1><p>基本格式：<br><code>\sqrt[开根幂次数]{被开根数}</code> → $\sqrt[开根幂次数]{被开根数}$</p><p>样例：<br><br>$\sqrt{2}$ ← \sqrt{2}<br><br>$\sqrt[3]{2}$ ← \sqrt[3]{2}<br><br>$\sqrt[n]{3}$ ← \sqrt[n]{3}</p><h1 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h1><p>基本格式：<br><code>\int_{积分下限}^{积分上限}</code> → $\int_{积分下限}^{积分上限}$</p><p>也可以颠倒过来：<code>\int^{积分上限}_{积分下限}</code></p><p>样例：<br><code>\int^{3}_{8}x^3dx</code> → $\int^{3}_{8}x^3dx$</p><h1 id="求积"><a href="#求积" class="headerlink" title="求积"></a>求积</h1><p>基本格式：<br><code>\prod_{downtext}^{uptext}{text}</code> → $\prod_{downtext}^{uptext}{text}$</p><p>样例：<br><code>\prod_{k=1}^{n}f(k)</code> → $\prod_{k=1}^{n}f(k)$</p><p>要想把上下标放到求和/求积符号上方和下方，则格式为：<br><code>\prod\limits_{k=1}^{n}f(k)</code> → $\prod\limits_{k=1}^{n}f(k)$</p><h1 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h1><p><code>\sum\limits_{downtext}^{uptext}{text}</code> → $\sum\limits_{downtext}^{uptext}{text}$</p><p><code>\sum\limits_{i=1}^{n}{f(i)}</code> → $\sum\limits_{i=1}^{n}{f(i)}$</p><h1 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h1><p><code>\lim\limits_{x\to{0}}{\frac{\sin{x}}{x}}=1</code> → $\lim\limits_{x\to{0}}{\frac{\sin{x}}{x}}=1$</p><h1 id="数列"><a href="#数列" class="headerlink" title="数列"></a>数列</h1><p><code>A=\{a_{1},a_{2},\ldots,a_{n}\}</code> → $A={a_{1},a_{2},\ldots,a_{n}}$</p><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><p><code>\begin{matrix} 0 &amp; 1 \\ 1 &amp; 0 \end{matrix}</code> → $\begin{matrix} 0 &amp; 1 \ 1 &amp; 0 \end{matrix}$</p><p><code>\begin{pmatrix} 0 &amp; -i \\ i &amp; 0 \end{pmatrix}</code> → $\begin{pmatrix} 0 &amp; -i \ i &amp; 0 \end{pmatrix}$</p><p><code>\begin{bmatrix} 0 &amp; -1 \\ 1 &amp; 0 \end{bmatrix}</code> → $\begin{bmatrix} 0 &amp; -1 \ 1 &amp; 0 \end{bmatrix}$</p><p><code>\begin{Bmatrix} 1 &amp; 0 \\ 0 &amp; -1 \end{Bmatrix}</code> → $\begin{Bmatrix} 1 &amp; 0 \ 0 &amp; -1 \end{Bmatrix}$</p><p><code>\begin{bmatrix} 1 &amp; 1 &amp; \ldots &amp; 1 \\ 2 &amp; 2^{2} &amp; \ldots &amp; 2^{n} \\ 3 &amp; 3^{2} &amp; \ldots &amp; 3^{n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ n &amp; n^{2} &amp; \ldots &amp; n^{n} \end{bmatrix}</code> → $\begin{bmatrix} 1 &amp; 1 &amp; \ldots &amp; 1 \ 2 &amp; 2^{2} &amp; \ldots &amp; 2^{n} \ 3 &amp; 3^{2} &amp; \ldots &amp; 3^{n} \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \ n &amp; n^{2} &amp; \ldots &amp; n^{n} \end{bmatrix}$</p><h1 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h1><p><code>\begin{vmatrix} a &amp; b \\ c &amp; d \end{vmatrix}</code> → $\begin{vmatrix} a &amp; b \ c &amp; d \end{vmatrix}$</p><p><code>\begin{Vmatrix} i &amp; 0 \\ 0 &amp; -i \end{Vmatrix}</code> → $\begin{Vmatrix} i &amp; 0 \ 0 &amp; -i \end{Vmatrix}$</p><h1 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h1><p><code>\binom{a}{b}</code>或<code>\tbinom{a}{b}</code> → $\binom{a}{b}$</p><p><code>\dbinom{a}{b}</code> → $\dbinom{a}{b}$</p><p><code>C_{3}^{1}</code> → $C_{3}^{1}$</p><p><code>A_{3}^{1}</code> → $A_{3}^{1}$</p><h1 id="分段函数"><a href="#分段函数" class="headerlink" title="分段函数"></a>分段函数</h1><p><code>\Psi_{A}(x)=\begin{cases}1, &amp; x\in{A} \\ 0, &amp; x\notin{A} \end{cases}</code> → $\Psi_{A}(x)=\begin{cases}1, &amp; x\in{A} \ 0, &amp; x\notin{A} \end{cases}$</p><h1 id="化学方程式"><a href="#化学方程式" class="headerlink" title="化学方程式"></a>化学方程式</h1><p><code>C+O_{2}\stackrel{点燃}{\longrightarrow}{CO_{2}}</code> → $C+O_{2}\stackrel{点燃}{\longrightarrow}{CO_{2}}$</p><h1 id="文本着色"><a href="#文本着色" class="headerlink" title="文本着色"></a>文本着色</h1><p><code>\textcolor{red}{a+b=c}</code> → $\textcolor{red}{a+b=c}$</p><h1 id="文本加粗"><a href="#文本加粗" class="headerlink" title="文本加粗"></a>文本加粗</h1><p>不加粗：<code>A</code> → $A$</p><p>加粗：<code>\textbf{A}</code> → $\textbf{A}$</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划算法解决平面上的最接近点对问题</title>
      <link href="/2020/02/25/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-ping-mian-shang-de-zui-jie-jin-dian-dui-wen-ti/"/>
      <url>/2020/02/25/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-ping-mian-shang-de-zui-jie-jin-dian-dui-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>推荐阅读：<a href="https://blog.csdn.net/weixin_30104533/article/details/80658962">所有结点对的最短路径问题</a></p><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">allPairs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>同样是平面上的最接近点对问题，即便不考虑性能，用动态规划求解比较适合的输入是带权邻接矩阵。输入数据是点坐标时，比较适合分治算法。</p><p>顶点从0开始编号； 所有数组的维数相等。<br>a[][]是带权邻接矩阵。<br>d[][]是最短路径值矩阵。如果d[i][i]设置为负值，则存在负周期。<br>实际路径可以使用path[][]进行计算。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NOT_A_VERTEX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">allPairs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> NOT_A_VERTEX<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">allPairs</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> d<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>输入：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">4</span><span class="token number">0</span> <span class="token number">2</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token number">2</span><span class="token number">1000</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token number">1000</span><span class="token number">4</span> <span class="token number">1000</span> <span class="token number">0</span> <span class="token number">1000</span><span class="token number">1000</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">3</span><span class="token number">2</span><span class="token number">1</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">3</span><span class="token number">3</span><span class="token number">4</span><span class="token number">4</span><span class="token number">0</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">5</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span><span class="token number">3</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token number">0</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大连续子序列和问题</title>
      <link href="/2020/02/25/suan-fa-fen-xi-yu-she-ji/zui-da-lian-xu-zi-xu-lie-he-wen-ti/"/>
      <url>/2020/02/25/suan-fa-fen-xi-yu-she-ji/zui-da-lian-xu-zi-xu-lie-he-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> seqStart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> seqEnd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="O-N-3-算法"><a href="#O-N-3-算法" class="headerlink" title="O(N^3)算法"></a>O(N^3)算法</h1><p>注意seqStart和seqEnd代表实际的最佳顺序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSubSum1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> maxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> thisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                thisSum <span class="token operator">+=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>thisSum <span class="token operator">&gt;</span> maxSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxSum <span class="token operator">=</span> thisSum<span class="token punctuation">;</span>                seqStart <span class="token operator">=</span> i<span class="token punctuation">;</span>                seqEnd <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="O-N-2-算法"><a href="#O-N-2-算法" class="headerlink" title="O(N^2)算法"></a>O(N^2)算法</h1><p>注意seqStart和seqEnd代表实际的最佳顺序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSubSum2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> maxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> thisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            thisSum <span class="token operator">+=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>thisSum <span class="token operator">&gt;</span> maxSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxSum <span class="token operator">=</span> thisSum<span class="token punctuation">;</span>                seqStart <span class="token operator">=</span> i<span class="token punctuation">;</span>                seqEnd <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="O-N-算法"><a href="#O-N-算法" class="headerlink" title="O(N)算法"></a>O(N)算法</h1><p>注意seqStart和seqEnd代表实际的最佳顺序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSubSum4</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> maxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> thisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        thisSum <span class="token operator">+=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>thisSum <span class="token operator">&gt;</span> maxSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxSum <span class="token operator">=</span> thisSum<span class="token punctuation">;</span>            seqStart <span class="token operator">=</span> i<span class="token punctuation">;</span>            seqEnd <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>thisSum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            thisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a>递归版本</h1><p>在跨越$a[left,right]$的子数组中找到最大和。</p><p>不尝试维持实际的最佳顺序。</p><p>调用递归的函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSubSum3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">maxSumRec</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>递归部分：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSumRec</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> maxLeftBorderSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxRightBorderSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> leftBorderSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rightBorderSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> center <span class="token operator">=</span> left <span class="token operator">+</span> right <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> maxLeftSum <span class="token operator">=</span> <span class="token function">maxSumRec</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxRightSum <span class="token operator">=</span> <span class="token function">maxSumRec</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> center <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> center<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> left<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        leftBorderSum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>leftBorderSum <span class="token operator">&gt;</span> maxLeftBorderSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxLeftBorderSum <span class="token operator">=</span> leftBorderSum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> center <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rightBorderSum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rightBorderSum <span class="token operator">&gt;</span> maxRightBorderSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxRightBorderSum <span class="token operator">=</span> rightBorderSum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">max3</span><span class="token punctuation">(</span>maxLeftSum<span class="token punctuation">,</span> maxRightSum<span class="token punctuation">,</span> maxLeftBorderSum <span class="token operator">+</span> maxRightBorderSum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>辅助函数(三数求Max)：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max3</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">&gt;</span> c <span class="token operator">?</span> a <span class="token operator">:</span> c <span class="token operator">:</span> b <span class="token operator">&gt;</span> c <span class="token operator">?</span> b <span class="token operator">:</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MaxSumTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> seqStart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> seqEnd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSubSum1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> thisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thisSum <span class="token operator">+=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>thisSum <span class="token operator">&gt;</span> maxSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    maxSum <span class="token operator">=</span> thisSum<span class="token punctuation">;</span>                    seqStart <span class="token operator">=</span> i<span class="token punctuation">;</span>                    seqEnd <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSubSum2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> thisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                thisSum <span class="token operator">+=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>thisSum <span class="token operator">&gt;</span> maxSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    maxSum <span class="token operator">=</span> thisSum<span class="token punctuation">;</span>                    seqStart <span class="token operator">=</span> i<span class="token punctuation">;</span>                    seqEnd <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSubSum4</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> thisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            thisSum <span class="token operator">+=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>thisSum <span class="token operator">&gt;</span> maxSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxSum <span class="token operator">=</span> thisSum<span class="token punctuation">;</span>                seqStart <span class="token operator">=</span> i<span class="token punctuation">;</span>                seqEnd <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>thisSum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                thisSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSumRec</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxLeftBorderSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxRightBorderSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftBorderSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rightBorderSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> center <span class="token operator">=</span> left <span class="token operator">+</span> right <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> maxLeftSum <span class="token operator">=</span> <span class="token function">maxSumRec</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxRightSum <span class="token operator">=</span> <span class="token function">maxSumRec</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> center <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> center<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> left<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            leftBorderSum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>leftBorderSum <span class="token operator">&gt;</span> maxLeftBorderSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxLeftBorderSum <span class="token operator">=</span> leftBorderSum<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> center <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rightBorderSum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rightBorderSum <span class="token operator">&gt;</span> maxRightBorderSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxRightBorderSum <span class="token operator">=</span> rightBorderSum<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">max3</span><span class="token punctuation">(</span>maxLeftSum<span class="token punctuation">,</span> maxRightSum<span class="token punctuation">,</span> maxLeftBorderSum <span class="token operator">+</span> maxRightBorderSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max3</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">&gt;</span> c <span class="token operator">?</span> a <span class="token operator">:</span> c <span class="token operator">:</span> b <span class="token operator">&gt;</span> c <span class="token operator">?</span> b <span class="token operator">:</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSubSum3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">maxSumRec</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getTimingInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> alg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> totalTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> totalTime <span class="token operator">&lt;</span> <span class="token number">4000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> test<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                test<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>alg<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token function">maxSubSum1</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token function">maxSubSum2</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                <span class="token function">maxSubSum3</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                <span class="token function">maxSubSum4</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            totalTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"\t%12.6f"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>totalTime <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">/</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxSum<span class="token punctuation">;</span>        maxSum <span class="token operator">=</span> <span class="token function">maxSubSum1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Max sum is "</span> <span class="token operator">+</span> maxSum <span class="token operator">+</span> <span class="token string">"; it goes"</span> <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> seqStart <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> seqEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>        maxSum <span class="token operator">=</span> <span class="token function">maxSubSum2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Max sum is "</span> <span class="token operator">+</span> maxSum <span class="token operator">+</span> <span class="token string">"; it goes"</span> <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> seqStart <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> seqEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>        maxSum <span class="token operator">=</span> <span class="token function">maxSubSum3</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Max sum is "</span> <span class="token operator">+</span> maxSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        maxSum <span class="token operator">=</span> <span class="token function">maxSubSum4</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Max sum is "</span> <span class="token operator">+</span> maxSum <span class="token operator">+</span> <span class="token string">"; it goes"</span> <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> seqStart <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> seqEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> n <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"N = %7d"</span> <span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> alg <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> alg <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> alg<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>alg <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">&gt;</span> <span class="token number">50000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t      NA    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">getTimingInfo</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> alg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Max</span> sum is <span class="token number">11</span><span class="token punctuation">;</span> it goes from <span class="token number">0</span> <span class="token keyword">to</span> <span class="token number">6</span><span class="token class-name">Max</span> sum is <span class="token number">11</span><span class="token punctuation">;</span> it goes from <span class="token number">0</span> <span class="token keyword">to</span> <span class="token number">6</span><span class="token class-name">Max</span> sum is <span class="token number">11</span><span class="token class-name">Max</span> sum is <span class="token number">11</span><span class="token punctuation">;</span> it goes from <span class="token number">0</span> <span class="token keyword">to</span> <span class="token number">6</span><span class="token class-name">N</span> <span class="token operator">=</span>     <span class="token number">100</span>    <span class="token number">0.000040</span>    <span class="token number">0.000002</span>    <span class="token number">0.000002</span>    <span class="token number">0.000001</span><span class="token class-name">N</span> <span class="token operator">=</span>    <span class="token number">1000</span>    <span class="token number">0.041708</span>    <span class="token number">0.000149</span>    <span class="token number">0.000025</span>    <span class="token number">0.000010</span><span class="token class-name">N</span> <span class="token operator">=</span>   <span class="token number">10000</span>   <span class="token number">43.274000</span>    <span class="token number">0.019925</span>    <span class="token number">0.000353</span>    <span class="token number">0.000108</span><span class="token class-name">N</span> <span class="token operator">=</span>  <span class="token number">100000</span>      NA        <span class="token number">1.428666</span>    <span class="token number">0.002906</span>    <span class="token number">0.001066</span><span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">1000000</span>      NA      <span class="token number">147.347000</span>    <span class="token number">0.032411</span>    <span class="token number">0.011284</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划算法解决矩阵链乘法最优顺序问题</title>
      <link href="/2020/02/25/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-ju-zhen-lian-cheng-fa-zui-you-shun-xu-wen-ti/"/>
      <url>/2020/02/25/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-ju-zhen-lian-cheng-fa-zui-you-shun-xu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="矩阵链乘法"><a href="#矩阵链乘法" class="headerlink" title="矩阵链乘法"></a>矩阵链乘法</h1><p>矩阵连乘，选择不同的乘法顺序，效率可能千差万别。</p><p>高效的实现算法应该用动态规划来设计，具体的讲解可以看<a href="https://www.cnblogs.com/fsmly/p/10228767.html">这里</a>。</p><h1 id="Java编程实现"><a href="#Java编程实现" class="headerlink" title="Java编程实现"></a>Java编程实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> INFINITY <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token comment">/**     * 计算矩阵乘法的最优次序     * c包含n个矩阵中每个矩阵的列数，c[0]是矩阵1中的行数     * 最小乘法次数保留在m[1][n]中     * m和lastChange从1开始索引(而不是0)，主对角线下方的条目没有意义且未初始化     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">optMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> c<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> left <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            m<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// k = (right - left)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> left <span class="token operator">&lt;=</span> n<span class="token operator">-</span>k<span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> right <span class="token operator">=</span> left <span class="token operator">+</span> k<span class="token punctuation">;</span>                m<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> INFINITY<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">long</span> thisCost <span class="token operator">=</span> m<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> m<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> c<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>thisCost <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        m<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> thisCost<span class="token punctuation">;</span>                        lastChange<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastChange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">optMatrix</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> m<span class="token punctuation">,</span> lastChange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>lastChange<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找出缺失的一个整数问题</title>
      <link href="/2020/02/18/suan-fa-fen-xi-yu-she-ji/zhao-chu-que-shi-de-yi-ge-zheng-shu-wen-ti/"/>
      <url>/2020/02/18/suan-fa-fen-xi-yu-she-ji/zhao-chu-que-shi-de-yi-ge-zheng-shu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>对于1-100之间的数，给出一个不重复的、数据总数99的无序序列，设计算法求解缺的一个数值。</p><p>本题可以可扩展成从1-N+1之间不重复的N个数组成的序列找出缺的数据。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>有三种算法思路，下面会有各自的分析，这里就不加以赘述了……</p><h1 id="思路一：数组计数"><a href="#思路一：数组计数" class="headerlink" title="思路一：数组计数"></a>思路一：数组计数</h1><p>开一个数组，长度是num+2。实际上有num+1个元素，由于缺一个所以需要多开一个，但也为了方便，从索引为1处开始存取，所以是num+2。</p><p>遍历原数组，当前元素依据下标在新数组中计数，然后最后从1开始再跑一趟统计值为0的位置，输出即可。</p><p>Java编程实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">arrayCount</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        newArray<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(N) —— 两数组各需要跑一趟<br>空间复杂度：O(N) —— 额外开一个数组的损耗</p><h1 id="思路二：排序后找步长"><a href="#思路二：排序后找步长" class="headerlink" title="思路二：排序后找步长"></a>思路二：排序后找步长</h1><p>先对数组的元素序列进行排序，再统计每一步的步长，若步长差为1则继续，若为2则输出结果。</p><p>需要注意的是有一个特判，因为我先取了排序后第一个元素的值，所以从1开始遍历，此时假使缺的正是最小的元素（排序后的最小值是第二小的），就查不出来。<br>所以先特判最小值是不是1，这样也避免了最后跑完一趟再输出1，比较划算。</p><p>Java编程实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sortAndFind</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> prev <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">++</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(NlogN) —— 主要来自排序算法的时间损耗<br>空间复杂度：O(logN)~O(N) —— 快速排序的消耗，不能忽略</p><h1 id="思路三：区间和减去数组元素和"><a href="#思路三：区间和减去数组元素和" class="headerlink" title="思路三：区间和减去数组元素和"></a>思路三：区间和减去数组元素和</h1><p>是这样的：先遍历一趟数组，求和一下，得知总值；再用等差数列求和公式求区间总和。</p><p>用区间总和减去数组元素和就是答案。</p><p>比如说：1-5缺1个元素，1+2+3+4+5=15，给出1、2、4、5四个元素，数组求和是12，15-12=3，即为缺的元素。</p><p>Java编程实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sumAndFind</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span>sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(N) —— 需要遍历一趟数组求和<br>空间复杂度：O(1) —— 只需要简单的计算，不需要额外数组空间。</p><h1 id="完整代码（Java语言描述）"><a href="#完整代码（Java语言描述）" class="headerlink" title="完整代码（Java语言描述）"></a>完整代码（Java语言描述）</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">arrayCount</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newArray<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sortAndFind</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> prev <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">++</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sumAndFind</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span>sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">arrayCount</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sortAndFind</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sumAndFind</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>算法三较为高效，事实上，直接求解往往比开花式的技巧高效、简洁。</p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法解决快速排序问题</title>
      <link href="/2020/02/18/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-kuai-su-pai-xu-wen-ti/"/>
      <url>/2020/02/18/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-kuai-su-pai-xu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="快速排序简介"><a href="#快速排序简介" class="headerlink" title="快速排序简介"></a>快速排序简介</h1><p>快速排序(QuickSort)是对冒泡排序(BubbleSort)的一种改进，由C. A. R. Hoare在1960年提出。</p><p>快速排序的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><p>快速排序的效率很高，对随机序列比较有效，平均时间复杂度为$O(N\log{N})$，但也可能遇到$O(N^2)$的糟糕情况。如果加以优化，$O(N^2)$的情况基本不可能出现。</p><p>快速排序的实现是面试常考的知识，是必须掌握的重点知识。</p><h1 id="快速排序的流程"><a href="#快速排序的流程" class="headerlink" title="快速排序的流程"></a>快速排序的流程</h1><p>快速排序算法通过多次比较和交换来实现排序，其排序流程如下：</p><ol><li>首先设定一个分界值，通过该分界值将数组分成左右两部分。</li><li>将大于或等于分界值的数据集中到数组右边，小于分界值的数据集中到数组的左边。此时，左边部分中各元素都小于或等于分界值，而右边部分中各元素都大于或等于分界值。</li><li>然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。</li><li>重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当左、右两个部分各数据排序完成后，整个数组的排序也就完成了。</li></ol><h1 id="快速排序的动图演示"><a href="#快速排序的动图演示" class="headerlink" title="快速排序的动图演示"></a>快速排序的动图演示</h1><p><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/1.gif"></p><h1 id="快速排序的优化策略"><a href="#快速排序的优化策略" class="headerlink" title="快速排序的优化策略"></a>快速排序的优化策略</h1><p>其实快排是一个天才般的算法，对其优化主要从两个角度展开：</p><ol><li>试图更合理地选取的中轴，尽量使得划分均匀一些。</li><li>试图在快排效率不好的时候更换算法或与其他算法组合，使之更高效。<br>下面给一些说明。</li></ol><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><p>运用二分思想，每次取划分出的区间的中值作为新的一次划分的中轴。<br>一般来说，快排对随机序列很好使，所以说我们可以认为，平均来讲去取中值更可能划分的比较均匀。</p><h2 id="随机化"><a href="#随机化" class="headerlink" title="随机化"></a>随机化</h2><p>既然快排本身面对的就是随机序列，其实我们可以认为随机化地取枢纽值会比任意取好一些，至少比直接取一侧的值好一些。<br>随机化本身就可能是一种算法优化的策略，至少也是一种参考指标。</p><h2 id="结合其他排序算法互补"><a href="#结合其他排序算法互补" class="headerlink" title="结合其他排序算法互补"></a>结合其他排序算法互补</h2><p>快速排序并非没有缺点，时间复杂度在最坏情况下会退化到$O(N^2)$，划分到小区间时效率甚至可能不如简单的排序算法。</p><p>TimSort就是一个非常有趣的例子，将快速排序与其他排序算法相结合，实现了更高的排序效率。</p><h1 id="快速排序的编程实现"><a href="#快速排序的编程实现" class="headerlink" title="快速排序的编程实现"></a>快速排序的编程实现</h1><h2 id="Java编程实现"><a href="#Java编程实现" class="headerlink" title="Java编程实现"></a>Java编程实现</h2><p>笔者的<a href="https://blog.csdn.net/weixin_43896318/article/details/98208593">这篇文章</a>给出了基于Java的实现。</p><h2 id="C-编程实现"><a href="#C-编程实现" class="headerlink" title="C++编程实现"></a>C++编程实现</h2><p>这个版本是利用了二分的思想对算法进行了优化，使得原先的算法性能得到了一定程度的提高。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> array<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/** * 应用二分思想 * @param left 左索引 * @param right 右索引 */</span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 中间数</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 查找左半部分比中间数大的数</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 查找右半部分比中间数小的数</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 交换</span>            <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 递归搜索左半部分</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 递归搜索右半部分</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> num<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="比较快速排序与二路归并排序"><a href="#比较快速排序与二路归并排序" class="headerlink" title="比较快速排序与二路归并排序"></a>比较快速排序与二路归并排序</h1><p><a href="https://blog.csdn.net/weixin_43896318/article/details/102472394">这篇文章</a>对二者的基本情况进行了比较详细的阐述，下面对二者的算法思想进行对比分析。</p><p>归并排序和快速排序都使用了<a href="https://blog.csdn.net/weixin_43896318/article/details/102770051">分治思想</a>，可以通过递归很好的完成排序工作。二者的不同在于：<strong>快速排序的核心算法是划分，二路归并排序的核心算法是合并</strong>。</p><p>大家有没有想过这样一件事：快速排序和二路归并排序分别是在什么时候完成的排序？</p><ul><li>快速排序在划分的时候，将大的放到轴右侧、小的换到轴的左侧，在这个划分的时候完成排序，它的“分治”，“分”是核心，所以“划分”是核心算法，等到分无可分就完成了子区间的排序，子区间都排完，整体区间就完成了排序。</li><li>二路归并排序的“分”只是为了二分地分解大区间为小的子区间，在“合”的时候完成排序，它的“分治”，“并”是核心，所以“合并”是核心算法，等到分无可分就可以逐步合并区间了，最终就完成了整体区间的排序。</li></ul><p><strong>总结</strong>：</p><ul><li>快速排序在划分的时候完成排序，重点在“分”；归并排序在“并”的时候完成排序，重点在“并”。</li><li>快速排序属于交换排序，与归并排序有很大的不同，快排的“分”也是通过交换完成的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unicode与UTF-8</title>
      <link href="/2020/02/17/ji-suan-ji-ke-xue-ji-chu/unicode-yu-utf-8/"/>
      <url>/2020/02/17/ji-suan-ji-ke-xue-ji-chu/unicode-yu-utf-8/</url>
      
        <content type="html"><![CDATA[<h1 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h1><p>Unicode 联盟开发了 Unicode 标准，并与领先的标准开发组织（如 ISO、W3C 和 ECMA）开展了合作。。他们的目标是用标准的 Unicode 转换格式（UTF）替换现有的字符集。</p><p>由于 ISO-8859 中的字符集大小有限，在多语言环境中不兼容，因此 Unicode 联盟制定了 Unicode 标准。Unicode 标准涵盖了（几乎）世界上所有的字符、标点和符号。</p><p>Unicode 支持独立于平台和语言的文本处理、存储和传输。</p><p>Unicode 标准已经成功实现，并且以 HTML、XML、Java、JavaScript、电子邮件、ASP、PHP 等实现。在许多操作系统和所有现代浏览器中也支持 Unicode 标准。</p><h1 id="Unicode字符集"><a href="#Unicode字符集" class="headerlink" title="Unicode字符集"></a>Unicode字符集</h1><p>Unicode 可以通过不同的字符集来实现。最常用的编码是 UTF-8 和 UTF-16：</p><table><thead><tr><th>字符集</th><th>描述</th></tr></thead><tbody><tr><td>UTF-8</td><td>UTF8 中的字符长度可以是 1 到 4 个字节。 UTF-8 可以代表 Unicode 标准中的任何字符。 UTF-8 向后兼容ASCII。</td></tr><tr><td>UTF-16</td><td>16 位 Unicode 转换格式是 Unicode 的可变长度字符编码，能够编码整个 Unicode 编码。 UTF-16 用于主要的操作系统和环境，如 Microsoft Windows、Java 和 .NET。</td></tr></tbody></table><p>提示：Unicode 的前 128 个字符（与 ASCII 一一对应）使用与 ASCII 相同的二进制值的单个八位字节进行编码，使得有效的 ASCII 文本使用有效的 UTF-8 编码 Unicode。</p><p>如上所述，在存储和网络传输中，通常使用更为节省空间的变长编码方式 UTF-8，UTF-8 代表 8 位一组表示 Unicode 字符的格式，使用 1 - 4 个字节来表示字符。</p><p>其实还有UTF-32，我们让一个字符使用四个字节存储，也就是 32 位，这样就能涵盖现有 Unicode 包含的所有字符。但UTF-32浪费空间，比如使用 UTF-32 和 ASCII 分别对一个只有西文字母的文档编码，前者需要花费的空间是后者的四倍（ASCII 每个字符只需要一个字节存储，而UTF-32是四个字节）。</p><h1 id="Unicode和UTF-8的区别"><a href="#Unicode和UTF-8的区别" class="headerlink" title="Unicode和UTF-8的区别"></a>Unicode和UTF-8的区别</h1><p>Unicode 是一个字符集。 UTF-8 属于编码。<br>Unicode 是具有唯一十进制数字（代码点）的字符列表。 A = 65，B = 66，C = 67，….<br>这个十进制数字表示字符串“hello”：104 101 108 108 111<br>编码指的是如何将这些数字转换成存储在计算机中的二进制数字：<br>UTF-8 编码将像这样存储“hello”（二进制）：01101000 01100101 01101100 01101100 01101111<br>编码将数字转换为二进制。字符集将字符转换为数字。</p><h1 id="UTF-8的编码规则"><a href="#UTF-8的编码规则" class="headerlink" title="UTF-8的编码规则"></a>UTF-8的编码规则</h1><p>UTF-8 的编码规则如下（U+ 后面的数字代表 Unicode 字符代码）：</p><p>U+&amp;nbsp;&amp;nbsp;0000 ~ U+&amp;nbsp;&amp;nbsp;007F: <code>0XXXXXXX</code><br>U+&amp;nbsp;&amp;nbsp;0080 ~ U+&amp;nbsp;&amp;nbsp;07FF: <code>110XXXXX 10XXXXXX</code><br>U+&amp;nbsp;&amp;nbsp;0800 ~ U+&amp;nbsp;&amp;nbsp;FFFF: <code>1110XXXX 10XXXXXX 10XXXXXX</code><br>U+10000 ~ U+1FFFF: <code>11110XXX 10XXXXXX 10XXXXXX 10XXXXXX</code></p><p>可以看到，UTF-8 通过开头的标志位位数实现了变长。对于单字节字符，只占用一个字节，实现了向下兼容 ASCII，并且能和 UTF-32 一样，包含 Unicode 中的所有字符，又能有效减少存储传输过程中占用的空间。</p><h1 id="HTML中的Unicode编码"><a href="#HTML中的Unicode编码" class="headerlink" title="HTML中的Unicode编码"></a>HTML中的Unicode编码</h1><p>HTML4只支持UTF-8，而HTML5支持UTF-8和UTF-16。</p><table><thead><tr><th>字符码</th><th>十进制</th><th>十六进制</th></tr></thead><tbody><tr><td>C0 控制和基本拉丁语</td><td>0-127</td><td>0000-007F</td></tr><tr><td>C1 控制和 Latin-1</td><td>补充</td><td>128-255 0080-00FF</td></tr><tr><td>拉丁文扩展-A</td><td>256-383</td><td>0100-017F</td></tr><tr><td>拉丁文扩展-B</td><td>384-591</td><td>0180-024F</td></tr><tr><td>间距修饰符</td><td>688-767</td><td>02B0-02FF</td></tr><tr><td>变音符号</td><td>768-879</td><td>0300-036F</td></tr><tr><td>希腊和科普特</td><td>880-1023</td><td>0370-03FF</td></tr><tr><td>西里尔文基本</td><td>1024-1279</td><td>0400-04FF</td></tr><tr><td>西里尔文补充</td><td>1280-1327</td><td>0500-052F</td></tr><tr><td>一般标点符号</td><td>8192-8303</td><td>2000-206F</td></tr><tr><td>货币符号</td><td>8352-8399</td><td>20A0-20CF</td></tr><tr><td>类字母符号</td><td>8448-8527</td><td>2100-214F</td></tr><tr><td>箭头</td><td>8592-8703</td><td>2190-21FF</td></tr><tr><td>数学运算符</td><td>8704-8959</td><td>2200-22FF</td></tr><tr><td>框绘制</td><td>9472-9599</td><td>2500-257F</td></tr><tr><td>块元素</td><td>9600-9631</td><td>2580-259F</td></tr><tr><td>几何形状</td><td>9632-9727</td><td>25A0-25FF</td></tr><tr><td>杂项符号</td><td>9728-9983</td><td>2600-26FF</td></tr><tr><td>装饰符号</td><td>9984-10175</td><td>2700-27BF</td></tr></tbody></table><h1 id="Unicode编码与乱码"><a href="#Unicode编码与乱码" class="headerlink" title="Unicode编码与乱码"></a>Unicode编码与乱码</h1><h2 id="Servlet乱码"><a href="#Servlet乱码" class="headerlink" title="Servlet乱码"></a>Servlet乱码</h2><p>在进行请求参数传递时，经常会遇到请求数据为中文时的乱码问题，当Form表单的文本域中输入中文时会产生乱码问题，出现乱码的原因与客户端的请求编码方式（GET请求或POST请求）以及服务器的处理编码方式有关。</p><h3 id="POST请求乱码"><a href="#POST请求乱码" class="headerlink" title="POST请求乱码"></a>POST请求乱码</h3><p>浏览器会按当前显示页面所采用的字符集对请求的中文数据进行编码，而后再以报文体的形式传送给服务器，Servlet在调用getParameter()方法获取参数时，会以HttpServletRequest对象的getCharacterEncoding()方法返回的字符集对其进行解码，而该方法的返回值在未经过setCharacterEncoding(charset)方法设置编码的情况下为null，这时getParameter()方法将以服务器默认的“ISO-8859-1”字符集对参数进行解码，而“ISO-8859-1”字符集并不包含中文，于是造成中文参数的乱码问题。</p><p>解决办法：<br>在调用getParameter()方法前先调用setCharacterEncoding(charset)方法设定与页面请求编码相同的解码字符集。</p><h3 id="GET请求乱码"><a href="#GET请求乱码" class="headerlink" title="GET请求乱码"></a>GET请求乱码</h3><p>GET请求参数以“?”或“&amp;”为连接字符附加在URL地址后，根据网络标准RFC1738规定，只有字母和数字以及一些特殊符号和某些保留字才可以不经过编码直接用于URL，因此在请求参数为中文时必须先由浏览器进行编码后才能发送给服务器，服务器端对GET请求参数依照服务器本身默认的字符集进行解码。</p><p>在服务器端，由于GET请求参数是作为请求行发送给服务器的，因此Servlet在通过getParameter()获取请求参数时，并不能使用setCharacterEncoding(charset)方法指定的字符集进行解码，而是依照服务器本身默认的字符集进行解码。</p><p>Tomcat服务器各版本中默认的URIEncoding字符集并不完全相同，例如，Tomcat6和Tomcat7都默认为“ISO-8859-1”，这类版本中，对于GET请求的中文参数必须经处理后才会避免乱码问题，因此在实际开发中尽量避免使用GET请求来传递中文参数。</p><h2 id="Matplotlib乱码"><a href="#Matplotlib乱码" class="headerlink" title="Matplotlib乱码"></a>Matplotlib乱码</h2><p>原版代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mplmu <span class="token operator">=</span> <span class="token number">60.0</span>sigma <span class="token operator">=</span> <span class="token number">2.0</span>x <span class="token operator">=</span> mu <span class="token operator">+</span> sigma<span class="token operator">*</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>bins <span class="token operator">=</span> <span class="token number">50</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>n<span class="token punctuation">,</span> bins<span class="token punctuation">,</span> patches <span class="token operator">=</span> ax<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>x<span class="token punctuation">,</span> bins<span class="token punctuation">,</span> density<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">"bar"</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">"#99FF33"</span><span class="token punctuation">,</span> edgecolor<span class="token operator">=</span><span class="token string">"#00FF99"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span>sigma<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token operator">*</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span>bins<span class="token operator">-</span>mu<span class="token punctuation">)</span><span class="token operator">/</span>sigma<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>bins<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"#7744FF"</span><span class="token punctuation">,</span> ls<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>ls<span class="token operator">=</span><span class="token string">":"</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"gray"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token string">r"$y=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"#FF5511"</span><span class="token punctuation">,</span> <span class="token string">"fontsize"</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"体重"</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"概率密度"</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">r"体重的直方图：$\mu=60.0$, $\sigma=2.0$"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就会出现异常情况，绘图如下：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/1.png"></p><p>修复方法：加上utf-8题头的注释。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随后，加入如下两行代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.sans-serif"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"KaiTi"</span><span class="token punctuation">]</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"axes.unicode_minus"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修复结果：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/2.png"></p><h2 id="CLion乱码"><a href="#CLion乱码" class="headerlink" title="CLion乱码"></a>CLion乱码</h2><p>乱码情况：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/3.png"></p><h3 id="修改编辑器编码类型"><a href="#修改编辑器编码类型" class="headerlink" title="修改编辑器编码类型"></a>修改编辑器编码类型</h3><p>打开 File → Settings…：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/4.png"></p><p>选择 Editor，再选中 File Encodings：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/5.png"></p><p>调为UTF-8，完成设置，然后点OK：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/6.png"></p><p>底部还有UTF-8：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/7.png"></p><p>改成GBK：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/8.png"></p><p>还有个弹窗，点Convert即可完成设置。</p><p>重新运行：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/9.png"></p><p>该方法适用于其他JetBrains公司的IDE。</p><h3 id="修改Registry配置"><a href="#修改Registry配置" class="headerlink" title="修改Registry配置"></a>修改Registry配置</h3><p>文件是UTF-8格式，对于CLion命令行输出中文乱码的问题，解决方法是输入<code>Ctrl+Shift+Alt+/</code>：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/10.png"></p><p>修改后即可在命令行看到正确不乱码的输出！</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码格式 </tag>
            
            <tag> Unicode </tag>
            
            <tag> UTF-8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数值分析的微积分学基础</title>
      <link href="/2020/02/15/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/shu-zhi-fen-xi-de-wei-ji-fen-xue-ji-chu/"/>
      <url>/2020/02/15/ji-suan-ji-ke-xue-de-shu-xue-ji-chu/shu-zhi-fen-xi-de-wei-ji-fen-xue-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="介值定理"><a href="#介值定理" class="headerlink" title="介值定理"></a>介值定理</h1><p>设$f(x)$是区间$[a, b]$上的一个连续函数，那么$f(x)$取到$f(a)$和$f(b)$之间的任一个值。<br>更严谨地说，如果$c$是$f(a)$和$f(b)$之间的一个数，那么存在一个数$ε$$(a ≤ ε ≤ b)$使得$f(ε) = c$。</p><h1 id="连续函数的极限"><a href="#连续函数的极限" class="headerlink" title="连续函数的极限"></a>连续函数的极限</h1><p>设$f(x)$是在$x_{0}$的某邻域内的连续函数，并且$\lim\limits_{n→∞}{x_{n}}={x_{0}}$，那么$\lim\limits_{n→∞}{f(x_{n})}=f(\lim\limits_{n→∞}{x_{n}})=f(x_{0})$。</p><h1 id="Rolle中值定理"><a href="#Rolle中值定理" class="headerlink" title="Rolle中值定理"></a>Rolle中值定理</h1><p>设$f(x)$是区间$[a, b]$上的连续可微函数，并假定$f(a) = f(b)$，那么在$a$和$b$之间存在一个数$c$，使得$f’(c) = 0$。 </p><h1 id="Lagrange中值定理"><a href="#Lagrange中值定理" class="headerlink" title="Lagrange中值定理"></a>Lagrange中值定理</h1><p>设$f(x)$是区间$[a, b]$上的连续可微函数，那么在$a$和$b$之间存在一个数$c$，使得$f’(c)=\frac{f(b)-f(a)}{b-a}$。</p><h1 id="带Lagrange余项的Taylor定理"><a href="#带Lagrange余项的Taylor定理" class="headerlink" title="带Lagrange余项的Taylor定理"></a>带Lagrange余项的Taylor定理</h1><p>设$x$和$x_{0}$是实数，$f(x)$在区间$[x_{0}, x]$（或$[x, x_{0}]$）上$k+1$次连续可微，那么在$x$和$x_{0}$之间存在一个数$c$，使得$f(x)=f(x_{0})+f’(x_{0})(x-x_{0})+\frac{f’’(x_{0})}{2!}(x-x_{0})^{2}+\frac{f’’’(x_{0})}{3!}(x-x_{0})^{3}+…+\frac{f^{(k)}(x_{0})}{k!}(x-x_{0})^{k}+\frac{f^{(k+1)}(c)}{(k+1)!}(x-x_{0})^{k+1}$。</p><h1 id="积分第二中值定理"><a href="#积分第二中值定理" class="headerlink" title="积分第二中值定理"></a>积分第二中值定理</h1><p>设$f(x)$是区间$[a, b]$上的连续函数，$g(x)$是可积函数，并且在$[a, b]$上不变号，那么在$a$和$b$之间存在一个数$c$，使得$\int_{a}^{b}{f(x)g(x)dx}=f(c)\int_{a}^{b}{g(x)dx}$。</p><h1 id="本文总结"><a href="#本文总结" class="headerlink" title="本文总结"></a>本文总结</h1><p>本文简单提到了<strong>介值定理</strong>、<strong>连续函数的极限</strong>、<strong>Rolle中值定理</strong>、<strong>Lagrange中值定理</strong>、<strong>积分第二中值定理</strong>这五部分的内容，不加以阐述、证明和例题讲解，忘记的麻烦复习高等数学上册，OK。<br>这些都是数值分析的基础，一定不能忘啊。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学的数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数值分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>辗转相除算法</title>
      <link href="/2020/02/06/suan-fa-fen-xi-yu-she-ji/zhan-zhuan-xiang-chu-suan-fa/"/>
      <url>/2020/02/06/suan-fa-fen-xi-yu-she-ji/zhan-zhuan-xiang-chu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h1><p><strong>辗转相除法</strong>又称<strong>欧几里德算法</strong>，是指用于计算两个正整数$a$，$b$的<strong>最大公因数</strong>的一种算法。</p><p>广泛应用于数学和计算机两个方面。</p><p>计算公式：<code>gcd(a, b) = gcd(b, a%b)</code>。</p><p>算法特点：</p><ul><li>以<strong>除法</strong>为主。</li><li>两整数<strong>差值较大</strong>时运算<strong>次数较少</strong>。</li><li>相除<strong>余数为0</strong>时得到结果。</li><li>是<strong>循环</strong>表示的<strong>递推</strong>式子，也可以<strong>递归</strong>实现。</li></ul><h1 id="算法证明"><a href="#算法证明" class="headerlink" title="算法证明"></a>算法证明</h1><p>设两数为a, b(a&gt;b)，用gcd(a, b)表示a, b的最大公约数，r=a (mod b) 为a除以b的余数，k为a除以b的商，即a÷b=kr。辗转相除法即是要证明gcd(a,b)=gcd(b,r)。</p><p>第一步:令c=gcd(a,b)，则设a=mc，b=nc。</p><p>第二步:根据前提可知r =a-kb=mc-knc=(m-kn)c。</p><p>第三步:根据第二步结果可知c也是r的因数。</p><p>第四步:可以断定m-kn与n互质(假设m-kn=xd，n=yd (d&gt;1)，则m=kn+xd=kyd+xd=(ky+x)d，则a=mc=(ky+x)cd，b=nc=ycd，则a与b的一个公约数cd&gt;c，故c非a与b的最大公约数，与前面结论矛盾)，因此c也是b与r的最大公约数。</p><p>从而可知gcd(b, r)=c，继而gcd(a, b)=gcd(b, r)。</p><h1 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h1><p>求56和24的最大公因数</p><p>56%24 = 8</p><p>24%8 = 0</p><p>结果为8</p><h1 id="拓展应用"><a href="#拓展应用" class="headerlink" title="拓展应用"></a>拓展应用</h1><p>由于<strong>最大公约数和最小公倍数的乘积就是原两个数的积</strong>，所以在根据gcd()求出最大公因数以后，就可以根据两数本身和其最大公因数求出最小公倍数咯！</p><h1 id="BigInteger支持"><a href="#BigInteger支持" class="headerlink" title="BigInteger支持"></a>BigInteger支持</h1><p><strong>java.math.BigInteger</strong> 中有 <strong>gcd()</strong> 方法：<code>public BigInteger gcd​(BigInteger val)</code></p><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><p>非递归版本：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> gcd <span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> gcd <span class="token punctuation">(</span>q<span class="token punctuation">,</span> p<span class="token operator">%</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归版本：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> gcd <span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> p <span class="token operator">%</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>        q <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>long版本：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">long</span> p<span class="token punctuation">,</span> <span class="token keyword">long</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> temp <span class="token operator">=</span> p <span class="token operator">%</span> q<span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>        q <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-x2F-C-实现"><a href="#C-x2F-C-实现" class="headerlink" title="C/C++实现"></a>C/C++实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> p<span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token function">gcd</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> p<span class="token operator">%</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h1><p><a href="https://blog.csdn.net/weixin_43896318/article/details/104129681">这里</a>有一个实战例题。</p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法解决奶牛书架问题</title>
      <link href="/2020/02/01/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-nai-niu-shu-jia-wen-ti/"/>
      <url>/2020/02/01/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-nai-niu-shu-jia-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Farmer John最近为奶牛们的图书馆添置了一个巨大的书架，尽管它是如此的大，但它还是几乎瞬间就被各种各样的书塞满了。现在，只有书架的顶上还留有一点空间。 </p><p>所有 $N(1 \le N \le 20,000)$ 头奶牛都有一个确定的身高 $H_i(1 \le H_i \le 10,000)$。设所有奶牛身高的和为S。书架的高度为B，并且保证 $1 \le B \le S &lt; 2,000,000,007$。 </p><p>为了够到比最高的那头奶牛还要高的书架顶，奶牛们不得不像演杂技一般，一头站在另一头的背上，叠成一座“奶牛塔”。当然，这个塔的高度，就是塔中所有奶牛的身高之和。为了往书架顶上放东西，所有奶牛的身高和必须不小于书架的高度。</p><p>显然，塔中的奶牛数目越多，整座塔就越不稳定，于是奶牛们希望在能够到书架顶的前提下，让塔中奶牛的数目尽量少。 现在，奶牛们找到了你，希望你帮她们计算这个最小的数目。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><ul><li>第 $1$ 行: 2 个用空格隔开的整数：$N$ 和 $B$；</li><li>第 $2\dots N+1$ 行: 第 $i+1$ 行是 $1$ 个整数：$H_i$。</li></ul><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><ul><li>第 $1$ 行: 输出 $1$ 个整数，即最少要多少头奶牛叠成塔，才能够到书架顶部</li></ul><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">6 4061811131911<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>输入说明:<br>一共有 $6$ 头奶牛，书架的高度为 $40$，奶牛们的身高在 $6\dots19$之间。</p><p>输出说明:<br>一种只用 $3$ 头奶牛就达到高度 $40$ 的方法：$18+11+13$。当然还有其他方法，在此不一一列出了。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>这是一道入门级的贪心算法题。想要打到一定的高度，保证奶牛数量尽可能少，只考虑不同奶牛的不同高度。</p><p>显然，对奶牛的高度排序，每次选择最高的奶牛加入“奶牛塔”，直至达到书架的高度。</p><h1 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> height <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sum <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h1><p><a href="https://www.luogu.com.cn/problem/P2676">洛谷 P2676 [USACO07DEC]Bookshelf B</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法解决陶陶摘苹果问题</title>
      <link href="/2020/01/30/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-tao-tao-zhai-ping-guo-wen-ti/"/>
      <url>/2020/01/30/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-tao-tao-zhai-ping-guo-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>又是一年秋季时，陶陶家的苹果树结了 $n$ 个果子。陶陶又跑去摘苹果，这次他有一个 $a$ 公分的椅子。当他手够不着时，他会站到椅子上再试试。</p><p>这次与 NOIP2005 普及组第一题不同的是：陶陶之前搬凳子，力气只剩下 $s$ 了。当然，每次摘苹果时都要用一定的力气。陶陶想知道在 $s&lt;0$ 之前最多能摘到多少个苹果。</p><p>现在已知 $n$ 个苹果到达地上的高度 $x_i$，椅子的高度 $a$，陶陶手伸直的最大长度 $b$，陶陶所剩的力气 $s$，陶陶摘一个苹果需要的力气 $y_i$，求陶陶最多能摘到多少个苹果。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>第 $1$ 行：两个数 苹果数 $n$，力气 $s$。</p><p>第 $2$ 行：两个数 椅子的高度 $a$，陶陶手伸直的最大长度 $b$。</p><p>第 $3$ 行~第 $3+n-1$ 行：每行两个数 苹果高度 $x_i$，摘这个苹果需要的力气 $y_i$。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>只有一个整数，表示陶陶最多能摘到的苹果数。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">8 1520 130120 3150 2110 7180 150 8200 0140 3120 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>对于 $100%$ 的数据，$n\leq 5000$, $a\leq 50$, $b\leq 200$, $s\leq 1000$, $x_i\leq 280$, $y_i\leq 100$。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>推荐阅读：<a href="https://www.luogu.com.cn/blog/funny-talk/funny-solution-p1478">从搜索到贪心-求解算法的优化</a></p><p>我们只需要每次取最省力（最小代价）的一个果子，基于贪心算法思想，即可得到最优解。</p><h1 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strength <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxHeight <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tempHeight <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> needStrength <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempHeight <span class="token operator">&lt;=</span> maxHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>                array<span class="token punctuation">[</span>needStrength<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        outer<span class="token operator">:</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;=</span> strength<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    counter<span class="token operator">++</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span> outer<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><p><a href="https://www.luogu.com.cn/problem/P1478">洛谷 P1478 陶陶摘苹果（升级版）</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂算法与快速幂取模算法</title>
      <link href="/2020/01/28/suan-fa-fen-xi-yu-she-ji/kuai-su-mi-suan-fa-yu-kuai-su-mi-qu-mo-suan-fa/"/>
      <url>/2020/01/28/suan-fa-fen-xi-yu-she-ji/kuai-su-mi-suan-fa-yu-kuai-su-mi-qu-mo-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="快速幂算法"><a href="#快速幂算法" class="headerlink" title="快速幂算法"></a>快速幂算法</h1><p>众所周知，指数的朴素求法是这样的：<br>比如我们求$10^5$，就是等价于求解$10\times10\times10\times10\times10$，五连乘。</p><p>朴素算法的代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">pow1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token operator">--</span><span class="token punctuation">;</span>        result <span class="token operator">*=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于$a^n$的求解，时间复杂度为$O(n)$，即线性的。<br>线性的时间复杂度还有可优化的空间，于是有了快速幂算法。</p><p>顾名思义，快速幂就是快速算底数为$a$的$n$次幂（即$a^n$）的算法。</p><p>快速幂算法的时间复杂度是$O(\log{n})$，效率比朴素算法大大提高。</p><p><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%BF%AB%E9%80%9F%E5%B9%82%E7%AE%97%E6%B3%95%E4%B8%8E%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E6%A8%A1%E7%AE%97%E6%B3%95/1.png"></p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>对于$a^n$，指数$n$是可以拆成二进制的，根据$a^{m+n}=a^{m}a^{n}$，我们就可以据此拆分$a^n$了。</p><p>$a^{13}$为例，$13_{10}=1101_{2}$，$a^{13}$自然就得到了表示，最终会转化成$a^{1}+a^{4}+a^{8}$。<br>……</p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>递归实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">recursivePow</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> temp <span class="token operator">=</span> <span class="token function">recursivePow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> temp <span class="token operator">*</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非递归实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">pow2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> base <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">*=</span> base<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        base <span class="token operator">*=</span> base<span class="token punctuation">;</span>        b <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="位运算优化"><a href="#位运算优化" class="headerlink" title="位运算优化"></a>位运算优化</h2><p>位运算说明：</p><ul><li>$&amp;$运算：通常用于二进制取位操作，例如一个数$b&amp;1$的结果就是取二进制的最末位的值。还可以判断这个数的奇偶性，如果$b&amp;1==0$，则$b$为偶数；如果$b&amp;1==1$，则$b$为奇数。这种判法比用$b%2$要高效.</li><li>$&gt;&gt;$运算：在这里是作为除法来使用，例如一个数$b$，$b&gt;&gt;=1$就表示$b$右移一位，相当于除以$2$。这种判法比$b/=2$要高效。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">pow3</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">*=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> result <span class="token operator">=</span> a<span class="token punctuation">;</span>    b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a <span class="token operator">*=</span> a<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">*=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BigInteger支持"><a href="#BigInteger支持" class="headerlink" title="BigInteger支持"></a>BigInteger支持</h2><p><code>public BigInteger pow​(int exponent)</code></p><h1 id="快速幂取模算法"><a href="#快速幂取模算法" class="headerlink" title="快速幂取模算法"></a>快速幂取模算法</h1><p>数论有这样一个引理：积的取余等于取余的积的取余。<br>即：<code>(AB)modC = [(AmodC)(BmodC)]modC</code></p><p>基于此条引理，对指数型数据进行拆分以及合并，即得到我们所需要的快速幂取模算法。</p><h2 id="算法优点"><a href="#算法优点" class="headerlink" title="算法优点"></a>算法优点</h2><p>快速幂取模算法的优点不仅仅是快速，更重要的是不要直接把AB求出来，有时候AB很大，乘积会爆掉long（C里的longlong），但取模结果显然不会爆，这就要求我们使用快速幂取模算法，不断减小A和B的规模，从而求解。</p><p>因此，拆指数就显得十分重要，这方面可以参考上面的算法。</p><h2 id="算法推导"><a href="#算法推导" class="headerlink" title="算法推导"></a>算法推导</h2><p><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%BF%AB%E9%80%9F%E5%B9%82%E7%AE%97%E6%B3%95%E4%B8%8E%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E6%A8%A1%E7%AE%97%E6%B3%95/2.png"></p><h2 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">quickMode</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> temp <span class="token operator">=</span> a <span class="token operator">%</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">(</span> result <span class="token operator">*</span> temp <span class="token punctuation">)</span> <span class="token operator">%</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>         temp <span class="token operator">=</span> <span class="token punctuation">(</span>temp <span class="token operator">*</span> temp<span class="token punctuation">)</span> <span class="token operator">%</span> c<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BigInteger支持-1"><a href="#BigInteger支持-1" class="headerlink" title="BigInteger支持"></a>BigInteger支持</h2><p><code>public BigInteger modPow​(BigInteger exponent, BigInteger m)</code></p><h1 id="本文完整代码实现（Java语言描述）"><a href="#本文完整代码实现（Java语言描述）" class="headerlink" title="本文完整代码实现（Java语言描述）"></a>本文完整代码实现（Java语言描述）</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickPower</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">pow1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b<span class="token operator">--</span><span class="token punctuation">;</span>            result <span class="token operator">*=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">pow2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> base <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">*=</span> base<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            base <span class="token operator">*=</span> base<span class="token punctuation">;</span>            b <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">recursivePow</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> temp <span class="token operator">=</span> <span class="token function">recursivePow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> temp <span class="token operator">*</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">pow3</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            a <span class="token operator">*=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> a<span class="token punctuation">;</span>        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            a <span class="token operator">*=</span> a<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">*=</span> a<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">quickPower</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">*=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">*=</span> temp<span class="token punctuation">;</span>            b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">quick</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> temp <span class="token operator">=</span> a <span class="token operator">%</span> c<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token punctuation">(</span> result <span class="token operator">*</span> temp <span class="token punctuation">)</span> <span class="token operator">%</span> c<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> <span class="token punctuation">(</span>temp <span class="token operator">*</span> temp<span class="token punctuation">)</span> <span class="token operator">%</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法解决均分纸牌问题</title>
      <link href="/2020/01/24/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-jun-fen-zhi-pai-wen-ti/"/>
      <url>/2020/01/24/suan-fa-fen-xi-yu-she-ji/tan-xin-suan-fa-jie-jue-jun-fen-zhi-pai-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>有$N$堆纸牌，编号分别为 $1,2,…,N$。每堆上有若干张，但纸牌总数必为 $N$ 的倍数。可以在任一堆上取若干张纸牌，然后移动。</p><p>移牌规则为：在编号为 $1$ 堆上取的纸牌，只能移到编号为 $2$ 的堆上；在编号为 $N$ 的堆上取的纸牌，只能移到编号为 $N-1$ 的堆上；其他堆上取的纸牌，可以移到相邻左边或右边的堆上。</p><p>现在要求找出一种移动方法，用最少的移动次数使每堆上纸牌数都一样多。</p><p>例如 $N=4$ 时，$4$ 堆纸牌数分别为 $9,8,17,6$。</p><p>移动 $3$ 次可达到目的：</p><ul><li>从第三堆取 $4$ 张牌放到第四堆，此时每堆纸牌数分别为 $9,8,13,10$。</li><li>从第三堆取 $3$ 张牌放到第二堆，此时每堆纸牌数分别为 $9,11,10,10$。</li><li>从第二堆取 $1$ 张牌放到第一堆，此时每堆纸牌数分别为  $10,10,10,10$。</li></ul><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>第一行共一个整数 $N$，表示纸牌堆数。<br>第二行共 $N$ 个整数 $A_1,A_2,\cdots,A_N$，表示每堆纸牌初始时的纸牌数。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>共一行，即所有堆均达到相等时的最少移动次数。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">49 8 17 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>对于 $100%$ 的数据，$1  \le  N  \le  100$，$1 \le  A_i  \le 10000$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2002 提高组第一题</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>既然总数是N的倍数，那就一定能打到均分的情况。想要打到均分的情况，首先要知道每一堆的目标纸牌数，即每一堆纸牌的平均数。</p><p>第1堆纸牌如果不是正好平均，只能从第2堆纸牌索取并补全，或者将多余的纸牌移动到第2堆。此时，第1堆纸牌就不要动，第2堆纸牌就变成了剩下N-1堆纸牌中的第1堆，同理可以递推下去。</p><p>因此，可以得到一个贪心策略：从第1堆纸牌开始，每一堆都将自身纸牌数与平均数的差值加到下一堆纸牌上，这个过程允许临时等价的负数纸牌数，直到最后一堆牌。</p><h1 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> average <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> temp<span class="token punctuation">;</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        average <span class="token operator">=</span> sum <span class="token operator">/</span> num<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> average<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> temp<span class="token punctuation">;</span>                counter<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><p><a href="https://www.luogu.com.cn/problem/P1031">洛谷 P1031 [NOIP2002 提高组] 均分纸牌</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法解决幂次方问题</title>
      <link href="/2020/01/24/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-mi-ci-fang-wen-ti/"/>
      <url>/2020/01/24/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-mi-ci-fang-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>任何一个正整数都可以用 $2$ 的幂次方表示。例如 $137=2^7+2^3+2^0$。</p><p>同时约定方次用括号来表示，即 $a^b$ 可表示为 $a(b)$。</p><p>由此可知，$137$ 可表示为 $2(7)+2(3)+2(0)$</p><p>进一步：</p><p>$7= 2^2+2+2^0$  ( $2^1$ 用 $2$ 表示)，并且 $3=2+2^0$。</p><p>所以最后 $137$ 可表示为 $2(2(2)+2+2(0))+2(2+2(0))+2(0)$。</p><p>又如 $1315=2^{10} +2^8 +2^5 +2+1$</p><p>所以 $1315$ 最后可表示为 $2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)$。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>一行一个正整数 $n$。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>符合约定的 $n$ 的 $0, 2$ 表示（在表示中不能有空格）。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">1315<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p><strong>【数据范围】</strong></p><p>对于 $100%$ 的数据，$1 \le n \le 2 \times {10}^4$。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>二进制数表示的其实就是一个正整数分解成为2的幂次方和。</p><p>我们分析一下<code>x &amp; 1</code>的作用：<br>以八位二进制为例：<br>1 → <code>00000001</code><br>&amp;是按位析取，所以，我们分析高位是0还是1，结果都是1，所以只看低位。<br>低位如果是1，即奇数，则结果为00000001，即1，即非0；<br>低位如果是0，即偶数，则结果为00000000，即0。</p><p>所以，得到结论是<code>x &amp; 1</code>等价于<code>x % 2</code>，但速度更快一些。</p><p>再解读一下<code>x &gt;&gt;= 1</code>的作用：<br><code>&gt;&gt; 1</code>指右移1位，由于是正数，所以高位必然补0，相当于<code>x /= 2</code>，即自除2。</p><h1 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"2"</span> <span class="token operator">:</span> <span class="token string">"2("</span> <span class="token operator">+</span> <span class="token function">run</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 拼接字符串，应题意，要把低次方接在后面</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            x <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 每次向右移位</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">run</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><p><a href="https://www.luogu.com.cn/problem/P1010">洛谷 P1010 [NOIP1998 普及组] 幂次方</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划算法解决数的计算问题</title>
      <link href="/2020/01/21/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-shu-de-ji-suan-wen-ti/"/>
      <url>/2020/01/21/suan-fa-fen-xi-yu-she-ji/dong-tai-gui-hua-suan-fa-jie-jue-shu-de-ji-suan-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给出自然数 $n$，要求按如下方式构造数列：</p><ol><li>只有一个数字 $n$ 的数列是一个合法的数列。</li><li>在一个合法的数列的末尾加入一个自然数，但是这个自然数不能超过该数列最后一项的一半，可以得到一个新的合法数列。</li></ol><p>请你求出，一共有多少个合法的数列。两个合法数列 $a, b$ 不同当且仅当两数列长度不同或存在一个正整数 $i \leq |a|$，使得 $a_i \neq b_i$。</p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>输入只有一行一个整数，表示 $n$。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>输出一行一个整数，表示合法的数列个数。</p><h1 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h1><h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h2><pre class="line-numbers language-none"><code class="language-none">6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h2><pre class="line-numbers language-none"><code class="language-none">6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><h2 id="样例-1-解释"><a href="#样例-1-解释" class="headerlink" title="样例 1 解释"></a>样例 1 解释</h2><p>满足条件的数列为：</p><ul><li>$6$</li><li>$6, 1$</li><li>$6, 2$</li><li>$6, 3$</li><li>$6, 2, 1$</li><li>$6, 3, 1$</li></ul><h2 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h2><p>对于全部的测试点，保证 $1 \leq n \leq 10^3$。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本题数据来源是 NOIP 2001 普及组第一题，但是原题的题面描述和数据不符，故对题面进行了修改，使之符合数据。原题面如下，谨供参考：</p><blockquote><p>我们要求找出具有下列性质数的个数（包含输入的正整数 $n$）。</p><p>先输入一个正整数 $n$（$n \le 1000$），然后对此正整数按照如下方法进行处理：</p><ol><li>不作任何处理；</li><li>在它的左边拼接一个正整数，但该正整数不能超过原数，或者是上一个被拼接的数的一半；</li><li>加上数后，继续按此规则进行处理，直到不能再加正整数为止。</li></ol></blockquote><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>搜索问题，用动态规划算法比暴力搜索算法优越很多。</p><p>简单模拟：<br>$n = 0$, $result = 1$<br>$n = 1$, $result = 1$<br>$n = 2$, $result = 2$<br>$n = 3$, $result = 2$<br>$n = 4$, $result = 4$<br>$n = 5$, $result = 4$<br>$n = 6$, $result = 6$<br>$n = 7$, $result = 6$</p><p>$i≥2$时，递推结论：<br>$i$为偶数的时候，存在：$f(i) = f(i-1) + f(\frac{i}{2})$<br>$i$为奇数的时候，存在：$f(i) = f(i-1)$</p><h1 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><p><a href="https://www.luogu.com.cn/problem/P1028">洛谷 P1028 [NOIP2001 普及组] 数的计算</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>埃氏筛素数算法</title>
      <link href="/2020/01/19/suan-fa-fen-xi-yu-she-ji/ai-shi-shai-su-shu-suan-fa/"/>
      <url>/2020/01/19/suan-fa-fen-xi-yu-she-ji/ai-shi-shai-su-shu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h1><p>素数也称质数，是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数。<br>最基本的质数：2, 3, 5, 7, 11, 13, 17, 19, ……</p><h1 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h1><p>埃拉托斯特尼筛法，简称埃氏筛，是一种由希腊数学家埃拉托斯特尼所提出的一种简单检定素数的算法。</p><p>要得到自然数n以内的全部素数，必须把不大于根号n的所有素数的倍数剔除，剩下的就是素数。</p><h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><p>给出要筛数值的范围n，找出以内的素数。</p><p>先用2去筛，即把2留下，把2的倍数剔除掉；<br>再用下一个质数，也就是3筛，把3留下，把3的倍数剔除掉；<br>接下去用下一个质数5筛，把5留下，把5的倍数剔除掉；<br>不断重复下去……<br>最终，把所有不大于根号n的所有素数的倍数剔除，剩下的就是素数。</p><ul><li><strong>如果n是质数，那么2n, 3n, 4n, …这些n的倍数肯定都不是质数。</strong></li><li><strong>如果选的数要多，那么要选的每个数要尽可能小。</strong></li></ul><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>$O(n\log\log{n})$</p><h1 id="Java编程实现"><a href="#Java编程实现" class="headerlink" title="Java编程实现"></a>Java编程实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Eratosthenes</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//将不是素数的数逐一筛出</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">// 将筛选后的第一个数当做新的筛子</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> k <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    k<span class="token operator">=</span>i<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            temp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h1><p>欧拉筛的效率高于埃氏筛，能够更好地完成筛素数的任务。</p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象技术核心内容归纳总结</title>
      <link href="/2019/12/01/ruan-jian-gong-cheng/mian-xiang-dui-xiang/mian-xiang-dui-xiang-ji-zhu-he-xin-nei-rong-gui-na-zong-jie/"/>
      <url>/2019/12/01/ruan-jian-gong-cheng/mian-xiang-dui-xiang/mian-xiang-dui-xiang-ji-zhu-he-xin-nei-rong-gui-na-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="核心知识点"><a href="#核心知识点" class="headerlink" title="核心知识点"></a>核心知识点</h1><ol><li>编译器和解释器的区别，java程序的执行过程，java为什么是跨平台的语言</li><li>java基本数据类型，java中的运算符，Java中的流程控制语句</li><li>类的定义，类中属性的定义（会进行默认的初始化），类中方法的定义，方法中的局部变量（必须初始化）</li><li>对象的定义，通过点运算符访问对象的属性和方法</li><li>构造方法的定义，默认构造方法，使用new运算符调用构造方法</li><li>组合（在类中定义另外一个类的对象作为属性）</li><li>传值方法调用，传引用方法调用（类的对象作为参数）</li><li>包的定义，包的引入（import），信息隐藏，访问控制权限，Public private protected 缺省</li><li>方法重载，构造方法的重载</li><li>this 关键字，使用this关键字调用类中其它构造方法</li><li>关联、多重性（一对一，一对多，多对多）、聚合、组合、集合类的使用（ArrayList，Vector，add方法，get方法）</li><li>一维数组的定义、初始化，二维数组的定义，对象数组的定义、初始化</li><li>匿名对象的使用</li><li>继承的定义，extends关键字的使用，面向对象代码的复用，子类自动继承父类中的属性和方法。</li><li>子类对象可以自动向父类对象进行类型转换，instanceof的使用</li><li>子类对父类构造方法的调用（隐式调用父类无参构造方法，使用super显式调用父类构造方法），super关键字的使用</li><li>子类对父类方法的重写，继承中的方法重载</li><li>final关键字的使用，final 方法，final类，final变量，final参数</li><li>equals方法和toString方法的使用</li><li>在类的设计中,能够识别类，类之间的关系，类中的属性和方法</li><li>多态：父类的引用指向子类的引用，运行时决定调用重写方法的版本。</li><li>抽象类，抽象方法，接口，static属性、static方法</li><li>单实例设计模式，策略模式</li><li>运行时异常，非运行时异常（需要使用try-catch-finally进行捕获）</li><li>文本格式文件输入（FileReader）和输出（FileWriter），二进制格式文件输入（FileInputStream）和输出（FileOutputStream）</li><li>根据类图给出类的定义，根据描述画出类图</li></ol><h1 id="习题集"><a href="#习题集" class="headerlink" title="习题集"></a>习题集</h1><p>Java-OOP习题集</p><ul><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103307505">Test01：Java语言的发展与特性测试题</a></li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103312815">Test02：Java基本语法测试题</a></li><li>Test03：Java的数组和函数测试题</li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103312837">Test04：Java中的类和对象测试题</a></li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103312881">Test05：Java中的对象交互测试题</a></li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103312950">Test06：Java对象之间的交互强化测试题</a></li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103312977">Test07：对象之间的has-a/many关系测试题</a></li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103313002">Test08：对象之间one-to-many关系测试题</a></li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103313017">Test09：对象之间的继承关系测试题</a></li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103313032">Test10：类的设计测试题</a></li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103313048">Test11：类的高级特性测试题</a></li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103313077">Test12：设计模式测试题</a></li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103313091">Test13：Java异常处理测试题</a></li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103312926">Test14：Java文件测试题</a></li><li><a href="https://www.runoob.com/quiz/java-quiz.html">Runoob测试题</a></li></ul><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>两种基本的设计模式：单例模式和策略模式</p><ul><li><a href="https://blankspace.blog.csdn.net/article/details/105337542">单例模式</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/105337577">策略模式</a></li></ul><h1 id="阶段练习"><a href="#阶段练习" class="headerlink" title="阶段练习"></a>阶段练习</h1><ul><li><a href="https://blankspace.blog.csdn.net/article/details/90267025">猜数字小游戏Demo</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/105326344">猜数字小游戏的演进</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/90266820">Swing实现机票分类打折程序</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/101616459">基于java.util.HashMap构建命令行登录程序</a></li></ul><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><ul><li><a href="https://blog.csdn.net/weixin_43896318/article/details/103329716">Modeling the Gourmet Coffee System</a></li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/104447707">Using Design Patterns in the Gourmet Coffee System</a></li><li><a href="https://blog.csdn.net/weixin_43896318/article/details/104447707">Using File I/O in the Gourmet Coffee System</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/105337067">Modeling the Library System</a></li></ul><h1 id="慕课"><a href="#慕课" class="headerlink" title="慕课"></a>慕课</h1><ul><li><a href="http://www.icourse163.org/course/NJU-1002246017">NJU -《基于Java的面向对象编程范式》</a></li><li><a href="http://www.icourse163.org/course/ZJU-1001542001">ZJU -《面向对象程序设计——Java语言》</a></li><li><a href="http://www.icourse163.org/course/PKU-1001941004">PKU -《Java程序设计》</a></li><li><a href="http://www.icourse163.org/course/ECNU-1002842004">ECNU -《Java核心技术》</a></li><li><a href="http://www.icourse163.org/course/ECNU-1003718005">ECNU -《Java核心技术(进阶)》</a></li><li><a href="http://www.icourse163.org/course/ECNU-1206500807">ECNU -《Java核心技术(高阶)》</a></li><li><a href="http://www.icourse163.org/course/ECNU-1003434002">ECNU -《面向对象分析与设计》</a></li></ul><p>上面列出的课程质量很高，值得认真的学习和思考（包括很久以后）。</p><h1 id="初学建议"><a href="#初学建议" class="headerlink" title="初学建议"></a>初学建议</h1><p>初学者需要注意的主要有如下几点：</p><ul><li>不要看太多的书，先找本相对基础的书系统地学习。很多程序开发人员工作了很久也只是熟悉部分基础而已，所以没有必要花费精力全面了解 Java 的每个细节。</li><li>初学时不要去死记语法。在刚接触 Java 语言时，掌握好基础语法，并大概了解一些功能即可。借助开发工具的代码辅助功能完成代码的录入，这样可以更快地进入学习状态。</li><li>多实践，多思考，多请教。仅读懂书中的内容和技术是不行的，必须动手编写程序代码、运行代码，并分析运行过程，从而对学习内容有整体的认识。用自己的方式思考问题，通过编写代码来提高编程思路。平时多和其他人沟通技术问题，提高自己的技术和见识。</li><li>遇到问题，首先尝试自己解决。这样可以提高自己对程序的调试能力，并对常见问题有一定了解，明白出错的原因，甚至举一反三地解决其他相关联的错误问题。</li><li>不要急躁，遇到技术问题，必须冷静对待，不能让思维混乱，保持清醒的头脑才能分析和解决各种问题。</li><li>了解设计模式。开发程序必须编写程序代码，这些代码必须具有高度的可读性，这样编写的程序才有调试和维护的价值。学习一些设计模式，能够很好地把握项目的整体结构。</li><li>多阅读别人的源代码，多査阅资料。不但要看懂别人的程序代码，还要分析作者的编程思想和设计模式，最好能为己所用。</li></ul><h1 id="题型分布"><a href="#题型分布" class="headerlink" title="题型分布"></a>题型分布</h1><ol><li>选择题：2分*10=20分</li><li>补充程序题：2分*8=16分</li><li>读程序写结果题：4分*5=20分</li><li>根据类图给出类的定义(写代码)，1个，24分</li><li>根据描述画出类图，1个，20分</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计（Java语言描述）测试题</title>
      <link href="/2019/11/29/ruan-jian-gong-cheng/mian-xiang-dui-xiang/mian-xiang-dui-xiang-cheng-xu-she-ji-ce-shi-ti/"/>
      <url>/2019/11/29/ruan-jian-gong-cheng/mian-xiang-dui-xiang/mian-xiang-dui-xiang-cheng-xu-she-ji-ce-shi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Quiz1：Java语言的发展与特性测试题"><a href="#Quiz1：Java语言的发展与特性测试题" class="headerlink" title="Quiz1：Java语言的发展与特性测试题"></a>Quiz1：Java语言的发展与特性测试题</h1><p>问题 1<br>Java 是由 Sun Microsystems 公司于 1995 年推出的一门面向对象程序设计语言。<br>答案： <br>对</p><p>问题 2<br>自2010年Oracle公司收购 Sun Microsystems起，Java的维护和版本升级由 Oracle 公司负责。<br>答案：<br> 对</p><p>问题 3<br>Java 是一个平台，由 Java 虚拟机（Java Virtual Machine，JVM）和 Java 应用编程接口（Application Programming Interface，API）构成。<br>答案： <br>对</p><p>问题 4<br>在硬件或操作系统平台上安装一个 Java 平台之后，Java 应用程序就可运行。<br>答案： <br>对</p><p>问题 5<br>Java 平台已经嵌入了几乎所有的操作系统，因此，Java 程序只编译一次，就可以在各种系统中运行。<br>答案： <br>对</p><p>问题 6<br>Java 平台已经嵌入了几乎所有的操作系统，因此，Java 程序只编译一次，就可以在各种系统中运行。<br>答案： <br>对</p><p>问题 7<br>Java SE（Java Platform Standard Edition，Java 平台标准版）以前称为 J2SE，它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为 Java EE 提供基础，如 Java 语言基础、JDBC 操作、I/O 操作、网络通信以及多线程等技术。<br>答案： <br>对</p><p>问题 8<br>Java EE（Java Platform Enterprise Edition，Java 平台企业版）以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。Java EE 是在 Java SE 基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（Service Oriented Architecture，SOA）和 Web 2.0 应用程序。<br>答案： <br>对</p><p>问题 9<br>Java ME（Java Platform Micro Edition，Java 平台微型版）以前称为 J2ME，也叫 K-JAVA。 Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。<br>答案： <br>对</p><p>问题 10<br>Java 语言是一种分布式的面向对象语言，具有面向对象、平台无关性、简单性、解释执行、多线程、安全性等很多特点。<br>答案： <br>对</p><p>问题 11<br>Java 的虚拟机机制保证了Java的平台无关性，使得Java程序可以“一次编写，到处运行（Write Once，Run any Where）”，具有良好的移植性。<br>答案： <br>对</p><p>问题 12<br>Java 程序在 Java 平台运行时会被编译成字节码文件，然后可以在有 Java 环境的操作系统上运行。在运行文件时，Java 的解释器对这些字节码进行解释执行。<br>答案： <br>对</p><p>问题 13<br>Java 语言是多线程的，这也是 Java 语言的一大特性。Java 支持多个线程同时执行，并提供多线程之间的同步机制。<br>答案： <br>对</p><p>问题 14<br>Java 语言支持 Internet 应用的开发，在 Java 的基本应用编程接口中就有一个网络应用编程接口，它提供了网络应用编程的类库。<br>答案： <br>对</p><p>问题 15<br>Java 的强类型机制、异常处理、垃圾回收机制等都是 Java 健壮性的重要保证。<br>答案： <br>对</p><p>问题 16<br>为了搭建编写Java程序所需的开发环境，首先需要下载和安装JDK（Java Development Kit）。<br>答案： <br>对</p><p>问题 17<br>编写 Java 程序必须使用 JDK，它提供了编译和运行 Java 程序的环境。<br>答案： <br>正确 对</p><p>问题 18<br>JDK 安装和配置完成后，可以在DOS 环境下输入并执行 java -version 命令查看JDK是否配置成功。<br>答案： <br>对</p><p>问题 19<br>如果输入并执行 java -version 命令并未出现JDK的版本信息，说明JDK没有安装成功，可能需要配置环境变量。<br>答案： <br>对</p><p>问题 20<br>编译 Java 源程序需要使用JDK 中的 javac 命令, 让 Java 编译器获取 Java 应用程序xxx.java 的源代码，把它编译成符合 Java 虚拟机规范的字节码文件，即xxx.class。<br>答案： <br>对</p><p>问题 21<br>xxx.class文件是JVM上的可执行文件。使用JDK中的java命令就可以运行Java程序。<br>答案： <br>对</p><h1 id="Quiz2：Java基本语法测试题"><a href="#Quiz2：Java基本语法测试题" class="headerlink" title="Quiz2：Java基本语法测试题"></a>Quiz2：Java基本语法测试题</h1><p>问题 1<br>赋值运算符是指为变量或常量指定数值的符号。赋值运算符的符号为“=”，也可以与其他运算符一起使用，表达多种赋值运算的变异效果。例如</p><table><thead><tr><th>运算符</th><th>含义</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td>+=</td><td>将该运算符左边的数值加上右边的数值， 其结果赋值给左边变量本身</td><td>int a=5; a+=2;</td><td>a=7</td></tr><tr><td>-=</td><td>将该运算符左边的数值减去右边的数值， 其结果赋值给左边变量本身</td><td>int a=5; a-=2;</td><td>a=3</td></tr><tr><td>*=</td><td>将该运算符左边的数值乘以右边的数值， 其结果赋值给左边变量本身</td><td>int a=5; a*=2;</td><td>a=10</td></tr><tr><td>/=</td><td>将该运算符左边的数值整除右边的数值， 其结果赋值给左边变量本身</td><td>int a=5; a/=2;</td><td>a=2</td></tr><tr><td>%=</td><td>将该运算符左边的数值除以右边的数值后取余，其结果赋值给左边变量本身</td><td>int a=5;a%=2;</td><td>a=1</td></tr></tbody></table><p>答案： <br>对</p><p>问题 2<br>选择结构（也叫分支结构）解决了顺序结构不能判断的缺点，可以根据一个条件判断执行哪些语句块。if 语句是使用最多的条件分支结构，它属于选择语句，也可以称为条件语句。Java支持的if语句形式包括<br>A.嵌套 if 语句：在 if 语句里嵌套另一个 if 语句。同样，if…else 语句和 if…else if 语句中也可以嵌套另一个 if 结构的语句，以完成更深层次的判断。<br>B.单分支if语句，if 语句的最简语法格式，表示“如果满足某种条件，就进行某种处理”。<br>if ( 条件表达式)  {      语句块;  }<br>C.多分支if语句：if…else if 语句，表现为“如果满足某种条件，就进行某种处理，否则如果满足另一种条件才执行另一种处理……，这些条件都不满足则执行最后一种条件”。<br>if(表达式1)  {      语句块1;  }  else if(表达式2)  {      语句块2;  }  …  else if(表达式n)  {      语句块n;  }  else  {      语句块n+1;  }<br>D.双分支if语句：if…else 语句表示“如果条件正确则执行一个操作，否则执行另一个操作”。<br>if ( 表达式)  {      语句块1;  }  else  {      语句块2;  }<br>答案：<br>ABCD</p><p>问题 3<br>Java 语言的数据类型分为两种：基本数据类型和引用数据类型。其中，基本数据类型包括<br>A.布尔类型（boolean），用于对两个数值通过逻辑运算，判断结果是“真”还是“假”，在Java中分别用true和false关键字表示。<br>B.浮点类型，包括单精度浮点型（float）和双精度浮点型（double）。<br>C.字符类型（char），使用单引号字符或者整数对其赋值。<br>D.字符串类型（String），使用双引号括起来的字符串对其赋值。<br>E.整数类型，包括字节型（byte）、短整型（short）、整型（int）和长整型（long）<br>答案： <br>ABCE</p><p>问题 4<br>常量不同于常量值，它可以在程序中用符号来代替常量值使用，因此在使用前必须先定义。<br>Java 语言使用 final 关键字来定义一个常量，其语法如下所示：<br>其中，final 是定义常量的关键字，dataType 指明常量的数据类型，variableName 是变量的名称。<br>答案： <br>对</p><p>问题 5<br>按照语句的组成部分，可以将顺序结构中的语句包括<br>A.表达式语句，即能够完成某个操作的语句<br>B.空语句，即在程序中什么都不做，也不包含具体实际性的语句<br>C.复合语句，即用{}括起来很多个语句的组合，从而可以将多个语句看作单个语句<br>D.调用语句，即调用某个函数的语句。<br>答案：<br>ABC </p><p>问题 6<br>在 Java 中，break 语句可以在 switch 语句中终止一个语句序列，也可以使用 break 语句强行退出循环，忽略循环体中的任何其他语句和循环的条件判断。<br>答案： <br>对</p><p>问题 7<br>Java 语言中算术运算符的功能是进行算术运算，包括加（+）、减（-）、乘（*）、除（\）和取模运算（％）。<br>答案： <br>对</p><p>问题 8<br>在对一个变量做加 1 或减 1 处理时，可以使用自增运算符 ++ 或自减运算 –。++ 或 – 是单目运算符，放在操作数的前面或后面都是允许的，其作用是使变量的值增 1 或减 1。操作数必须是一个整型或浮点型变量。<br>答案： <br>对</p><p>问题 9<br>多个同类型的变量可以同时定义或者初始化，但是多个变量中间要使用逗号分隔，声明结束时用分号分隔。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> username<span class="token punctuation">,</span> address<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> tel<span class="token punctuation">;</span>   <span class="token comment">// 声明多个变量</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>  <span class="token comment">// 声明并初始化多个变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>答案： <br>对</p><p>问题 10<br>初始化变量是指为变量指定一个明确的初始值。初始化变量有两种方式：一种是声明时直接赋值，一种是先声明、后赋值。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> usersex <span class="token operator">=</span> <span class="token char">'女'</span><span class="token punctuation">;</span>  <span class="token comment">// 直接赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token comment">// 先声明</span>username <span class="token operator">=</span> <span class="token string">"琪琪"</span><span class="token punctuation">;</span>  <span class="token comment">// 后赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>答案： <br>对</p><p>问题 11<br>以下语句在编译时会出错么？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> AGE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>AGE <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>答案： <br>对</p><p>问题 12<br>在Java的类中，除了我们已经用过的main方法，也可以放置其他方法，我们可以暂且将其视为函数，其语法格式为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">public</span><span class="token operator">|</span><span class="token keyword">private</span><span class="token operator">|</span><span class="token keyword">protected</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">|</span>return_type<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span>paramList<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//方法体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例如，一个计算两个数之和的方法可以被定义为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">double</span> i<span class="token punctuation">,</span><span class="token keyword">double</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> sum<span class="token operator">=</span>i<span class="token operator">+</span>j<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案： <br>对</p><p>问题 13<br>return 语句用于终止函数的执行或退出类的方法，并把控制权返回该方法的调用者。如果这个方法带有返回类型，return 语句就必须返回这个类型的值；如果这个方法没有返回值，可以使用没有表达式的 return 语句。其一般格式为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> 与方法相同类型的变量<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>答案： <br>对</p><p>问题 14<br>continue 语句是跳过循环体中剩余的语句而强制执行下一次循环，其作用为结束本次循环，即跳过循环体中下面尚未执行的语句，接着进行下一次是否执行循环的判定。<br>答案： <br>对</p><p>问题 15<br>关于if 语句和 switch 语句的比较，以下说法正确的是<br>A.从语句的实用性角度区分，switch 语句不如 if 条件语句，if 语句是应用最广泛和最实用的语句。<br>B.所有语言都有if语句和switch语句<br>C.从使用效率上区分，在对同一个变量的不同值作条件判断时，既可以使用 switch 语句，也可以使用 if 语句。使用 switch 语句的效率更高一些，尤其是判断的分支越多，越明显。<br>D.在程序开发的过程中，何时使用 if 语句和 switch 语句，需要根据实际情况而定，应尽量做到物尽其用。<br>答案： <br>ACD</p><p>问题 16<br>continue 语句只能用在 while 语句、for 语句或者 foreach 语句的循环体之中，在这之外的任何地方使用它都会引起语法错误。<br>答案： <br>对</p><p>问题 17<br>switch 语句能解决 if 分支过多的情况，提供一种简洁的方法来处理对应给定表达式的多种情况。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span>          语句块<span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> 值<span class="token number">2</span><span class="token operator">:</span>          语句块<span class="token number">2</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      …      <span class="token keyword">case</span> 值n<span class="token operator">:</span>          语句块n<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>          语句块n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，switch、case、default、break 都是 Java 的关键字。</p><ul><li><p>switch：表示“开关”，这个开关就是 switch 关键字后面小括号里的值，小括号里要放一个整型变量或字符型变量。</p></li><li><p>case：表示“情况，情形”，case 后必须是一个整型和字符型的常量表达式，通常是一个固定的字符、数字，例如 10、’a’。case 块可以有多个，顺序可以改变，但是每个 case 后的常量值必须各不相同。</p></li><li><p>default：表示“默认”，即其他情况都不满足。default 后要紧跟冒号，default 块和case 块的先后顺序可以变动，不会影响程序执行结果。通常，default 块放在末尾，也可以省略不写。</p></li><li><p>break：表示“停止”，即跳出当前结构。switch 语句在其开始处使用一个简单的表达式。表达式的结果将与结构中每个 case 子句的值进行比较。如果匹配，则执行与该 case 关联的语句块。语句块以 case 语句开头，以 break 语句结尾，然后执行 switch 语句后面的语句。如果结果与所有 case 子句均不匹配，则执行 default 后的语句</p></li></ul><p>答案： <br>对</p><p>问题 18<br>在变量和方法前面可以使用各种访问控制修饰符，例如public、private、protected、final、abstract、static、transient 和 volatile，我们会在后续课程里面给大家一一介绍。现在大家只需要在声明变量或方法时简单地加上public修饰符即可。<br>答案： <br>对</p><p>问题 19<br>变量是用来描述一条信息的别名，可以在程序代码中使用一个或多个变量。<br>在 java 中用户可以通过指定数据类型和标识符来声明变量，其基本语法如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DataType</span> identifier<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DataType</span> identifier <span class="token operator">=</span> value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述语法代码中涉及 3 个内容：DataType、 identifier 和 value，其具体说明如下：</p><ul><li><p>DataType：变量类型，如 int、string、 char 和 double 等。</p></li><li><p>identifier：标识符，也叫变量名称。</p></li><li><p>value：声明变量时的值。</p></li></ul><p>答案： <br>对</p><p>问题 20<br>以下关于while循环和do…while循环的说法正确的是：<br>A.都是循环结构，使用 while(循环条件) 表示循环条件，使用大括号将循环操作括起来<br>B.一开始循环条件就不满足的情况下，while 循环一次都不会执行，do…while 循环则不管什么情况下都至少执行一次。<br>C.执行次序不同：while 循环先判断，再执行。do…while 循环先执行，再判断。<br>D.语法不同：与 while 循环相比，do…while 循环将 while 关键字和循环条件放在后面，而且前面多了 do 关键字，后面多了一个分号<br>答案： <br>ABCD</p><p>问题 21<br>常量值又称为字面常量，它是通过数据直接表示的，因此有很多种数据类型。Java语言常用的常量类型包括：<br>A.实型常量<br>B.整型常量<br>C.字符型和字符串常量<br>D.布尔型常量<br>答案： <br>ABCD</p><p>问题 22<br>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。<br>Java的逻辑运算符包括 &amp;&amp;、||、！。其中 &amp;&amp; 和 || 是双目运算符，实现逻辑与、逻辑或；！是单目运算符，实现逻辑非。<br>答案： <br>对</p><p>问题 23<br>当两种数据类型不兼容，或目标类型的取值范围小于源类型时，自动转换将无法进行，这时就需要进行强制类型转换。其语法格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>type<span class="token punctuation">)</span>variableName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上述代码中首先将 double 类型变量 b 的值强制转换成 int 类型，然后将值赋给 a，但是变量 b 本身的值是没有发生变化的。<br>答案： <br>对</p><p>问题 24<br>数据类型的转换可以分为隐式转换（自动类型转换）和显式转换（强制类型转换）两种。其中，隐式转换需要同时满足两个条件：①两种数据类型彼此兼容，②目标类型的取值范围大于源数据类型（低级类型数据转换成高级类型数据）。<br>答案： <br>对</p><p>问题 25<br>循环也是程序中的重要流程结构之一，适用于需要重复一段代码直到满足特定条件为止的情况。Java中主要有以下哪些循环语句<br>A.foreach语句，是 for 语句的特殊简化版本，主要用于执行遍历数组、集合功能的循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>类型 变量名<span class="token operator">:</span>集合<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      语句块<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，“类型”为集合元素的类型，“变量名”表示集合中的每一个元素，“集合”是被遍历的集合对象或数组。每执行一次循环语句，循环变量就读取集合中的一个元素。<br>B.do…while 语句：先执行循环体，然后判断循环条件是否成立。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span>  <span class="token punctuation">{</span>      语句块<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>C.while 语句，在一定条件下重复执行一段代码。该语句需要判断一个测试条件，如果该条件为真，则执行循环语句（循环语句可以是一条或多条），否则跳出循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      语句块<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>D.for 语句是一种在程序执行前就要先判断条件表达式是否为真的循环语句。假如条件表达式的结果为假，那么它的循环语句根本不会执行。for 语句通常使用在知道循环次数的循环中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">;</span>条件表达式<span class="token number">2</span><span class="token punctuation">;</span>条件表达式<span class="token number">3</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  语句块<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>for 循环语句执行的过程为：首先执行条件表达式 1 进行初始化，然后判断条件表达式 2 的值是否为 true，如果为 true，则执行循环体语句块；否则直接退出循环。最后执行表达式 3，改变循环变量的值，至此完成一次循环。接下来进行下一次循环，直到条件表达式 2 的值为 false，才结束循环。<br>答案： <br>ABCD</p><h1 id="Quiz4：Java中的类和对象测试题"><a href="#Quiz4：Java中的类和对象测试题" class="headerlink" title="Quiz4：Java中的类和对象测试题"></a>Quiz4：Java中的类和对象测试题</h1><p>问题 1<br>What happens when you try to compile and run the following program?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Mystery</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> s<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Mystery</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mystery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token class-name">Mystery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token string">"constructor"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Select the one right answer<br>A. this code runs and “constructor” in the standard output<br>B. this code runs but nothing appears in the standard output<br>C. this code compiles but throws an exception at runtime<br>D. this code runs and writes “null” in the standard output<br>E. this code will not compile<br>答案：<br>D</p><p>问题 2<br>在Java语言中，类属性的数据类型，哪一种说法是正确的？<br>A.只能是基本数据类型。<br>B.可以是任意一种数据类型。<br>C.不能包含它自身定义的类。<br>D.以上全不对。<br>答案：<br>B</p><p>问题 3<br>以下哪行语句是创建一个对象实例？<br>A.Student s;<br>B.Student s = new Student[];<br>C.Student s= new Student();<br>D.以上都不是<br>答案：<br>C</p><p>问题 4<br>Which of the following statements about constructors in Java is true?<br>A. A constructor must be defined as static.<br>B. A constructor must be defined as public.<br>C.  A class can define more than one constructor.<br>D. A class must define at least one constructor.<br>答案：<br>C</p><p>问题 5<br>Which of the following statements is correct for a method which is overriding the following method?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>A. the overriding method must return void<br>B.  the overriding method must return object<br>C. the overriding method can return whatever it likes<br>D. the overriding method must return int<br>答案：<br>A</p><p>问题 6<br>What will happen if you compile/run the following code?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Q11</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> str1<span class="token operator">=</span><span class="token string">"main method with String[] args"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> str2<span class="token operator">=</span><span class="token string">"main method with int[] args"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Select the one right answer.<br>A.  Prints “main method with main String[] args”.<br>B. Duplicate method main(),compilation error at line 11.<br>C. Prints “main method with main int[] args”.<br>D. Duplicate method main(),compilation error at line 6.<br>答案：<br>A</p><p>问题 7<br>Consider the following Java program segment.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"non-default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Which of the following will be output during execution of the program segment?<br>A. The line of text “non-default” followed by the line of text “default”<br>B. The line of text “default” followed by the line of text “non-default”<br>C. The line of text “non-default”<br>D. The line of text “default”<br>答案：<br>C</p><p>问题 8<br>阅读以下代码，请选出正确的答案。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Teacher</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token class-name">String</span> iniName<span class="token punctuation">,</span> <span class="token keyword">double</span> iniSalary<span class="token punctuation">,</span> <span class="token keyword">int</span> iniAge<span class="token punctuation">)</span><span class="token punctuation">{</span>        name <span class="token operator">=</span> iniName<span class="token punctuation">;</span>        salary <span class="token operator">=</span> iniSalary<span class="token punctuation">;</span>        age <span class="token operator">=</span> iniAge<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">TestTeacher</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Teacher</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//请选择哪些代码可放置在此？</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(i) tom.name = “tom”;<br>(ii) tom.salary = 10000;<br>(iii) tom.age = 33;</p><p>A.(i) (ii) (iii)<br>B.(i) (ii)<br>C.(ii)(iii)<br>D.(i)<br>答案：<br>D</p><p>问题 9<br>在 Java 中定义一个类，必须使用访问控制符public和Class关键字，包含有一个自定义的类名和一对大括号。<br>答案： <br>错</p><p>问题 10<br>If the method int sum(int a, int b) is defined in a Java class C, which of the following methods cannot coexist as a different method in class C?<br>所选答案： <br>A. int sum(float a, int b)<br>B.  int sum(int x, float y)<br>C. int sum(int x, int y)<br>D. float sum(int x, float y)<br>答案：<br>C</p><p>问题 11<br>类是Java语言中的一种复合数据类型。<br>答案： <br>对</p><p>问题 12<br>How can you implement encapsulation?<br>答案： <br>A.Making all methods and variables as protected.<br>B.By making methods private and variable private<br>C. Make all variable are public and access them using methods<br>D.By making methods are public and variables as private.<br>答案：<br>D</p><p>问题 13<br>What is the output of the following code?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test("</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Q12</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">Test</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Test</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Test</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Q12 <span class="token class-name">Q</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Q12</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Select the one right answer.<br>A.<br>Test(1)<br>Test(3)<br>Test(2)<br>B.<br>Test(1)<br>Test(2)<br>Test(3)<br>C.<br>Test(2)<br>Test(1)<br>Test(3)<br>D.<br>Test(3)<br>Test(2)<br>Test(1)<br>答案：<br>A</p><p>问题 14<br>What will appear in the standard output when you run the Tester class?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Tester</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token keyword">var</span><span class="token punctuation">;</span>    <span class="token class-name">Tester</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">var</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">var</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Tester</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Tester</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Tester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"good-bye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Tester</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tester</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A.”hello”<br>B. 5<br>C. nothing<br>D.  “good-bye” followed by “hello”<br>E. “hello” followed by “good-bye”<br>答案：<br>D</p><p>问题 15<br>阅读下列代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> name <span class="token punctuation">;</span>        salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>        age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Teacher</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新教师的薪水是："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The salary is "</span> <span class="token operator">+</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A.8000<br>B.0<br>C.null<br>D.以上都不是<br>答案：<br>B</p><p>问题 16<br>在Java语言中,定义类的时候类名的首字母必须是大写的字母?<br>答案： <br>错</p><p>问题 17<br>Java语言中，一个类定义完毕后，可以创建多个对象，以下哪些说法是正确的？<br>(i) 每个对象实例在内容中占据同样大小的内存空间。<br>(ii) 每个对象实例中都有一份属性和方法的拷贝。<br>(iii) 每个类的对象实例和对象引用在内存中占据同样大小的内存。<br>(iv) 每个对象实例中都有一份类中定义的非静态属性的拷贝，多有对象共享所有的方法。<br>A.(i) (ii)<br>B.(ii) (iii)<br>C.(iii) (iv)<br>D.(i) (iv)<br>答案：<br>D</p><p>问题 18<br>以下关于类中定义的属性的描述是正确的是？<br>A.类中定义的属性在类的定义域范围是可见的，在类的作用域外部不可见。<br>B.类中定义的属性在任何地方都可见。<br>C.类中定义的private属性在类的定义域范围可见，在其他地方不可见。<br>D.以上描述都不正确<br>答案：<br>C</p><p>问题 19<br>Which best describes the requirements of a fully encapsulated class?<br>A. the class must be marked final<br>B. Modification of the objects state is only possible using method calls<br>C. Variables must not be public<br>D. Methods must not be private<br>E. Public methods are all marked final<br>答案：<br>B</p><p>问题 20<br>What is used to indicate that a method does not return a value?<br>A. the keyword static<br>B. the keyword void<br>C. the name of the class to which it belongs<br>D.  the omission of the return type<br>答案：<br>B</p><p>问题 21<br>在Java语言中,定义类的时候类名不能包含任何空格、标点符号和其他特殊符号，除了_以外。<br>答案： <br>对</p><p>问题 22<br>以下关于Java语言中的访问控制符描述正确的是？<br>A.访问控制符来保护对类、属性和方法的访问。<br>B.访问控制符来保护对类、变量和构造方法的访问。<br>C.访问控制符来保护对类、属性和对象的访问。<br>D.访问控制符来保护对类、子类的访问。<br>答案：A</p><p>问题 23<br>Java语言中的访问控制符有<br>A.public<br>B.default<br>C.private<br>D.以上全是<br>答案：<br>D</p><p>问题 24<br>Java语言中，在类的内部定义的变量叫做类的属性。<br>答案： <br>错</p><p>问题 25  <br>If a class contains a constructor, that constructor will be invoked<br>A. each time an object of that class is instantiated<br>B. each time an object of that class goes out of scope<br>C. once the first time an object of that class is instantiated<br>D. once at the beginning of any program that uses that class<br>答案：<br>A</p><h1 id="Quiz5：Java中的对象交互测试题"><a href="#Quiz5：Java中的对象交互测试题" class="headerlink" title="Quiz5：Java中的对象交互测试题"></a>Quiz5：Java中的对象交互测试题</h1><p>问题 1<br>Look the inheritance relation:<br>In a source of java have the following line:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">woman w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>What statement are corrected?<br>A. The expresion is legal<br>B. Compile corrected but running wrong<br>C.Will construct a woman’s object<br>D. the expression is illegal<br>答案： <br>D</p><p>问题 2<br>请阅读以下代码，请选择输出正确的结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span> name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span> age <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Name："</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"，Age："</span> <span class="token operator">+</span> age <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThisDemo01</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Person</span> per1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span> <span class="token string">"Mary"</span> <span class="token punctuation">,</span> <span class="token number">23</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per1<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         per1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Ann"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per1<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A.<br>Name: Mary, Age: 23<br>Name: Ann, Age: 23<br>B.<br>Name: Mary, Age: 23<br>Name: Mary, Age: 23<br>C.<br>Name: Ann, Age: 23<br>Name: Ann, Age: 23<br>D.以上都不是。<br>答案：<br>D</p><p>问题 3<br>If the method int sum(int a, int b) is defined in a Java class C, which of the following methods cannot coexist as a different method in class C?<br>A. int sum(int x, int y)<br>B. float sum(int x, float y)<br>C.  int sum(int x, float y)<br>D. int sum(float a, int b)<br>答案： <br>A </p><p>问题 4<br>What will appear in the standard output when you run the Tester class?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Tester</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token keyword">var</span><span class="token punctuation">;</span>    <span class="token class-name">Tester</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">var</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">var</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Tester</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Tester</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Tester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"good-bye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Tester</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tester</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A. “hello” followed by “good-bye”<br>B.  “good-bye” followed by “hello”<br>C. nothing<br>D.”hello”<br>E. 5<br>答案： <br>B</p><p>问题 5<br>在Java语言中，对象之间传递的消息包含的要素是？<br>答案： C<br>A.对象名、方法名、实参列表和返回值<br>B.对象名、点运算法、方法名和返回值<br>C.对象名、点运算符、方法名和实参列表<br>D.以上都不是</p><p>问题 6<br>If a class contains a constructor, that constructor will be invoked<br>A. each time an object of that class goes out of scope<br>B. once at the beginning of any program that uses that class<br>C. each time an object of that class is instantiated<br>D. once the first time an object of that class is instantiated<br>答案： <br>C</p><p>问题 7<br>What will be the result of compiling the following code?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    age <span class="token operator">=</span> age<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The age is "</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Select the most appropriate answer.<br>A. Compiles but generates a runtime error<br>B. Compiles and runs printing out The age is 1<br>C. Compiles but generates a compile time error<br>D. Does not compile<br>E. Compiles and runs with no output<br>答案： <br>B</p><p>问题 8<br>Which best describes the requirements of a fully encapsulated class?<br>A. Variables must not be public<br>B. Methods must not be private<br>C. Modification of the objects state is only possible using method calls<br>D. the class must be marked final<br>E. Public methods are all marked final<br>答案： <br>C</p><p>问题 9<br>请阅读以下代码，请选择输出正确的结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>         name <span class="token operator">=</span> name <span class="token punctuation">;</span>        age <span class="token operator">=</span> age <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Name："</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"，Age："</span> <span class="token operator">+</span> age <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThisDemo01</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Person</span> per1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span> <span class="token string">"Mary"</span> <span class="token punctuation">,</span> <span class="token number">23</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per1<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         per1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Ann"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per1<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A.<br>Name: Mary, Age: 23<br>Name: Ann, Age: 23 <br>B.<br>Name: Ann, Age: 23<br>Name: Ann, Age: 23  <br>C.<br>Name: Mary, Age: 23<br>Name: Mary, Age: 23<br>D.以上都不对。<br>答案： <br>D</p><p>问题 10<br>以下关于类中定义的方法说法正确是？<br>A.类中定义的方法必须都是public的。<br>B.类中定义的方法可随意访问类中定义的属性。<br>C.类中定义的方法只能访问类中定义的属性。<br>D.类里定义的属性只能被类中定义的方法访问。<br>答案： <br>B</p><p>问题 11<br>Which of the following statements about constructors in Java is true?<br>A. A class must define at least one constructor. <br>B.  A class can define more than one constructor.<br>C. A constructor must be defined as public.<br>D. A constructor must be defined as static.<br>答案： <br>B</p><p>问题 12<br>Java语言中，构造方法的主要作用是？<br>A.初始化类的属性。<br>B.给类中定义的属性分配内存空间。<br>C.在类的对象实例化时给对象分配空间。<br>D.以上全对。<br>答案： <br>D</p><p>问题 13<br>Which of the following statements is correct for a method which is overriding the following method?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>A.  the overriding method must return object<br>B. the overriding method can return whatever it likes<br>C. the overriding method must return void<br>D. the overriding method must return int<br>答案： <br>C    </p><p>问题 14<br>在Java语言中，要向另一个对象发送一条消息时，首先需要知道要发送的消息给哪一个对象，请问可以通过哪些方式获得这些对象的句柄？<br>A.在要发送消息的对象内部维护一个对另一个对象的引用。<br>B.通过向第三个对象发送一个请求获取那个对象引用。<br>C.该对象作为一个全局对象，让所有其他对象都可见。<br>D.以上全都是<br>答案： <br>D</p><p>问题 15<br>What will happen if you compile/run the following code?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Q11</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> str1<span class="token operator">=</span><span class="token string">"main method with String[] args"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> str2<span class="token operator">=</span><span class="token string">"main method with int[] args"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Select the one right answer.<br>A.  Prints “main method with main String[] args”.<br>B. Duplicate method main(),compilation error at line 6.<br>C. Duuplicate method main(),compilation error at line 11.<br>D. Prints “main method with main int[] args”.<br>答案： <br>A</p><p>问题 16<br>What is the output of the following code?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test("</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Q12</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">Test</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Test</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Test</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Q12 <span class="token class-name">Q</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Q12</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Select the one right answer.<br>A.<br>Test(1)<br>Test(3)<br>Test(2)<br>B.<br>Test(1)<br>Test(2)<br>Test(3)<br>C.<br>Test(2)<br>Test(1)<br>Test(3)<br>D.<br>Test(3)<br>Test(2)<br>Test(1)<br>答案： <br>A</p><p>问题 17<br>What happens when you try to compile and run the following program?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Mystery</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> s<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Mystery</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mystery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token class-name">Mystery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         s <span class="token operator">=</span> <span class="token string">"constructor"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Select the one right answer<br>A. this code runs and “constructor” in the standard output<br>B. this code will not compile<br>C. this code runs but nothing appears in the standard output<br>D. this code runs and writes “null” in the standard output<br>E. this code compiles but throws an exception at runtime<br>答案： <br>D</p><p>问题 18<br>下列关于方法调用说法正确的是？<br>A.Java语言中，方法调用就是消息传递。<br>B.Java语言中，方法调用时，参数传递都是值传递。<br>C.Java语言中，方法调用时，实参在方法体内是可见的。<br>D.在Java语言中，方法调用时，需要把方法中实参 传递 给形参。<br>答案： <br>A</p><p>问题 19<br>How can you implement encapsulation?<br>A.By making methods private and variable private<br>B.Making all methods and variables as protected.<br>C.By making methods are public and variables as private.<br>D. Make all variable are public and access them using methods<br>答案： <br>C</p><p>问题 20<br>What is used to indicate that a method does not return a value?<br>A. the name of the class to which it belongs<br>B. the keyword void<br>C. the keyword static<br>D.  the omission of the return type<br>答案： <br>B</p><p>问题 21<br>在Java语言中，关于类中的方法说法正确的是？<br>A.每个类定义时必须定义自己的构造方法。<br>B.Java语言中，所有对象实例里都有一份方法定义。<br>C.在Java语言中，一个类的所有对象实例共享一份方法定义。<br>D.在Java语言中，一个类内部定义的方法不可以互相调用。<br>答案： <br>C</p><p>问题 22<br>请阅读以下代码，请选择输出正确的结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span> name <span class="token operator">=</span> name <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span> age <span class="token operator">=</span> age <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Name："</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"，Age："</span> <span class="token operator">+</span> age <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThisDemo01</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Person</span> per1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span> <span class="token string">"Mary"</span> <span class="token punctuation">,</span> <span class="token number">23</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per1<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         per1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Ann"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>per1<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A.<br>Name: Mary, Age: 23<br>Name: Ann, Age: 23<br>B.<br>Name: Mary, Age: 23<br>Name: Mary, Age: 23<br>C.<br>Name: Ann, Age: 23<br>Name: Ann, Age: 23<br>D.以上都不是。<br>答案： <br>A</p><p>问题 23<br>在Java语言中，关于方法的说法正确的是？<br>A.在Java语言中， 方法定义必须包括方法名、访问控制属性、实参列表、返回值。<br> B.在Java语言中， 方法定义必须包括方法名、方法体、实参列表、返回值。<br>C.在Java语言中， 方法定义必须包括方法名、方法体、形参列表、返回值。<br>D.在Java语言中， 方法定义必须包括方法名、方法体、形参列表、访问控制属性。<br>答案： <br>C</p><p>问题 24<br>以下关于构造方法正确的是？<br>A.在Java语言中，每个类要定义自己的构造方法。<br>B.在对象实例化的过程中，由Java虚拟机自动调用构造方法。<br>C.构造方法可在任意位置被调用。<br>D.构造方法必须是public的。<br>答案： <br>B</p><p>问题 25<br>Consider the following Java program segment.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"non-default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Which of the following will be output during execution of the program segment?<br>A. The line of text “default”<br>B. The line of text “non-default”<br>C. The line of text “non-default” followed by the line of text “default”<br>D. The line of text “default” followed by the line of text “non-default”<br>答案： <br>B</p><h1 id="Quiz6：Java对象之间的交互强化测试题"><a href="#Quiz6：Java对象之间的交互强化测试题" class="headerlink" title="Quiz6：Java对象之间的交互强化测试题"></a>Quiz6：Java对象之间的交互强化测试题</h1><p>问题 1<br>假如有一个Student类，其定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ID<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">answerQuestion</span><span class="token punctuation">(</span><span class="token class-name">String</span> question<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Sorry, I don't know."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">TestStudent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Student</span> adam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> mary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//  请在此补充完整</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题：请mary回答一下“在Java语言中定义一个类所用的关键字是什么？”，这个消息该如何发送？<br>A.mary.answerQuestion();<br>B.mary.answerQuestion(“ 在Java语言中定义一个类所用的关键字是什么？ “);<br>C.answerQuestion(“ 在Java语言中定义一个类所用的关键字是什么？ “);<br>D.mary-&gt;answerQuestion(“ 在Java语言中定义一个类所用的关键字是什么？ “);<br>答案：<br>B</p><p>问题 2<br>在面向对象的思想中，消息的组成部分有：<br>A.对象、对象的属性数据、对象的方法<br>B.对象的服务、服务所需的参数<br>C.对象、对象的服务、服务所需的信息、服务的返回报告<br>D.对象、对象的服务、对象的属性信息、服务的返回报告<br>答案：<br>C</p><p>问题 3<br>当你去美团上订购一份外卖时,你需要发消息给美团外卖,请问你的消息中包含了哪些元素?<br>(i) 餐馆名<br>(ii) 菜单名<br>(iii) 菜单原料名<br>(iv) 菜品出品过程<br>(v) 收货地址</p><p>A.(i)(ii)(iii)<br>B.(ii) (iii) (iv)<br>C.(i) (ii) (v)<br>D.(ii) (iii) (v)<br>答案：<br>C</p><p>问题 4<br>在面向对象的思想中，对象与对象之间通过消息交互，交互的基础是什么？<br>A.特定的语言<br>B.具体的对象<br>C.消息的内容<br>D.以上都不是<br>答案：<br>A</p><p>问题 5<br>当你向一个对象发送消息时,需要获取这个对象的什么信息?<br>A.整个对象的所有信息<br>B.对象的句柄<br>C.对象的实例<br>D.对象的服务<br>答案：<br>B</p><p>问题 6<br>在面向对象的思想中，当某一个对象想与另外一个对象进行交互时，他需要知道另外一个对象的哪些信息才能进行交互？<br>A.对象的具体服务名、所需的参数、返回值<br>B.具体的对象实例、对象提供的服务、服务执行过程。<br>C.对象提供的某一个服务名、该服务执行过程、执行该服务所需的信息、服务结束后返回的结果。<br>D.对象实例、对象的某一个具体服务名、执行该服务所需的信息、服务结束后返回的结果。<br>答案：<br>D</p><p>问题 7<br>当你向一个对象发送消息时,你有几种方式获取到对象的引用?<br>A.找其他对象要<br>B.到维护对象的信息库里去找<br>C.自己跟这个对象有联系<br>D.以上全对<br>答案：<br>D</p><p>问题 8<br>什么是对象的服务？<br>A.对象的行为<br>B.对象的方法<br>C.对象对外提供的接口<br>D.以上都是<br>答案：<br>D</p><p>问题 9<br>类的方法的作用是为了定义它所对应的对象对外提供的服务。<br>答案： <br>对</p><p>问题 10<br>假如有一个Student类，每个学生对象都需要具备“回答问题”这个服务，请问该服务在面向对象程序语言中应该如何描述？<br>A.在Student类中定义一个方法，方法名是answerQuestion()。<br>B.在Student类中定义一个属性和方法，分别为Question q和方法answerQuestion()。<br>C.在Student类中定义一个方法，方法头部为 Answer answerQuestion(Question q)。（假设问题和回答都是特定的对象）<br>D.以上都不是<br>答案：<br>C</p><h1 id="Quiz7：对象之间的has-a-x2F-many关系测试题"><a href="#Quiz7：对象之间的has-a-x2F-many关系测试题" class="headerlink" title="Quiz7：对象之间的has-a/many关系测试题"></a>Quiz7：对象之间的has-a/many关系测试题</h1><p>问题 1<br>下图表达的含义是什么?<br><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%B5%8B%E8%AF%95%E9%A2%98/1.png"><br>A.公司里的员工参与项目。<br>B.公司里的项目由员工完成。<br>C.员工完成公司里的项目。<br>D.以上都对。<br>答案：<br>D</p><p>问题 2<br>Multiplicity in essence defines how many links of a certain association type can originate from a given object.<br>答案： <br>对</p><p>问题 3<br>A unary, or reflexive, association is between two instances of the same class.<br>答案： <br>对</p><p>问题 4<br><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%B5%8B%E8%AF%95%E9%A2%98/2.png"><br>以下描述哪一个是正确的？<br>A.每个Student类的对象都必须有一个Transcript对象<br>B.每个Student类都有一个Transcript类<br>C.每个Transcript类都有一个Student类<br>D.每个Student类对象也许会有一个Transcript对象。<br>答案：<br>D</p><p>问题 5<br>以下类图表达的信息，描述正确的是？<br><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%B5%8B%E8%AF%95%E9%A2%98/3.png"><br>A.这是一个与自身相关的关系。<br>B.这是自反的关系。<br>C.这个关系说明了每个雇员类都有一个管理者类，而这个管理者类又是一个雇员类。<br>D.以上全对。<br>答案：<br>D</p><p>问题 6<br>Association is has a/has many relationship between the classes.<br>答案： <br>对</p><p>问题 7<br>Links between two objects must satisfy the multiplicity between the two classes .<br>答案： <br>错</p><p>问题 8<br>An association is a potential relationship between objects of a certain type/class.<br>答案： <br>对</p><p>问题 9<br>根据类的多值性定义，可以把类和类之间在数量上的关系分为：<br>A.一对一<br>B.一对多<br>C.多对多<br>D.以上全是<br>答案：<br>D</p><p>问题 10<br>以下哪个说法是正确的？<br><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%B5%8B%E8%AF%95%E9%A2%98/4.png"><br>A.Client和BankAccount是两个不同的类。<br>B.Client和BankAccount这两个类的对象之间有关联。<br>C.这是一个二元关系。<br>D.以上全对。<br>答案：<br>D</p><p>问题 11<br>association  is a structural relationship that exists between objects.<br>答案： <br>错</p><p>问题 12<br>link is used to refer to a structural relationship that exists between two specific objects.<br>答案： <br>对</p><p>问题 13<br>以下图中，哪一个说法是正确的？<br><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%B5%8B%E8%AF%95%E9%A2%98/5.png"><br>A.一个Client对象有可能有一到多个BankAccount对象。<br>B.一个BankAccount对象只能属于一个Client对象<br>C.Client类的对象与BankAccount类的对象之间存在潜在的一对多的关联<br>D.以上全对<br>答案：<br>D</p><p>问题 14<br>Multiplicity is an actual numbers between two objects.<br>答案： <br>错</p><p>问题 15<br>A ternary association involves three classes.<br>答案： <br>对</p><p>问题 16<br>The term multiplicity refers to the number of objects of type A that may be associated with a given instance of type B.<br>答案： <br>对</p><p>问题 17<br>The concept of multiplicity pertains to links.<br>答案： <br>错</p><p>问题 18<br>Aggregation and Composition describe the associations between the classes in enssence.<br>答案： <br>对</p><p>问题 19<br>以下类图表述的信息哪一个是正确的？<br><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%B5%8B%E8%AF%95%E9%A2%98/6.png"><br>A.每个公司必须有多个项目<br>B.每个项目必须由多个公司完成<br>正确C.每个项目可以由多个公司完成<br>D.以上全对<br>答案：<br>C</p><p>问题 20<br>A link is an actual relationship between objects of those particular types.<br>答案： <br>对</p><h1 id="Quiz8：对象之间one-to-many关系测试题"><a href="#Quiz8：对象之间one-to-many关系测试题" class="headerlink" title="Quiz8：对象之间one-to-many关系测试题"></a>Quiz8：对象之间one-to-many关系测试题</h1><p>问题 1<br>A collection typically models a _____ relationship.<br>A. many-to-many<br>B. zero-to-one<br>C. one-to-many<br>D. one-to-one<br>答案：<br>C</p><p>问题 2<br>Consider the following method call, where c is an instance of the class java.util.ArrayList.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This method call returns the number of<br>A. times that the method c.add has been called<br>B. elements in the ArrayList represented by c<br>C. ArrayList objects that have been instantiated<br>D. bytes used by c<br>答案：<br>B</p><p>问题 3<br>请看下图：<br><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%B5%8B%E8%AF%95%E9%A2%98/7.png"><br>请问与该类图相应的代码哪一个选项是正确的？<br>A.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Professor</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Department</span> chairman<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Department</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Professor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> professors<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>B.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Professor</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Department</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> chairman<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Department</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>C.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Professor</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Department</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Professor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> professor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>D.以上都不对。<br>答案：<br>A</p><p>问题 4<br>Which of the following is true about association and aggregation in UML class diagrams?<br>A. Association and aggregation have no meaningful relationship.<br>B. Aggregation is a special form of association.<br>C. Association is the opposite of aggregation.<br>D. Association is a special form of aggregation.<br>答案：<br>B</p><p>问题 5<br>In an object model, the data that an object is responsible for maintaining are represented by<br>A. generalizations<br>B. specializations<br>C. methods<br>D. attributes<br>答案：<br>D</p><p>问题 6<br>Which of the following methods is (are) provided by java.util.Iterator?<br>I. next, which causes an iterator to return the next item in its iteration<br>II. remove, which can remove an item from a collection associated with an iterator<br>A. II only<br>B. None<br>C. I only<br>D. I and II<br>答案：<br>D</p><p>问题 7<br>请看下图:<br><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%B5%8B%E8%AF%95%E9%A2%98/8.png"></p><p>与该图一致的代码是哪一个选项?<br>A.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Professor</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Department</span> chairman<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Department</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Professor</span> professor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>B.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Professor</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Department</span> chairman<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Department</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>C.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Professor</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Department</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Professor</span> professor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>D.以上都不对。<br>答案：<br>A</p><p>问题 8<br>If the length of a particular array is the value of LIMIT, what is the index of the last item in that array?<br>A. 0<br>B. LIMIT - 1<br>C. LIMIT<br>D. LIMIT / 2<br>答案：<br>B</p><p>问题 9<br>请看下图：（本题图遗失，无效）<br>请问与该类图相关的代码是哪一个选项？<br>A.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Project</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Project</span><span class="token punctuation">&gt;</span></span> projects<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>B.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Project</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Project</span><span class="token punctuation">&gt;</span></span> projects<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>C.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Project</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>D.以上都不对。<br>答案：<br>A</p><p>问题 10<br>请看下图：<br><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%B5%8B%E8%AF%95%E9%A2%98/9.png"></p><p>A.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Professor</span><span class="token punctuation">&gt;</span></span> professors<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Professor</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token class-name">Department</span> department<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>B.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Professor</span><span class="token punctuation">&gt;</span></span> professors<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Professor</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>C.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Professor</span><span class="token punctuation">&gt;</span></span> professors<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Professor</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">&gt;</span></span> department<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>D.以上都不对。<br>答案：<br>B</p><p>问题 11<br>请阅读以下代码, 请问该段代码对应的类图哪一个表达是正确的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> department _name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token class-name">String</span> iniName<span class="token punctuation">)</span><span class="token punctuation">{</span>        department_name <span class="token operator">=</span> iniName<span class="token punctuation">;</span>        employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEmployee</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> newEmployee<span class="token punctuation">)</span><span class="token punctuation">{</span>        employees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newEmployee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeEmployee</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> newEmployee<span class="token punctuation">)</span><span class="token punctuation">{</span>             employees<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>newEmployee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> iniID<span class="token punctuation">,</span> <span class="token class-name">String</span> iniName<span class="token punctuation">)</span><span class="token punctuation">{</span>         id <span class="token operator">=</span> iniID<span class="token punctuation">;</span>        name <span class="token operator">=</span> iniName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A.Empployee类和Department类是一个多对多的关系。<br>B.Empployee类和Department类是一个多对一的关系。<br>C.Empployee类和Department类没有关系。<br>D.以上都不对。<br>答案：<br>B</p><p>问题 12<br>If a class has an association with itself, then the class contains<br>A. its own superclass<br>B. an attribute that references an object of the same class<br>C. a method that calls itself<br>D. a method that calls another method within the same class<br>答案：<br>B</p><p>问题 13<br>The multiplicity of an association between two classes indicates the number of<br>A. times that one class’s methods are called by the other class<br>B. instances of one class that can be associated with an instance of the other class<br>C. methods of one class that are called by the other class<br>D. methods and variables common to both classes<br>答案：<br>B</p><p>问题 14<br>请看下图：<br><img src="/../../../images/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%B5%8B%E8%AF%95%E9%A2%98/10.png"></p><p>A.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Professor</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Department</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Professor</span> professor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>B.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Professor</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Department</span> department<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Department</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Professor</span> professor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>C.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Professor</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Department</span> department<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token class-name">Department</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Professor</span> professor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>D.以上都不对。<br>答案：<br>A</p><p>问题 15<br>If a class contains a constructor, that constructor will be invoked<br>A. each time an object of that class is instantiated<br>B. once at the beginning of any program that uses that class<br>C. each time an object of that class goes out of scope<br>D. once the first time an object of that class is instantiated<br>答案：<br>A</p><p>问题 16<br>Which best describes the requirements of a fully encapsulated class?<br>A. Variables must not be public<br>B. Modification of the objects state is only possible using method calls<br>C. the class must be marked final<br>D. Methods must not be private<br>E. Public methods are all marked final<br>答案：<br>B</p><p>问题 17<br>The class java.util.ArrayList implements a collection that<br>A. can only store instances of the class java.lang.String<br>B. can grow to accommodate new items<br>C. cannot be accessed using an integer index<br>D. can only store primitive variables such as int or boolean<br>答案：<br>B</p><p>问题 18<br>What is used to indicate that a method does not return a value?<br>A. the name of the class to which it belongs<br>B. the keyword static<br>C. the keyword void<br>D.  the omission of the return type<br>答案：<br>C</p><p>问题 19<br>An object that contains methods that traverse a collection linearly from start to finish is known as a(n)<br>A. int<br>B. iterator<br>C. Exception<br>D. loop<br>答案：<br>B</p><p>问题 20<br>Which of the following statements is not true of the class java.util.ArrayList?<br>A. The constructor of the ArrayList class, when called with no arguments, causes an empty ArrayList to be constructed.<br>B. Items stored by an instance of ArrayList can be accessed using integer indexes.<br>C. Once an object is inserted into an instance of ArrayList, it can never be removed.<br>答案：<br>C</p><h1 id="Quiz9：对象之间的继承关系测试题"><a href="#Quiz9：对象之间的继承关系测试题" class="headerlink" title="Quiz9：对象之间的继承关系测试题"></a>Quiz9：对象之间的继承关系测试题</h1><p>问题 1<br>What will happen if you attempt to compile and run the following code?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub2</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CEx</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Base</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sub</span> s<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Sub</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Select the one right answer<br>A.Runtime Exception<br>B.Compile and run without error<br>C.Compile time Exception<br>答案：<br>A</p><p>问题 2<br>When a subclass defines an instance method with the same return type and signature as a method in its parent, the parent’s method is said to be<br>A. overridden<br>B. overloaded<br>C. private<br>D. hidden<br>答案：<br>A</p><p>问题 3<br>Which of the following most closely describes the process of overriding?<br>A. A method with the same name but different parameters gives multiple uses for the same method name<br>B.A method with the same name completely replaces the functionality of a method earlier in the hierarchy<br>C. A class with the same name replaces the functionality of a class defined earlier in the hierarchy<br>D. A class is prevented from accessing methods in its immediatte ancestor<br>答案：<br>B</p><p>问题 4<br>Look the inheritance relation:<br>In a source of java have the following line:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">woman w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>What statement are corrected?<br>A.Will construct a woman’s object<br>B. Compile corrected but running wrong<br>C. The expresion is legal<br>D. the expression is illegal<br>答案：<br>D</p><p>问题 5<br>Given the following code.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Happy</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Life</span> <span class="token keyword">extends</span> <span class="token class-name">Happy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"long version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Happy</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Life</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Which method gets executed?<br>A.run time exception<br>B.clean compile but no output<br>C.compile time error<br>D.int version<br>E.long version<br>答案：<br>C</p><p>问题 6<br>在Java语言中，比较两个对象是否是同一个对象实例，使用的是哪个方法或运算符？<br>A.=<br>B.==<br>C.equals方法<br>D.自定义的类需重写equals()方法，才能做两个对象实例的比较。<br>答案：<br>D</p><p>问题 7<br>Which of the following statements are true?<br>A. An overridden method must have the same name , parameter names and parameter types<br>B.A method cannot be overloaded to be less public in a child class<br>C. To be overridden a method must have the same name , parameter and return types<br>D. To be overridden a method must have the same name and parameter types<br>答案：<br>C</p><p>问题 8<br>Which of the following statements is correct for a method which is overriding the following method?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>A. the overriding method must return void<br>B. the overriding method must return int<br>C. the overriding method can return whatever it likes<br>D.  the overriding method must return object<br>答案：<br>A</p><p>问题 9<br>What will happen if you try to compile and execute B’s main() method?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Select the one right answer<br>A.The instance variable i is set to 4<br>B.The instance variable i is set to 2<br>C.The instance variable i is set to 0<br>D.This code will not compile<br>答案：<br>D</p><p>问题 10<br>Which of the following statements are truw?<br>A. An overloaded method cannot throw exceptions not checked in the base class<br>B. Static methods cannot be overloaded<br>C. Private methods cannot be overloaded<br>D. Methods cannot be overriden to be more private<br>答案：<br>D</p><p>问题 11<br>Given the following code:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> str<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        str <span class="token operator">=</span> <span class="token string">"example"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        str <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Example</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Example</span> ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token string">"Good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Demo</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token string">"Good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Which line will cause an error?<br>A.line 14<br>B.line 6<br>C.line 15<br>D.line 10<br>E.line 3<br>答案：<br>C</p><p>问题 12<br>What will happen when you attempt to compile and run the following code?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">amethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> iBase<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base.amethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Over</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Over</span> o<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Over</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> iBase<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">amethod</span><span class="token punctuation">(</span>iBase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">amethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> iOver<span class="token punctuation">)</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"over.amethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所选答案： <br>A. Output of “Over.amethod”<br>B. Runtime error complaining that Base.amethod is private<br>C. Output of “Base.amethod”<br>D. Compile time error complaining that Base.amethod is private<br>答案：<br>A</p><p>问题 13<br>From within a child class, its parent class is referred to via the keyword<br>A. this<br>B. base<br>C. super<br>D. parent<br>答案：<br>C</p><p>问题 14<br>Consider the following Java class definitions.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Object1</span> <span class="token punctuation">{</span>           <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token string">"Hi"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Object2</span> <span class="token keyword">extends</span> <span class="token class-name">Object1</span><span class="token punctuation">{</span>            <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Which of the following statements is (are) true regarding the definitions?</p><p>I. Class Object2 inherits from class Object1.<br>II. Class Object2 overrides method d.<br>III. Method d returns equivalent results when executed from either class.</p><p>A.  I and II only<br>B. I and III only<br>C. I, II, and III<br>D. III only<br>答案：<br>C</p><p>问题 15<br>The following  is a program:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Exsuper</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">String</span> nick_name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Exsuper</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span><span class="token class-name">String</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        name <span class="token operator">=</span> s<span class="token punctuation">;</span>        nick_name <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Exsuper</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span><span class="token class-name">String</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token operator">+</span><span class="token string">" a.k.a "</span><span class="token operator">+</span>nick_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Exsuper</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exsuper</span><span class="token punctuation">(</span><span class="token string">"First"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Example</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token string">"Second"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a is "</span><span class="token operator">+</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b is "</span><span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A.An object of type ClassCastException is thrown at line 27<br>B.output:<br>a is First a.k.a 1<br>b is Second a.k.a 2<br>C.output:<br>a is First<br>b is Second<br>D.output:<br>a is First<br>b is Second a.k.a 2<br>E.A Compiler error occurs at Line 21<br>答案：<br>D</p><p>问题 16<br>The instanceof operator:   object instanceof ClassX<br>该操作符的主要作用是？<br>A.在做两个对象之间进行强制类型转换时，是否可以强制转换。<br>B.判断object是否是ClassX的对象。<br>C.判断object是否是ClassX子类的对象。<br>D.判断object是否是ClassX父类的对象。<br>答案：<br>A</p><p>问题 17<br>Which of the following statements are ture?<br>A.constructors cannot be overridden<br>B. a constructor can return a primitive or an ovject reference<br>C.  constructor code executes from the current class up the hierarchy to the ancestor class<br>D. constructors cannot be overloaded<br>答案：<br>A</p><p>问题 18<br>When a subclass defines an instance method with the same return type and signature as a method in its parent, the parent’s method is said to be<br>A. overridden<br>B. overloaded<br>C. private<br>D. hidden<br>答案：<br>A</p><p>问题 19<br>Which of the following statements are true?<br>A. Constructors can be marked public and protected, but not private<br>B. Constructors can only have a primitive return type<br>C. Constructors cannot have a visibility modifier<br>D. Constructors are not inherited<br>答案：<br>D</p><p>问题 20<br>Given the following code how could you invoke the Base constructor that will print out the string “base constructor”:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>    <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"base constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sup</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Sup</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//One</span>    <span class="token punctuation">}</span>    <span class="token class-name">Sup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//Two</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//Three</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Select the one right answer<br>A.After //Two put super(10)<br>B.After //One put Base(10)<br>C.After //Three put super(10)<br>D.After // One put super(10)<br>答案：A</p><h1 id="Quiz10：类的设计测试题"><a href="#Quiz10：类的设计测试题" class="headerlink" title="Quiz10：类的设计测试题"></a>Quiz10：类的设计测试题</h1><p>问题 1<br>类图中需要包括对象实例的定义。<br>答案： <br>错</p><p>问题 2<br>In a UML class diagram’s representation of a class, the top, middle, and lower rectangular compartments respectively describe the _____ of the class.<br>A. attributes, methods, and constants<br>B. name, methods, and constants<br>C. attributes, methods, and name<br>D. name, attributes, and methods<br>答案：<br>D</p><p>问题 3<br>在类图中，在每个类的属性区域需要定义出关联属性。<br>答案： <br>错</p><p>问题 4<br>在类设计的过程中，如何定义各类的方法？<br>所选答案： <br>A.找动词<br>B.根据类的属性定义相应的方法<br>C.根据与其它类的关联定义相应的方法<br>D.以上全是。<br>答案：<br>D</p><p>问题 5<br>Which of the following is true about association and aggregation in UML class diagrams?<br>A. Aggregation is a special form of association.<br>B. Association is the opposite of aggregation.<br>C. Association is a special form of aggregation.<br>D. Association and aggregation have no meaningful relationship.<br>答案：<br>A</p><p>问题 6<br>The static model of a software system typically includes which of the following?</p><p>I. Attributes of classes<br>II. Actions that occur between classes<br>III. Structural relationships between classes </p><p>A. I, II, and III<br>B. I and II only<br>C. I and III only<br>D. II and III only<br>答案：<br>C</p><p>问题 7<br>UML class diagrams can describe which of the following?</p><p>I. The internal structure of classes<br>II. Relationships between classes </p><p>A. I only<br>B. I and II<br>C. II only<br>D. None<br>答案：<br>B</p><p>问题 8<br>A collection typically models a _____ relationship.<br>A. many-to-many<br>B. zero-to-one<br>C. one-to-many<br>D. one-to-one<br>答案：<br>C</p><p>问题 9<br>在类图中需要描述消息和消息的传递过程。<br>答案： <br>错</p><p>问题 10<br>A binary association is said to exist between two classes when<br>A. one class belongs to the same package as the other class<br>B. an object of one class is instantiated in the same method as an object of the other class<br>C. one class is a subtype of the other class<br>D. an object of one class requires an object of the other class<br>答案：<br>D</p><p>问题 11<br>An object that contains methods that traverse a collection linearly from start to finish is known as a(n)<br>A. int<br>B. iterator<br>C. Exception<br>D. loop<br>答案：<br>B</p><p>问题 12<br>From within a child class, its parent class is referred to via the keyword<br>A. this<br>B. base<br>C. super<br>D. parent<br>答案：<br>C</p><p>问题 13<br>Which of the following statements are true?<br>A. Constructors cannot have a visibility modifier<br>B. Constructors can only have a primitive return type<br>C. Constructors can be marked public and protected, but not private<br>D. Constructors are not inherited<br>答案：<br>D</p><p>问题 14<br>Which is a Java access modifier used to designate that a particular data field will not be inherited by a subclass?<br>A. final<br>B. private<br>C. protected<br>D. default<br>答案：<br>B</p><p>问题 15<br>Which best describes the requirements of a fully encapsulated class?<br>A. Public methods are all marked final<br>B. Modification of the objects state is only possible using method calls<br>C. Variables must not be public<br>D. Methods must not be private<br>E. the class must be marked final<br>答案：<br>B</p><p>问题 16<br>在类图中表达的类和类之间的关系包括：<br>A.依赖<br>B.关联<br>C.继承<br>D.以上全是<br>答案：<br>D</p><p>问题 17<br>Consider the following method call, where c is an instance of the class java.util.ArrayList.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This method call returns the number of<br>A. elements in the ArrayList represented by c<br>B. bytes used by c<br>C. ArrayList objects that have been instantiated<br>D. times that the method c.add has been called<br>答案：<br>A</p><p>问题 18<br>在类图中，一般的关联关系都使用单向关系表达。<br>答案： <br>对</p><p>问题 19<br>How can you implement encapsulation?<br>A.By making methods are public and variables as private.<br>B.By making methods private and variable private<br>C. Make all variable are public and access them using methods<br>D.Making all methods and variables as protected.<br>答案：<br>A</p><p>问题 20<br>If a class has an association with itself, then the class contains<br>A. its own superclass<br>B. an attribute that references an object of the same class<br>C. a method that calls itself<br>D. a method that calls another method within the same class<br>答案：<br>B</p><p>问题 21<br>The multiplicity of an association between two classes indicates the number of<br>A. times that one class’s methods are called by the other class<br>B. methods and variables common to both classes<br>C. instances of one class that can be associated with an instance of the other class<br>D. methods of one class that are called by the other class<br>答案：<br>C</p><p>问题 22<br>When using noun-phrase analysis to model a software system, which of the following should typically be eliminated from the list of potential classes?</p><p>I. References to the software system itself<br>II. Nouns that imply roles between objects<br>III. Synonyms to other nouns in the list </p><p>A. I and III only<br>B. III only<br>C.  I, II, and III<br>D. II and III only<br>答案：<br>C</p><p>问题 23<br>请问在进行类设计的过程中，如何找类的属性？<br>A.找名词<br>B.找名词短语<br>C.找由…组成等意思的名词短语<br>D.根据经验<br>答案：<br>C</p><p>问题 24<br>If a class contains a constructor, that constructor will be invoked<br>A. once the first time an object of that class is instantiated<br>B. each time an object of that class is instantiated<br>C. once at the beginning of any program that uses that class<br>D. each time an object of that class goes out of scope<br>答案：<br>B</p><p>问题 25<br>In an object model, the data that an object is responsible for maintaining are represented by<br>A. specializations<br>B. methods<br>C. attributes<br>D. generalizations<br>答案：<br>C</p><h1 id="Quiz11：类的高级特性测试题"><a href="#Quiz11：类的高级特性测试题" class="headerlink" title="Quiz11：类的高级特性测试题"></a>Quiz11：类的高级特性测试题</h1><p>问题 1<br>Which of the following statements is (are) true in Java?</p><p>I. All of the methods in an abstract class must be abstract.<br>II. All of the methods in an interface must be abstract.</p><p>A. I and II<br>B.  I only<br>C. None<br>D. II only<br>答案：<br>D</p><p>问题 2<br>Which of the following statements about Java classes is (are) accurate?</p><p>I. A class may have only one parent.<br>II. Two or more classes may share a parent.</p><p>A. II only<br>B. I and II<br>C. I only<br>D. None<br>答案：<br>B</p><p>问题 3<br>Which of the following statements is (are) true in Java?</p><p>I. Classes that contain abstract methods must be declared abstract.<br>II. Classes that contain protected methods must be declared abstract. </p><p>A.  None<br>B. I only<br>C. I and II<br>D.  II only<br>答案：<br>B</p><p>问题 4<br>Which of the following statements is (are) true about interfaces in Java?</p><p>I. Interfaces can extend other interfaces.<br>II. Interfaces can contain data fields.</p><p>A.  I and II<br>B. I only<br>C. II only<br>D. None<br>答案：<br>A</p><p>问题 5<br>The subclass of an abstract class must<br>A. be abstract and implement all of the parent’s abstract methods<br>B. be abstract<br>C.  be abstract or implement all of the parent’s abstract methods<br>D. implement all of the parent’s abstract methods<br>答案：<br>C</p><p>问题 6<br>Which of the following categorizations can be applied to both the data fields and the methods in a Java class?<br>A.  abstract and non-abstract<br>B. native and non-native<br>C. static and non-static<br>D. default and non-default<br>答案：<br>C</p><p>问题 7<br>Which of the following statements about class variables in Java is not true?<br>A.  Non-static methods in a class can access the class variable defined in the same class.<br>B. Class variables require the modifier static in the declarations.<br>C. All objects have their own copy of the class variable defined in the instantiated class.<br>D. Class variables do not need the reference to the object of the instantiated class to access them.<br>答案：<br>C</p><p>问题 8<br>Which of the following statements is (are) true about any abstract method in Java?</p><p>I. It contains no definition.<br>II. It cannot be declared public.</p><p>A.  I and II<br>B. I only<br>C. None<br>D. II only<br>答案：<br>B<br>问题 9<br>Which of the following statements is (are) true in Java?</p><p>I. An abstract class may contain data fields.<br>II. Interfaces may contain data fields.</p><p>A. II only<br>B.  I only<br>C. I and II<br>D. None<br>答案：<br>C</p><p>问题 10<br>Consider the following Java program fragment.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drive</span><span class="token punctuation">(</span><span class="token class-name">Vehicle</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">drive</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The method call drive(obj) is valid if obj is which of the following?</p><p>I. A descendent of class Vehicle<br>II. An ancestor of class Vehicle<br>III. An object of class Vehicle</p><p>A. III only<br>B.  I, II, and III<br>C. II and III only<br>D. I and III only<br>答案：<br>D</p><h1 id="Quiz12：设计模式测试题"><a href="#Quiz12：设计模式测试题" class="headerlink" title="Quiz12：设计模式测试题"></a>Quiz12：设计模式测试题</h1><p>问题 1<br>The constructor of a class that adheres to the Singleton design pattern must have _____ visibility.<br>A. public<br>B. protected<br>C. private<br>D. package<br>答案：<br>C</p><p>问题 2<br>下面哪一个模式与策略模式是一类的？<br>A.Factory Method<br>B.Adapter<br>C.Iterator<br>D.Decorator<br>答案：<br>C</p><p>问题 3<br>What is design pattern?<br>A.describe practical solutions to common design problems that occur repeatedly in software development.<br>B.A description of the solution that includes the class structures that solve the problem<br>C.A description of the problem that the pattern addresses<br>D.A name that identifies the pattern<br>答案：<br>A</p><p>问题 4<br>The Strategy design pattern is likely to be useful when implementing which of the following?</p><p>I. An application that offers several alternate sorting algorithms<br>II. A simple class to store the address of an organization of which only one instance can be instantiated </p><p>所选答案： <br>A. None<br>B. I and II<br>C. I only<br>D. II only<br>答案：<br>C</p><p>问题 5<br>Singleton pattern is a<br>A.Structural Patterns<br>B.Creational Patterns<br>C.Behavioral Patterns<br>D.Object Patterns<br>答案：<br>B</p><p>问题 6<br>A design pattern is typically used to<br>A. reduce the number of classes in the design of a program<br>B. describe a practical solution to a common design problem<br>C. ensure that code executes at optimal speed during runtime<br>D. allow the use of object-orientated concepts in a language that is not object-oriented<br>答案：<br>B</p><p>问题 7<br>Where will be a ‘ is a ‘ relationship will occur select one?<br>A.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Shape</span><span class="token keyword">interface</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>B. </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Componet</span><span class="token keyword">class</span> <span class="token class-name">Object</span> <span class="token keyword">implements</span> <span class="token class-name">Component</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>C.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Component</span><span class="token keyword">class</span> <span class="token class-name">Objects</span> implement <span class="token class-name">Component</span><span class="token punctuation">{</span>    <span class="token class-name">Component</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>D. </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>答案：<br>A</p><p>问题 8<br>The term class variable is a synonym for<br>A. a private data field<br>B. a read-only variable<br>C. a static data field<br>D. an instance variable<br>答案：<br>C</p><p>问题 9<br>实现Singleton模式的关键元素有：<br>A.一个私有的静态属性<br>B.一个公有的静态方法<br>C.所有的构造方法都必须是私有的。<br>D.全部需要。<br>答案：<br>D</p><p>问题 10<br>实现策略模式的关键要素是：<br>A.必须在一个继承关系中。<br>B.子类重写父类的方法。<br>C.必须有一个父类对象引用。<br>D.全都是。<br>答案：<br>D</p><h1 id="Quiz13：Java异常处理测试题"><a href="#Quiz13：Java异常处理测试题" class="headerlink" title="Quiz13：Java异常处理测试题"></a>Quiz13：Java异常处理测试题</h1><p>问题 1<br>If a file opened for reading does not exist, which of the following events will occur in Java? <br>A. A new file will be created.<br>B. A run-time error will occur.<br>C. A FileNotFoundException will be raised.<br>D. A NullPointerException will be raised.<br>答案： <br>C</p><p>问题 2<br>Java语言中抛出一个异常用哪一个关键字？<br>A.throw<br>B.throws<br>C.try<br>D.catch<br>答案：<br>A</p><p>问题 3<br>在Java语言中，自定义异常需要继承自哪个类？<br>答案： <br>A.Exception<br>B.Error<br>C.Thorwable<br>D.都不是<br>答案：<br>A</p><p>问题 4<br>Java 中的异常（Exception）又称为例外，是一个在程序执行期间发生的事件，它中断正在执行的程序的正常指令流。<br>答案： <br>对</p><p>问题 5<br>下面哪一类异常是程序员不能处理的异常？<br>A.ClassCastException<br>B.NumberFormatException<br>C.IOException<br>D.ClassNotFoundException<br>答案：<br>C</p><p>问题 6<br>阅读下面语句：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> filename <span class="token operator">=</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它会抛出哪类异常？<br>A.FileNotFoundException<br>B.NullPointerException<br>C.EOFException<br>D.RuntimeException<br>答案：<br>A</p><p>问题 7<br>下面哪一个异常是运行时异常？<br>A.NullPointerException<br>B.ClassNotFoundException<br>C.CloneNotSupportedException<br>D.FileNotFoundException<br>答案：<br>A</p><p>问题 8<br>Java中的异常类的父类是下列中的哪一个？<br>A.Exception<br>B.Error<br>C.Throwable<br>D.都不是<br>答案：<br>C</p><p>问题 9<br>throws关键字的作用是？<br>A.用于异常规范说明。<br>B.抛出一个异常。<br>C.处理一个异常。<br>D.进行异常定义。<br>答案：<br>A</p><p>问题 10<br>阅读下列代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> a<span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在运行时，它将抛出什么类型的异常？<br>A.ClassNotFoundException<br>B.NullPointerException<br>C.ClassCastException<br>D.都不是<br>答案：<br>B</p><h1 id="Quiz14：Java文件测试题"><a href="#Quiz14：Java文件测试题" class="headerlink" title="Quiz14：Java文件测试题"></a>Quiz14：Java文件测试题</h1><p>问题 1<br>What happens if the file “Ran.test” does not yet exist and you attempt to compile and run the following code?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>        <span class="token class-name">RandomAccessFile</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"Ran.test"</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token string">"Ninotchka"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Select the one right answer.<br>A.The code compiles and runs and “Ninotchka” appears in the file “Ran.test” that is creates.<br>B. The code does not compile because RandomAccessFile does not implement the writeBytes()  method.<br>C. The code does not compile because RandomAccessFile is not created correctly.<br>D. The code compiles and runs but nothing appears in the file  “Ran.test” that is creates.<br>E. The code compiles and runs but throws an IOException because “Ran.test” does not yet exist.<br>答案：<br>A</p><p>问题 2<br>What is the class that has “mode” argument such as “r” or “rw” is required in the constructor?<br>A. File<br>B. DataInputStream<br>C. RandomAccessFile<br>D. InputStream<br>答案：<br>C</p><p>问题 3<br>Which of the following is the correct form of constructor for PrintWriter?<br>A. new PrintWriter(new OutputStream());<br>B. new PrintWriter(new OutputStreamReader(new File(“.\hai.txt”)));<br>C. None of above<br>D. new PrintWriter(new File(“.\hai.txt”));<br>答案：<br>A</p><p>问题 4<br>Assuming any exception handling has been set up, which of the following will create an instance of the RandomAccessFile class?<br>A. RandomAccessFile raf = new RandomAccessFile(“myfile.txt”,”rw”);<br>B. RandomAccessFile raf = new RandomAccessFile(new DataInputStream());<br>C. RandomAccessFile raf = new RandomAccessFile(“myfile.txt”);<br>D. RandomAccessFile raf = new RandomAccessFile(new File(“myfile.txt”));<br>答案：<br>A</p><p>问题 5<br>Which class should be used in situations that require writing characters rather than bytes?<br>A. PrintOutputReader<br>B. PrintStream<br>C. PrintWriter<br>D. LineNumberWriter<br>答案：<br>C</p><p>问题 6<br>Given this code :</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Write</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"temp.test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// write integers here.....</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>How cant your replace the comment at the end of main() with code that will write the integers 0 through 9?<br>A. </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DataOutputStream</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    filter<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>B.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    filter<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>C.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    stream<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>D. </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DataOutputStream</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    filter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>E.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>答案：<br>A</p><p>问题 7<br>What will be output if you try to compile and run the following code, but there is no file called Hello.txt in the current directory?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Test</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">amethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">amethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">FileInputStream</span> dis<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"Hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> fne<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No such file found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Doing finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A. No such file found<br>B. No such file found, -1<br>C. No such file found, Doing finally, -1<br>D. 0<br>答案：<br>C</p><p>问题 8<br>If a file opened for reading does not exist, which of the following events will occur in Java?<br>A. A FileNotFoundException will be raised.<br>B. A run-time error will occur.<br>C. A new file will be created.<br>D. A NullPointerException will be raised.<br>答案：<br>A</p><p>问题 9<br>You need to read in the lines of a large text file containing tens of megabytes of data. which of the following would be most suitable for reading in such a file?<br>A. new RandomAccessFile raf = new RandomAccessFile(“myfile.txt”,”+rw”);<br>B. new BufferedReader(new InputStreamReader(new FileInputSream(“file.name”)))<br>C. new InputStreamReader(new FileInputStream(“file.name”))<br>D. new FileInputStream(“file.name”)<br>答案：<br>B</p><p>问题 10<br>What does the following code do?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Select the one right answer.<br>A. Open a file named “hello.text” so that you can write to it but cannot read from it.<br>B. Create a new file named “hello.test” if it does not yet exist . The file is not opened.<br>C. Create an object that you can now use to create and open the file named “hello.test”, and write to and read from the file.<br>D. Open a file named “hello.text” so that you can write to it and read from it,but does not create the file if it does not yet exist.<br>E.Create a new file named “hello.test” if it does not yet exist . It also opens the file so you can write to it and read from it.<br>答案：<br>E</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASCII码表</title>
      <link href="/2019/10/20/ji-suan-ji-ke-xue-ji-chu/ascii-ma-biao/"/>
      <url>/2019/10/20/ji-suan-ji-ke-xue-ji-chu/ascii-ma-biao/</url>
      
        <content type="html"><![CDATA[<p>没有必要背诵ASCII码，但掌握ASCII的各种知识也是重要的，本文为你介绍这些知识。</p><h1 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h1><table><thead><tr><th align="center">Bin(二进制)</th><th align="center">Oct(八进制)</th><th align="center">Dec(十进制)</th><th align="center">Hex(十六进制)</th><th align="center">缩写/字符</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">00000000</td><td align="center">000</td><td align="center">0</td><td align="center">0x00</td><td align="center">NUL(null)</td><td align="center">空字符</td></tr><tr><td align="center">00000001</td><td align="center">001</td><td align="center">1</td><td align="center">0x01</td><td align="center">SOH(start of headling)</td><td align="center">标题开始</td></tr><tr><td align="center">00000010</td><td align="center">002</td><td align="center">2</td><td align="center">0x02</td><td align="center">STX (start of text)</td><td align="center">正文开始</td></tr><tr><td align="center">00000011</td><td align="center">003</td><td align="center">3</td><td align="center">0x03</td><td align="center">ETX (end of text)</td><td align="center">正文结束</td></tr><tr><td align="center">00000100</td><td align="center">004</td><td align="center">4</td><td align="center">0x04</td><td align="center">EOT (end of transmission)</td><td align="center">传输结束</td></tr><tr><td align="center">00000101</td><td align="center">005</td><td align="center">5</td><td align="center">0x05</td><td align="center">ENQ (enquiry)</td><td align="center">请求</td></tr><tr><td align="center">00000110</td><td align="center">006</td><td align="center">6</td><td align="center">0x06</td><td align="center">ACK (acknowledge)</td><td align="center">收到通知</td></tr><tr><td align="center">00000111</td><td align="center">007</td><td align="center">7</td><td align="center">0x07</td><td align="center">BEL (bell)</td><td align="center">响铃</td></tr><tr><td align="center">00001000</td><td align="center">010</td><td align="center">8</td><td align="center">0x08</td><td align="center">BS (backspace)</td><td align="center">退格</td></tr><tr><td align="center">00001001</td><td align="center">011</td><td align="center">9</td><td align="center">0x09</td><td align="center">HT (horizontal tab)</td><td align="center">水平制表符</td></tr><tr><td align="center">00001010</td><td align="center">012</td><td align="center">10</td><td align="center">0x0A</td><td align="center">LF (NL line feed, new line)</td><td align="center">换行键</td></tr><tr><td align="center">00001011</td><td align="center">013</td><td align="center">11</td><td align="center">0x0B</td><td align="center">VT (vertical tab)</td><td align="center">垂直制表符</td></tr><tr><td align="center">00001100</td><td align="center">014</td><td align="center">12</td><td align="center">0x0C</td><td align="center">FF (NP form feed, new page)</td><td align="center">换页键</td></tr><tr><td align="center">00001101</td><td align="center">015</td><td align="center">13</td><td align="center">0x0D</td><td align="center">CR (carriage return)</td><td align="center">回车键</td></tr><tr><td align="center">00001110</td><td align="center">016</td><td align="center">14</td><td align="center">0x0E</td><td align="center">SO (shift out)</td><td align="center">不用切换</td></tr><tr><td align="center">00001111</td><td align="center">017</td><td align="center">15</td><td align="center">0x0F</td><td align="center">SI (shift in)</td><td align="center">启用切换</td></tr><tr><td align="center">00010000</td><td align="center">020</td><td align="center">16</td><td align="center">0x10</td><td align="center">DLE (data link escape)</td><td align="center">数据链路转义</td></tr><tr><td align="center">00010001</td><td align="center">021</td><td align="center">17</td><td align="center">0x11</td><td align="center">DC1 (device control 1)</td><td align="center">设备控制1</td></tr><tr><td align="center">00010010</td><td align="center">022</td><td align="center">18</td><td align="center">0x12</td><td align="center">DC2 (device control 2)</td><td align="center">设备控制2</td></tr><tr><td align="center">00010011</td><td align="center">023</td><td align="center">19</td><td align="center">0x13</td><td align="center">DC3 (device control 3)</td><td align="center">设备控制3</td></tr><tr><td align="center">00010100</td><td align="center">024</td><td align="center">20</td><td align="center">0x14</td><td align="center">DC4 (device control 4)</td><td align="center">设备控制4</td></tr><tr><td align="center">00010101</td><td align="center">025</td><td align="center">21</td><td align="center">0x15</td><td align="center">NAK (negative acknowledge)</td><td align="center">拒绝接收</td></tr><tr><td align="center">00010110</td><td align="center">026</td><td align="center">22</td><td align="center">0x16</td><td align="center">SYN (synchronous idle)</td><td align="center">同步空闲</td></tr><tr><td align="center">00010111</td><td align="center">027</td><td align="center">23</td><td align="center">0x17</td><td align="center">ETB (end of trans. block)</td><td align="center">传输块结束</td></tr><tr><td align="center">00011000</td><td align="center">030</td><td align="center">24</td><td align="center">0x18</td><td align="center">CAN (cancel)</td><td align="center">取消</td></tr><tr><td align="center">00011001</td><td align="center">031</td><td align="center">25</td><td align="center">0x19</td><td align="center">EM (end of medium)</td><td align="center">介质中断</td></tr><tr><td align="center">00011010</td><td align="center">032</td><td align="center">26</td><td align="center">0x1A</td><td align="center">SUB (substitute)</td><td align="center">替补</td></tr><tr><td align="center">00011011</td><td align="center">033</td><td align="center">27</td><td align="center">0x1B</td><td align="center">ESC (escape)</td><td align="center">溢出</td></tr><tr><td align="center">00011100</td><td align="center">034</td><td align="center">28</td><td align="center">0x1C</td><td align="center">FS (file separator)</td><td align="center">文件分割符</td></tr><tr><td align="center">00011101</td><td align="center">035</td><td align="center">29</td><td align="center">0x1D</td><td align="center">GS (group separator)</td><td align="center">分组符</td></tr><tr><td align="center">00011110</td><td align="center">036</td><td align="center">30</td><td align="center">0x1E</td><td align="center">RS (record separator)</td><td align="center">记录分离符</td></tr><tr><td align="center">00011111</td><td align="center">037</td><td align="center">31</td><td align="center">0x1F</td><td align="center">US (unit separator)</td><td align="center">单元分隔符</td></tr><tr><td align="center">00100000</td><td align="center">040</td><td align="center">32</td><td align="center">0x20</td><td align="center">(space)</td><td align="center">空格</td></tr><tr><td align="center">00100001</td><td align="center">041</td><td align="center">33</td><td align="center">0x21</td><td align="center">!</td><td align="center"></td></tr><tr><td align="center">00100010</td><td align="center">042</td><td align="center">34</td><td align="center">0x22</td><td align="center">“</td><td align="center"></td></tr><tr><td align="center">00100011</td><td align="center">043</td><td align="center">35</td><td align="center">0x23</td><td align="center">#</td><td align="center"></td></tr><tr><td align="center">00100100</td><td align="center">044</td><td align="center">36</td><td align="center">0x24</td><td align="center">$</td><td align="center"></td></tr><tr><td align="center">00100101</td><td align="center">045</td><td align="center">37</td><td align="center">0x25</td><td align="center">%</td><td align="center"></td></tr><tr><td align="center">00100110</td><td align="center">046</td><td align="center">38</td><td align="center">0x26</td><td align="center">&amp;</td><td align="center"></td></tr><tr><td align="center">00100111</td><td align="center">047</td><td align="center">39</td><td align="center">0x27</td><td align="center">‘</td><td align="center"></td></tr><tr><td align="center">00101000</td><td align="center">050</td><td align="center">40</td><td align="center">0x28</td><td align="center">(</td><td align="center"></td></tr><tr><td align="center">00101001</td><td align="center">051</td><td align="center">41</td><td align="center">0x29</td><td align="center">)</td><td align="center"></td></tr><tr><td align="center">00101010</td><td align="center">052</td><td align="center">42</td><td align="center">0x2A</td><td align="center">*</td><td align="center"></td></tr><tr><td align="center">00101011</td><td align="center">053</td><td align="center">43</td><td align="center">0x2B</td><td align="center">+</td><td align="center"></td></tr><tr><td align="center">00101100</td><td align="center">054</td><td align="center">44</td><td align="center">0x2C</td><td align="center">,</td><td align="center"></td></tr><tr><td align="center">00101101</td><td align="center">055</td><td align="center">45</td><td align="center">0x2D</td><td align="center">-</td><td align="center"></td></tr><tr><td align="center">00101110</td><td align="center">056</td><td align="center">46</td><td align="center">0x2E</td><td align="center">.</td><td align="center"></td></tr><tr><td align="center">00101111</td><td align="center">057</td><td align="center">47</td><td align="center">0x2F</td><td align="center">/</td><td align="center"></td></tr><tr><td align="center">00110000</td><td align="center">060</td><td align="center">48</td><td align="center">0x30</td><td align="center">0</td><td align="center"></td></tr><tr><td align="center">00110001</td><td align="center">061</td><td align="center">49</td><td align="center">0x31</td><td align="center">1</td><td align="center"></td></tr><tr><td align="center">00110010</td><td align="center">062</td><td align="center">50</td><td align="center">0x32</td><td align="center">2</td><td align="center"></td></tr><tr><td align="center">00110011</td><td align="center">063</td><td align="center">51</td><td align="center">0x33</td><td align="center">3</td><td align="center"></td></tr><tr><td align="center">00110100</td><td align="center">064</td><td align="center">52</td><td align="center">0x34</td><td align="center">4</td><td align="center"></td></tr><tr><td align="center">00110101</td><td align="center">065</td><td align="center">53</td><td align="center">0x35</td><td align="center">5</td><td align="center"></td></tr><tr><td align="center">00110110</td><td align="center">066</td><td align="center">54</td><td align="center">0x36</td><td align="center">6</td><td align="center"></td></tr><tr><td align="center">00110111</td><td align="center">067</td><td align="center">55</td><td align="center">0x37</td><td align="center">7</td><td align="center"></td></tr><tr><td align="center">00111000</td><td align="center">070</td><td align="center">56</td><td align="center">0x38</td><td align="center">8</td><td align="center"></td></tr><tr><td align="center">00111001</td><td align="center">071</td><td align="center">57</td><td align="center">0x39</td><td align="center">9</td><td align="center"></td></tr><tr><td align="center">00111010</td><td align="center">072</td><td align="center">58</td><td align="center">0x3A</td><td align="center">:</td><td align="center"></td></tr><tr><td align="center">00111011</td><td align="center">073</td><td align="center">59</td><td align="center">0x3B</td><td align="center">;</td><td align="center"></td></tr><tr><td align="center">00111100</td><td align="center">074</td><td align="center">60</td><td align="center">0x3C</td><td align="center">&lt;</td><td align="center"></td></tr><tr><td align="center">00111101</td><td align="center">075</td><td align="center">61</td><td align="center">0x3D</td><td align="center">=</td><td align="center"></td></tr><tr><td align="center">00111110</td><td align="center">076</td><td align="center">62</td><td align="center">0x3E</td><td align="center">&gt;</td><td align="center"></td></tr><tr><td align="center">00111111</td><td align="center">077</td><td align="center">63</td><td align="center">0x3F</td><td align="center">?</td><td align="center"></td></tr><tr><td align="center">01000000</td><td align="center">100</td><td align="center">64</td><td align="center">0x40</td><td align="center">@</td><td align="center"></td></tr><tr><td align="center">01000001</td><td align="center">101</td><td align="center">65</td><td align="center">0x41</td><td align="center">A</td><td align="center"></td></tr><tr><td align="center">01000010</td><td align="center">102</td><td align="center">66</td><td align="center">0x42</td><td align="center">B</td><td align="center"></td></tr><tr><td align="center">01000011</td><td align="center">103</td><td align="center">67</td><td align="center">0x43</td><td align="center">C</td><td align="center"></td></tr><tr><td align="center">01000100</td><td align="center">104</td><td align="center">68</td><td align="center">0x44</td><td align="center">D</td><td align="center"></td></tr><tr><td align="center">01000101</td><td align="center">105</td><td align="center">69</td><td align="center">0x45</td><td align="center">E</td><td align="center"></td></tr><tr><td align="center">01000110</td><td align="center">106</td><td align="center">70</td><td align="center">0x46</td><td align="center">F</td><td align="center"></td></tr><tr><td align="center">01000111</td><td align="center">107</td><td align="center">71</td><td align="center">0x47</td><td align="center">G</td><td align="center"></td></tr><tr><td align="center">01001000</td><td align="center">110</td><td align="center">72</td><td align="center">0x48</td><td align="center">H</td><td align="center"></td></tr><tr><td align="center">01001001</td><td align="center">111</td><td align="center">73</td><td align="center">0x49</td><td align="center">I</td><td align="center"></td></tr><tr><td align="center">01001010</td><td align="center">112</td><td align="center">74</td><td align="center">0x4A</td><td align="center">J</td><td align="center"></td></tr><tr><td align="center">01001011</td><td align="center">113</td><td align="center">75</td><td align="center">0x4B</td><td align="center">K</td><td align="center"></td></tr><tr><td align="center">01001100</td><td align="center">114</td><td align="center">76</td><td align="center">0x4C</td><td align="center">L</td><td align="center"></td></tr><tr><td align="center">01001101</td><td align="center">115</td><td align="center">77</td><td align="center">0x4D</td><td align="center">M</td><td align="center"></td></tr><tr><td align="center">01001110</td><td align="center">116</td><td align="center">78</td><td align="center">0x4E</td><td align="center">N</td><td align="center"></td></tr><tr><td align="center">01001111</td><td align="center">117</td><td align="center">79</td><td align="center">0x4F</td><td align="center">O</td><td align="center"></td></tr><tr><td align="center">01010000</td><td align="center">120</td><td align="center">80</td><td align="center">0x50</td><td align="center">P</td><td align="center"></td></tr><tr><td align="center">01010001</td><td align="center">121</td><td align="center">81</td><td align="center">0x51</td><td align="center">Q</td><td align="center"></td></tr><tr><td align="center">01010010</td><td align="center">122</td><td align="center">82</td><td align="center">0x52</td><td align="center">R</td><td align="center"></td></tr><tr><td align="center">01010011</td><td align="center">123</td><td align="center">83</td><td align="center">0x53</td><td align="center">S</td><td align="center"></td></tr><tr><td align="center">01010100</td><td align="center">124</td><td align="center">84</td><td align="center">0x54</td><td align="center">T</td><td align="center"></td></tr><tr><td align="center">01010101</td><td align="center">125</td><td align="center">85</td><td align="center">0x55</td><td align="center">U</td><td align="center"></td></tr><tr><td align="center">01010110</td><td align="center">126</td><td align="center">86</td><td align="center">0x56</td><td align="center">V</td><td align="center"></td></tr><tr><td align="center">01010111</td><td align="center">127</td><td align="center">87</td><td align="center">0x57</td><td align="center">W</td><td align="center"></td></tr><tr><td align="center">01011000</td><td align="center">130</td><td align="center">88</td><td align="center">0x58</td><td align="center">X</td><td align="center"></td></tr><tr><td align="center">01011001</td><td align="center">131</td><td align="center">89</td><td align="center">0x59</td><td align="center">Y</td><td align="center"></td></tr><tr><td align="center">01011010</td><td align="center">132</td><td align="center">90</td><td align="center">0x5A</td><td align="center">Z</td><td align="center"></td></tr><tr><td align="center">01011011</td><td align="center">133</td><td align="center">91</td><td align="center">0x5B</td><td align="center">[</td><td align="center"></td></tr><tr><td align="center">01011100</td><td align="center">134</td><td align="center">92</td><td align="center">0x5C</td><td align="center">\</td><td align="center"></td></tr><tr><td align="center">01011101</td><td align="center">135</td><td align="center">93</td><td align="center">0x5D</td><td align="center">]</td><td align="center"></td></tr><tr><td align="center">01011110</td><td align="center">136</td><td align="center">94</td><td align="center">0x5E</td><td align="center">^</td><td align="center"></td></tr><tr><td align="center">01011111</td><td align="center">137</td><td align="center">95</td><td align="center">0x5F</td><td align="center">_</td><td align="center"></td></tr><tr><td align="center">01100000</td><td align="center">140</td><td align="center">96</td><td align="center">0x60</td><td align="center">`</td><td align="center"></td></tr><tr><td align="center">01100001</td><td align="center">141</td><td align="center">97</td><td align="center">0x61</td><td align="center">a</td><td align="center"></td></tr><tr><td align="center">01100010</td><td align="center">142</td><td align="center">98</td><td align="center">0x62</td><td align="center">b</td><td align="center"></td></tr><tr><td align="center">01100011</td><td align="center">143</td><td align="center">99</td><td align="center">0x63</td><td align="center">c</td><td align="center"></td></tr><tr><td align="center">01100100</td><td align="center">144</td><td align="center">100</td><td align="center">0x64</td><td align="center">d</td><td align="center"></td></tr><tr><td align="center">01100101</td><td align="center">145</td><td align="center">101</td><td align="center">0x65</td><td align="center">e</td><td align="center"></td></tr><tr><td align="center">01100110</td><td align="center">146</td><td align="center">102</td><td align="center">0x66</td><td align="center">f</td><td align="center"></td></tr><tr><td align="center">01100111</td><td align="center">147</td><td align="center">103</td><td align="center">0x67</td><td align="center">g</td><td align="center"></td></tr><tr><td align="center">01101000</td><td align="center">150</td><td align="center">104</td><td align="center">0x68</td><td align="center">h</td><td align="center"></td></tr><tr><td align="center">1101001</td><td align="center">151</td><td align="center">105</td><td align="center">0x69</td><td align="center">i</td><td align="center"></td></tr><tr><td align="center">01101010</td><td align="center">152</td><td align="center">106</td><td align="center">0x6A</td><td align="center">j</td><td align="center"></td></tr><tr><td align="center">01101011</td><td align="center">153</td><td align="center">107</td><td align="center">0x6B</td><td align="center">k</td><td align="center"></td></tr><tr><td align="center">01101100</td><td align="center">154</td><td align="center">108</td><td align="center">0x6C</td><td align="center">l</td><td align="center"></td></tr><tr><td align="center">01101101</td><td align="center">155</td><td align="center">109</td><td align="center">0x6D</td><td align="center">m</td><td align="center"></td></tr><tr><td align="center">01101110</td><td align="center">156</td><td align="center">110</td><td align="center">0x6E</td><td align="center">n</td><td align="center"></td></tr><tr><td align="center">01101111</td><td align="center">157</td><td align="center">111</td><td align="center">0x6F</td><td align="center">o</td><td align="center"></td></tr><tr><td align="center">01110000</td><td align="center">160</td><td align="center">112</td><td align="center">0x70</td><td align="center">p</td><td align="center"></td></tr><tr><td align="center">01110001</td><td align="center">161</td><td align="center">113</td><td align="center">0x71</td><td align="center">q</td><td align="center"></td></tr><tr><td align="center">01110010</td><td align="center">162</td><td align="center">114</td><td align="center">0x72</td><td align="center">r</td><td align="center"></td></tr><tr><td align="center">01110011</td><td align="center">163</td><td align="center">115</td><td align="center">0x73</td><td align="center">s</td><td align="center"></td></tr><tr><td align="center">01110100</td><td align="center">164</td><td align="center">116</td><td align="center">0x74</td><td align="center">t</td><td align="center"></td></tr><tr><td align="center">01110101</td><td align="center">165</td><td align="center">117</td><td align="center">0x75</td><td align="center">u</td><td align="center"></td></tr><tr><td align="center">01110110</td><td align="center">166</td><td align="center">118</td><td align="center">0x76</td><td align="center">v</td><td align="center"></td></tr><tr><td align="center">01110111</td><td align="center">167</td><td align="center">119</td><td align="center">0x77</td><td align="center">w</td><td align="center"></td></tr><tr><td align="center">01111000</td><td align="center">170</td><td align="center">120</td><td align="center">0x78</td><td align="center">x</td><td align="center"></td></tr><tr><td align="center">01111001</td><td align="center">171</td><td align="center">121</td><td align="center">0x79</td><td align="center">y</td><td align="center"></td></tr><tr><td align="center">01111010</td><td align="center">172</td><td align="center">122</td><td align="center">0x7A</td><td align="center">z</td><td align="center"></td></tr><tr><td align="center">01111011</td><td align="center">173</td><td align="center">123</td><td align="center">0x7B</td><td align="center">{</td><td align="center"></td></tr><tr><td align="center">01111100</td><td align="center">174</td><td align="center">124</td><td align="center">0x7C</td><td align="center">|</td><td align="center"></td></tr><tr><td align="center">01111101</td><td align="center">175</td><td align="center">125</td><td align="center">0x7D</td><td align="center">}</td><td align="center"></td></tr><tr><td align="center">01111110</td><td align="center">176</td><td align="center">126</td><td align="center">0x7E</td><td align="center">~</td><td align="center"></td></tr><tr><td align="center">01111111</td><td align="center">177</td><td align="center">127</td><td align="center">0x7F</td><td align="center">DEL (delete)</td><td align="center">删除</td></tr></tbody></table><h1 id="常见ASCII码的大小规则"><a href="#常见ASCII码的大小规则" class="headerlink" title="常见ASCII码的大小规则"></a>常见ASCII码的大小规则</h1><p><strong>基本规则：[0 ~ 9] &lt; [A ~ Z] &lt; [a ~ z]</strong></p><ul><li>数字比字母要小。如 “7”&lt;“F”</li><li>数字0比数字9要小，并按0到9顺序递增。如’0’ &lt; ‘9’ </li><li>字母A比字母Z要小，并按A到Z顺序递增。如’A’ &lt; ‘Z’ </li><li>同个字母的大写字母比小写字母要小32。如’A’ &lt; ‘a’</li></ul><h1 id="应该记住的几个ASCII码值"><a href="#应该记住的几个ASCII码值" class="headerlink" title="应该记住的几个ASCII码值"></a>应该记住的几个ASCII码值</h1><ul><li><strong>‘A’：65</strong></li><li><strong>‘a’：97</strong></li><li><strong>‘0’：48</strong></li></ul><h1 id="应该记住的几个ASCII码范围"><a href="#应该记住的几个ASCII码范围" class="headerlink" title="应该记住的几个ASCII码范围"></a>应该记住的几个ASCII码范围</h1><ul><li>0～31及127(共33个)是控制字符或通信专用字符（均为不可显示字符）</li><li>32～126(共95个)是字符(32是空格）（均为可显示字符）<ul><li>48～57为0到9十个阿拉伯数字</li><li>65～90为26个大写英文字母</li><li>97～122号为26个小写英文字母</li><li>其余为一些标点符号、运算符号等</li></ul></li></ul><h1 id="编程记不住ASCII码值怎么办"><a href="#编程记不住ASCII码值怎么办" class="headerlink" title="编程记不住ASCII码值怎么办"></a>编程记不住ASCII码值怎么办</h1><p>通过一个简单案例来说明这个问题，案例是<a href="https://blog.csdn.net/weixin_43896318/article/details/104059930">洛谷P1914题</a>：</p><blockquote><p>蒟蒻虽然忘记密码，但他还记得密码是由一个字符串组成。密码是由原文字符串（由不超过 50 个小写字母组成）中每个字母向后移动 nn 位形成的。z 的下一个字母是 a，如此循环。他现在找到了移动前的原文字符串及 nn，请你求出密码。</p></blockquote><p>Java实现代码是这样的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> password_array <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> password_array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            password_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>password_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>password_array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你明白了吗？</p><h1 id="键盘按键对应的keyCode"><a href="#键盘按键对应的keyCode" class="headerlink" title="键盘按键对应的keyCode"></a>键盘按键对应的keyCode</h1><p>键盘按键也有其对应的ASCII码，而在前端编程中，这些keyCode也是需要了解的知识。</p><h2 id="数字键"><a href="#数字键" class="headerlink" title="数字键"></a>数字键</h2><table><thead><tr><th align="center">KeyCode</th><th align="center">按键</th></tr></thead><tbody><tr><td align="center">48</td><td align="center">0</td></tr><tr><td align="center">49</td><td align="center">1</td></tr><tr><td align="center">50</td><td align="center">2</td></tr><tr><td align="center">51</td><td align="center">3</td></tr><tr><td align="center">52</td><td align="center">4</td></tr><tr><td align="center">53</td><td align="center">5</td></tr><tr><td align="center">54</td><td align="center">6</td></tr><tr><td align="center">55</td><td align="center">7</td></tr><tr><td align="center">56</td><td align="center">8</td></tr><tr><td align="center">57</td><td align="center">9</td></tr></tbody></table><h2 id="字母键"><a href="#字母键" class="headerlink" title="字母键"></a>字母键</h2><table><thead><tr><th align="center">KeyCode</th><th align="center">按键</th></tr></thead><tbody><tr><td align="center">65</td><td align="center">A</td></tr><tr><td align="center">66</td><td align="center">B</td></tr><tr><td align="center">67</td><td align="center">C</td></tr><tr><td align="center">68</td><td align="center">D</td></tr><tr><td align="center">69</td><td align="center">E</td></tr><tr><td align="center">70</td><td align="center">F</td></tr><tr><td align="center">71</td><td align="center">G</td></tr><tr><td align="center">72</td><td align="center">H</td></tr><tr><td align="center">73</td><td align="center">I</td></tr><tr><td align="center">74</td><td align="center">J</td></tr><tr><td align="center">75</td><td align="center">K</td></tr><tr><td align="center">76</td><td align="center">L</td></tr><tr><td align="center">77</td><td align="center">M</td></tr><tr><td align="center">78</td><td align="center">N</td></tr><tr><td align="center">79</td><td align="center">O</td></tr><tr><td align="center">80</td><td align="center">P</td></tr><tr><td align="center">81</td><td align="center">Q</td></tr><tr><td align="center">82</td><td align="center">R</td></tr><tr><td align="center">83</td><td align="center">S</td></tr><tr><td align="center">84</td><td align="center">T</td></tr><tr><td align="center">85</td><td align="center">U</td></tr><tr><td align="center">86</td><td align="center">V</td></tr><tr><td align="center">87</td><td align="center">W</td></tr><tr><td align="center">88</td><td align="center">X</td></tr><tr><td align="center">89</td><td align="center">Y</td></tr><tr><td align="center">90</td><td align="center">Z</td></tr></tbody></table><h2 id="小键盘按键"><a href="#小键盘按键" class="headerlink" title="小键盘按键"></a>小键盘按键</h2><table><thead><tr><th align="center">KeyCode</th><th align="center">按键</th></tr></thead><tbody><tr><td align="center">96</td><td align="center">0</td></tr><tr><td align="center">97</td><td align="center">1</td></tr><tr><td align="center">98</td><td align="center">2</td></tr><tr><td align="center">99</td><td align="center">3</td></tr><tr><td align="center">100</td><td align="center">4</td></tr><tr><td align="center">101</td><td align="center">5</td></tr><tr><td align="center">102</td><td align="center">6</td></tr><tr><td align="center">103</td><td align="center">7</td></tr><tr><td align="center">104</td><td align="center">8</td></tr><tr><td align="center">105</td><td align="center">9</td></tr><tr><td align="center">106</td><td align="center">*</td></tr><tr><td align="center">107</td><td align="center">+</td></tr><tr><td align="center">108</td><td align="center">Enter</td></tr><tr><td align="center">109</td><td align="center">-</td></tr><tr><td align="center">110</td><td align="center">.</td></tr><tr><td align="center">111</td><td align="center">/</td></tr></tbody></table><h2 id="功能键"><a href="#功能键" class="headerlink" title="功能键"></a>功能键</h2><table><thead><tr><th align="center">KeyCode</th><th align="center">按键</th></tr></thead><tbody><tr><td align="center">112</td><td align="center">F1</td></tr><tr><td align="center">113</td><td align="center">F2</td></tr><tr><td align="center">114</td><td align="center">F3</td></tr><tr><td align="center">115</td><td align="center">F4</td></tr><tr><td align="center">116</td><td align="center">F5</td></tr><tr><td align="center">117</td><td align="center">F6</td></tr><tr><td align="center">118</td><td align="center">F7</td></tr><tr><td align="center">119</td><td align="center">F8</td></tr><tr><td align="center">120</td><td align="center">F9</td></tr><tr><td align="center">121</td><td align="center">F10</td></tr><tr><td align="center">122</td><td align="center">F11</td></tr><tr><td align="center">123</td><td align="center">F12</td></tr></tbody></table><h2 id="控制键"><a href="#控制键" class="headerlink" title="控制键"></a>控制键</h2><table><thead><tr><th align="center">KeyCode</th><th align="center">按键</th></tr></thead><tbody><tr><td align="center">8</td><td align="center">BackSpace</td></tr><tr><td align="center">9</td><td align="center">Tab</td></tr><tr><td align="center">12</td><td align="center">Clear</td></tr><tr><td align="center">13</td><td align="center">Enter</td></tr><tr><td align="center">16</td><td align="center">Shift</td></tr><tr><td align="center">17</td><td align="center">Control</td></tr><tr><td align="center">18</td><td align="center">Alt</td></tr><tr><td align="center">20</td><td align="center">Cape Lock</td></tr><tr><td align="center">27</td><td align="center">Esc</td></tr><tr><td align="center">32</td><td align="center">Spacebar</td></tr><tr><td align="center">33</td><td align="center">Page Up</td></tr><tr><td align="center">34</td><td align="center">Page Down</td></tr><tr><td align="center">35</td><td align="center">End</td></tr><tr><td align="center">36</td><td align="center">Home</td></tr><tr><td align="center">37</td><td align="center">Left Arrow</td></tr><tr><td align="center">38</td><td align="center">Up Arrow</td></tr><tr><td align="center">39</td><td align="center">Right Arrow</td></tr><tr><td align="center">40</td><td align="center">Dw Arrow</td></tr><tr><td align="center">45</td><td align="center">Insert</td></tr><tr><td align="center">46</td><td align="center">Num Lock</td></tr><tr><td align="center">144</td><td align="center">Num Lock</td></tr><tr><td align="center">186</td><td align="center">;:</td></tr><tr><td align="center">187</td><td align="center">=+</td></tr><tr><td align="center">188</td><td align="center">,&lt;</td></tr><tr><td align="center">189</td><td align="center">-_</td></tr><tr><td align="center">190</td><td align="center">.&gt;</td></tr><tr><td align="center">191</td><td align="center">/?</td></tr><tr><td align="center">192</td><td align="center">`~</td></tr><tr><td align="center">219</td><td align="center">[{</td></tr><tr><td align="center">220</td><td align="center">|</td></tr><tr><td align="center">221</td><td align="center">]}</td></tr><tr><td align="center">222</td><td align="center">‘“</td></tr></tbody></table><p>多媒体键：</p><table><thead><tr><th align="center">KeyCode</th><th align="center">按键</th></tr></thead><tbody><tr><td align="center">170</td><td align="center">搜索</td></tr><tr><td align="center">171</td><td align="center">收藏</td></tr><tr><td align="center">172</td><td align="center">浏览器</td></tr><tr><td align="center">173</td><td align="center">静音</td></tr><tr><td align="center">174</td><td align="center">音量减</td></tr><tr><td align="center">115</td><td align="center">音量加</td></tr><tr><td align="center">179</td><td align="center">停止</td></tr><tr><td align="center">180</td><td align="center">邮件</td></tr></tbody></table><h1 id="java-util-regex-ASCII"><a href="#java-util-regex-ASCII" class="headerlink" title="java.util.regex.ASCII"></a>java.util.regex.ASCII</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex</span><span class="token punctuation">;</span><span class="token comment">/** * Utility class that implements the standard C ctype functionality. * * @author Hong Zhang */</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ASCII</span> <span class="token punctuation">{</span><span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个不能被继承的、仅有包访问权限的类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UPPER   <span class="token operator">=</span> <span class="token number">0x00000100</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LOWER   <span class="token operator">=</span> <span class="token number">0x00000200</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DIGIT   <span class="token operator">=</span> <span class="token number">0x00000400</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SPACE   <span class="token operator">=</span> <span class="token number">0x00000800</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PUNCT   <span class="token operator">=</span> <span class="token number">0x00001000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CNTRL   <span class="token operator">=</span> <span class="token number">0x00002000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BLANK   <span class="token operator">=</span> <span class="token number">0x00004000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> HEX     <span class="token operator">=</span> <span class="token number">0x00008000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNDER   <span class="token operator">=</span> <span class="token number">0x00010000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ASCII   <span class="token operator">=</span> <span class="token number">0x0000FF00</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ALPHA   <span class="token operator">=</span> <span class="token punctuation">(</span>UPPER<span class="token operator">|</span>LOWER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ALNUM   <span class="token operator">=</span> <span class="token punctuation">(</span>UPPER<span class="token operator">|</span>LOWER<span class="token operator">|</span>DIGIT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> GRAPH   <span class="token operator">=</span> <span class="token punctuation">(</span>PUNCT<span class="token operator">|</span>UPPER<span class="token operator">|</span>LOWER<span class="token operator">|</span>DIGIT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WORD    <span class="token operator">=</span> <span class="token punctuation">(</span>UPPER<span class="token operator">|</span>LOWER<span class="token operator">|</span>UNDER<span class="token operator">|</span>DIGIT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> XDIGIT  <span class="token operator">=</span> <span class="token punctuation">(</span>HEX<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ctype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 00 (NUL) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 01 (SOH) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 02 (STX) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 03 (ETX) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 04 (EOT) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 05 (ENQ) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 06 (ACK) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 07 (BEL) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 08 (BS)  */</span>    SPACE<span class="token operator">+</span>CNTRL<span class="token operator">+</span>BLANK<span class="token punctuation">,</span>      <span class="token comment">/* 09 (HT)  */</span>    SPACE<span class="token operator">+</span>CNTRL<span class="token punctuation">,</span>            <span class="token comment">/* 0A (LF)  */</span>    SPACE<span class="token operator">+</span>CNTRL<span class="token punctuation">,</span>            <span class="token comment">/* 0B (VT)  */</span>    SPACE<span class="token operator">+</span>CNTRL<span class="token punctuation">,</span>            <span class="token comment">/* 0C (FF)  */</span>    SPACE<span class="token operator">+</span>CNTRL<span class="token punctuation">,</span>            <span class="token comment">/* 0D (CR)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 0E (SI)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 0F (SO)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 10 (DLE) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 11 (DC1) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 12 (DC2) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 13 (DC3) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 14 (DC4) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 15 (NAK) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 16 (SYN) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 17 (ETB) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 18 (CAN) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 19 (EM)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 1A (SUB) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 1B (ESC) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 1C (FS)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 1D (GS)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 1E (RS)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 1F (US)  */</span>    SPACE<span class="token operator">+</span>BLANK<span class="token punctuation">,</span>            <span class="token comment">/* 20 SPACE */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 21 !     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 22 "     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 23 #     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 24 $     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 25 %     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 26 &amp;     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 27 '     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 28 (     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 29 )     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 2A *     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 2B +     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 2C ,     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 2D -     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 2E .     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 2F /     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span>            <span class="token comment">/* 30 0     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>            <span class="token comment">/* 31 1     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>            <span class="token comment">/* 32 2     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>            <span class="token comment">/* 33 3     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span>            <span class="token comment">/* 34 4     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span>            <span class="token comment">/* 35 5     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">,</span>            <span class="token comment">/* 36 6     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span>            <span class="token comment">/* 37 7     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>            <span class="token comment">/* 38 8     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">,</span>            <span class="token comment">/* 39 9     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 3A :     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 3B ;     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 3C &lt;     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 3D =     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 3E &gt;     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 3F ?     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 40 @     */</span>    UPPER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span>           <span class="token comment">/* 41 A     */</span>    UPPER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">,</span>           <span class="token comment">/* 42 B     */</span>    UPPER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">,</span>           <span class="token comment">/* 43 C     */</span>    UPPER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">,</span>           <span class="token comment">/* 44 D     */</span>    UPPER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">14</span><span class="token punctuation">,</span>           <span class="token comment">/* 45 E     */</span>    UPPER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">,</span>           <span class="token comment">/* 46 F     */</span>    UPPER<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span>               <span class="token comment">/* 47 G     */</span>    UPPER<span class="token operator">+</span><span class="token number">17</span><span class="token punctuation">,</span>               <span class="token comment">/* 48 H     */</span>    UPPER<span class="token operator">+</span><span class="token number">18</span><span class="token punctuation">,</span>               <span class="token comment">/* 49 I     */</span>    UPPER<span class="token operator">+</span><span class="token number">19</span><span class="token punctuation">,</span>               <span class="token comment">/* 4A J     */</span>    UPPER<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">,</span>               <span class="token comment">/* 4B K     */</span>    UPPER<span class="token operator">+</span><span class="token number">21</span><span class="token punctuation">,</span>               <span class="token comment">/* 4C L     */</span>    UPPER<span class="token operator">+</span><span class="token number">22</span><span class="token punctuation">,</span>               <span class="token comment">/* 4D M     */</span>    UPPER<span class="token operator">+</span><span class="token number">23</span><span class="token punctuation">,</span>               <span class="token comment">/* 4E N     */</span>    UPPER<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">,</span>               <span class="token comment">/* 4F O     */</span>    UPPER<span class="token operator">+</span><span class="token number">25</span><span class="token punctuation">,</span>               <span class="token comment">/* 50 P     */</span>    UPPER<span class="token operator">+</span><span class="token number">26</span><span class="token punctuation">,</span>               <span class="token comment">/* 51 Q     */</span>    UPPER<span class="token operator">+</span><span class="token number">27</span><span class="token punctuation">,</span>               <span class="token comment">/* 52 R     */</span>    UPPER<span class="token operator">+</span><span class="token number">28</span><span class="token punctuation">,</span>               <span class="token comment">/* 53 S     */</span>    UPPER<span class="token operator">+</span><span class="token number">29</span><span class="token punctuation">,</span>               <span class="token comment">/* 54 T     */</span>    UPPER<span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">,</span>               <span class="token comment">/* 55 U     */</span>    UPPER<span class="token operator">+</span><span class="token number">31</span><span class="token punctuation">,</span>               <span class="token comment">/* 56 V     */</span>    UPPER<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">,</span>               <span class="token comment">/* 57 W     */</span>    UPPER<span class="token operator">+</span><span class="token number">33</span><span class="token punctuation">,</span>               <span class="token comment">/* 58 X     */</span>    UPPER<span class="token operator">+</span><span class="token number">34</span><span class="token punctuation">,</span>               <span class="token comment">/* 59 Y     */</span>    UPPER<span class="token operator">+</span><span class="token number">35</span><span class="token punctuation">,</span>               <span class="token comment">/* 5A Z     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 5B [     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 5C \     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 5D ]     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 5E ^     */</span>    PUNCT<span class="token operator">|</span>UNDER<span class="token punctuation">,</span>            <span class="token comment">/* 5F _     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 60 `     */</span>    LOWER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span>           <span class="token comment">/* 61 a     */</span>    LOWER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">,</span>           <span class="token comment">/* 62 b     */</span>    LOWER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">,</span>           <span class="token comment">/* 63 c     */</span>    LOWER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">,</span>           <span class="token comment">/* 64 d     */</span>    LOWER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">14</span><span class="token punctuation">,</span>           <span class="token comment">/* 65 e     */</span>    LOWER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">,</span>           <span class="token comment">/* 66 f     */</span>    LOWER<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span>               <span class="token comment">/* 67 g     */</span>    LOWER<span class="token operator">+</span><span class="token number">17</span><span class="token punctuation">,</span>               <span class="token comment">/* 68 h     */</span>    LOWER<span class="token operator">+</span><span class="token number">18</span><span class="token punctuation">,</span>               <span class="token comment">/* 69 i     */</span>    LOWER<span class="token operator">+</span><span class="token number">19</span><span class="token punctuation">,</span>               <span class="token comment">/* 6A j     */</span>    LOWER<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">,</span>               <span class="token comment">/* 6B k     */</span>    LOWER<span class="token operator">+</span><span class="token number">21</span><span class="token punctuation">,</span>               <span class="token comment">/* 6C l     */</span>    LOWER<span class="token operator">+</span><span class="token number">22</span><span class="token punctuation">,</span>               <span class="token comment">/* 6D m     */</span>    LOWER<span class="token operator">+</span><span class="token number">23</span><span class="token punctuation">,</span>               <span class="token comment">/* 6E n     */</span>    LOWER<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">,</span>               <span class="token comment">/* 6F o     */</span>    LOWER<span class="token operator">+</span><span class="token number">25</span><span class="token punctuation">,</span>               <span class="token comment">/* 70 p     */</span>    LOWER<span class="token operator">+</span><span class="token number">26</span><span class="token punctuation">,</span>               <span class="token comment">/* 71 q     */</span>    LOWER<span class="token operator">+</span><span class="token number">27</span><span class="token punctuation">,</span>               <span class="token comment">/* 72 r     */</span>    LOWER<span class="token operator">+</span><span class="token number">28</span><span class="token punctuation">,</span>               <span class="token comment">/* 73 s     */</span>    LOWER<span class="token operator">+</span><span class="token number">29</span><span class="token punctuation">,</span>               <span class="token comment">/* 74 t     */</span>    LOWER<span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">,</span>               <span class="token comment">/* 75 u     */</span>    LOWER<span class="token operator">+</span><span class="token number">31</span><span class="token punctuation">,</span>               <span class="token comment">/* 76 v     */</span>    LOWER<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">,</span>               <span class="token comment">/* 77 w     */</span>    LOWER<span class="token operator">+</span><span class="token number">33</span><span class="token punctuation">,</span>               <span class="token comment">/* 78 x     */</span>    LOWER<span class="token operator">+</span><span class="token number">34</span><span class="token punctuation">,</span>               <span class="token comment">/* 79 y     */</span>    LOWER<span class="token operator">+</span><span class="token number">35</span><span class="token punctuation">,</span>               <span class="token comment">/* 7A z     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 7B {     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 7C |     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 7D }     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 7E ~     */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 7F (DEL) */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>index</th><th>value</th></tr></thead><tbody><tr><td>0 (00)</td><td>0x00002000</td></tr><tr><td>1 (01)</td><td>0x00002000</td></tr><tr><td>2 (02)</td><td>0x00002000</td></tr><tr><td>3 (03)</td><td>0x00002000</td></tr><tr><td>4 (04)</td><td>0x00002000</td></tr><tr><td>5 (05)</td><td>0x00002000</td></tr><tr><td>6 (06)</td><td>0x00002000</td></tr><tr><td>7 (07)</td><td>0x00002000</td></tr><tr><td>8 (08)</td><td>0x00002000</td></tr><tr><td>9 (09)</td><td>0x00006800</td></tr><tr><td>10 (0A)</td><td>0x00002800</td></tr><tr><td>11 (0B)</td><td>0x00002800</td></tr><tr><td>12 (0C)</td><td>0x00002800</td></tr><tr><td>13 (0D)</td><td>0x00002800</td></tr><tr><td>14 (0E)</td><td>0x00002000</td></tr><tr><td>15 (0F)</td><td>0x00002000</td></tr><tr><td>16 (10)</td><td>0x00002000</td></tr><tr><td>17 (11)</td><td>0x00002000</td></tr><tr><td>18 (12)</td><td>0x00002000</td></tr><tr><td>19 (13)</td><td>0x00002000</td></tr><tr><td>20 (14)</td><td>0x00002000</td></tr><tr><td>21 (15)</td><td>0x00002000</td></tr><tr><td>22 (16)</td><td>0x00002000</td></tr><tr><td>23 (17)</td><td>0x00002000</td></tr><tr><td>24 (18)</td><td>0x00002000</td></tr><tr><td>25 (19)</td><td>0x00002000</td></tr><tr><td>26 (1A)</td><td>0x00002000</td></tr><tr><td>27 (1B)</td><td>0x00002000</td></tr><tr><td>28 (1C)</td><td>0x00002000</td></tr><tr><td>29 (1D)</td><td>0x00002000</td></tr><tr><td>30 (1E)</td><td>0x00002000</td></tr><tr><td>31 (1F)</td><td>0x00002000</td></tr><tr><td>32 (20)</td><td>0x00004800</td></tr><tr><td>33 (21)</td><td>0x00001000</td></tr><tr><td>34 (22)</td><td>0x00001000</td></tr><tr><td>35 (23)</td><td>0x00001000</td></tr><tr><td>36 (24)</td><td>0x00001000</td></tr><tr><td>37 (25)</td><td>0x00001000</td></tr><tr><td>38 (26)</td><td>0x00001000</td></tr><tr><td>39 (27)</td><td>0x00001000</td></tr><tr><td>40 (28)</td><td>0x00001000</td></tr><tr><td>41 (29)</td><td>0x00001000</td></tr><tr><td>42 (2A)</td><td>0x00001000</td></tr><tr><td>43 (2B)</td><td>0x00001000</td></tr><tr><td>44 (2C)</td><td>0x00001000</td></tr><tr><td>45 (2D)</td><td>0x00001000</td></tr><tr><td>46 (2E)</td><td>0x00001000</td></tr><tr><td>47 (2F)</td><td>0x00001000</td></tr><tr><td>48 (30)</td><td>0x00008400</td></tr><tr><td>49 (31)</td><td>0x00008401</td></tr><tr><td>50 (32)</td><td>0x00008402</td></tr><tr><td>51 (33)</td><td>0x00008403</td></tr><tr><td>52 (34)</td><td>0x00008404</td></tr><tr><td>53 (35)</td><td>0x00008405</td></tr><tr><td>54 (36)</td><td>0x00008406</td></tr><tr><td>55 (37)</td><td>0x00008407</td></tr><tr><td>56 (38)</td><td>0x00008408</td></tr><tr><td>57 (39)</td><td>0x00008409</td></tr><tr><td>58 (3A)</td><td>0x00001000</td></tr><tr><td>59 (3B)</td><td>0x00001000</td></tr><tr><td>60 (3C)</td><td>0x00001000</td></tr><tr><td>61 (3D)</td><td>0x00001000</td></tr><tr><td>62 (3E)</td><td>0x00001000</td></tr><tr><td>63 (3F)</td><td>0x00001000</td></tr><tr><td>64 (40)</td><td>0x00001000</td></tr><tr><td>65 (41)</td><td>0x0000810A</td></tr><tr><td>66 (42)</td><td>0x0000810B</td></tr><tr><td>67 (43)</td><td>0x0000810C</td></tr><tr><td>68 (44)</td><td>0x0000810D</td></tr><tr><td>69 (45)</td><td>0x0000810E</td></tr><tr><td>70 (46)</td><td>0x0000810F</td></tr><tr><td>71 (47)</td><td>0x00000110</td></tr><tr><td>72 (48)</td><td>0x00000111</td></tr><tr><td>73 (49)</td><td>0x00000112</td></tr><tr><td>74 (4A)</td><td>0x00000113</td></tr><tr><td>75 (4B)</td><td>0x00000114</td></tr><tr><td>76 (4C)</td><td>0x00000115</td></tr><tr><td>77 (4D)</td><td>0x00000116</td></tr><tr><td>78 (4E)</td><td>0x00000117</td></tr><tr><td>79 (4F)</td><td>0x00000118</td></tr><tr><td>80 (50)</td><td>0x00000119</td></tr><tr><td>81 (51)</td><td>0x0000011A</td></tr><tr><td>82 (52)</td><td>0x0000011B</td></tr><tr><td>83 (53)</td><td>0x0000011C</td></tr><tr><td>84 (54)</td><td>0x0000011D</td></tr><tr><td>85 (55)</td><td>0x0000011E</td></tr><tr><td>86 (56)</td><td>0x0000011F</td></tr><tr><td>87 (57)</td><td>0x00000120</td></tr><tr><td>88 (58)</td><td>0x00000121</td></tr><tr><td>89 (59)</td><td>0x00000122</td></tr><tr><td>90 (5A)</td><td>0x00000123</td></tr><tr><td>91 (5B)</td><td>0x00001000</td></tr><tr><td>92 (5C)</td><td>0x00001000</td></tr><tr><td>93 (5D)</td><td>0x00001000</td></tr><tr><td>94 (5E)</td><td>0x00001000</td></tr><tr><td>95 (5F)</td><td>0x00001100</td></tr><tr><td>96 (60)</td><td>0x00001000</td></tr><tr><td>97 (61)</td><td>0x0000820A</td></tr><tr><td>98 (62)</td><td>0x0000820B</td></tr><tr><td>99 (63)</td><td>0x0000820C</td></tr><tr><td>100 (64)</td><td>0x0000820D</td></tr><tr><td>101 (65)</td><td>0x0000820E</td></tr><tr><td>102 (66)</td><td>0x0000820F</td></tr><tr><td>103 (67)</td><td>0x00000210</td></tr><tr><td>104 (68)</td><td>0x00000211</td></tr><tr><td>105 (69)</td><td>0x00000212</td></tr><tr><td>106 (6A)</td><td>0x00000213</td></tr><tr><td>107 (6B)</td><td>0x00000214</td></tr><tr><td>108 (6C)</td><td>0x00000215</td></tr><tr><td>109 (6D)</td><td>0x00000216</td></tr><tr><td>110 (6E)</td><td>0x00000217</td></tr><tr><td>111 (6F)</td><td>0x00000218</td></tr><tr><td>112 (70)</td><td>0x00000219</td></tr><tr><td>113 (71)</td><td>0x0000021A</td></tr><tr><td>114 (72)</td><td>0x0000021B</td></tr><tr><td>115 (73)</td><td>0x0000021C</td></tr><tr><td>116 (74)</td><td>0x0000021D</td></tr><tr><td>117 (75)</td><td>0x0000021E</td></tr><tr><td>118 (76)</td><td>0x0000021F</td></tr><tr><td>119 (77)</td><td>0x00000220</td></tr><tr><td>120 (78)</td><td>0x00000221</td></tr><tr><td>121 (79)</td><td>0x00000222</td></tr><tr><td>122 (7A)</td><td>0x00000223</td></tr><tr><td>123 (7B)</td><td>0x00001000</td></tr><tr><td>124 (7C)</td><td>0x00001000</td></tr><tr><td>125 (7D)</td><td>0x00001000</td></tr><tr><td>126 (7E)</td><td>0x00001000</td></tr><tr><td>127 (7F)</td><td>0x00002000</td></tr></tbody></table><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><ol><li>最高位的说明：ASCII码128个，用<strong>7位</strong>二进制数可表示，第8位（最高位）是<strong>奇偶校验位</strong>，用于纠错。</li><li>Windows系统上能运行的Python程序，传到Linux系统上就无法运行，<code>python main.py</code>报错：<font color="red">SyntaxError: Non-ASCII character ‘\xe8’ in file main.py on line 7, but no encoding declared; see <a href="http://python.org/dev/peps/pep-0263/">http://python.org/dev/peps/pep-0263/</a> for details</font>。解决方法是：在文件头添加一行：<code># -*- coding: utf-8 -*-</code>，即可正常运行。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASCII </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的着色问题</title>
      <link href="/2019/10/13/suan-fa-fen-xi-yu-she-ji/tu-de-zhao-se-wen-ti/"/>
      <url>/2019/10/13/suan-fa-fen-xi-yu-she-ji/tu-de-zhao-se-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="图的字典表示"><a href="#图的字典表示" class="headerlink" title="图的字典表示"></a>图的字典表示</h1><p>下面的字典代表一个图：<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%9B%BE%E7%9A%84%E7%9D%80%E8%89%B2%E9%97%AE%E9%A2%98/1.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'G'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'H'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字典代表图的顶点和边。字符串表示图的顶点，B就是’B’。<br>每个顶点都是图graph的一个键。每一行对应一个键值对，值就是顶点连接的边的列表。<br>每条边都可以简单地用其目标顶点表示。<br>当然，我们这里构造的是无向图。</p><h1 id="图的着色算法及实现代码"><a href="#图的着色算法及实现代码" class="headerlink" title="图的着色算法及实现代码"></a>图的着色算法及实现代码</h1><p>如果是二分图则遵守“邻接约束”，或者明确其不是二分图。<br>一种颜色对应集合U，另一种颜色对应集合V。<br>下面是一种运用了“深度优先遍历”技术的实现算法的描述：</p><ol><li>color = 阴影， vertex = 起始顶点w</li><li>如果w尚未着色，用color对w进行着色</li><li>如果w已用不同color的颜色进行着色，则不是二分图。返回False</li><li>如果w已经正确着色，则返回True和其未作改动的着色结果</li><li>反转color的值，阴影变为网格线，网格线则变为阴影</li><li>对w的所有相邻顶点v递归调用过程，参数是v和color，也就是让w=v并跳转到第2步。只要有一次递归返回False，就返回False</li><li>当前图为二分图，返回True和着色结果</li></ol><p>下面是Python的具体实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bipartiteGraphColor</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">,</span> coloring<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> start <span class="token keyword">not</span> <span class="token keyword">in</span> graph<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> start <span class="token keyword">not</span> <span class="token keyword">in</span> coloring<span class="token punctuation">:</span>        coloring<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> color    <span class="token keyword">elif</span> coloring<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">!=</span> color<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token punctuation">,</span> coloring    <span class="token keyword">if</span> color <span class="token operator">==</span> <span class="token string">'Sha'</span><span class="token punctuation">:</span>        newcolor <span class="token operator">=</span> <span class="token string">'Hat'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        newcolor <span class="token operator">=</span> <span class="token string">'Sha'</span>    <span class="token keyword">for</span> vertex <span class="token keyword">in</span> graph<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">:</span>        val<span class="token punctuation">,</span> coloring <span class="token operator">=</span> bipartiteGraphColor<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> vertex<span class="token punctuation">,</span> coloring<span class="token punctuation">,</span> newcolor<span class="token punctuation">)</span>        <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token punctuation">,</span> coloring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span>bipartiteGraphColor<span class="token punctuation">(</span>gra3<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'Sha'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>bipartiteGraphColor<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'Sha'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>bipartiteGraphColor<span class="token punctuation">(</span>graph2<span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'Sha'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>bipartiteGraphColor<span class="token punctuation">(</span>grap<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'Sha'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token string">'Sha'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token string">'Hat'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token string">'Sha'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token string">'Hat'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token string">'Hat'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">:</span> <span class="token string">'Sha'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">:</span> <span class="token string">'Sha'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token string">'Sha'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token string">'Sha'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token string">'Hat'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token string">'Sha'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token string">'Hat'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token string">'Hat'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token string">'Sha'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">:</span> <span class="token string">'Sha'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">:</span> <span class="token string">'Sha'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token string">'Sha'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token string">'Hat'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token string">'Sha'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token string">'Hat'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序存储结构的搜索算法</title>
      <link href="/2019/10/11/suan-fa-fen-xi-yu-she-ji/shun-xu-cun-chu-jie-gou-de-sou-suo-suan-fa/"/>
      <url>/2019/10/11/suan-fa-fen-xi-yu-she-ji/shun-xu-cun-chu-jie-gou-de-sou-suo-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="顺序查找和二分查找"><a href="#顺序查找和二分查找" class="headerlink" title="顺序查找和二分查找"></a>顺序查找和二分查找</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinearSearch</span> <span class="token punctuation">{</span>        <span class="token comment">/**     * 定义查找记录集合     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">;</span>        <span class="token comment">/**     * 查找集合元素个数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LinearSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>record <span class="token operator">=</span> record<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">seqSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//从数组高端开始比较</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token comment">//哨兵值，放在查找的尽头，省却判断越界的步骤，节省时间</span>        r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 二分查找非递归实现     * 待查集合储存在r[0]~r[length-1]     * @param k     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binSearch1</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//初始查找区间[0, n-1]</span>        <span class="token keyword">int</span> mid<span class="token punctuation">,</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//确保区间存在</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mid <span class="token operator">=</span> high <span class="token operator">+</span> <span class="token punctuation">(</span>low <span class="token operator">-</span> high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> record<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> record<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//查找成功返回元素序号</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//查找失败</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 二分查找递归实现     * @param low     * @param high     * @param k     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binSearch2</span><span class="token punctuation">(</span><span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&gt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//递归边界条件</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mid <span class="token operator">=</span> high <span class="token operator">+</span> <span class="token punctuation">(</span>low <span class="token operator">-</span> high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> record<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">binSearch2</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> record<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">binSearch2</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//查找成功，返回元素序号</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="哨兵值"><a href="#哨兵值" class="headerlink" title="哨兵值"></a>哨兵值</h1><p>注意：顺序查找用到了 ==<strong>“哨兵”</strong>==。哨兵就是待查值，存放在查找方向的尽头处，在查找过程中的每一次比较后，不用判断查找位置是否越界，从而提高了查找速度。</p><p>实际上，一切为简化边界条件而引入的附加结点（或记录）可以称之为哨兵，比如：</p><ul><li>单链表的头结点</li><li>中缀表达式计算求值用<code>#</code>作为表达式定界符</li><li>字符串用<code>'\0'</code>作为结束定界符</li><li>迷宫增加的边界墙</li><li>顺序查找将待查元素放在查找尽头</li><li>……</li></ul><h1 id="时间复杂度总结"><a href="#时间复杂度总结" class="headerlink" title="时间复杂度总结"></a>时间复杂度总结</h1><p>顺序查找时间效率$O(n)$，二分查找效率$O(\log_{2}{n})$。<br>相比较而言，二分查找比较简单，但是需要有序（经过排序维护）。</p><h1 id="顺序查找的改进-分块查找"><a href="#顺序查找的改进-分块查找" class="headerlink" title="顺序查找的改进-分块查找"></a>顺序查找的改进-分块查找</h1><p>分块查找又称为索引顺序查找，查找性能介于顺序查找和二分查找之间。<br>它的使用条件是将线性表进行分块，并使其分块有序。<br>所谓分块有序是指将线性表划分为若干个块，块内不要求有序（可以无序），但是块间有序（某一个指定方向上块的整体中最小元素大于另一个块整体中最大元素）……以此类推。<br>这种方式需要建立一个索引表，每个块对应一个索引项，各索引项按照关键码进行有序排序，索引项一般包含每块的最大关键码以及块首的地址：<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/1.png"></p><p>分块查找需要分两步进行。<br>第一步在索引表中确定待查关键码所在的块；<br>第二步在相应块中查找关键待查码。</p><p>由于索引表是按照关键码有序排列，可以使用顺序查找也可以使用二分查找；<br>块内查找时，由于块内无序，只能使用顺序查找。</p><p>$n$个元素分$m$块，每个块有t个记录，$n = m × t$ 。<br>设$Lb$为查找索引表确定关系所在块的平均查找长度，$Lw$为块内查找关键码的平均查找长度，则分块查找的平均查找长度为：<br>$ASL = Lb + Lw$</p><p>若采用顺序查找对索引表进行查找，则分块查找的平均查找长度为：<br>$ASL = Lb + Lw = \frac{m+1}{2}+\frac{t+1}{2}=\frac{1}{2}(\frac{n}{t}+t)+1$</p><p>可见，分块查找的平均查找长度不仅仅与线性表中记录的元素个数$n$有关，还与每个块中的记录个数$t$有关。<br>这种结构就可以用高中数学讲过的“**<a href="https://wenku.baidu.com/view/cfd99a3752ea551811a68704.html">对勾函数</a>**”来分析：<br>对于上式，当$t$取$\sqrt{n}$时，$ASL$取得最小值$\sqrt{n}+1$。</p><p>下图是一个分块查找的图示：<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/2.png"></p><h1 id="二分查找的改进——插值查找"><a href="#二分查找的改进——插值查找" class="headerlink" title="二分查找的改进——插值查找"></a>二分查找的改进——插值查找</h1><p>在待查连续区间[low,high]中，假设元素的值是线性均匀增长的，待查元素值为k，可以通过如下公式求取分割点：$mid=low+\frac{k-r[low]}{r[high]-r[low]}(high-low)$</p><p>其中low和high分别是查找区间两个端点的下标。</p><p>将待查值k与分割点记录的关键码r[mid]进行比较，有如下三种情况：</p><ul><li>$k &lt; r[mid] → high = mid-1$， 在左半区继续查找</li><li>$k &gt; r[mid] → low  = mid+1$， 在右半区继续查找</li><li>$k = r[mid] →$ 查找成功</li></ul><p>当查找区间不存在或者$mid$的值不再变化时查找失败。</p><p>插值查找类似于二分查找，其查找性能在关键码分布比较均匀的情况下优于二分查找。<br>一般的，设待查序列有$n$个元素，插值查找的关键码比较次数要小于$\log_{2}\log_{2}{n}+1$次。<br>这个函数的增长极其缓慢 ，对于所有可能的实际输入，其关键码的比较次数很小，但最坏情况下，插值查找将达到O(n)。<br>对于较小的查找表，二分查找（折半查找）较好，对于较大线性表，建议可以在情况合适的情况下选择插值查找。</p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的排序算法</title>
      <link href="/2019/10/10/suan-fa-fen-xi-yu-she-ji/chang-jian-de-pai-xu-suan-fa/"/>
      <url>/2019/10/10/suan-fa-fen-xi-yu-she-ji/chang-jian-de-pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>排序算法十分重要，种类繁多。</p><p>常见的排序算法主要有：</p><ul><li>插入排序<ul><li>直接插入排序</li><li>希尔排序</li></ul></li><li>交换排序<ul><li>冒泡排序</li><li>鸡尾酒排序</li><li>快速排序</li></ul></li><li>选择排序<ul><li>简单选择排序</li><li>堆排序</li></ul></li><li>归并排序</li></ul><p>还有一些有趣但实用性有限的排序方法：</p><ul><li>计数排序</li><li>桶排序</li><li>基数排序</li><li>……</li></ul><p>人们为何热衷于研究排序算法呢？</p><ul><li>排序在数据处理中的地位太重要了，往往是系统的核心部分，好的系统根本离不开优质的排序算法。</li><li>排序不是一个非常简单的过程，难以有“万金油”式的简单算法，各种算法各有优劣，人们根据不同的问题需要更加适合、更加优化的算法（实际上整体上或者某些其他情况这种算法甚至可以很糟糕，但只要它在某方面有绝对的优势，就不能否认它是一种优秀的排序算法），需要人们不断探索、不断优化。</li></ul><h1 id="排序的基本概念"><a href="#排序的基本概念" class="headerlink" title="排序的基本概念"></a>排序的基本概念</h1><p>下面对一些核心概念进行简略的描述：</p><ul><li>记录（record）：数据元素。</li><li>关键码和排序码：关键码是排序的依据；排序码不一定是关键码，选取哪个数据项作为关键码应该依据实际问题情况而定。如果排序码不是关键码，就可能多个记录有相同排序码，结果可能不唯一。<br><strong>通常可以将关键码作为排序码以简化初学复杂度</strong>。</li><li>排序（sort）：将一个记录的任意序列重新排列成一个按<strong>关键码有</strong>序的序列。</li><li>排序算法分类：<br>具体分类有下面几种依据：<ul><li>待排数据是否都被放置在内存中：</li></ul></li></ul><p><strong>内排序</strong>：整个排序过程的数据全部存放在内存中。<br><strong>外排序</strong>：整个过程中一部分数据在内存，一部分数据在外存，排序过程依赖于内外存数据的多次数据交换。</p><ul><li>排序算法是否建立在关键码比较的基础上：<ul><li><strong>基于比较的排序</strong>：关键码比较+数据移动。<br>基于比较的排序还可分为：<ul><li><strong>插入排序</strong><br>每一次将一个待排序的记录按其关键码的大小插入已经排好序的有序序列中，直到全部序列排好序。<ul><li><strong>直接插入排序</strong>（基本算法）<br>依次将排序序列中的每一个记录插入已排好序的序列中，直到全部记录都排好序。</li><li><strong>希尔排序</strong>（改进算法）<br>将整个待排序列分割成若干个子序列，在子序列内分别进行直接插入排序，待整个序列基本有序的时候，再对全体记录再进行一次直接插入排序。<br>希尔排序改进着眼点：<ul><li>若待排序列基本有序，直接插入排序效率很高。</li><li>由于直接插入排序算法简单，则在待排序记录个数较少时效率也很高。</li></ul></li></ul></li><li><strong>交换排序</strong><br>在待排序列中选取两个记录，如果反序则交换其位置。所有的反序对交换完成的时候排序完成。<ul><li><strong>冒泡排序</strong>（基本算法）<br>两两比较相邻记录，如果反序就交换，直到没有反序的记录为止。每次都是记录大的向后移、下沉。</li><li><strong>鸡尾酒排序</strong><br>对于冒泡排序的简单优化。从左到右比较移动一轮后，从右到左再移动一轮，如此往复。移动的形式像是“钟摆”，可以将轮数减少一半。</li><li><strong>快速排序</strong>（改进算法）<br>首先选取一个轴值（比较的基准），将待排序记录划分为两部分，左侧记录均小于或等于轴值，右侧记录均大于或等于轴值，然后分别对这两部分重复上述过程，直到整个序列有序。<br>理论上讲，快排是一个递归的过程。<br>快排是迄今为止所有内排序里平均时间性能最好的排序算法，在UNIX的qsort函数就是用了快排。<br>快排也是面试经常考到的知识。<br>快排改进的着眼点：<br>在冒泡排序中，记录的比较和移动是在相邻位置上进行的，记录的每一次交换位置只能后移一段位置，因而总的比较次数和移动次数较多。（快排记录的移动和比较从两端向中间进行，较大元素可以一次性从前面移动到后面，后面的元素也可以一次性从后面移动到前面）。</li></ul></li><li><strong>选择排序</strong><br>每趟排序在当前排序序列中选取出较小的记录，添加到有序序列中。<br>这种方法减少了移动次数，但是扫描、比较可能会增加。<ul><li><strong>简单选择排序</strong><br>在第i趟排序中，在待排序列r[i]~r[n] (1 &lt;= i &lt;= n-1) 中选取最小的记录，并和第i个元素交换作为有序序列的第i个记录。</li><li><strong>堆排序</strong>（基本算法）<br>先将待排序列构造成一个堆，此时选出了堆中所有记录的最大者即堆顶记录；然后将堆顶记录移走，并将剩余的记录再调整成堆，这样又找出了最大的纪录；以此类推，直到堆中只有一个记录。<br>堆排序改进的着眼点：<br>如何减少简单选择排序中记录繁多的比较次数。</li></ul></li><li><strong>归并排序</strong>（改进算法）<br>将若干个有序序列逐步合并，最终归并为一个有序序列。<br>二路的归并是最简单的，我们这里只讨论二路的。<br>归并排序用到了分治法的思想，可以递归/非递归的实现。<br>归并排序的思想：<br>将待排序列划分为两个长度相等的子序列，分别对这两个子序列进行排序，得到两个子序列，再将这两个子序列合并。</li></ul></li><li><strong>不基于比较的排序</strong>：根据待排数据的特点采取其他方法，通常没有大量关键码的比较和数据移动。</li></ul></li><li>……</li><li>排序算法稳定性：关键码相同的序列经过排序依然相对关系不变就是<strong>稳定</strong>的（stable），反之<strong>不稳定</strong>（unstable）。<br>需要强调的是，排序算法的稳定性由具体算法决定，不是一成不变的。稳定的算法在某种条件下可能不稳定；反之亦然。</li><li>正序和逆序：排好序就是正序（exact order），与排好的顺序恰好相反则是逆序（inverse order）/ 反序（anti-order）。</li><li>趟（pass）：将待排记录序列扫一遍就是一趟。这个概念很重要，要认真的理解实际运用中的“趟”。</li></ul><h1 id="各种基本排序算法的比较"><a href="#各种基本排序算法的比较" class="headerlink" title="各种基本排序算法的比较"></a>各种基本排序算法的比较</h1><table><thead><tr><th align="center">排序算法</th><th align="center">平均时间复杂度</th><th align="center">最好时间复杂度</th><th align="center">最坏时间复杂度</th><th align="center">空间复杂度</th><th align="center">稳定与否</th></tr></thead><tbody><tr><td align="center">直接插入排序</td><td align="center">$O(n^2)$</td><td align="center">$O(n)$</td><td align="center">$O(n^2)$</td><td align="center">$O(1)$</td><td align="center">稳定</td></tr><tr><td align="center">希尔排序</td><td align="center">$O(n\log{n})\sim{}O(n^2)$</td><td align="center">$O(n^{1.3})$</td><td align="center">$O(n^2)$</td><td align="center">$O(1)$</td><td align="center">不稳定</td></tr><tr><td align="center">冒泡排序</td><td align="center">$O(n^2)$</td><td align="center">$O(n)$</td><td align="center">$O(n^2)$</td><td align="center">$O(1)$</td><td align="center">稳定</td></tr><tr><td align="center">鸡尾酒排序</td><td align="center">$O(n^2)$</td><td align="center">$O(n)$</td><td align="center">$O(n^2)$</td><td align="center">$O(1)$</td><td align="center">稳定</td></tr><tr><td align="center">快速排序</td><td align="center">$O(n\log{n})$</td><td align="center">$O(n\log{n})$</td><td align="center">$O(n^2)$</td><td align="center">$O(\log{n})\sim{}O(n)$</td><td align="center">不稳定</td></tr><tr><td align="center">简单选择排序</td><td align="center">$O(n^2)$</td><td align="center">$O(n^2)$</td><td align="center">$O(n^2)$</td><td align="center">$O(1)$</td><td align="center">不稳定</td></tr><tr><td align="center">堆排序</td><td align="center">$O(n\log{n})$</td><td align="center">$O(n\log{n})$</td><td align="center">$O(n\log{n})$</td><td align="center">$O(1)$</td><td align="center">不稳定</td></tr><tr><td align="center">归并排序</td><td align="center">$O(n\log{n})$</td><td align="center">$O(n\log{n})$</td><td align="center">$O(n\log{n})$</td><td align="center">$O(n)$</td><td align="center">稳定</td></tr><tr><td align="center">计数排序</td><td align="center">$O(n+m)$</td><td align="center">$O(n+m)$</td><td align="center">$O(n+m)$</td><td align="center">$O(m)$</td><td align="center">稳定</td></tr><tr><td align="center">桶排序</td><td align="center">$O(n)$</td><td align="center">$O(n)$</td><td align="center">$O(n\log{n})$</td><td align="center">$O(n)$</td><td align="center">稳定</td></tr></tbody></table><p>Q：基于比较的内排序算法能不能比$O(N\log{N})$更加优化？</p><p>这个问题的关键其实是排序问题的时间下界问题。</p><p>这里的研究可以借助<strong>判定树</strong>来进行。</p><p>判定树（首先是一个二叉树）：</p><ul><li>每一个内部结点对应一个形如$x≤y$的比较，如果关系成立，则控制转移到该结点的左子树，否则转移到该结点的右子树。</li><li>每一个叶子结点表示问题的一个结果。</li></ul><p>判定树模型可以求解问题的时间下界。我们通常忽略问题的所有算术运算，只考虑执行分支的转移次数。</p><p>下面是一个三元素排序的判定树，判定树的每一个内部结点代表一次比较，每一个叶子结点代表一次输出。<br>显然，最坏情况的时间复杂度不超过判定树的高度。</p><p><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1.png"></p><p>对于一个问题规模为$n$的输入实例，排序算法可以沿着判定树的一条从根结点到叶子结点的路径来完成，比较次数等于该叶子结点在判定树中的层数。</p><p>至少具有$n!$个叶子结点的判定树的高度的求解有下面这样一个定理：<br>若$T$至少具有$n!$个叶子结点的二叉树，则树$T$的高度至少是$n\log_{2}{n}-1.5n$。</p><p>这说明了： 任何基于比较的对n个元素进行排序的算法，其判定树的高度都不会大于$O(N\log_{2}{N})$。</p><p> 因此，这些算法的时间下界是：$O(N\log{N})$</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>对于基于比较的内排序，其算法的执行时间主要消耗在以下两种基本操作上：</p><ul><li><strong>比较</strong>：关键码之间的比较。</li><li><strong>移动</strong>：记录从一个位置移动到另一个位置。</li></ul><p>由于排序算法的时间性能经常与<strong>数据集合的起始排列</strong>密切相关，如<strong>随机排列</strong>、<strong>基本有序</strong>、<strong>正序</strong>、<strong>逆序</strong>等等，因此需要分析<strong>最好情况</strong>、<strong>最坏情况</strong>和<strong>平均情况</strong>的时间复杂度。</p><ul><li>$O(n^2)$<ul><li>冒泡排序</li><li>鸡尾酒排序</li><li>简单选择排序</li><li>直接插入排序</li></ul></li><li>$O(n\log{n})\sim{}O(n^2)$<ul><li>希尔排序</li></ul></li><li>$O(n\log{n})$<ul><li>快速排序：平均最快，但有可能退化到$O(n^2)$</li><li>归并排序</li><li>堆排序</li></ul></li><li>$O(n)$<ul><li>计数排序</li><li>桶排序</li><li>基数排序</li></ul></li><li>奇葩算法<ul><li>睡眠排序</li><li>猴子排序</li><li>面条排序</li></ul></li></ul><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>这里的空间开销主要是算法实现所需要的<strong>辅助存储空间</strong>。<br>辅助存储空间是指除了存放排序记录占据的存储空间之外，算法在执行过程中所需要的其他的存储空间。<br>另外，<strong>算法本身的复杂度</strong>也对此有影响。</p><ul><li>$O(n)$<ul><li>归并排序</li></ul></li><li>$O(\log{n})\sim{}O(n)$<ul><li>快速排序</li></ul></li><li>$O(1)$<ul><li>直接插入排序</li><li>希尔排序</li><li>冒泡排序</li><li>鸡尾酒排序</li><li>简单选择排序</li><li>堆排序</li></ul></li></ul><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><ul><li>稳定算法<ul><li>直接插入排序</li><li>冒泡排序</li><li>归并排序</li></ul></li><li>不稳定算法<ul><li>希尔排序</li><li>鸡尾酒排序</li><li>快速排序</li><li>简单选择排序</li><li>堆排序</li></ul></li></ul><p>涉及元素 <strong>“跳跃”</strong> 从而减少直接交换次数的做法容易导致不稳定。</p><h2 id="复杂性"><a href="#复杂性" class="headerlink" title="复杂性"></a>复杂性</h2><ul><li>简单算法：<ul><li>直接插入排序</li><li>简单选择排序</li><li>冒泡排序</li></ul></li><li>改进算法<ul><li>希尔排序</li><li>鸡尾酒排序</li><li>快速排序</li><li>堆排序</li><li>归并排序</li></ul></li></ul><h2 id="数据规模"><a href="#数据规模" class="headerlink" title="数据规模"></a>数据规模</h2><p>对于本文探讨的几种算法：</p><ul><li>$n$很小的时候，简单的排序算法反而更合适、简洁。</li><li>$n$很大的时候，复杂的改进算法能够取得较好的效果。</li></ul><h2 id="信息量"><a href="#信息量" class="headerlink" title="信息量"></a>信息量</h2><p>记录本身信息量越大，占用的存储空间越多，移动元素的开销越大，对大量移动元素的算法不利。<br>三种简单算法中，数据量大对简单选择排序有利，对冒泡排序特别是直接插入排序不利。<br>这种因素对改进算法影响不大。</p><h2 id="原始数据分布分布"><a href="#原始数据分布分布" class="headerlink" title="原始数据分布分布"></a>原始数据分布分布</h2><p>当排序序列为正序的时候，直接插入排序和冒泡排序能达到$O(n)$的时间复杂度，但对于快速排序，这是最糟糕的情况，时间复杂度退化到$O(n^2)$。<br>简单选择排序、堆排序、归并排序的时间性能不随序列中的记录分布而改变。</p><h1 id="Java接口定义"><a href="#Java接口定义" class="headerlink" title="Java接口定义"></a>Java接口定义</h1><p>从操作的角度看，排序是针对线性结构的一种操作，待排序记录可以用顺序存储结构或者链式存储结构。<br>实际上，排序的对象绝非仅仅是整型int数据，但我们在刚接触的时候建议还是采用顺序存储+int整型数据+关键码唯一数据项+排序结果均为升序，以进行简化。<strong>一维整形数组</strong>可以作为理想的存储结构。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SortInterface</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 直接插入排序     *     * @param record 待排序的数据     */</span>    <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 希尔排序     *     * @param record 待排序的数据     */</span>    <span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 冒泡排序     *     * @param record 待排序的数据     */</span>    <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 鸡尾酒排序     *     * @param record 待排序的数据     */</span>    <span class="token keyword">void</span> <span class="token function">cocktailSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 快速排序     *     * @param record 待排序的数据     */</span>    <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 简单选择排序     *     * @param record 待排序的数据     */</span>    <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 堆排序     *     * @param record 待排序的数据     */</span>    <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 归并排序     *     * @param record 待排序的数据     */</span>    <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 计数排序     *     * @param record 待排序的数据     */</span>    <span class="token keyword">void</span> <span class="token function">countingSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 桶排序     *     * @param record 待排序的数据     */</span>    <span class="token keyword">void</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Java实现代码"><a href="#Java实现代码" class="headerlink" title="Java实现代码"></a>Java实现代码</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortService</span> <span class="token keyword">implements</span> <span class="token class-name">SortInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SortService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SortService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">SortService</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SortService</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> service<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 插入排序     *     * @param record 待排序的数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp<span class="token punctuation">,</span> position<span class="token punctuation">,</span> length <span class="token operator">=</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 排序进行length-1趟</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 暂存待插记录</span>            temp <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 寻找插入位置</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>position <span class="token operator">=</span> i<span class="token punctuation">;</span> position <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> record<span class="token punctuation">[</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> position<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 符合循环条件的依次右移一位</span>                record<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 插入元素</span>            record<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 希尔排序     *     * @param record 待排序的数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp<span class="token punctuation">,</span> position<span class="token punctuation">,</span> length <span class="token operator">=</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 增量为d时直接插入排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> d <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> d <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> d<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 暂存待插记录</span>                temp <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>position <span class="token operator">=</span> i<span class="token punctuation">;</span> position <span class="token operator">-</span> d <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> record<span class="token punctuation">[</span>position <span class="token operator">-</span> d<span class="token punctuation">]</span><span class="token punctuation">;</span> position <span class="token operator">-=</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 记录后移d位</span>                    record<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>position <span class="token operator">-</span> d<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                record<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 冒泡排序     *     * @param record 待排序的数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 第一趟冒泡排序的区间是r[0]~r[length-1]</span>        <span class="token keyword">int</span> position<span class="token punctuation">,</span> bound<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> length <span class="token operator">=</span> record<span class="token punctuation">.</span>length<span class="token punctuation">,</span> exchange <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 当上一趟排序有记录交换的时候</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>exchange <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bound <span class="token operator">=</span> exchange<span class="token punctuation">;</span>            exchange <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> position <span class="token operator">&lt;</span> bound<span class="token punctuation">;</span> position<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">&gt;</span> record<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> record<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>                    record<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    record<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    <span class="token comment">// 记载每一次记录交换的位置</span>                    exchange <span class="token operator">=</span> position<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 鸡尾酒排序     *     * @param record 待排序的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cocktailSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp<span class="token punctuation">,</span> length <span class="token operator">=</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 有序标记，每一轮初始值都是true</span>            <span class="token keyword">boolean</span> isSorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment">// 奇数轮，从左向右比较和交换</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> record<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> record<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    record<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    record<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    <span class="token comment">// 所有元素交换，所以不是有序的，标记变为false</span>                    isSorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isSorted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 在偶数轮之前，将isSorted重新标记为true</span>            isSorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment">// 偶数轮，从右向左比较和交换</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> record<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> record<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    record<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    record<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    <span class="token comment">// 因为有元素进行交换，所以不是有序的，标记变为false</span>                    isSorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isSorted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 一次划分的算法     *     * @param record 待排序的数据     * @param left   左端点     * @param right  右端点     * @return 划分后的中轴下标     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始化一次划分区间</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> right<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 右侧扫描</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> record<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 将较小记录交换到前面</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                record<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 左侧扫描</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> record<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 将较大记录交换到后面</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                record<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// i为轴值记录的最终位置</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 快速排序的递归部分     *     * @param record 待排序的数据     * @param left   左端点     * @param right  右端点     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 一次划分</span>            <span class="token keyword">int</span> pivot <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 对左侧子序列快速排序</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> left<span class="token punctuation">,</span> pivot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 对右侧子序列快速排序</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 快速排序     *     * @param record 待排序的数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 选择排序     *     * @param record 待排序的数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> length <span class="token operator">=</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// n-1趟的简单排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment">// 在无序区查找最小记录，并置于新有序区最后一位</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> scan <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> scan <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> scan<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>scan<span class="token punctuation">]</span> <span class="token operator">&lt;</span> record<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    index <span class="token operator">=</span> scan<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                record<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/*     * 左右子树都是大根堆，实现指定节点调整     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sift</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 暂存变量</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        <span class="token comment">// siftNode为待调整结点</span>        <span class="token keyword">int</span> siftNode <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token comment">// max初始化为siftNode的左孩子</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> siftNode <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;=</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 选取左右孩子较大者</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> last <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">[</span>max<span class="token punctuation">]</span> <span class="token operator">&lt;</span> record<span class="token punctuation">[</span>max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                max<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 已经是堆</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>siftNode<span class="token punctuation">]</span> <span class="token operator">&gt;</span> record<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 待调整结点与max互换</span>                temp <span class="token operator">=</span> record<span class="token punctuation">[</span>siftNode<span class="token punctuation">]</span><span class="token punctuation">;</span>                record<span class="token punctuation">[</span>siftNode<span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>                record<span class="token punctuation">[</span>max<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token comment">// siftNode、max重新赋值，准备下一趟调整</span>                siftNode <span class="token operator">=</span> max<span class="token punctuation">;</span>                max <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> siftNode <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 堆排序     *     * @param record 待排序的数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp<span class="token punctuation">,</span> length <span class="token operator">=</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 从最后一个分支节点至根结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sift</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> index<span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 暂存最大元素</span>            temp <span class="token operator">=</span> record<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 最右叶子放到根结点</span>            record<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>length <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>            record<span class="token punctuation">[</span>length <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token comment">// 对 r[0]~r[length-i-1]建堆</span>            <span class="token function">sift</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/*     * 合并     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 设置两个待合并的起止区间</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token comment">// 定义辅助数组temp</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 依次取两序列中小者放入temp</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> record<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 对第一个子序列进行收尾处理</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 对第二个子序列进行收尾处理</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 将合并后的结果传回数组record</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> left<span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            record<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 归并排序递归实现     *     * @param record 待排序的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSortRecursively</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 待排序的序列只有一条记录，递归结束</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token comment">// 归并排序前半个序列</span>            <span class="token function">mergeSortRecursively</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 归并排序后半个序列</span>            <span class="token function">mergeSortRecursively</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将已排序的两个序列合并</span>            <span class="token function">merge</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> length<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 归并排序递归实现     *     * @param record 待排序的数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mergeSortRecursively</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> last <span class="token operator">=</span> record<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>first <span class="token operator">+</span> last<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token comment">// 归并排序前半个序列</span>            <span class="token function">mergeSortRecursively</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> first<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 归并排序后半个序列</span>            <span class="token function">mergeSortRecursively</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将已排序的两个序列合并</span>            <span class="token function">merge</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> length<span class="token punctuation">,</span> first<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mergePass</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 有两个长度为h的子序列</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> length <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">merge</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> length<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> h<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 子序列有一个长度小于h</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> length <span class="token operator">-</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">merge</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> length<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 归并排序非递归实现     *     * @param record 待排序的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSortNonRecursively</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始时子序列长度为1</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">=</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 一趟排序</span>            <span class="token function">mergePass</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> length<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>            h <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 归并排序     *     * @param record 待排序的数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">mergeSortRecursively</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">mergeSortNonRecursively</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 计数排序     *     * @param record 待排序的数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countingSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 得到数组的最大值和最小值，并计算出差值d</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> record<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min <span class="token operator">=</span> record<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> length <span class="token operator">=</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> max <span class="token operator">-</span> min<span class="token punctuation">;</span>        <span class="token comment">// 创建数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> countArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历数组，填充统计数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">:</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>            countArray<span class="token punctuation">[</span>k <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 统计数组做变形，后面的元素等于前面的元素之和</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> countArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            countArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> countArray<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 倒序遍历原始数组，从统计数组找到正确的位置，输出结果到数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sortedArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> countArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sortedArray<span class="token punctuation">[</span>countArray<span class="token punctuation">[</span>record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                countArray<span class="token punctuation">[</span>record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>sortedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> record<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 桶排序     *     * @param record 待排序的数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 得到数组的最大值和最小值并计算出差值</span>        <span class="token keyword">double</span> max <span class="token operator">=</span> record<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min <span class="token operator">=</span> record<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> max <span class="token operator">-</span> min<span class="token punctuation">;</span>        <span class="token comment">// 初始化桶</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> bucketList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucketList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 遍历原始数组，将每个元素放入桶中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> v <span class="token operator">:</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            bucketList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 对每个桶内部的元素进行排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> doubles <span class="token operator">:</span> bucketList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>doubles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 输出全部元素</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sortedArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">:</span> bucketList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> element <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sortedArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>sortedArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> record<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法解决七巧板着色问题</title>
      <link href="/2019/10/09/suan-fa-fen-xi-yu-she-ji/hui-su-suan-fa-jie-jue-qi-qiao-ban-zhao-se-wen-ti/"/>
      <url>/2019/10/09/suan-fa-fen-xi-yu-she-ji/hui-su-suan-fa-jie-jue-qi-qiao-ban-zhao-se-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="四色定理"><a href="#四色定理" class="headerlink" title="四色定理"></a>四色定理</h1><p>四色定理是一种关于地图着色的定理，指出任何平面地图都可以只用四种颜色进行着色，使得相邻的区域颜色不同。</p><p>简单来说，这个定理表明，如果我们把一个地图的各个区域看作是节点，它们之间的边界看作是边，那么任何平面地图都可以被着成四种颜色，而且相邻区域必须使用不同的颜色。</p><p>这个定理最初由英国数学家弗朗西斯·贝克（Francis Guthrie）在1852年提出，但直到1976年才由美国数学家肯尼斯·阿普尔（Kenneth Appel）和沃夫冈·哈肯（Wolfgang Haken）通过使用计算机证明了该定理的正确性，这是第一个涉及计算机的数学证明。尽管该定理已被证明，但仍存在一些复杂的地图需要使用四种颜色进行着色，因此该定理并没有提供一个实用的算法来解决着色问题。</p><h1 id="七巧板"><a href="#七巧板" class="headerlink" title="七巧板"></a>七巧板</h1><p>七巧板是一种传统的中国智力玩具，由七个不同形状的木板组成，这些木板可以拼接在一起形成各种形状的图案。这些木板的形状包括正方形、三角形和菱形等。七巧板最早可以追溯到中国宋代（960年-1279年），在中国的传统文化中，七巧板常被用于教育和娱乐。</p><p>拼图是将多个小块组合成一个整体的游戏。而七巧板则是将已有的七个小块拼出不同的图案。因为七巧板有多种组合方式和玩法，对人的空间想象能力、逻辑推理能力、手眼协调能力和动手能力等都有很好的锻炼作用。同时，七巧板的制作也需要很高的工艺技能，是一种融合了手工艺和智力开发的艺术品。因此，七巧板被誉为是中国传统文化中的珍品之一。</p><h1 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h1><p>请编写一个程序来为七巧板着色，要求如下：</p><ul><li>使用不超过4种颜色对七巧板进行着色。</li><li>相邻的带板块（即相邻的七巧板块之间有公共边）必须使用不同的颜色进行着色。</li><li>可以使用1、2、3、4来表示不同的颜色。</li><li>最终输出着色方案。</li></ul><p>请注意，不同的七巧板可能需要使用不同的着色方案，因此您需要编写一个通用的程序来解决这个问题。您可以使用任何您熟悉的编程语言来实现此需求。</p><h1 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h1><p>编程求解过程用到了<strong>回溯法</strong>：<br>在某个顶点处涂所有颜色都与前面已涂色发生冲突，则进行回溯，返回上一个顶点试探下一种颜色。</p><p>注意：数组元素 color[i]=1 即表示对应i顶点的颜色是1</p><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Puzzle</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BOARD_NUMBER <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token comment">//定义七巧板</span>    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>BOARD_NUMBER<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>BOARD_NUMBER<span class="token punctuation">]</span><span class="token punctuation">[</span>BOARD_NUMBER<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//初始化所有顶点均涂色0</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>BOARD_NUMBER<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Puzzle</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>board <span class="token operator">=</span> board<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>edge <span class="token operator">=</span> edge<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">colour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> vertex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>vertex <span class="token operator">&lt;</span> BOARD_NUMBER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            color<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                color<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                vertex<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> adjVertex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> adjVertex <span class="token operator">&lt;</span> vertex<span class="token punctuation">;</span> adjVertex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token punctuation">[</span>adjVertex<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> color<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span> <span class="token operator">==</span> color<span class="token punctuation">[</span>adjVertex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            vertex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BOARD_NUMBER<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"涂色为："</span> <span class="token operator">+</span> color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token char">'C'</span><span class="token punctuation">,</span> <span class="token char">'D'</span><span class="token punctuation">,</span> <span class="token char">'E'</span><span class="token punctuation">,</span> <span class="token char">'F'</span><span class="token punctuation">,</span> <span class="token char">'G'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Puzzle</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Puzzle</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> edge<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">colour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次没有编写单独的测试类，直接在Puzzle类里面写了main方法进行测试。</p><p>运行结果：<br>A涂色为：1<br>B涂色为：2<br>C涂色为：1<br>D涂色为：3<br>E涂色为：2<br>F涂色为：3<br>G涂色为：1</p><p>可见，确实4色可解，而且是<strong>3色即可解</strong>（本问题比起地图着色等复杂着色问题还是简单太多了）。</p><p>只要我们稍加修饰，就可以把涂色的1、2、3、4替换成具体颜色，那样也许更直接一些。</p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>减治算法解决二分查找问题</title>
      <link href="/2019/10/07/suan-fa-fen-xi-yu-she-ji/jian-zhi-suan-fa-jie-jue-er-fen-cha-zhao-wen-ti/"/>
      <url>/2019/10/07/suan-fa-fen-xi-yu-she-ji/jian-zhi-suan-fa-jie-jue-er-fen-cha-zhao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找的基础理论"><a href="#二分查找的基础理论" class="headerlink" title="二分查找的基础理论"></a>二分查找的基础理论</h1><h2 id="二分查找是一种减治算法"><a href="#二分查找是一种减治算法" class="headerlink" title="二分查找是一种减治算法"></a>二分查找是一种减治算法</h2><p>通常称二分查找为分治算法，其实更严谨的解释是减治算法。这是因为二分查找 <strong>每次都舍弃一半，从留下的一半中寻找目标</strong> ；而分治法把一个大问题分成两个或多个小问题，递归地求这些小问题的解，最后再把它们合并起来，并且要仔细考虑合并时产生的新的情况。</p><h2 id="二分查找的前提是线性有序的随机访问序列"><a href="#二分查找的前提是线性有序的随机访问序列" class="headerlink" title="二分查找的前提是线性有序的随机访问序列"></a>二分查找的前提是线性有序的随机访问序列</h2><p>二分查找针对的是线性结构，是一种线性查找方法。由于二分查找需要丢弃另一半，丢弃的一半必须是确认无效的，因此序列必须是有序的。</p><p>二分查找并不适用于所有的线性序列。二分查找需要大量地借助下标索引随机访问线性序列的元素，这是链表等结构所不支持的。</p><h2 id="二分查找的执行效率"><a href="#二分查找的执行效率" class="headerlink" title="二分查找的执行效率"></a>二分查找的执行效率</h2><p>由于二分查找每次都丢弃一半的区间，所以能逐步的简化问题求解，特别是在数据量庞大的时候会有很好的效率。</p><p>二分查找的时间复杂度是$O(\log{n})$，空间复杂度是$O(1)$。</p><p>事实上，为了维护有序序列，整体的时间复杂度肯定不止$O(\log{n})$，只是这里我们只考虑二分查找本身。</p><h2 id="二分查找的平均查找长度"><a href="#二分查找的平均查找长度" class="headerlink" title="二分查找的平均查找长度"></a>二分查找的平均查找长度</h2><p>例题：对于长度为 $9$ 的顺序存储的有序表 ${1, 2, 3, 4, 5, 6, 7, 8, 9}$ ，若采用二分查找，求平均查找长度。</p><p>值得注意的是，每次减治缩范围后新的 $left$ 或 $right$ 不等于 $mid$，下面简单分析一下：</p><ul><li>第一步，$left=1, right=9, mid=(1+9)/2=5$<ul><li>第二步，$left=1, right=5-1=4, mid=(1+4)/2=2$<ul><li>第三步，$left=1, right=2-1=1, mid=(1+1)/2=1$</li><li>第三步，$left=2+1=3, right=4, mid=(3+4)/2=3$<ul><li>第四步，$left=3+1=4, right=4, mid=(4+4)/2=4$</li></ul></li></ul></li><li>第二步，$left=5+1=6, right=9, mid=(6+9)/2=7$<ul><li>第三步，$left=6, right=7-1=6, mid=(6+6)/2=6$</li><li>第三步，$left=7+1=8, right=9, mid=(8+9)/2=8$<ul><li>第四步，$left=8+1=9, right=9, mid=(9+9)/2=9$</li></ul></li></ul></li></ul></li></ul><p>搜索树的示意图如下所示：<br><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%87%8F%E6%B2%BB%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E9%97%AE%E9%A2%98/1.jpg"></p><h2 id="推广二分查找而不是三分查找的理由"><a href="#推广二分查找而不是三分查找的理由" class="headerlink" title="推广二分查找而不是三分查找的理由"></a>推广二分查找而不是三分查找的理由</h2><p>为什么一定是二分查找，而不是三分查找呢？原因有二：</p><ol><li>性能问题。二分查找最坏情况$\log_{2}{n}$，三分查找最坏情况$2\log_{3}{n}$，经过求导运算证实，二分查找性能高。</li><li>简洁适配问题。计算机是二进制的，二分查找的思想带来编码的简化和思维的清晰化。</li></ol><h1 id="二分查找的实现细节"><a href="#二分查找的实现细节" class="headerlink" title="二分查找的实现细节"></a>二分查找的实现细节</h1><h2 id="二分查找的开闭区间的选取"><a href="#二分查找的开闭区间的选取" class="headerlink" title="二分查找的开闭区间的选取"></a>二分查找的开闭区间的选取</h2><p>通常，编程语言的区间设置都是<a href="(https://blog.csdn.net/weixin_43896318/article/details/99618264)">左闭右开</a>的，因此左取右不取。</p><h2 id="二分查找的中值的正确选取"><a href="#二分查找的中值的正确选取" class="headerlink" title="二分查找的中值的正确选取"></a>二分查找的中值的正确选取</h2><p>通常来讲，<code>mid = (left+right)/2</code>即可，但这样写有两处可优化：</p><ol><li>如果left和right都不溢出，但left+right溢出，就会很麻烦，因此可以改写为<code>mid = left+(right-left)/2</code>。</li><li>位移运算符可以简化除法运算，因此可以改写为<code>mid = left+((right-left)&gt;&gt;&gt;1)</code>。</li></ol><p>当然，这两处都是可以不优化的，原因在于：</p><ol><li>虽然存在潜在的溢出问题，但二分查找毕竟是实实在在发生在线性数据结构上的，内存中很难存储简单的${10}^{9}$级线性数据结构，不现实。</li><li>仅考虑二分查找问题，位运算能带来的优化是有限的，反而可读性降低。关于位运算，可看<a href="https://blog.csdn.net/weixin_43896318/article/details/104367077">&gt;&gt;&gt;、&gt;&gt;、&lt;&lt; 辨析</a>。</li></ol><h2 id="二分查找的递归与非递归"><a href="#二分查找的递归与非递归" class="headerlink" title="二分查找的递归与非递归"></a>二分查找的递归与非递归</h2><p>二分查找通常用非递归实现，但也完全可以递归实现。</p><h1 id="二分查找的编程实现"><a href="#二分查找的编程实现" class="headerlink" title="二分查找的编程实现"></a>二分查找的编程实现</h1><h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    low<span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        <span class="token comment"># 这里建议规范一下</span>        mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>        <span class="token keyword">if</span> l<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">:</span>            <span class="token comment"># 向上缩小区间</span>            low <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">elif</span> value <span class="token operator">&lt;</span> l<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment"># 向下缩小区间</span>            high <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 找到了</span>            <span class="token keyword">return</span> mid    <span class="token comment"># 没找到</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> fromIndex<span class="token punctuation">;</span>    <span class="token keyword">int</span> high <span class="token operator">=</span> toIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> midValue <span class="token operator">=</span> array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>midValue <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>midValue <span class="token operator">&lt;=</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java广义实现"><a href="#Java广义实现" class="headerlink" title="Java广义实现"></a>Java广义实现</h2><p>借助泛型，实现普适的二分查找。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NOT_FOUND <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> high <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> NOT_FOUND<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="洛谷P2249查找"><a href="#洛谷P2249查找" class="headerlink" title="洛谷P2249查找"></a>洛谷P2249查找</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入 $n$ 个不超过 $10^9$ 的单调不减的（就是后面的数字不小于前面的数字）非负整数 $a_1,a_2,\dots,a_{n}$，然后进行 $m$ 次询问。对于每次询问，给出一个整数 $q$，要求输出这个数字在序列中第一次出现的编号，如果没有找到的话输出 $-1$ 。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行 $2$ 个整数 $n$ 和 $m$，表示数字个数和询问次数。</p><p>第二行 $n$ 个整数，表示这些待查询的数字。</p><p>第三行 $m$ 个整数，表示询问这些数字的编号，从 $1$ 开始编号。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行，$m$ 个整数，以空格隔开，表示答案。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><pre class="line-numbers language-none"><code class="language-none">11 31 3 3 3 5 7 9 11 13 15 151 3 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><pre class="line-numbers language-none"><code class="language-none">1 2 -1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>数据保证，$1 \leq n \leq 10^6$，$0 \leq a_i,q \leq 10^9$，$1 \leq m \leq 10^5$</p><p>本题输入输出量较大，请使用较快的 IO 方式。</p><h2 id="C-编程实现"><a href="#C-编程实现" class="headerlink" title="C++编程实现"></a>C++编程实现</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> query<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token comment">// 因为结果计算的下标是从1开始的</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> query<span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>nums<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token operator">-</span>nums<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>query <span class="token operator">==</span> nums<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> result <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><p><a href="https://www.luogu.com.cn/problem/P2249">洛谷 P2249 【深基13.例1】查找</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>减治算法解决寻找假币问题</title>
      <link href="/2019/10/06/suan-fa-fen-xi-yu-she-ji/jian-zhi-suan-fa-jie-jue-xun-zhao-jia-bi-wen-ti/"/>
      <url>/2019/10/06/suan-fa-fen-xi-yu-she-ji/jian-zhi-suan-fa-jie-jue-xun-zhao-jia-bi-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>问题描述：给出27枚硬币，它们的各种外观完全相同，但有一枚硬币稍重一点，是假币，我们只有一杆秤，试找到一种便捷的方法找出假币。</p><p>简单直接的思路是：直接从头到尾扫描遍历一趟，找出最大的即可。算法复杂度是$O(N)$，不符合我们这一问题“尽可能少比较次数”的宗旨。</p><p>可以优化上述思路。<br>容易想到二分查找，进而用将硬币分为2堆+1个，“折半”比较，找出那个特殊的假硬币。</p><p>还可以继续优化。<br>我们可以随机等分成三份，拿出两组比较，划分的对称性更强，查找也更快。<br>比如9枚硬币，二分最坏的情况是3次查找；三分最坏的结果是2次查找。<br>又比如本例的27枚硬币，二分最坏的情况是4次查找，三分的最坏结果是3次查找。<br>毕竟还是节省了比较次数，也很不错了。</p><p>归纳如下：<br>$3^n$枚硬币，最坏情况是需要n+1次比较得出结果。</p><p>本例可以运用条件分析后的分治思想很好地递归求解。</p><p>下面是Python描述的代码实现（面向过程化写法）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">compare</span><span class="token punctuation">(</span>groupA<span class="token punctuation">,</span> groupB<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>groupA<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>groupB<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token string">'left'</span>    <span class="token keyword">elif</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>groupB<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>groupA<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token string">'right'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token string">'equal'</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">splitCoins</span><span class="token punctuation">(</span>coinsList<span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>coinsList<span class="token punctuation">)</span>    group1 <span class="token operator">=</span> coinsList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>length<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">]</span>    group2 <span class="token operator">=</span> coinsList<span class="token punctuation">[</span>length<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">:</span>length<span class="token operator">//</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span>    group3 <span class="token operator">=</span> coinsList<span class="token punctuation">[</span>length<span class="token operator">//</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">:</span>length<span class="token punctuation">]</span>    <span class="token keyword">return</span> group1<span class="token punctuation">,</span> group2<span class="token punctuation">,</span> group3<span class="token keyword">def</span> <span class="token function">findFakeGroup</span><span class="token punctuation">(</span>group1<span class="token punctuation">,</span> group2<span class="token punctuation">,</span> group3<span class="token punctuation">)</span><span class="token punctuation">:</span>    resultLand2 <span class="token operator">=</span> compare<span class="token punctuation">(</span>group1<span class="token punctuation">,</span> group2<span class="token punctuation">)</span>    <span class="token keyword">if</span> resultLand2 <span class="token operator">==</span> <span class="token string">'left'</span><span class="token punctuation">:</span>        fakeGroup <span class="token operator">=</span> group1    <span class="token keyword">elif</span> resultLand2 <span class="token operator">==</span> <span class="token string">'right'</span><span class="token punctuation">:</span>        fakeGroup <span class="token operator">=</span> group2    <span class="token keyword">elif</span> resultLand2 <span class="token operator">==</span> <span class="token string">'equal'</span><span class="token punctuation">:</span>        fakeGroup <span class="token operator">=</span> group3    <span class="token keyword">return</span> fakeGroup<span class="token keyword">def</span> <span class="token function">coinComparision</span><span class="token punctuation">(</span>coinsList<span class="token punctuation">)</span><span class="token punctuation">:</span>    counter <span class="token operator">=</span> <span class="token number">0</span>    currList <span class="token operator">=</span> coinsList    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>currList<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>        group1<span class="token punctuation">,</span> group2<span class="token punctuation">,</span> group3 <span class="token operator">=</span> splitCoins<span class="token punctuation">(</span>currList<span class="token punctuation">)</span>        currList <span class="token operator">=</span> findFakeGroup<span class="token punctuation">(</span>group1<span class="token punctuation">,</span> group2<span class="token punctuation">,</span> group3<span class="token punctuation">)</span>        counter <span class="token operator">+=</span> <span class="token number">1</span>    fake <span class="token operator">=</span>currList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The fake coin is coin'</span><span class="token punctuation">,</span> coinsList<span class="token punctuation">.</span>index<span class="token punctuation">(</span>fake<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'in the original list'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Number of weightings:'</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试数据：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">testList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>coinComparision<span class="token punctuation">(</span>testList<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">The fake coin <span class="token keyword">is</span> coin <span class="token number">7</span> <span class="token keyword">in</span> the original <span class="token builtin">list</span>Number of weightings<span class="token punctuation">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>思维拓展：<br>我们如果能够将本例与三进制结合起来会有新的发现：可以用三进制对三分的分治集合进行编号，$0 \sim 3^n-1$。本例中27枚硬币，n=4，第一枚硬币0000、最后一枚硬币2222。每次称量我们都能从从第一位开始逐步确定一位三进制数，最后将结果的三进制转化为十进制，再+1就是结果了。;)</p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归算法与非递归算法</title>
      <link href="/2019/10/06/suan-fa-fen-xi-yu-she-ji/di-gui-suan-fa-yu-fei-di-gui-suan-fa/"/>
      <url>/2019/10/06/suan-fa-fen-xi-yu-she-ji/di-gui-suan-fa-yu-fei-di-gui-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>斐波那契数列、阶乘、GCD都属于简单的递归可解问题。</p><p>下面是斐波那契数列和阶乘的递归实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RecursionException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">RecursionException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"递归异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">RecursionException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"递归异常"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recursion</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RecursionException</span><span class="token punctuation">(</span><span class="token string">"输入值必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RecursionException</span><span class="token punctuation">(</span><span class="token string">"输入值不能小于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是求解最大公约数的递归和非递归实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 非递归</span><span class="token keyword">def</span> <span class="token function">iGcd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> n<span class="token punctuation">,</span> m<span class="token operator">%</span>n    <span class="token keyword">return</span> m<span class="token comment"># 递归</span><span class="token keyword">def</span> <span class="token function">rGcd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> m <span class="token operator">%</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n    <span class="token keyword">else</span><span class="token punctuation">:</span>        gcd <span class="token operator">=</span> rGcd<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token operator">%</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> gcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<strong>树本身就是递归定义的</strong>，所以树相关算法需要大量用到递归，也可以非递归实现，<a href="https://blog.csdn.net/weixin_43896318/article/details/101633969">二叉树算法</a>自然也是如此。</p><p><a href="https://blog.csdn.net/weixin_43896318/article/details/102156167">汉诺塔问题</a>、<a href="https://blog.csdn.net/weixin_43896318/article/details/98208593">归并排序</a>等问题也是递归求解的经典算法问题。</p><p>初学者可能会抵触递归，但其实递归的思考方式非常简单。递归通过自己调用自己，<strong>不断缩减问题规模直至能够简单求解</strong>，一步一步得出结果。</p><p><strong>递归的空间复杂度较高</strong>。比如归并排序，它相比较起其他基本排序方法是很消耗空间的，它用$O(N)$的空间复杂度去交换了比较小的时间复杂度$O(N\log{N})$；再比如阶乘的递归求解，我们计算$factorial(100000)$的时候，系统不会给出任何结果，而是抛出<code>java.lang.StackOverflowError</code>的栈溢出异常（错误），方法栈过深，深递归“耗尽”了JVM中方法栈区内存，可见其消耗的存储空间之大。</p><p><strong>递归的时间复杂度较高</strong>。比如斐波那契数列的递归实现，经过数学归纳法证明，其时间复杂度为<a href="https://blankspace.blog.csdn.net/article/details/101903721">$O((\frac{5}{3})^n)$</a>，相当高，以至于<strong>这种指数级的算法时间复杂度在实际中根本不可接受</strong>。</p><p>而且，递归函数实际上是“自己调用自己”，它自己本身就是一个函数（方法），<strong>这种调用是有成本的</strong>，每一次调用都需要分配额外的栈空间用于存储参数、局部变量以及返回地址，还需要进行额外的入栈、出栈操作。</p><p><strong>递归函数往往可以写成非递归形式</strong>，这种转变往往依靠合适的循环迭代和一定的辅助性数据结构（栈、队列等）。实际实现往往需要用非递归代替递归。</p><p>读书时看到的一句话：学好递归的方法是多读多看优质的递归代码和多思考多尝试。<br>共勉！</p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法解决汉诺塔问题</title>
      <link href="/2019/10/05/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-han-nuo-ta-wen-ti/"/>
      <url>/2019/10/05/suan-fa-fen-xi-yu-she-ji/fen-zhi-suan-fa-jie-jue-han-nuo-ta-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h1><p>汉诺塔，又称河内塔，是一个源于印度古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p><p><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/1.png"></p><h1 id="TOH问题"><a href="#TOH问题" class="headerlink" title="TOH问题"></a>TOH问题</h1><p>汉诺塔问题（TOH）可以用分治算法范型来递归求解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TOH</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token keyword">int</span> ringNum<span class="token punctuation">,</span> <span class="token keyword">int</span> startRod<span class="token punctuation">,</span> <span class="token keyword">int</span> endRod<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> moveNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ringNum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            moveNum <span class="token operator">+=</span> <span class="token function">hanoi</span><span class="token punctuation">(</span>ringNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> startRod<span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">-</span>startRod<span class="token operator">-</span>endRod<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将"</span> <span class="token operator">+</span> ringNum <span class="token operator">+</span> <span class="token string">"圆盘从"</span> <span class="token operator">+</span> startRod <span class="token operator">+</span> <span class="token string">"杆移动到"</span> <span class="token operator">+</span> endRod <span class="token operator">+</span> <span class="token string">"杆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            moveNum<span class="token operator">++</span><span class="token punctuation">;</span>            moveNum <span class="token operator">+=</span> <span class="token function">hanoi</span><span class="token punctuation">(</span>ringNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">-</span>startRod<span class="token operator">-</span>endRod<span class="token punctuation">,</span> endRod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> moveNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TOH</span> hanoi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TOH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hanoi<span class="token punctuation">.</span><span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">将1圆盘从1杆移动到3杆将2圆盘从1杆移动到2杆将1圆盘从3杆移动到2杆将3圆盘从1杆移动到3杆将1圆盘从2杆移动到1杆将2圆盘从2杆移动到3杆将1圆盘从1杆移动到3杆<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ATOH问题"><a href="#ATOH问题" class="headerlink" title="ATOH问题"></a>ATOH问题</h1><p>如果我们增强限制条件，成为相邻汉诺塔问题（ATOH）：不允许在最左侧和最右侧桩子之间移动，只能在相邻桩子之间移动；也不允许将圆环移动到中间桩子上，因为大圆环不能压在小圆环上。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ATOH</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">aHanoi</span><span class="token punctuation">(</span><span class="token keyword">int</span> ringNum<span class="token punctuation">,</span> <span class="token keyword">int</span> startRod<span class="token punctuation">,</span> <span class="token keyword">int</span> endRod<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> moveNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ringNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将"</span> <span class="token operator">+</span> ringNum <span class="token operator">+</span> <span class="token string">"圆盘从"</span> <span class="token operator">+</span> startRod <span class="token operator">+</span> <span class="token string">"杆移动到"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">-</span>startRod<span class="token operator">-</span>endRod<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"杆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将"</span> <span class="token operator">+</span> ringNum <span class="token operator">+</span> <span class="token string">"圆盘从"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">-</span>startRod<span class="token operator">-</span>endRod<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"杆移动到"</span> <span class="token operator">+</span> endRod <span class="token operator">+</span> <span class="token string">"杆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            moveNum<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            moveNum <span class="token operator">+=</span> <span class="token function">aHanoi</span><span class="token punctuation">(</span>ringNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> startRod<span class="token punctuation">,</span> endRod<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将"</span> <span class="token operator">+</span> ringNum <span class="token operator">+</span> <span class="token string">"圆盘从"</span> <span class="token operator">+</span> startRod <span class="token operator">+</span> <span class="token string">"杆移动到"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">-</span>startRod<span class="token operator">-</span>endRod<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"杆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            moveNum<span class="token operator">++</span><span class="token punctuation">;</span>            moveNum <span class="token operator">+=</span> <span class="token function">aHanoi</span><span class="token punctuation">(</span>ringNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> endRod<span class="token punctuation">,</span> startRod<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将"</span> <span class="token operator">+</span> ringNum <span class="token operator">+</span> <span class="token string">"圆盘从"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">-</span>startRod<span class="token operator">-</span>endRod<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"杆移动到"</span> <span class="token operator">+</span> endRod <span class="token operator">+</span> <span class="token string">"杆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            moveNum<span class="token operator">++</span><span class="token punctuation">;</span>            moveNum <span class="token operator">+=</span> <span class="token function">aHanoi</span><span class="token punctuation">(</span>ringNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> startRod<span class="token punctuation">,</span> endRod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> moveNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ATOH</span> hanoi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ATOH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hanoi<span class="token punctuation">.</span><span class="token function">aHanoi</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">将1圆盘从1杆移动到2杆将1圆盘从2杆移动到3杆将2圆盘从1杆移动到2杆将1圆盘从3杆移动到2杆将1圆盘从2杆移动到1杆将2圆盘从2杆移动到3杆将1圆盘从1杆移动到2杆将1圆盘从2杆移动到3杆将3圆盘从1杆移动到2杆将1圆盘从3杆移动到2杆将1圆盘从2杆移动到1杆将2圆盘从3杆移动到2杆将1圆盘从1杆移动到2杆将1圆盘从2杆移动到3杆将2圆盘从2杆移动到1杆将1圆盘从3杆移动到2杆将1圆盘从2杆移动到1杆将3圆盘从2杆移动到3杆将1圆盘从1杆移动到2杆将1圆盘从2杆移动到3杆将2圆盘从1杆移动到2杆将1圆盘从3杆移动到2杆将1圆盘从2杆移动到1杆将2圆盘从2杆移动到3杆将1圆盘从1杆移动到2杆将1圆盘从2杆移动到3杆<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="算法复杂度分析"><a href="#算法复杂度分析" class="headerlink" title="算法复杂度分析"></a>算法复杂度分析</h1><p> <em><strong>TOH</strong></em> 问题的递推式为：$T_{n}=2T_{n-1}+1$</p><p>$T_{0}=0$（没有圆盘不需要移动）<br>$T_{1}=1$（一个圆盘直接移动过去）<br>$T_{2}=3$<br>$T_{3}=7$<br>$T_{4}=15$<br>$……$<br>$T_{n}=2^{n}-1$</p><p>其中$T_{n}$是解决圆环TOH所需的移动次数，指数级复杂度。</p><p><em><strong>ATOH</strong></em> 问题的递推式为：$A_{n}=3A_{n-1}+2$</p><p>$A_{0}=0$<br>$A_{1}=2$<br>$A_{2}=8$<br>$A_{3}=26$<br>$A_{4}=80$<br>$……$<br>$A_{n}=3^{n}-1$</p><p>该问题是指数级复杂度，更加复杂</p><p>验证：上述测试的输出中，TOH问题有7次移动，ATOH需要26次，符合预期。</p><h1 id="TOH问题与格雷码"><a href="#TOH问题与格雷码" class="headerlink" title="TOH问题与格雷码"></a>TOH问题与格雷码</h1><p>格雷码(RBC/GrayCode)是一种二进制系统，连续的两个值只差一个二进制位或者比特，被广泛应用于数字通信中的纠错工作。其实，<strong>格雷码与TOH问题也有着某种关联</strong>。</p><p>位值1的格雷码就是{0, 1}，叫做L1.通过反转1位编码就可以构造出位值2的格雷码{1, 0}，叫做L2。把L1的所有项加上前缀0，同时把L2的所有项加上前缀1，就得到了L1‘ = {00, 01}和L2’ = {11, 10}。把L1‘和L2’拼接起来就得到了2位的格雷码{00, 01, 11, 10}。</p><p>通过这种方式，就可以由2位格雷码生成3位格雷码{000, 001, 011, 010, 110, 111, 101, 100}，接着生成4位的格雷码{0000, 0001, 0011, 0010, 0110, 0111, 0101, 0100, 1100, 1101, 1111, 1110, 1010, 1011, 1001, 1000}，依此类推。</p><p>如果TOH问题带有n个圆环，就需要n位格雷码，然后<strong>格雷码会表明需要进行的移动操作</strong>。在TOH中有$2^n - 1$次，对应$2^n$长度的格雷码中的$2^n - 1$次移位。最小圆环对应最右侧的最低有效位，最大的圆环对应最左侧的最高有效位。移动的圆环对应变动的位数。例如，000-&gt;001就是移动最小的圆环。可是要移动到哪个桩子上呢？如果桩子可以选择，这就有很大的关系了。</p><p>对于最小的圆环，总有两个桩子可供移入。<br>对于其他圆环，则只有一种可能。<br>如果圆环数量是奇数，则最小的圆环会按照以下顺序移动： ==<strong>起始桩-&gt;终止桩-&gt;中间桩-&gt;起始桩-&gt;终止桩-&gt;中间桩-&gt;……</strong>== 依此类推。<br>如果圆环数是偶数，则顺序必须是： ==<strong>起始桩-&gt;中间桩-&gt;终止桩-&gt;起始桩-&gt;中间桩-&gt;终止桩-&gt;……</strong>== 依此类推。</p><p>所谓4圆环、5圆环，思想类似。</p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法复杂度</title>
      <link href="/2019/10/02/suan-fa-fen-xi-yu-she-ji/suan-fa-fu-za-du/"/>
      <url>/2019/10/02/suan-fa-fen-xi-yu-she-ji/suan-fa-fu-za-du/</url>
      
        <content type="html"><![CDATA[<h1 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h1><p>算法效率的度量是通过其时间复杂度和空间复杂度来描述的。</p><p>算法复杂度可以用$O(T(n))$、$Ω(T(n))$、$o(T(n))$、$Θ(T(n))$来衡量，常用大O表示法$O(T(n))$。</p><p>$O(T(n))$表示算法复杂度小于等于$T(n)$</p><p>$Ω(T(n))$表示算法复杂度大于等于$T(n)$</p><p>$o(T(n))$表示算法复杂度小于$T(n)$</p><p>$Θ(T(n))$表示算法复杂度等于$T(n)$</p><p>上面几种表示法都是比阶，而且忽略常数项和常数系数。</p><p>对于几百这样的输入量，三次算法$O(N^3)$不可行。</p><p>对于几千这样的输入量，二次算法$O(N^2)$不可行。</p><p>$O(N)$、$O(N\log{N})$、$O(N^2)$ 、$O(N^3)$较为常见，其中$O(N)$的线性算法更加优秀。</p><p>基本上可能用的算法复杂度：（从简单到复杂）<br>$O(1)&lt;O(\log{N})&lt;O((\log{N})^2)&lt;O(N)&lt;O(N\log{N})&lt;O(N^2)&lt;O(N^3)&lt;O(2^N)$</p><p><img src="/../../images/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/1.png"></p><p>算法的时间复杂度通常表示为$T(n)$，空间复杂度通常表示为$S(n)$。</p><h1 id="算法复杂度的求和计算方法"><a href="#算法复杂度的求和计算方法" class="headerlink" title="算法复杂度的求和计算方法"></a>算法复杂度的求和计算方法</h1><p>算法复杂度的简单计算往往涉及求和，下面的六个公式可作参考</p><p>$$\sum\limits_{i=1}^{n}{i}=\frac{n(n+1)}{2}$$</p><p>$$\sum\limits_{i=1}^{n}{(n-i)}=\frac{n(n-1)}{2}$$</p><p>$$\sum\limits_{i=1}^{n}{i^{2}}=\frac{n(n+1)(2n+1)}{6}$$</p><p>$$\sum\limits_{i=1}^{\log_{2}{n}}{n}=n\log_{2}{n}$$</p><p>$$\sum\limits_{i=1}^{n}{2^{i}}=2(2^{n}-1)$$</p><p>$$\sum\limits_{i=1}^{\log_{2}{n}}{2^{i}}=2(n-1)$$</p><h1 id="算法复杂度的组合"><a href="#算法复杂度的组合" class="headerlink" title="算法复杂度的组合"></a>算法复杂度的组合</h1><p>处于同一层级串行执行的两个算法组合要采用$+$，处于嵌套关系的两个算法要采用$×$。</p><p>$$O(g1(n)) + Θ(g2(n)) → O(max{g1(n), g2(n)})$$<br>$$Ω(g1(n)) + Ω(g2(n)) → Ω(max{g1(n), g2(n)})$$<br>$$Θ(g1(n)) + Θ(g2(n)) → Θ(max{g1(n), g2(n)})$$</p><p>$$O(g1(n)) × O(g2(n)) → O(g1(n) × g2(n))$$<br>$$Ω(g1(n)) × Ω(g2(n)) → Ω(g1(n) × g2(n))$$<br>$$Θ(g1(n)) × Θ(g2(n)) → Θ(g1(n) × g2(n))$$</p><h1 id="递归算法复杂度的计算方法"><a href="#递归算法复杂度的计算方法" class="headerlink" title="递归算法复杂度的计算方法"></a>递归算法复杂度的计算方法</h1><p>方法一：<br>递推扩展，最终求和得到一个求和式，用大O表示即可。</p><p>方法二：<br>数学归纳，比如斐波那契数列递归求解的$O((\frac{5}{3})^n)$就是这么得到的。</p><p>方法三：<br>先将递归算法的运算抽象成数学上的递推式：<br>$T(n)=\begin{cases}c, &amp; n=1 \ aT(\frac{n}{b})+cn^{k}, &amp; n&gt;1 \end{cases}$</p><p>这样的一个分治递推式往往存在并可求，然后我们按照下面的结论可以得到答案：<br>$T(n)=\begin{cases}O(n^{\log_{b}{a}}), &amp; a&gt;b^{k} \ O(n^k\log_{b}{n}), &amp; a=b^{k} \ O(n^k), &amp; a&lt;b^{k} \end{cases}$</p><p>说明：公式编辑Word可用 $Alt$ + $=$，Markdown可以引入LaTeX数学表达式。</p><h1 id="证明斐波那契数列递归求解复杂度"><a href="#证明斐波那契数列递归求解复杂度" class="headerlink" title="证明斐波那契数列递归求解复杂度"></a>证明斐波那契数列递归求解复杂度</h1><p>$F_{0}=1$<br>$F_{1}=1$<br>$F_{2}=2$<br>$F_{3}=3$<br>$F_{4}=5$<br>$……$<br>$F_{i}=F_{i-1}+F_{i-2}$</p><p>$证：对于i≥1，有F_{i}＜(\frac{5}{3})^{n}$</p><p>$易证，F_{1}=1&lt;\frac{5}{3}，F_{2}=2&lt;(\frac{5}{3})^{2}=\frac{25}{9}$</p><p>$假设F_{k}&lt;(\frac{5}{3})^{k}$</p><p>$下面只需要证明F_{k+1}&lt;(\frac{5}{3})^{k+1}$</p><p>$F_{k+1}=F_{k}+F_{k-1}$</p><p>$F_{k+1}&lt;(\frac{5}{3})^{k}+(\frac{5}{3})^{k-1}=(\frac{3}{5})(\frac{5}{3})^{k+1}+(\frac{3}{5})^{2}(\frac{5}{3})^{k+1}=(\frac{15}{25})(\frac{5}{3})^{k+1}+(\frac{9}{25})(\frac{5}{3})^{k+1}=(\frac{24}{25})(\frac{5}{3})^{k+1}&lt;(\frac{5}{3})^{k+1}$</p><p>$得证$</p><h1 id="算法复杂度分析案例"><a href="#算法复杂度分析案例" class="headerlink" title="算法复杂度分析案例"></a>算法复杂度分析案例</h1><p>案例1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：<br>${2}^{i}≤n$，$i≤\log_{2}{n}$，$T(n)=O(\log_{2}{n})$</p><p>案例2：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：<br>${2}^{x+1}≤\frac{n}{2}$，$x≤\log_{2}{\frac{n}{2}}-1=\log_{2}{n}-2$，$T(n)=O(\log_{2}{n})$</p><p>案例3：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：<br>$T(n)=O(n)$</p><p>案例4：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：<br>外层：${2}^{i}≤n$，$i≤\log_{2}{n}$，$T(n)=O(\log_{2}{n})$<br>内层：$T(n)=O(n)$<br>$T(n)=O(n\log_{2}{n})$</p><p>案例5：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：<br>$sum=\frac{k(k+1)}{2}$，$T(n)=O(\sqrt{n})$</p><p>案例6：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：<br>${t}^{3}≤n$，$t≤\sqrt[3]{n}$，$T(n)=O(\sqrt[3]{n})$</p><h1 id="拓展思考"><a href="#拓展思考" class="headerlink" title="拓展思考"></a>拓展思考</h1><ol><li>$O(N^2)$的算法实际不一定比$O(N^3)$的算法简单，原因有二：大O表示法只能表示算法规模的上界；常数项和系数也不能忽略，不能撇开数据规模谈复杂性。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>趣味算法问题</title>
      <link href="/2019/10/02/suan-fa-fen-xi-yu-she-ji/qu-wei-suan-fa-wen-ti/"/>
      <url>/2019/10/02/suan-fa-fen-xi-yu-she-ji/qu-wei-suan-fa-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="寻找最重的球"><a href="#寻找最重的球" class="headerlink" title="寻找最重的球"></a>寻找最重的球</h1><p>假设有8个外观完全相同的球，其中一个稍重，其他球质量相同。<br>提供一架天平，要求通过两次称重比较找出质量最大的球。</p><p>大家毕竟是学计算机的，默认会采用二分的思路，即分成两份，4+4，然后折半，发现超次数了。<br>其实这题不是这么解的。</p><p>我们可以把球分成三堆，3+3+2，先称两个含有3个球的堆。<br>如果两边质量一样，则再称一次剩下的一堆即可。<br>如果两边质量不同，则从重的一堆里选出两个。一旦质量还是相同，则剩下的一个就是要找的球，否则就直接得到了答案。</p><h1 id="海盗分硬币问题"><a href="#海盗分硬币问题" class="headerlink" title="海盗分硬币问题"></a>海盗分硬币问题</h1><p>预设的前提是：$n$个海盗分100枚硬币。每个人按顺序提出自己的提议，达到一半人反对某人的提议，此人就会被投入海中喂鲨鱼；而超过一半人支持则此人的建议会被采纳。每个人都是贪婪且聪明的，都会遵守规则，在同等条件下会优先服从先提出的提议。</p><p>两个海盗分硬币：<br>A会分不到硬币，而B会独吞100枚硬币。<br>因为除非A自己把硬币全给B，否则B必然投反对票，他必死。</p><p>三个海盗分硬币：<br>A会分到99枚硬币，而B只能得到1枚硬币，C则会分不到硬币。<br>因为只要A被反对致死，则B也分不到硬币。但A如果自己独吞，他必死，还会连累B也分不到硬币。所以A的最优策略就是自己吞下99枚硬币，B得到1枚硬币，C颗粒无收，A和B联手打压C。</p><p>四个海盗分硬币：<br>A会分到98枚硬币，C和D各能分到1枚硬币，B则会分不到硬币。<br>因为B一定想要A死，因为A死以后，B就能成为三个海盗情境下的A，这对B是最有利的，他没理由支持A。而C和D此时只要得到好处，就没理由反对A，特别是D，一旦进入B的环节他将颗粒无收。<br>所以A的最优策略是自己吞下98枚硬币，给C和D各1个硬币，联手打压B。</p><p>五个海盗分硬币：<br>A会分到98枚硬币，C和D(或E)各能分到1枚硬币，B和E(或D)则会分不到硬币。<br>因为B一定想要A死，因为A死以后，B就能成为四个海盗情境下的A，这对B是最有利的，他没理由支持A。只要A被反对致死，则C也分不到硬币，可以联合C。而D或者E肯定在B的环节下只能得到1枚硬币，且进入C的环节也不会获得更好的条件，所以可以拉拢其中一个。<br>所以A的最优策略是自己吞下98枚硬币，给C和D(或E)各1个硬币，联手打压B和E(或D)。</p><p>这个问题在投票机制改成支持一半即通过时，A甚至可以在四个海盗的情境下取得99枚硬币的优势。</p><p>其实这个问题的假设条件下，体现了一种规律：在所有人都“聪明”且遵守规则的情况下，先发制人是有意义的，他只需要拉拢需要拉拢的“弱势群体”，打压对自己有威胁的群体，就能获得自己的最优解。</p><h1 id="数组循环移位问题"><a href="#数组循环移位问题" class="headerlink" title="数组循环移位问题"></a>数组循环移位问题</h1><p>数组循环移位问题存在一则优质的算法：时间复杂度$O(n)$，空间复杂度$O(1)$，来自Brian Kernighan的《Software Tools in Pascal》。</p><p>用途：在文本编辑器中移动各行、磁盘整理时交换两个不同大小的相邻内存块。</p><p>将问题转化为：将数组$AB$转换成数组$BA$（$A$代表数组前$i$个元素，$B$代表数组余下的$n-i$个元素）。</p><ol><li>将$A$逆置得到$A^{r}B$。</li><li>将$B$转置得到$A^{r}B^{r}$。</li><li>将整个$A^{r}B^{r}$转置得到$BA$;</li></ol><p>我们将这个函数定义为<code>Reverse</code>：</p><ol><li><code>Reverse(0, i-1)</code></li><li><code>Reverse(i,  n-1)</code></li><li><code>Reverse(0, n-1)</code></li></ol><p>字符串(字符数组)<code>abcdefgh</code>向左循环移3位的执行过程：</p><ol><li>得到<code>cbadefgh</code></li><li>得到<code>cbahgfed</code></li><li>得到<code>defghabc</code></li></ol><h1 id="区分药品问题"><a href="#区分药品问题" class="headerlink" title="区分药品问题"></a>区分药品问题</h1><p>要吃一颗A药一颗B药，两种药看起来一样，现在手上有一粒A两粒B，怎样吃才能不浪费？</p><p>思路：是加一片A药，所有药掰成两半，分成两堆，各是一次的药量。</p><h1 id="鼠鼠试毒问题"><a href="#鼠鼠试毒问题" class="headerlink" title="鼠鼠试毒问题"></a>鼠鼠试毒问题</h1><p>1000瓶液体，1瓶有毒，一小时毒发，需要多少只鼠鼠才能一小时试出哪瓶有毒？</p><p>推荐阅读：<a href="https://blog.csdn.net/qq_34433210/article/details/84675837">博客</a></p><p>启发：可以用位做，$2^{10}=1024&gt;1000$，所以要最少要用10只老鼠。</p><h1 id="跑马竞速问题"><a href="#跑马竞速问题" class="headerlink" title="跑马竞速问题"></a>跑马竞速问题</h1><p>64匹马，可用8个赛道，最少几次可以赛出最快的4匹马？</p><p>推荐阅读：<a href="https://blog.csdn.net/qq_43827595/article/details/104154641">博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法分析与设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关键词this的复杂含义</title>
      <link href="/2019/09/28/ruan-jian-gong-cheng/mian-xiang-dui-xiang/guan-jian-ci-this-de-fu-za-han-yi/"/>
      <url>/2019/09/28/ruan-jian-gong-cheng/mian-xiang-dui-xiang/guan-jian-ci-this-de-fu-za-han-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中的this"><a href="#Java中的this" class="headerlink" title="Java中的this"></a>Java中的this</h1><p>Java中，this的含义也不是固定不变的，它会随着执行环境的改变而改变。</p><p>下面的例子展示了this的两个功能：</p><ul><li>构造器之间的调用。</li><li>区分局部变量和属性。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThisTest</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> str1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> str2<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ThisTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">ThisTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>str1 <span class="token operator">=</span> var1<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">ThisTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">,</span> <span class="token class-name">String</span> var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>str2 <span class="token operator">=</span> var2<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>str1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>str2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThisTest</span> tt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThisTest</span><span class="token punctuation">(</span><span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"cccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>this还有一个作用，是区分当前对象是谁。</p><p>下面是博主在某个JFrame构造器里写过的部分代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"返回"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DoctorFrame</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">SignInFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">323</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mouse好像还好，但是普通的actionlistener似乎不适用XXFrame.this.XXXX是不可以的</p><p>通过Doctor.this，我们“告诉”编译器我们要当前要执行的是当前的JFrame。</p><h1 id="JavaScript中的this"><a href="#JavaScript中的this" class="headerlink" title="JavaScript中的this"></a>JavaScript中的this</h1><p>JavaScript中，this的含义也不是固定不变的，它会随着执行环境的改变而改变。</p><ul><li>在方法中，this表示该方法所属的对象。</li><li>如果单独使用，this表示全局对象。</li><li>在函数中，this表示全局对象。</li><li>在函数中，在严格模式下，this是未定义的(undefined)。</li><li>在事件中，this表示接收事件的元素。</li><li>类似call()和apply()方法可以将this引用到任何对象。</li></ul><h1 id="对this加锁的弊病"><a href="#对this加锁的弊病" class="headerlink" title="对this加锁的弊病"></a>对this加锁的弊病</h1><p>以C#为例，锁住this或字符串都算不是好的选择。</p><p>先看锁this：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">lock</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"info"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这其实不好，因为锁的对象最好是代码控制的资源，因为它们是类的私有数据。<br>一旦资源是公有的，那么其他代码也能对资源上锁，从而造成死锁。</p><p>锁住一个对象的引用会组织其他线程对相同引用上锁，但没有其他影响，对象仍然可以访问，属性值也可以修改。</p><p>所以，这个锁的真正作用是锁住质量字符串文本的引用，而这个引用可能正在被很多代码所共享，甚至包括应用程序域之外的代码。把该字符串对象锁住也会导致其他代码无法使用该对象，原因与锁住this类似。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
