<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>欢迎使用Hexo</title>
      <link href="/2023/06/25/huan-ying-shi-yong-hexo/"/>
      <url>/2023/06/25/huan-ying-shi-yong-hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电子计算机的分层抽象</title>
      <link href="/2023/06/25/ji-suan-ji-ke-xue-ji-chu/dian-zi-ji-suan-ji-de-fen-ceng-chou-xiang/"/>
      <url>/2023/06/25/ji-suan-ji-ke-xue-ji-chu/dian-zi-ji-suan-ji-de-fen-ceng-chou-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="控制复杂性的方法"><a href="#控制复杂性的方法" class="headerlink" title="控制复杂性的方法"></a>控制复杂性的方法</h1><p>电子计算机有着比较复杂的结构，而<a href="https://blankspace.blog.csdn.net/article/details/101912284">控制复杂性</a>的关键做法之一正是抽象，即隐蔽不需要的细节。</p><p>补充~控制复杂性的方法：</p><ol><li><p>抽象（abstraction）<br>抽象是控制复杂性的关键技术，它的目的在于隐蔽不需要的细节。<br>一个系统可以从多个不同层面抽象，抽象到何种层次合适由问题本身决定，需要具体问题具体分析。<br>值得指出的是，当处于某个抽象层次的时候，最好是对当前抽象层次之上和之下都有一定的了解。计算机科学家不可能在不理解程序运行平台体系系结构的情况下充分优化代码；器件工程师也不可能在不了解晶体管具体用途的情况下在设计晶体管的时候作出明智的选择。</p></li><li><p>约束（discipline）<br>约束是对设计选择的一种内在限制，通过这种限制可以更有效地在更高地抽象层次上工作。<br> 部件可互换、可由不同地方生产，但每个合格的组件都被限定为一个误差允许范围内的标准集合，从而可以简单快速的组件系统，降低复杂度。</p></li><li><p>三Y原则 </p><ol><li>层次化（hierarchy）<br> 将系统划分为若干模块，然后更进一步划分每个模块直到这些模块可以很容易理解。<br> 这种模块被组件化，可以规则性地描述。</li><li>模块化（modularity）<br> 所有模块定义好的功能和接口，以便它们之间可以很容易地相互连接而不是会产生意想不到的副作用。<br> 每个模块都需要有明确的功能和接口，且不对其他模块产生影响。<br> 模块之间的耦合通过接口进行，而非通过某种具体实现。</li><li>规整化（regularity）<br>     在模块之间寻求一致，通用的模块可以重新使用多次，以减少不同模块的数量。<br>     此外，做到了规整化，互换部件也是可实现的好方法。</li></ol></li></ol><h1 id="电子计算机分层抽象"><a href="#电子计算机分层抽象" class="headerlink" title="电子计算机分层抽象"></a>电子计算机分层抽象</h1><p>下图是对电子计算机的分层抽象，这里将计算机分为九层：应用程序层、操作系统层、体系结构层、微结构层、逻辑层、数字电路层、模拟电路层、器件层、物理层。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%94%B5%E5%AD%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/1.png" alt="电子计算机的分层抽象"></p><p>下面<strong>自底向上</strong>地简单介绍一下各层：</p><ol><li>物理层关注的是电子运动，由麦克斯韦方程组、量子力学等支持。</li><li>器件层关注的是晶体管、真空管等电子元器件，这些器件都有明确的外部连接点terminal，建立起了每个terminal上电压与电流之间的关系模型。</li><li>模拟电路层关注的是器件组合在一起构成的放大器等组件，输入输出都是连续的电压值。</li><li>数字电路层关注的是逻辑门，电压被控制为离散的值表示为0和1。</li><li>逻辑层关注的是由数字电路层的逻辑门构成的逻辑组件，如加法器等。</li><li>微结构层将逻辑组件组合在一起以实现体系结构中定义的指令。</li><li>体系结构描述的是程序员观点的计算机抽象。</li><li>操作系统是和硬件最为密切的程序，既是资源分配器，又控制各着种I/O设备和用户程序的需求。</li><li>应用软件基于操作系统实现多种多样的应用功能。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略和机制分离</title>
      <link href="/2023/06/25/ji-suan-ji-ke-xue-ji-chu/ce-lue-he-ji-zhi-fen-chi/"/>
      <url>/2023/06/25/ji-suan-ji-ke-xue-ji-chu/ce-lue-he-ji-zhi-fen-chi/</url>
      
        <content type="html"><![CDATA[<h1 id="策略和机制"><a href="#策略和机制" class="headerlink" title="策略和机制"></a>策略和机制</h1><p>计算机科学和软件工程实践中，“策略和机制分离”是一条重要经验。为了弄明白这句话的含义，首先要理解什么是策略，什么是机制。</p><p>想要做一件事达成一个目标，要知道为什么做(Why)，做什么(What)，如何做(How)。研究目的或工程需求明确了“为什么做”，策略决定了“做什么”，机制决定了“如何做”。</p><p>策略与机制的分离对于灵活性的保持很重要。在实际操作中，明确了“为什么做”以后，就该明确“做什么”，此后的“如何做”可能有多种方案；而对于明确的“为什么做”，前期开发出充足的底层机制，可以为后续提供更多的策略选择。例如，面对给定的任务目标和输入输出需求，我们可以更换许多可选的模型去尝试调参，我们可以尝试更换许多不同的算法实现去比较，算法的可替换性就显得十分重要。如果不能实现低成本的替换，则不利于任务目标的达成。</p><p>对于固定的顶层策略，底层实现应该提供多种选择，并且做到低成本切换和替换。对于固定的底层机制，策略可能随时间或地点而改变，对策略改变不敏感的通用底层机制将是更可取的。</p><h1 id="操作系统中的策略和机制"><a href="#操作系统中的策略和机制" class="headerlink" title="操作系统中的策略和机制"></a>操作系统中的策略和机制</h1><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/128744560">操作系统</a></p><p>例如，操作系统存在某种机制，可赋予某些类型的程序相对更高的优先权。如果这种机制能与策略分离开，那么它可用于支持I/O密集型程序应比CPU密集型程序具有更高优先级的策略，或者支持相反策略。</p><p>微内核操作系统也是一个典型的例子。微内核操作系统通过实现一组基本且简单的模块，将机制与策略的分离用到了极致。这些模块几乎与策略无关，通过用户创建的内核模块或用户程序本身，可以增加更高级的机制与策略。</p><h1 id="软件工程中的策略模式"><a href="#软件工程中的策略模式" class="headerlink" title="软件工程中的策略模式"></a>软件工程中的策略模式</h1><p>策略模式是GoF23种设计模式中的一种，是软件工程的重要实践。通过策略模式，借助委托，我们可以更方便地替换算法，甚至是动态替换算法。</p><p>策略模式涉及三个角色：</p><ul><li><strong>Strategy</strong>：该角色负责决定实现策略所必需的接口。</li><li><strong>ConcreteStrategy</strong>：该角色负责实现Strategy角色所定义的接口。</li><li><strong>Context</strong>：该角色保存了ConcreteStrategy角色的实例，并调用ConcreteStrategy的角色去实现需求。</li></ul><p>基于<a href="https://www.processon.com/">ProcessOn</a>绘制的策略模式的类图如下所示：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%AD%96%E7%95%A5%E5%92%8C%E6%9C%BA%E5%88%B6%E5%88%86%E7%A6%BB/1.png" alt="在这里插入图片描述"></p><h2 id="策略模式的排序应用"><a href="#策略模式的排序应用" class="headerlink" title="策略模式的排序应用"></a>策略模式的排序应用</h2><p>Maven依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-params<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Strategy类定义为<code>SortStrategy.java</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提供选择排序实现机制<code>InsertSortStrategy.java</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertSortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">SortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> position<span class="token punctuation">,</span> length <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">T</span> temp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>position <span class="token operator">=</span> i<span class="token punctuation">;</span> position <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span> position<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            data<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提供冒泡排序实现机制<code>BubbleSortStrategy.java</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">SortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> position<span class="token punctuation">,</span> bound<span class="token punctuation">,</span> length <span class="token operator">=</span> record<span class="token punctuation">.</span>length<span class="token punctuation">,</span> exchange <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">T</span> temp<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>exchange <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bound <span class="token operator">=</span> exchange<span class="token punctuation">;</span>            exchange <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> position <span class="token operator">&lt;</span> bound<span class="token punctuation">;</span> position<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> record<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>                    record<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    record<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    exchange <span class="token operator">=</span> position<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单元测试<code>SortStrategyTest .java</code>（省略Context角色）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>blankspace<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">BubbleSortStrategy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>blankspace<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">InsertSortStrategy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>blankspace<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span><span class="token class-name">SortStrategy</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortStrategyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertSortStrategyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InsertSortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> expectedData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>actualData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expectedData<span class="token punctuation">,</span> actualData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bubbleSortStrategyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BubbleSortStrategy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> expectedData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>actualData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expectedData<span class="token punctuation">,</span> actualData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序的编译与运行</title>
      <link href="/2023/01/25/ji-suan-ji-ke-xue-ji-chu/cheng-xu-de-bian-yi-yu-yun-xing/"/>
      <url>/2023/01/25/ji-suan-ji-ke-xue-ji-chu/cheng-xu-de-bian-yi-yu-yun-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><p>C语言源程序要依据语法规则编写。</p><p>C语言源程序主要包括以下部分：</p><ul><li>预处理器指令</li><li>函数</li><li>变量</li><li>语句和表达式</li><li>注释</li></ul><p>C语言源程序样板：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐阅读：<a href="https://www.runoob.com/cprogramming/c-tutorial.html">菜鸟教程 - C语言教程</a></p><p>推荐阅读：<a href="https://blog.csdn.net/weixin_43896318/category_11653076.html">程序设计的基本理论和常识</a></p><p>开发流程：</p><ol><li>打开文本编辑器或集成开发工具，创建C语言工程和C程序源文件，编写C语言代码。</li><li>保存C程序源文件。</li><li>打开命令终端，进入到保存文件所在的目录。</li><li>键入<code>gcc main.c</code>，输入回车，编译代码。</li><li>如果代码中没有错误，命令提示符会跳到下一行，并生成<code>a.out</code>可执行文件，通过<code>-o</code>选项可以改编可执行文件名称。</li><li>键入可执行文件的名称，例如<code>./main</code>或<code>./a.out</code>。</li><li>看到屏幕上显示输出结果。</li></ol><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/1.png" alt="在这里插入图片描述"></p><h1 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h1><p>常用编辑器：Visual Studio Code</p><p>常用IDE：Code Blocks、Dev C++、Visual Studio、CLion</p><h2 id="CLion"><a href="#CLion" class="headerlink" title="CLion"></a>CLion</h2><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/2.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/3.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/4.png" alt="在这里插入图片描述"></p><p>建议从<a href="https://www.jetbrains.com/clion/">官网</a>下载程序，或者通过ToolBox安装。</p><p>刚刚安装的CLion需要配置后才能Run程序：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/5.png" alt="在这里插入图片描述"></p><p>我们可以下载并安装MinGW编译器：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/6.jpg" alt="在这里插入图片描述"></p><p>如上图，点击download，会跳转网页，这里推荐另一个网页可<a href="https://sourceforge.net/projects/mingw-w64/">下载MinGW</a>：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/7.png" alt="在这里插入图片描述"></p><p>不要直接点击绿色的Download，而是往下找：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/8.png" alt="在这里插入图片描述"></p><p>选上图这个版本即可。然后开始下载：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/9.png" alt="在这里插入图片描述"></p><p>然后找到需要的位置，解压：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/10.png" alt="在这里插入图片描述"></p><p>此时需要找到文件路径添加到CLion的Settings里（注意：路径要写到mingw64，建议直接复制粘贴）：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/11.png" alt="在这里插入图片描述"></p><p>稍作等待，待全部出现上图的绿色对勾就OK了，点击“OK”这个Button：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/12.png" alt="在这里插入图片描述"></p><p>等配置完成，Run一下HelloWorld试试吧：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/13.png" alt="在这里插入图片描述"></p><h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><p>想要更好地学习和掌握C语言，还是要掌握Linux操作系统。</p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/104792128">VMware安装CentOS7系统</a></p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/119749522">翻译、编译、解释、汇编</a></p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/102681464">C语言源程序的编译与执行</a></p><p>推荐阅读：<a href="https://www.cnblogs.com/wang_yb/p/3990952.html">Makefile使用总结 </a></p><p>通常，程序以二进制可执行文件的形式驻留在磁盘上。例如，<code>a.out</code>或<code>hello.exe</code>。为了在CPU上运行，程序必须进入内存并置于进程的上下文中。</p><p>C语言源文件将被<strong>编译器(compiler)</strong> 编译成目标文件，这些目标文件旨在加载到任何物理内存位置，这种格式称为<strong>可重定位目标文件</strong>。</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><strong>链接器(linker)</strong> 将这些可重定位目标文件整合成一个<strong>二进制可执行文件</strong>。在链接阶段，也可能包含其他目标文件或库，通过-lm指定。</p><p>实际上，不见得所有库都链接到可执行文件并加载到内存中，大多数操作系统都允许程序在加载程序时动态链接库。例如，Windows支持动态链接库(DLL)。这种方法的好处是它避免了链接和加载可能最终不会被用于可执行文件的库。动态链接库是有条件地链接的，如果在程序运行时需要它，它就会被加载。链接器会插入重定向信息，允许它在程序加载时动态链接和加载。</p><p>目标文件和可执行文件通常具有标准格式，包括编译后的机器代码和符号表，其中包含有关程序中引用的函数和变量的元数据。对于UNIX和Linux系统，这种标准格式称为可执行和可链接格式(ELF)。可重定位文件和可执行文件有不同的ELF格式。可执行文件的ELF文件中有一条信息是程序的入口点，它包含程序运行时要执行的第一条指令的地址。Windows系统使用PE(Portable Executable)格式，MacOS使用Mach-O格式。</p><p><strong>动态链接</strong>类似于下文提到的动态加载，通常用于系统库，如语言的子程序库。动态链接库为系统库，可链接到用户程序，以便运行。有的操作系统只支持静态链接，它的系统库与其他目标模块一样，通过加载程序，被整合到二进制程序映像。如果不支持动态链接，系统内的所有程序都需要一份语言库的副本或那些被程序所引用的子程序，极大地浪费了磁盘空间和内存空间。</p><p>如果支持动态链接，在二进制映像内，每个库程序的引用都有一个存根(stub)。该存根是一小段代码，用来指出如何定位适当的内存驻留库程序，或者当程序不在内存里时应如何加载库。当执行存根时，它首先检查所需程序是否已在内存中。如果不在，就将程序加载到内存。不管如何，存根会用程序地址来替换自己，并开始执行程序。因此，下次再执行该程序代码时，就可以直接进行，而不会因动态链接产生任何开销。采用这种方案，使用语言库的所有进程只需要一个库代码副本就可以了。</p><p>动态链接也可用于库的更新。一个库可以被新的版本所替代，而且使用该库的所有程序会自动使用新的版本。没有动态链接，所有这些程序应当重新链接以便访问新的库。为了不让程序意外执行新的、不兼容版本的库，版本信息包括在程序和库中。一个库的多个版本可以都加载到内存，程序将通过版本信息来确定使用哪个库的副本。版本更迭会导致版本号的增加。因此，只有采用新库编译的程序才会受新库的不兼容改动的影响。在新库安装之前链接的其他程序将继续使用较旧的库。这种系统也称为共享库。</p><p>与动态加载不同，动态链接通常需要操作系统的帮助。如果内存中的进程是彼此保护的，那么只有操作系统才可以检查所需程序是否在某个进程的内存空间内，或是允许多个进程访问同样的内存地址。</p><h1 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h1><p><strong>加载器(loader)</strong> 用于将二进制可执行文件加载到内存中，使其有资格在CPU上运行。链接和加载需要经过<strong>重定向</strong>，它将实际地址分配给程序部分并调整程序中的代码和数据以匹配这些地址。例如，代码可以调用库函数并在执行时访问其变量。</p><p>如果一个进程的整个程序和所有数据都应在物理内存中，进程的大小受限于内存的大小。为了获得更高的内存空间利用率，可以使用<strong>动态加载</strong>。采用动态加载时，一个程序只有在调用时才会加载。所有程序都以可重定位加载格式保存在磁盘上，等到主程序被加载到内存即可执行。</p><p>当一个程序需要调用另一个程序时，调用程序首先检查另一个程序是否已加载。如果没有加载，可重定位链接程序会加载所需的程序到内存，并更新程序的地址表以反映这一变化。接着，控制传递给新加载的程序。</p><p>动态加载的优点是，当程序被需要时，它才会被加载。当大多数代码需要用来处理异常情况时，这种方法特别有效。在这种情况下，虽然整个程序可能很大，但是所用到的和加载的部分可能很小。</p><p>与动态链接不同，动态加载不需要操作系统提供特别支持。用户只需要认真设计程序以利用这种方法的优点，而操作系统可以通过实现动态加载的程序库来帮助程序员更好地编程。</p><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><p>推荐阅读：<a href="https://www.cnblogs.com/chip/articles/4289623.html">程序在内存中运行的奥秘</a></p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/128744560">操作系统</a></p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/128746107">操作系统的进程管理</a></p><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/128747625">操作系统的内存管理</a></p><p>完成上述过程后，如果想要运行程序，只需在命令行中输入可执行文件的名称即可，例如<code>./main</code>。</p><p>利用UNIX/Linux系统执行程序的可执行文件，可以通过命令终端或GUI界面。<br>在终端中输入程序名称运行程序时，Shell首先<strong>创建一个新进程</strong>以使用fork()系统调用运行该程序。然后Shell使用exec()系统调用<strong>调用加载程序</strong>，将可执行文件的名称传递给 exec()。加载程序然后使用新创建的进程的地址空间将指定的程序加载到内存中。<br>在GUI界面操作时，<strong>双击</strong>与可执行文件关联的图标会使用类似的机制调用加载程序。</p><p>多个进程可以共享动态链接库，从而显著节省内存使用。</p><p>printf()的执行也要执行系统调用。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>度量前缀与性能指标</title>
      <link href="/2023/01/18/ji-suan-ji-ke-xue-ji-chu/du-liang-qian-zhui-yu-xing-neng-zhi-biao/"/>
      <url>/2023/01/18/ji-suan-ji-ke-xue-ji-chu/du-liang-qian-zhui-yu-xing-neng-zhi-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="度量前缀"><a href="#度量前缀" class="headerlink" title="度量前缀"></a>度量前缀</h1><p>每个领域都有自己衡量事物的方式，计算机领域也不例外。计算机人员要互相告诉对方某物有多大或有多快，他们必须使用相同的度量单位。</p><p>下表给出了计算机科学中可能会大量用到的前缀及其数值含义。</p><table><thead><tr><th align="center">前缀</th><th align="center">符号</th><th align="center">10进制</th><th align="center">2进制</th></tr></thead><tbody><tr><td align="center">Kilo</td><td align="center">K</td><td align="center">${10}^{3}$</td><td align="center">${2}^{10}$</td></tr><tr><td align="center">Mega</td><td align="center">M</td><td align="center">${10}^{6}$</td><td align="center">${2}^{20}$</td></tr><tr><td align="center">Giga</td><td align="center">G</td><td align="center">${10}^{9}$</td><td align="center">${2}^{30}$</td></tr><tr><td align="center">Tera</td><td align="center">T</td><td align="center">${10}^{12}$</td><td align="center">${2}^{40}$</td></tr><tr><td align="center">Peta</td><td align="center">P</td><td align="center">${10}^{15}$</td><td align="center">${2}^{50}$</td></tr><tr><td align="center">Exa</td><td align="center">E</td><td align="center">${10}^{18}$</td><td align="center">${2}^{60}$</td></tr><tr><td align="center">Zetta</td><td align="center">Z</td><td align="center">${10}^{21}$</td><td align="center">${2}^{70}$</td></tr><tr><td align="center">Yotta</td><td align="center">Y</td><td align="center">${10}^{24}$</td><td align="center">${2}^{80}$</td></tr><tr><td align="center">Mili</td><td align="center">m</td><td align="center">${10}^{-3}$</td><td align="center">${2}^{-10}$</td></tr><tr><td align="center">Micro</td><td align="center">μ</td><td align="center">${10}^{-6}$</td><td align="center">${2}^{-20}$</td></tr><tr><td align="center">Nano</td><td align="center">n</td><td align="center">${10}^{-9}$</td><td align="center">${2}^{-30}$</td></tr><tr><td align="center">Pico</td><td align="center">p</td><td align="center">${10}^{-12}$</td><td align="center">${2}^{-40}$</td></tr><tr><td align="center">Femto</td><td align="center">f</td><td align="center">${10}^{-15}$</td><td align="center">${2}^{-50}$</td></tr><tr><td align="center">Atto</td><td align="center">a</td><td align="center">${10}^{-18}$</td><td align="center">${2}^{-60}$</td></tr><tr><td align="center">Zepto</td><td align="center">z</td><td align="center">${10}^{-21}$</td><td align="center">${2}^{-70}$</td></tr><tr><td align="center">Yocto</td><td align="center">y</td><td align="center">${10}^{-24}$</td><td align="center">${2}^{-80}$</td></tr></tbody></table><p>这些前缀可以与具体的度量单位组成新的度量单位。例如，对于bps这个单位，可以加上k组成kbps，可以加上M组成Mbps。</p><p>K、M等前缀都不是单位，只有数值含义。例如，2GB可以表示存储量，但2G只能表示以1B为存储单位的数量。</p><p>以K为例，看起来${10}^{3}$和${2}^{10}$分别是其十进制和二进制表示，但大家都知道${2}^{10}=1024≠1000={10}^{3}$。<br>遗憾的是，二者明明不同，却常常被混用。了解这些前缀的具体含义很重要。<br>例如，一千字节 (1KB) 的内存通常是 $1024$ 字节的内存，而不是 $1000$ 字节的内存。但是，一个 1GB 的磁盘驱动器实际上可能是 10 亿字节而不是 ${2}^{30}$，这意味着实际获得的存储空间比想象的要少。所有 3.5 英寸软盘都被描述为存储 1.44MB 的数据，而实际上它们存储 1440KB（或 $1440 ×{2}^{10} = 1474560$ 字节）。<br>具体应用的时候，要认真了解前缀的具体含义，以确保确切知道 1K、1KB 或 1G 代表什么。</p><p>另外，$2$的幂次也要记住：</p><ul><li>${2}^{0}=1$</li><li>${2}^{1}=2$</li><li>${2}^{2}=4$</li><li>${2}^{3}=8$</li><li>${2}^{4}=16$</li><li>${2}^{5}=32$</li><li>${2}^{6}=64$</li><li>${2}^{7}=128$</li><li>${2}^{8}=256$</li><li>${2}^{9}=512$</li><li>${2}^{10}=1024$</li><li>${2}^{11}=2048$</li><li>${2}^{12}=4096$</li><li>${2}^{13}=8192$</li><li>${2}^{14}=16384$</li><li>${2}^{15}=32768$</li><li>$……$</li></ul><h1 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h1><p>下面是一些重要的计算机性能指标：</p><ol><li>吞吐量：吞吐量指信息流入、处理和流出系统的速率。它取决于CPU能多快地取指令，数据能够多快地从内存取出或存入，以及所得结果能够多快地从内存送到输出设备。这些决定因素中的任一步骤都与主存紧密相关，因此吞吐量主要取决于主存的存取周期。</li><li>响应时间：响应时间指从提交作业到得到CPU响应所经历的时间。响应时间越短，吞吐量越大。</li><li>主频：主频是机器内部主时钟的频率，是衡量机器速度的重要参数，其常用单位是Hz、MHz等。</li><li>CPU周期：CPU周期又称为机器周期，通常用从内存读取一条指令字的最短时间来定义。一个指令周期常由若干个CPU周期构成。</li><li>CPU时钟周期：主频的倒数，CPU最小的时间单位。</li><li>CPI、MIPS、FLOPS：<ol><li>CPI：执行一条指令所需要的时钟周期数。</li><li>MIPS：每秒钟可执行的百万条指令数。</li><li>FLOPS：每秒钟执行的浮点运算次数。<ol><li>MFLOPS：每秒钟执行的百万次浮点运算数。</li><li>GFLOPS：每秒钟执行的十亿次浮点运算数。</li><li>TFLOPS：每秒钟执行的万亿次浮点运算数。</li><li>PFLOPS：每秒钟执行的千万亿次浮点运算数。</li></ol></li></ol></li><li>CPU执行时间：CPU执行时间指CPU对特定程序的执行时间。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻译、编译、解释、汇编</title>
      <link href="/2021/08/17/ji-suan-ji-ke-xue-ji-chu/fan-yi-bian-yi-jie-shi-hui-bian/"/>
      <url>/2021/08/17/ji-suan-ji-ke-xue-ji-chu/fan-yi-bian-yi-jie-shi-hui-bian/</url>
      
        <content type="html"><![CDATA[<h1 id="翻译程序"><a href="#翻译程序" class="headerlink" title="翻译程序"></a>翻译程序</h1><p>翻译程序是指把高级语言源程序翻译成机器语言程序（目标代码）的软件。</p><p>翻译程序包括编译程序和解释程序。</p><h1 id="编译程序"><a href="#编译程序" class="headerlink" title="编译程序"></a>编译程序</h1><p>编译程序将高级语言源程序一次全部翻译成目标程序，每次执行程序时，只需执行目标程序，因此只要源程序不变，就无须重新编译。</p><p>虽然高级语言号称跨平台、可移植，但是同一种高级语言在不同计算机体系结构下，编译生成的目标程序是不同的。目标程序与体系结构相关，可惜仍不是计算机硬件能够直接执行的程序。</p><h1 id="汇编程序"><a href="#汇编程序" class="headerlink" title="汇编程序"></a>汇编程序</h1><p>汇编程序也是一种语言翻译程序，它把汇编语言源程序翻译成机器语言程序。</p><p>汇编语言是一种面向机器的低级语言，是机器语言的符号表示，与机器语言一一对应。</p><p>需要注意的是，编译后生成的目标文件不是汇编语言源程序，比如Java编译后生成的.class。</p><p>参考代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">section .datamsg db <span class="token string">'Hello, Assembly!'</span>, 0x0a <span class="token punctuation">;</span> 创建字符串变量lenequ$ - msg                 <span class="token punctuation">;</span> 获取字符串的长度 section .textglobal _start                   <span class="token punctuation">;</span> 使用gcc_start:                         <span class="token punctuation">;</span> 汇编程序执行的入口    movedx, len                <span class="token punctuation">;</span> 加载字符串长度    mov ecx, msg                <span class="token punctuation">;</span> 加载.data部分中创建的变量的内存地址    mov ebx, <span class="token number">1</span>                  <span class="token punctuation">;</span> 向stdout中写入字符串    mov eax, <span class="token number">4</span>                  <span class="token punctuation">;</span> 系统调用sys_write    int 0x80                    <span class="token punctuation">;</span> restart_syscall，<span class="token variable"><span class="token variable">`</span>int 80h<span class="token variable">`</span></span>也行    moveax, <span class="token number">1</span>                  <span class="token punctuation">;</span> 系统调用sys_exitint0x80                    <span class="token punctuation">;</span> restart_syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>学习资料：</p><ul><li><a href="https://www.tutorialspoint.com/compile_assembly_online.php">汇编语言在线调试环境</a></li><li><a href="https://asmtutor.com/">汇编语言在线教程</a></li><li><a href="https://chromium.googlesource.com/chromiumos/docs/+/HEAD/constants/syscalls.md">Linux系统调用表</a></li></ul><h1 id="解释程序"><a href="#解释程序" class="headerlink" title="解释程序"></a>解释程序</h1><p>解释程序将源程序的一条语句翻译成对应的机器目标代码，并立即执行，然后翻译下一条源程序语句并执行，直至所有源程序语句全部被执行完，不会生成目标程序。</p><h1 id="编译型语言和解释型语言"><a href="#编译型语言和解释型语言" class="headerlink" title="编译型语言和解释型语言"></a>编译型语言和解释型语言</h1><p>编译型语言的程序执行之前，需要一个编译的过程，把程序编译成为机器语言的文件，例如exe文件，运行时不用重新翻译。由于翻译只进行一次，运行时不需要翻译，所以编译型语言的程序执行效率较高。C、C++、Rust等都是典型的编译型语言。</p><p>解释型语言是相对于编译型语言存在的，其源代码不是直接翻译成机器语言，而是先翻译成中间代码，再由解释器对中间代码进行解释运行。Python、JavaScript、Perl、Shell等脚本语言都是解释型语言。</p><p>解释型语言的程序不需要编译，程序在运行时才翻译成机器语言，每执行一次都要翻译一次。因此效率比较低。</p><p>编译型语言与解释型语言，两者各有利弊。<br>前者由于程序执行速度快，同等条件下对系统要求较低，因此开发操作系统、大型应用程序、数据库系统等时会采用它们。<br>后者由于对速度要求不高、对不同系统平台间的兼容性有一定要求，因此编写网页脚本、服务器脚本及辅助开发接口时会采用它们。</p><p>编译型语言不如解释型语言跨平台性好。<br>编译型语言开发程序后，需要通过编译器把程序编译成机器语言。解释型语言程序进行移植后，要重新编译。<br>Java虽然需要编译，但本质是解释型语言，需要通过编译器编译成class文件，在什么平台运行需要对应平台的解释器。跨平台的前提是平台上必须要有相匹配的JVM。</p><h2 id="C程序编译"><a href="#C程序编译" class="headerlink" title="C程序编译"></a>C程序编译</h2><p>C程序可以在许多不同的机器上运行。这种可移植性是C语言的另一个优点。程序首先在目标机器上使用C编译器编译。存在略有不同的C编译器版本，包括cc（C编译器），或者gcc（GNU C编译器）。</p><p>这里我们用gcc编译并运行一个C程序，该编译器可以免费下载。它可以直接运行在Linux机器上，也可以在Windows机器上通过Cygwin环境访问。它可以用于许多嵌入式系统，如Microchip PIC32微控制器。</p><p>下面描述的C文件创建、编译和执行的一般过程对于任何C程序都是相同的。</p><ol><li>创建文本文件（Windows可用经典的记事本，但是不要用Word这种有格式化的，和Java要求一样）。我们这里取名为hello.c。</li><li>在终端窗口中，切换到hello.c文件的目录，在命令提示符处输入<code>gcc hello.c</code>。</li><li>编译器创建一个可执行文件。默认情况下，可执行文件名为a.out（Windows机器上是a.exe）。</li><li>在命令提示符处，键入 <code>./a.out</code>（Windows为 <code>./a.exe</code>），然后按回车。</li><li>终端窗口显示输出。</li></ol><p>gcc也可以编译一组多个C源文件。这样的一组C文件中只能包含一个main()函数，通常在main.c中，切记切记。<br>编译命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc main.c file2.c file3.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令行中输入<code>gcc --help</code>可以查看编译器选项：</p><table><thead><tr><th>编译器选项</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>-ooutfile</td><td>指定输出文件名</td><td>gcc -o hello hello.c</td></tr><tr><td>-S</td><td>创建汇编语言输出文件（不可执行）</td><td>gcc -S hello.c this produces hello.s</td></tr><tr><td>-v</td><td>详细模式——在完成编译时输出编译结果和过程</td><td>gcc -v hello.c</td></tr><tr><td>-Olevel</td><td>指定优化水平（通常为0~3），生成更快和更小的代码，但是代价是编译时间长</td><td>gcc -O2 hello.c</td></tr><tr><td>–version</td><td>列出编译器版本</td><td>gcc -version</td></tr><tr><td>–help</td><td>列出所有命令行选项</td><td>gcc - -help</td></tr><tr><td>–Wall</td><td>输出所有警告</td><td>gcc -Wall hello.c</td></tr></tbody></table><p>argc表示命令行上参数的个数。argv表示参数向量，为命令行上发现的字符串数组。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"argv[%d]=%s\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">gcc <span class="token operator">-</span>o testargs<span class="token punctuation">.</span>c <span class="token punctuation">.</span><span class="token operator">/</span>testargs arg1 <span class="token number">25</span> lastarg<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>控制台输出：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">/</span>testargsargv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>arg1argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">25</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>lastarg<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要数字参数的程序可以使用stdlib.h中的函数将字符串参数转换为数字。</p><p>编译过程中编译器的整体操作：</p><ol><li>通过包含引用库和扩大宏定义来预处理文件。</li><li>忽略所有的不必要信息，如注释。</li><li>将高级代码转换为用二进制表示的本地处理器的简单指令，即机器语言。</li><li>将所有的指令转换成一个可由计算机读取和执行的简单二进制可执行文件。</li></ol><p>每种机器语言特定于一种给定的机器，因此程序必须专门为其将要运行的系统进行编译。</p><h2 id="Java程序编译和解释"><a href="#Java程序编译和解释" class="headerlink" title="Java程序编译和解释"></a>Java程序编译和解释</h2><p>以Java为例，<code>Hello.java</code>编译成.class字节码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">javac Hello.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释执行<code>Hello.class</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java Hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Java编译的补充知识：</p><ul><li><a href="https://blankspace.blog.csdn.net/article/details/104552096">命令行下的Java包结构编译与执行</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/104555618">命令行下的Java模块化建构、编译与执行</a></li></ul><h2 id="Python程序解释"><a href="#Python程序解释" class="headerlink" title="Python程序解释"></a>Python程序解释</h2><p>以Python为例，执行<code>hello.py</code>脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python hello.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>透明性</title>
      <link href="/2021/08/16/ji-suan-ji-ke-xue-ji-chu/tou-ming-xing/"/>
      <url>/2021/08/16/ji-suan-ji-ke-xue-ji-chu/tou-ming-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="透明性"><a href="#透明性" class="headerlink" title="透明性"></a>透明性</h1><p>自然科学里，透明性是物体透过可见光并散射较少的性质。<br>生活里，我们通常强调“公开透明”，所谓看得见摸得着。</p><p>这种认识会对计算机初学者带来不小的困扰，“XX对XXX是透明的”这种论调经常出现却不能被理解。</p><p>其实，在计算机领域，在某一类人眼中，如果<strong>感受不到</strong>某个事物或属性的存在，则对该类人而言，该事物是<strong>透明</strong>的。</p><p>计算机科学中存在着大量的抽象，特别是对于分层的体系结构，下层对上层屏蔽复杂性并向上层提供服务接口，下层用户知道的某些实现细节对上层隐藏，故上层用户不必知晓某些下层的实现细节，这就是一种下层对上层用户来说的透明性。</p><p>对于高级语言程序员来说，计算机体系结构的复杂内容不是他们关注的内容，他们要基于他们的“跨平台”编程语言完成应用程序的开发，即便不知道底层的复杂性，此时，体系结构对于这些程序员来说就是透明的。</p><p>当然，现实情况是，封装好的东西，应用者不了解其背后的实现原理，也很难达到深刻的理解和掌握。<a href="https://blankspace.blog.csdn.net/article/details/115191951">抽象泄漏</a>自然很难被避免，因为不懂底层，我们也很难走得很远，虽然不是必须懂。</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>协议是控制两个对等实体进行通信的规则的集合，是“水平的”，是控制对等实体之间通信的规则。</p><p>在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下层所提供的服务。<br>本层的服务用户只能看见服务而无法看见下层的协议。下层的协议对上层的服务用户是透明的。</p><p>数据链路层支持<strong>透明传输</strong>：不管所传输数据是什么样的比特组合，都能在链路上传输（哪怕数据中恰好出现了与帧定界符相同的比特组合）。</p><h2 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h2><p><a href="https://blankspace.blog.csdn.net/article/details/113634653">电子计算机的分层抽象</a>，可以将计算机分为九层：应用程序层、操作系统层、体系结构层、微结构层、逻辑层、数字电路层、模拟电路层、器件层、物理层。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E9%80%8F%E6%98%8E%E6%80%A7/1.png" alt="电子计算机的分层抽象"></p><p><strong>自底向上</strong>各层情况是：</p><ul><li>物理层关注的是电子运动，由麦克斯韦方程组、量子力学等支持。 </li><li>器件层关注的是晶体管、真空管等电子元器件，这些器件都有明确的外部连接点terminal，建立起了每个terminal上电压与电流之间的关系模型。 </li><li>模拟电路层关注的是器件组合在一起构成的放大器等组件，输入输出都是连续的电压值。 </li><li>数字电路层关注的是逻辑门，电压被控制为离散的值表示为0和1。 </li><li>逻辑层关注的是由数字电路层的逻辑门构成的逻辑组件，如加法器等。 </li><li>微结构层将逻辑组件组合在一起以实现体系结构中定义的指令。 </li><li>体系结构描述的是程序员观点的计算机抽象。 </li><li>操作系统是和硬件最为密切的程序，既是资源分配器，又控制各着种I/O设备和用户程序的需求。 </li><li>应用软件基于操作系统实现多种多样的应用功能。</li></ul><p>例如：</p><ul><li>对于器件层，物理层的电子运动是透明的，不可见。 </li><li>对于操作系统层，体系结构的内容是透明的，不可见。</li><li>……</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统</title>
      <link href="/2021/03/30/ji-suan-ji-ke-xue-ji-chu/ji-suan-ji-xi-tong/"/>
      <url>/2021/03/30/ji-suan-ji-ke-xue-ji-chu/ji-suan-ji-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机系统的组成"><a href="#计算机系统的组成" class="headerlink" title="计算机系统的组成"></a>计算机系统的组成</h1><p>计算机由计算机硬件和计算机软件组成。</p><ol><li>硬件：计算机的实体、如主机、外设等</li><li>软件：<ul><li>系统软件：管理整个计算机系统的软件<ul><li>语言处理程序，如编译器</li><li><a href="https://blog.csdn.net/weixin_43896318/category_9500428.html">操作系统</a></li><li><a href="https://blog.csdn.net/weixin_43896318/category_9673746.html">数据库管理系统</a>，注意不是数据库</li><li><a href="https://blog.csdn.net/weixin_43896318/category_9673744.html">网络软件</a></li></ul></li><li>应用软件： 按任务需要编制成的各种程序</li></ul></li></ol><h1 id="计算机发展历程"><a href="#计算机发展历程" class="headerlink" title="计算机发展历程"></a>计算机发展历程</h1><ol><li>计算机硬件的发展<ul><li>电子管时代(1946~1958)：操作指令是为特定任务而编制的，每种机器有各自不同的机器语言，功能受到限制，速度也慢。另一个明显特征是使用真空电子管和磁鼓储存数据。</li><li>晶体管时代(1956-1963)：晶体管代替了体积庞大电子管，使用磁芯存储器。体积小、速度快、功耗低、性能更稳定。还有现代计算机的一些部件，如打印机、磁带、磁盘、内存、操作系统等。在这一时期出现了更高级的COBOL和FORTRAN等编程语言，使计算机编程更容易。新的职业(程序员、分析员和计算机系统专家)和整个软件产业由此诞生。</li><li>中小规模集成电路(1964-1971)：以中小规模集成电路，来构成计算机的主要功能部件。主存储器采用半导体存储器。运算速度可达每秒几十万次至几百万次基本运算。在软件方面，操作系统日趋完善。</li><li>超大规模集成电路(1971-至今)：从1970年以后采用大规模集成电路(LSI)和超大规模集成电路(VLSI)为主要电子器件制成的计算机，重要分支是以大规模、超大规模集成电路为基础发展起来的微处理器和微型计算机。</li></ul></li><li>计算机编程语言<ul><li>机器语言：二进制代码</li><li>汇编语言：助记符</li><li>高级语言：<a href="https://blog.csdn.net/weixin_43896318/category_9400008.html">C/C++</a>、<a href="https://blog.csdn.net/weixin_43896318/category_9379712.html">Java</a>、……</li><li><a href="https://blankspace.blog.csdn.net/article/details/102681129">编程语言的抽象层次比较</a></li><li>高级语言转化为汇编语言的过程称为编译，汇编语言到机器语言的过程称为汇编，高级语言直接转化为机器语言称为解释</li></ul></li><li>计算机的分类和发展方向<ul><li>分类<ul><li>电子模拟计算机</li><li>电子数字计算机<ul><li>专用机</li><li>通用机</li></ul></li><li>指令流和数据流分类</li></ul></li><li>发展方向(两极分化)</li></ul></li></ol><h1 id="计算机摩尔定律和洛克定律"><a href="#计算机摩尔定律和洛克定律" class="headerlink" title="计算机摩尔定律和洛克定律"></a>计算机摩尔定律和洛克定律</h1><p>超大规模集成电路时代，芯片微型化不断推进，尽头在何处？晶体管能做到多小？芯片可以被包装到多密？没有人可以肯定地回答。</p><p>每年，科学家们都会继续阻挠预言家定义集成极限的尝试。事实上，当1965年英特尔创始人戈登·摩尔声明“<strong>集成电路中晶体管的密度每年都会翻一番</strong>”时，不止一位怀疑者表示怀疑。这一预测的当前版本通常被表述为“<strong>硅芯片的密度每18个月翻一番</strong>”。这一论断被称为<strong>摩尔定律</strong>。根据摩尔的预计，他的论断只能持续10年。然而，芯片制造工艺的进步使这一论断一直持续至今。</p><p>与其说摩尔定律是自然法则，不如说摩尔定律是对创新的期待和芯片设计的重要推动力。摩尔定律自1965年被提出以来一直成立，但为了做到这一点，芯片制造商已经从一种技术跳到另一种技术。</p><p>遗憾的是，根据目前的技术，摩尔定律不可能永远成立。按照现在的微型化速度，要将整个太阳系集成到一块芯片上，大约需要500年的时间。因此，成本可能是最终的制约因素。由英特尔早期资本家亚瑟.洛克提出的<strong>洛克定律</strong>是摩尔定律的必然结果：“<strong>制造半导体的资本设备成本将每四年翻一番</strong>。”洛克定律源于一位金融家的观察，他看到新芯片设施的价格标签从1968年的约12000美元上升到1990年代中期的1200万美元。2005 年，建造新芯片厂的成本接近30亿美元。按照这个速度，到2035年，不仅一个存储单元的大小将小于一个原子，而且还需要全世界的全部财富来构建一个芯片。因此，即使我们继续让芯片变得更小、更快，最终的问题可能还是我们是否有能力制造它们。此外，著名物理学家斯蒂芬霍金称，芯片制造商在寻求“执行”摩尔定律时受到两个基本限制的限制：光速和物质的原子性质。这意味着无论技术如何发展，摩尔定律最终都会失效。</p><p>当然，如果摩尔定律成立，洛克定律就必然失效。若想如此，计算机必须转向一种完全不同的技术。近些年，计算机科学家对新计算范式的研究一直在认真进行。围绕有机计算、超导、分子物理学和量子计算打造的实验室原型已经得到展示。利用量子力学的变幻莫测来解决计算问题的量子计算机尤其令人兴奋。量子系统的计算速度不仅会比以前使用的任何方法快得多，而且还会彻底改变我们定义计算问题的方式。如今被认为是荒谬的、不可行的问题也可能在不久的将来被计算机科学家解决。</p><h1 id="计算机硬件的基本组成"><a href="#计算机硬件的基本组成" class="headerlink" title="计算机硬件的基本组成"></a>计算机硬件的基本组成</h1><ul><li><a href="https://blankspace.blog.csdn.net/article/details/115320818">存储程序原理</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/115312141">冯诺依曼体系结构</a></li><li>CPU=控制器+运算器</li><li>主机=CPU+主存储器</li><li>外设=输入设备+输出设备+辅助存储器</li><li>计算机功能部件<ul><li>存储器<ul><li>主存储器<ul><li>存储字：存储单元存储的一串二进制代码称为存储字</li><li>存储字长：存储字的位数，与MDR的位数相同</li><li>存储单元：存储单元数量=$2^{MAR}$的位数</li><li>存储容量$=$存储单元个数$\times$存储字长</li><li>基本组成<ul><li>存储体：存放二进制信息，由若干存储单元构成</li><li>地址寄存器MAR：存放访存地址</li><li>数据寄存器MDR：暂存要从存储器中读或写的信息</li><li>时序控制逻辑：产生存储器操作所需的各种时序信号</li></ul></li><li>注意：MAR和MDR逻辑上在主存中，实际上在CPU中</li></ul></li><li>辅助存储器</li></ul></li><li>运算器<ul><li>功能<ul><li>算术运算</li><li>逻辑运算</li></ul></li><li>基本组成<ul><li>算术逻辑单元ALU</li><li>乘商寄存器MQ</li><li>操作数寄存器X</li><li>程序状态寄存器PSW</li></ul></li></ul></li><li>控制器<ul><li>功能：指挥各部件自动协调地进行工作</li><li>基本组成<ul><li>控制单元CU：分析指令，给出控制信号</li><li>指令寄存器IR：存放当前的指令，内容来自MDR</li><li>程序计数器PC：用来存放当前欲执行指令的地址，可以自动加1</li></ul></li></ul></li><li>输入设备</li><li>输出设备</li></ul></li></ul><h1 id="计算机工作过程"><a href="#计算机工作过程" class="headerlink" title="计算机工作过程"></a>计算机工作过程</h1><ol><li>把程序和数据装入主存储器</li><li>把源程序转换成可执行文件</li><li>从可执行文件的首地址开始逐条执行指令</li></ol><h1 id="计算机国际标准组织"><a href="#计算机国际标准组织" class="headerlink" title="计算机国际标准组织"></a>计算机国际标准组织</h1><p>一些标准组织拥有正式的章程，并在国际上被公认为电子和计算机某些领域的权威机构。</p><p>电气和电子工程师协会 (IEEE) 是一个致力于促进电子和计算机工程专业发展的组织。 IEEE 通过出版一系列技术文献积极促进全球工程界的利益。 IEEE 还为各种计算机组件、信号协议和数据表示制定了标准，仅举其参与的几个领域。 IEEE 为创建新标准制定了一个民主但复杂的程序。它的最终文件备受尊重，通常在需要修改之前会保留数年。</p><p>国际电信联盟 (ITU) 位于瑞士日内瓦。 ITU 的前身是 ComitéConsultatif InternationalTélégraphiqueetTéléphonique，即国际电话和电报咨询委员会。顾名思义，ITU 关注电信系统的互操作性，包括电话、电报和数据通信系统。 ITU 的电信部门 ITU-T 制定了许多标准，您将在文献中看到这些标准。您会看到这些标准以 ITU-T 或该组织以前的缩写 CCITT 为前缀。</p><p>许多国家，包括欧洲共同体，都委托伞式组织在各种国际团体中代表他们的利益。代表美国的团体是美国国家标准协会 (ANSI)。除了在欧洲标准化委员会 CEN（欧洲标准化委员会）中拥有发言权外，英国还拥有英国标准协会 (BSI)。</p><p>国际标准化组织 (ISO) 是协调全球标准制定的实体，包括 ANSI 与 BSI 等的活动。 ISO 不是首字母缩略词，而是源自希腊语 isos，意思是“平等”。 ISO 由 2800 多个技术委员会组成，每个委员会都负责一些全球标准化问题。它的兴趣范围从摄影胶片的行为到螺纹的螺距，再到计算机工程的复杂世界。国际标准化组织促进了全球贸易的激增。如今，ISO 几乎触及我们生活的方方面面。</p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><ul><li>CPU区分指令和数据的依据：指令周期的不同阶段。</li><li><a href="https://blankspace.blog.csdn.net/article/details/114603270">计算机性能指标</a></li><li>总容量=存储单元个数$\times$存储字长(bit)=存储单元个数$\times$存储字长/8(Byte)=$2^{MAR}$的位数$\times$MDR的位数(bit)</li><li>机器字长：计算机进行一次整数运算所能处理的二进制数据的位数。</li><li>存储字长：一个存储单元存储的二进制代码的长度。</li><li>指令字长：一个指令字中包含的二进制代码的位数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VonNeumann体系结构和存储程序原理</title>
      <link href="/2021/03/30/ji-suan-ji-ke-xue-ji-chu/vonneumann-ti-xi-jie-gou-he-cun-chu-cheng-xu-yuan-li/"/>
      <url>/2021/03/30/ji-suan-ji-ke-xue-ji-chu/vonneumann-ti-xi-jie-gou-he-cun-chu-cheng-xu-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="VonNeumann体系结构"><a href="#VonNeumann体系结构" class="headerlink" title="VonNeumann体系结构"></a>VonNeumann体系结构</h1><p>直到现在，几乎所有的通用计算机都遵循冯诺依曼的设计，即一个具有CPU、存储器和I/O设备组成的架构，把指令和数据放在一个存储器中，取指令和传送数据使用一个总线。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VonNeumann%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86/1.png" alt="在这里插入图片描述"></p><p><strong>冯诺依曼体系结构</strong>的特点：</p><ul><li>由三部分硬件组成：一个带有控制单元、算术逻辑单元ALU、寄存器和程序计数器的CPU，一个主存储器系统，一个I/O系统。</li><li>执行顺序指令处理的能力。</li><li>在主存储器系统和CPU的控制单元之间包含一条单一路径，既可以是物理上的也可以是逻辑上的，强制交替指令周期和执行周期。这一单一路径被称为冯诺依曼瓶颈。</li></ul><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VonNeumann%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86/2.png" alt="在这里插入图片描述"></p><p>下图为现代通用计算机组成所包含的组件：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VonNeumann%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86/3.png" alt="在这里插入图片描述"></p><p>冯诺依曼执行周期：</p><ol><li>控制单元从存储器中取下一条程序指令，使用程序计数器确定指令所在的位置。</li><li>指令解码为ALU能理解的语言。</li><li>从存储器取出执行这条指令所需要的任何操作数，并且放到CPU的寄存器中。</li><li>ALU执行这条指令并且把结果放到寄存器或存储器中。</li></ol><p>即<kbd>取址$→$译码$→$执行</kbd>：</p><ul><li>取指  <pre class="line-numbers language-none"><code class="language-none">(PC)-&gt;MAR;M(MAR)-&gt;MDR;(MDR)-&gt;IR;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>分析指令  <pre class="line-numbers language-none"><code class="language-none">OP(IR)-&gt;CU;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>执行指令  <pre class="line-numbers language-none"><code class="language-none">Ad(IR)-&gt;MAR;M(MAR)-&gt;MDR;(MDR)-&gt;ACC;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>可以将存储在访问速度慢的存储介质中的程序和数据复制到访问速度快、易失性的存储介质执行。据此，冯诺依曼体系结构可以简化为<strong>系统总线模型</strong>。</p><p>系统总线可以响应计算机内部的所有数据传送。</p><ul><li>数据总线：把数据在主存储器和CPU寄存器之间移动。</li><li>地址总线：保存数据总线正在访问数据的地址。</li><li>控制总线：传送信息传输时必要的控制信号。</li></ul><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VonNeumann%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86/4.png" alt="在这里插入图片描述"></p><p>冯诺依曼体系结构的其他增强方法包括使用索引寄存器寻址、增加浮点数据、使用中断和异步I/O、增加虚拟存储器以及增加通用寄存器等。</p><p>早期冯诺依曼体系结构要点：</p><ol><li>计算机硬件系统由运算器、存储器、控制器、输入设备、输出设备组成。</li><li>指令和数据以同等地位存于存储器内，并可按地址寻址。</li><li>指令和数据均用二进制代码表示。</li><li>指令由操作码和地址码组成。<ul><li>操作码表示操作的性质。</li><li>地址码表示操作数在存储器中的位置。</li></ul></li><li>指令在存储器内按顺序存放。</li><li>早期的冯诺伊曼以运算器为中心，输入/输出设备通过运算器与存储器传送数据。</li></ol><p>现代计算机的组织结构：以存储器为中心。</p><p>补充：</p><ul><li>冯诺依曼体系结构的基本工作方式是<strong>控制流驱动方式</strong>。</li><li>冯诺依曼体系结构中，CPU区分指令和数据的依据是<strong>指令周期的不同阶段</strong>。</li></ul><h1 id="存储程序原理"><a href="#存储程序原理" class="headerlink" title="存储程序原理"></a>存储程序原理</h1><p>存储程序原理是冯·诺依曼于1946年提出的将程序像数据一样存储到计算机内部存储器中的一种设计原理。</p><p>存储程序原理：将为解决特定问题而编写的程序存放在计算机存储器中，然后按存储器存储程序的首地址执行程序的第一条指令。以后就按照该程序的规定顺序执行其他指令，直至程序结束执行。</p><p>存储程序思想：多种类型的指令和数据均以数字形式存在于存储器中，存储器中既可以存放编辑器程序的源代码，也可以存放相应的编译后的机器码、编译后的程序需要使用的文本，甚至生成机器码的编译器。</p><p>只需将程序和数据加载到存储器中并告诉计算机从给定的存储器地址开始执行即可。将指令和数据以相同的方式处理，极大地简化了计算机系统的存储器硬件和软件。</p><p>该思想导致了存储程序型计算机的诞生。</p><p>计算机采取事先编制程序、存储程序、自动连续运行程序的工作方式，称为存储程序方式。</p><h1 id="突破VonNeumann体系结构"><a href="#突破VonNeumann体系结构" class="headerlink" title="突破VonNeumann体系结构"></a>突破VonNeumann体系结构</h1><p>毫无疑问，冯诺依曼体系结构的提出对计算机科学的发展是跨时代的。时至今日，几乎所有的通用计算机都遵循冯诺依曼体系结构，它们由CPU、存储器和I/O设备组成，它们具有用于指令和数据的单一存储，以及用于获取指令和传输数据的单一总线。遵循冯诺依曼体系结构的计算机顺序执行指令，因此非常适合顺序处理。</p><p>然而，冯诺依曼瓶颈继续困扰着工程师寻找方法来构建快速系统，这些系统既便宜又与大量商用软件兼容。当工程师不必须考虑兼容冯诺依曼体系结构时，他们可以自由使用许多不同的计算模型来完成预期目标。<strong>非冯诺依曼体系结构</strong>是指计算模型与冯诺依曼体系结构所列特征不同的架构。例如，不在内存中存储程序和数据，不按顺序处理程序，具有多条总线。</p><p><strong>哈佛体系结构</strong>是经典的非冯诺依曼体系结构。此类计算机有两条总线，一条用于数据，一条单独用于指令，因此允许数据和指令同时传输。此外，它们的数据和指令也单独存储。许多现代通用计算机使用哈佛体系结构的修改版本，它们具有单独的数据和指令路径但没有单独的存储。纯哈佛体系结构通常用于微控制器(芯片上的完整计算机系统)，例如嵌入式系统、电器、玩具和汽车中的微控制器。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/VonNeumann%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86/5.png" alt="在这里插入图片描述"></p><p>许多非冯诺依曼体系结构的计算机都是为特殊目的而设计的。第一个公认的非冯诺依曼体系结构处理芯片专为图像处理而设计。规约机也是不遵循冯诺依曼体系结构的代表，它是一种面向函数式语言的非冯诺依曼体系结构的计算机。数字信号处理器DSP和媒体处理器也不遵循冯诺依曼体系结构，它们可以对一组(多个)数据执行单个指令，而不是对单个数据执行单个指令。</p><p>许多不同的子领域属于非冯诺依曼类别，包括在硅中实现的神经网络、元胞自动机、认知计算机(通过经验而不是通过编程学习的机器、量子计算机、数据流计算机、并行计算机。它们的共同特点是：计算分布在并行运行的不同处理单元中。它们的不同之处在于：各个组件之间的连接强弱程度并不相同。其中，并行计算机目前最为流行。</p><h1 id="对VonNeumann体系结构的认识"><a href="#对VonNeumann体系结构的认识" class="headerlink" title="对VonNeumann体系结构的认识"></a>对VonNeumann体系结构的认识</h1><p>计算机出现早期，计算机只是辅助计算的机器。随着计算机变得越来越复杂，计算机变成了通用机器，这就需要将每个系统视为一个层次结构，而不是一个巨大的机器。这样层次结构中，每一层都有特定的用途，所有级别都有助于最大限度地减少高级编程语言或应用程序与构成物理硬件的门和线之间的语义差距。作为程序员，对我们影响最为深远的还是冯诺依曼体系结构下的存储程序原理。尽管还有许多其他的体系结构模型，但冯诺依曼体系结构在当今的通用计算机中仍然稳居主导地位。因此，理解冯诺依曼体系结构和冯诺依曼提出的存储程序原理，是入门计算机的必修课。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算理论基础</title>
      <link href="/2021/03/21/ji-suan-ji-ke-xue-ji-chu/ji-suan-li-lun-ji-chu/"/>
      <url>/2021/03/21/ji-suan-ji-ke-xue-ji-chu/ji-suan-li-lun-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>计算理论是研究计算模型的一门学科，是研究理论计算机的科学。</p><p>理论计算机是研究计算机的理论模型，研究计算机的本质，也就是把计算机看成一个数学系统。这是因为，计算机科学的基本思想和模型在本质上是数学(离散)的。</p><p>计算机的基本能力和限制是什么?</p><ul><li>究竟哪些问题, 可通过计算解决？ $→$ 可计算性理论</li><li>解决可计算的问题，究竟需要多少资源？ $→$ 计算复杂性理论</li><li>为了研究计算, 要使用哪些计算模型？ $→$ 形式语言与自动机理论</li></ul><p>计算理论是学习编译原理的基础。</p><p>核心内容：</p><ul><li>正则语言<ul><li>有穷自动机</li><li>正则表达式</li><li>正则语言的性质</li></ul></li><li>上下文无关语言<ul><li>上下文无关文法</li><li>下推自动机</li><li>上下文无关语言的性质</li></ul></li><li>计算导论<ul><li>图灵机及其扩展</li><li>不可判定性</li></ul></li></ul><p>自动机理论：研究抽象机器及其所能解决问题的理论。</p><p>形式语言：经数学定义的语言。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/1.png" alt="在这里插入图片描述"></p><p>字母表：符号(字符)的非空有穷集。<br>$\Sigma_{1}={0,1}$<br>$\Sigma_{2}={a,b,c,d,…,z}$<br>$\Sigma_{3}={x|x是一个汉字}$</p><p>字符串：由某字母表中符号组成的有穷序列。<br>若$\Sigma_{1}={0,1}$，那么$0,1,00,111001$为$\Sigma_{1}$上的字符串。<br>若$\Sigma_{2}={a,b,c,d,…,z}$，那么$ab,cdef$为$\Sigma_{2}$上的字符串。</p><p>空串：记为$\varepsilon$，有$0$个字符的串。<br>字母表$\Sigma$可以是任意的，但都有$\varepsilon\notin\Sigma$。</p><p>符号使用的一般约定：</p><ul><li>字母表：$\Sigma,\Gamma,…$</li><li>字符：$a,b,c,…$</li><li>字符串：$…,w,x,y,z$</li><li>集合：$A,B,C,…$</li></ul><p>文法：一个文法$G$是个有序四元组，记作$G=(V_{N},V_{T},P,S)$。</p><ul><li>$V_{N}$：非终极符(变元)集合，用大写英文字母表示。</li><li>$V_{T}$：终极符集合，这里$V_{N}\cap{V_{T}}=\Phi$，有时记作$V_{N}\cup{V_{T}}=V$。</li><li>$P$：生成式(产生式)的集合。</li><li>$S$：开始变元，$S\in{V_{N}}$。</li></ul><p>文法中使用的符号通常作如下约定：</p><ul><li>用大写英文字母表示变元。S通常表示开始变元。</li><li>用小写的$a,b,c,…$表示终极符。</li><li>用$x,y,z,…$表示终极符串，即$x,y,z,…∈V_{T}^{*}$。</li><li>用$α,β,γ,…$希腊字母表示既含有终极符，也含有非终极符的符号串，即$α,β,γ,…\in(V_{N}\cup{V_{T}})^{*}$。</li></ul><p>设文法$G=(V_{N},V_{T},P,S)$，则：</p><ul><li>$S$是个句型。</li><li>若$αβγ$是个句型，且$β→δ$是$P$中的一个产生式，则$αδγ$也是一个句型。</li></ul><p>按此定义，对于文法$G_{2}$来说，$P={S→0S1|01}$。<br>$S$，$0S1$，$00S11$，$000111$都是句型。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/2.png" alt="在这里插入图片描述"></p><table><thead><tr><th align="center">文法</th><th align="center">产生的语言</th><th align="center">自动机</th></tr></thead><tbody><tr><td align="center">0型语言</td><td align="center">递归可枚举集(r.e)<br>(recursively enumerable set)</td><td align="center">图灵机</td></tr><tr><td align="center">1型语言</td><td align="center">上下文有关语言(CSL)<br>(Context Sensitive Language)</td><td align="center">线性界限自动机</td></tr><tr><td align="center">2型语言</td><td align="center">上下文无关语言(CFL)<br>(Context Free Language)</td><td align="center">下推自动机</td></tr><tr><td align="center">3型语言</td><td align="center">正规集(regular set)</td><td align="center">有限自动机</td></tr></tbody></table><p>可以看出，各类文法之间有向上兼容性，即：3型语言 $\subseteq$ 2型语言 $\subseteq$ 1型语言 $\subseteq$ 0型语言</p><p>算术公理的相容性：</p><ul><li>完备性：所有能从该形式化系统推导出来的命题，都可以从这个形式化系统推导出来。</li><li>一致性：一个命题不可能同时为真或为假。</li><li>可判定性：算法可以在有限步内判定命题的真伪。</li></ul><p>哥德尔不完全性定理：任何表达力足够强（递归可枚举）的系统都不可能同时具有一致性和完备性。</p><p>判定性问题是无法解决的，即有些数学问题是不可求解的，也就是说<a href="https://blankspace.blog.csdn.net/article/details/113730669">图灵机</a>是不可停机的。</p><table><thead><tr><th>计算载体</th><th>提出学者</th><th>计算角度</th></tr></thead><tbody><tr><td>原始递归函数</td><td>Godel</td><td>数学的</td></tr><tr><td>$\lambda-$演算</td><td>Church</td><td>数理逻辑的</td></tr><tr><td>图灵机</td><td>Turing</td><td>机械的</td></tr></tbody></table><p>图灵论题：凡是可计算的函数都可以用图灵机。</p><p>丘奇论题：任何计算，如果存在一个有效的过程，它就能被图灵机实现。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图灵机</title>
      <link href="/2021/03/21/ji-suan-ji-ke-xue-ji-chu/tu-ling-ji/"/>
      <url>/2021/03/21/ji-suan-ji-ke-xue-ji-chu/tu-ling-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="图灵机的组成"><a href="#图灵机的组成" class="headerlink" title="图灵机的组成"></a>图灵机的组成</h1><ul><li>一条存储带<ul><li>双向无限延长上有一个个小方格</li><li>每个小方格可存储一个数字/字母</li></ul></li><li>一个控制器<ul><li>包含一个读写头，可以读、写、更改存储带上每一格的数字/字母</li><li>可以接受设定好的程序语句</li><li>可以存储当前自身的状态</li><li>可以根据读到的字母/数字变换自身的状态</li><li>可以沿着存储带一格一格地左移/右移</li></ul></li></ul><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/1.png" alt="在这里插入图片描述"></p><h1 id="图灵机的工作步骤"><a href="#图灵机的工作步骤" class="headerlink" title="图灵机的工作步骤"></a>图灵机的工作步骤</h1><ul><li>准备<ul><li>存储带上符号初始化</li><li>控制器设置好自身当前状态（初始化状态）</li><li>读写头置于起始位置</li><li>准备好工作程序;</li></ul></li><li>反复执行以下工作直到停机<ul><li>读写头读出存储带上当前方格中的字母/数字</li><li>根据自身当前状态和所读到的字符，找到相应的程序语句</li><li>根据相应程序语句，做三个动作<ul><li>在当前存储带方格上写入一个相应的字母/数字</li><li>变更自身状态至新状态</li><li>读写头向左或向右移一步</li></ul></li></ul></li></ul><h1 id="图灵机的运行机理示例"><a href="#图灵机的运行机理示例" class="headerlink" title="图灵机的运行机理示例"></a>图灵机的运行机理示例</h1><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/2.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/3.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/4.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/5.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/6.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/7.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/8.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/9.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/10.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/11.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/12.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/13.png" alt="在这里插入图片描述"><br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%9B%BE%E7%81%B5%E6%9C%BA/14.png" alt="在这里插入图片描述"></p><p>至此，成功停机。</p><p>整个过程，完成了一个4+3=7的过程。</p><h1 id="图灵机的停机"><a href="#图灵机的停机" class="headerlink" title="图灵机的停机"></a>图灵机的停机</h1><p>图灵机的停机问题：判断任意一个程序是否会在有限的步骤之内结束运行的程序是否存在?</p><p>图灵机的停机意味着：</p><ul><li>给定符号序列$A$，如果能找到一个图灵机，得出对应的符号序列$B$，那么从$A$到$B$就是可计算的。</li><li>也就是说：<ul><li>对于一个问题的输入$A$，问：$A$能否推证出$B$？</li><li>如果能找到一个图灵机，得出对应的符号序列$B$，那么从$A$到$B$就是可计算的。</li><li>否则，该问题不可计算。</li></ul></li></ul><p>图灵认为：不存在这样的程序。</p><p>证明：采用<strong>反证法</strong><br>假设存在这样的程序，即，存在程序$H(P,I)$可以给出程序$P$在输入$I$时是否停机的判断：若$P$在输入$I$时可停机，$H$输出“停机”，反之输出“不停机（死循环）”（注：停机与死循环是对立的），即可导出下面的矛盾：<br>根据假设，可以设计一个调用程序$H$的主程序$K$如下：<br>首先，它调用$H(P,P)$，如果$H(P,P)$，输出“死循环”，则$K(P)$停机，反之$K(P)$死循环。即$K(P)$做与$H(P,P)$的输出相反的动作。<br>$K(P)$的程序如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">H</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span>I<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里的H函数有两种返回值：死循环或停机</span><span class="token keyword">int</span> <span class="token function">K</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">H</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span>P<span class="token punctuation">)</span> <span class="token operator">==</span> 死循环<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 程序本身可以被视作数据</span>        <span class="token keyword">return</span> 停机<span class="token punctuation">;</span>  <span class="token comment">// 主程序K停机</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// H(P,P) == 停机</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 这里K会死循环</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>视$K$程序为参数$P$，观察$K(K)$的运行：若$H(K , K)$输出死循环，实际观察到$K(K)$停机，但由$H$的定义知二者矛盾。反之，$H(K, K)$输出停机，$K(K)$实际死循环，两者仍然矛盾。<br>因此，假设程序$H$存在引发不可避免的矛盾，表明开始的假设不成立。<br>结论是：不存在这样的程序。<br>证明结束。<br>又称：“$H$是不可计算函数”、“停机问题不可解”。</p><p>以停机问题为基础，发现了大量不可计算问题，如“铺砖问题”等。</p><h1 id="图灵机的优势"><a href="#图灵机的优势" class="headerlink" title="图灵机的优势"></a>图灵机的优势</h1><ul><li>强大</li><li>简单</li><li>可实现</li></ul><h1 id="图灵机的理论意义"><a href="#图灵机的理论意义" class="headerlink" title="图灵机的理论意义"></a>图灵机的理论意义</h1><ul><li>给出了一个可实现的通用计算模型</li><li>引入了通过“读写符号”和“状态改变”进行运算的思想</li><li>证实了基于简单字母表完成复杂运算的能力</li><li>引入了存储区、程序、控制器等概念的原型</li></ul><h1 id="图灵机模拟器"><a href="#图灵机模拟器" class="headerlink" title="图灵机模拟器"></a>图灵机模拟器</h1><p><a href="http://morphett.info/turing/turing.html">图灵机模拟器网址</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图灵机 </tag>
            
            <tag> 计算理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分层抽象</title>
      <link href="/2021/02/06/ji-suan-ji-ke-xue-ji-chu/fen-ceng-chou-xiang/"/>
      <url>/2021/02/06/ji-suan-ji-ke-xue-ji-chu/fen-ceng-chou-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="分层抽象"><a href="#分层抽象" class="headerlink" title="分层抽象"></a>分层抽象</h1><p>分层抽象是计算机科学和软件工程的重要思想，是<a href="https://blankspace.blog.csdn.net/article/details/113634653">控制复杂性的重要手段</a>。</p><h1 id="电子计算机的分层抽象"><a href="#电子计算机的分层抽象" class="headerlink" title="电子计算机的分层抽象"></a>电子计算机的分层抽象</h1><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/113634653">电子计算机的分层抽象</a></p><p>下图是对电子计算机的分层抽象，这里将计算机分为九层：应用程序层、操作系统层、体系结构层、微结构层、逻辑层、数字电路层、模拟电路层、器件层、物理层。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/1.png" alt="在这里插入图片描述"></p><p>下面自顶向下地介绍电子计算机的每一层：</p><ol><li>应用软件基于操作系统实现多种多样的应用功能。</li><li>操作系统是和硬件最为密切的程序，既是资源分配器，又控制各着种I/O设备和用户程序的需求。</li><li>体系结构描述的是程序员观点的计算机抽象。</li><li>微结构层将逻辑组件组合在一起以实现体系结构中定义的指令。</li><li>逻辑层关注的是由数字电路层的逻辑门构成的逻辑组件，如加法器等。</li><li>数字电路层关注的是逻辑门，电压被控制为离散的值表示为0和1。</li><li>模拟电路层关注的是器件组合在一起构成的放大器等组件，输入输出都是连续的电压值。</li><li>器件层关注的是晶体管、真空管等电子元器件，这些器件都有明确的外部连接点terminal，建立起了每个terminal上电压与电流之间的关系模型。</li><li>物理层关注的是电子运动，由麦克斯韦方程组、量子力学等支持。</li></ol><h1 id="网络通信的分层抽象"><a href="#网络通信的分层抽象" class="headerlink" title="网络通信的分层抽象"></a>网络通信的分层抽象</h1><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/105528356">计算机网络核心知识归纳总结</a></p><p>OSI七层参考模型：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/2.png" alt="在这里插入图片描述"></p><p>TCP/IP五层参考模型：<br><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/3.png" alt="在这里插入图片描述"></p><p>计算机网络中：</p><ul><li>实体表示任何可发送或接收信息的硬件或软件进程。 </li><li>协议是控制两个对等实体进行通信的规则的集合。 <ul><li>在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。</li><li>要实现本层协议，还需要使用下层所提供的服务。 </li><li>本层的服务用户只能看见服务而无法看见下面的协议。</li><li>下面的协议对上面的服务用户是透明的。 </li><li>协议是“水平的”，即协议是控制对等实体之间通信的规则。</li></ul></li><li>接口定义了下层向上层提供的原语操作和服务。</li><li>服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。</li><li>同一系统相邻两层的实体进行交互的地方，称为服务访问点 SAP(Service Access Point)。</li></ul><p>下面自顶向下地介绍TCP/IP五层模型的每一层：</p><ul><li>应用层：应用层为用于通信的应用程序和用于消息传输的底层网络提供接口，是应用层协议得以存在和网络应用得以实现的地方。</li><li>传输层：传输层为两个不同主机上的进程提供逻辑上的通信，又称为端到端的通信。所谓“逻辑通信”的意思是：运输层之间的通信好像是沿水平方向传送数据，但事实上这两个运输层之间并没有一条水平方向的物理连接。运输层的一个很重要的功能就是复用和分用。应用层不同进程的报文通过不同的端口向下交到运输层，再往下就共用网络层提供的服务。</li><li>网络层：网络层将报文段从发送端主机传送到接收端主机。在发送端，将报文段封装成数据报；在接收端，将报文段传输到传输层。路由器检查每个到达的IP数据报的首部，进行路由选择和转发。</li><li>数据链路层：数据链路层提供帧同步、寻址、流量控制、差错控制、数据和控制信息的识别、透明传输、链路管理等服务。</li><li>物理层：物理层为数据端设备提供传送数据通路、传输数据。</li></ul><h1 id="操作系统的分层抽象"><a href="#操作系统的分层抽象" class="headerlink" title="操作系统的分层抽象"></a>操作系统的分层抽象</h1><p>推荐阅读：<a href="https://blankspace.blog.csdn.net/article/details/128744560">操作系统</a></p><p>基于适当的硬件支持，操作系统可分成许多块。分块后的操作系统能更好地控制计算机并使用计算机的应用程序，在改变系统的内部工作和创建模块操作系统时，开发人员也能有更多自由。因此，操作系统的设计者可以采用自顶向下的方法，可先确定总的功能和特征，再划分成模块。信息隐藏也很重要，因为它在保证程序接口不变和程序执行功能不变的前提下，允许程序员自由实现低层程序。</p><p>操作系统的模块化有许多方法，其中之一就是分层法。所谓分层法，即操作系统分成若干层(级)。最低层是硬件，最高层是<a href="https://blankspace.blog.csdn.net/article/details/113446238">用户接口</a>。而中间的各个操作系统层采用抽象对象类型ADT，包括数据结构和一组可为更高层所调用的程序集，该层可调用更低层的操作。</p><p>分层法构造操作系统的主要优点在于简化了构造和调试。所选的层次要求每层只能调用更低层的功能和服务，大大简化了系统的调试和验证。第一层可先调试而无需考虑系统其他部分，这是因为根据定义，它只使用了基本硬件(假设硬件是正确的)，以便实现功能。一旦第一层调试后，可认为它能正确运行，这样就可调试第二层，如此向上逐层调试。如果在调试某层时发现错误，那么错误可以定位到这一层。</p><p>分层操作系统的每层的实现都只是利用更低层所提供的操作，且只需知道这些操作做了什么，而并不需要知道这些操作是如何实现的。因此，每层要为更高层隐藏一定的数据结构、操作和硬件。</p><p>分层法的主要难点在于合理定义各层。由于每层只能利用更低层的功能，因此有必要仔细规划。</p><p>分层实现的主要问题之一是效率较低。例如，当一个用户程序执行I/O操作时，它执行系统调用并陷入IO层，IO层会调用内存管理层，内存管理层接着调用CPU调度层,最后传递到硬件。在每一层，参数可能会被修改，数据可能需要传递，这些操作都会降低执行效率、增加额外开销。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/4.png" alt="在这里插入图片描述"></p><h1 id="软件架构的分层抽象"><a href="#软件架构的分层抽象" class="headerlink" title="软件架构的分层抽象"></a>软件架构的分层抽象</h1><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>三层架构每一层的职能如下：</p><ul><li>表示层：表示层为用户提供了一种交互式操作界面。</li><li>业务逻辑层：业务逻辑层是表示层与数据访问层的桥梁，负责数据的处理和传递，执行复杂业务逻辑。</li><li>数据访问层：数据访问层实现了对数据的增删改查操作。</li></ul><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/5.png" alt="在这里插入图片描述"></p><p>比起三层架构，更简单的两层架构是这样的：数据访问和业务逻辑混在一起；用户界面直接调用数据访问；整个系统功能放在同一个项目中实现。</p><p>这是很多不熟悉三层架构的初学者喜欢的模式，它的问题主要是：难以适应需求的变化、不易维护、安全性差。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/6.png" alt="在这里插入图片描述"></p><p>而对于三层架构，当数据库或用户界面发生改变时，不需要完全重新开发，只需做简单调整即可。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/7.png" alt="在这里插入图片描述"></p><h2 id="三层架构的层间关系"><a href="#三层架构的层间关系" class="headerlink" title="三层架构的层间关系"></a>三层架构的层间关系</h2><p>层间依赖关系：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/8.png" alt="在这里插入图片描述"></p><p>层间数据流向：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/9.png" alt="在这里插入图片描述"></p><h2 id="三层架构与实体类"><a href="#三层架构与实体类" class="headerlink" title="三层架构与实体类"></a>三层架构与实体类</h2><p>三层架构的层与层之间传递的是实体对象。实体对象是实体类的实例化，是完全受控制的对象。实体对象消除了关系数据和对象之间的差异，具有OOP的基本特征，可以自定义行为。</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%8A%BD%E8%B1%A1/10.png" alt="在这里插入图片描述"></p><p>软件工程实践中，实体类有很多种，例如BO、DAO、DO、DTO、PO、POJO、VO，其中最常经典的是DAO、PO、VO。</p><p>DAO通常和PO结合使用，用于访问数据库，包含了各种数据库的操作方法，这些方法能实现功能；配合VO，提供数据库的CRUD操作。</p><p>PO是在O/R映射的时候出现的概念，如果没有O/R映射，就没有这个概念存在了。PO通常对应数据模型(数据库表)，本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的Java对象。最简单的PO就是对应数据库中某个表中的一条记录，多个记录可以用PO的集合。PO中应该不包含任何对数据库的操作。</p><p>VO通常用于业务层之间的数据传递，和PO一样也是仅仅包含数据而已。VO抽象出的业务对象，可以和表对应，也可以不对应，可根据业务的需要自己选择。VO主要对应界面显示的数据对象。对于一个Web页面，或者Swing等的一个界面，用一个VO对象对应整个界面的值。</p><h2 id="三层架构和MVC模式"><a href="#三层架构和MVC模式" class="headerlink" title="三层架构和MVC模式"></a>三层架构和MVC模式</h2><ul><li>MVC是一种设计模式，我们可以用它来创建在域对象和UI表示层对象之间的区分。</li><li>同样是架构级别的，相同的地方在于二者都有一个表现层，但是他们不同的地方在于其他的两个层。</li><li>三层架构中没有定义Controller的概念，这是两者最不同的地方。而MVC也没有把业务的逻辑访问看成两个层，这是采用三层架构或MVC搭建程序最主要的区别。</li><li>三层架构中也提到了Model，但是三层架构中Model的概念与MVC中Model的概念是不一样的。三层架构中典型的Model层是以实体类构成的；而MVC里Model则是由业务逻辑与访问数据组成的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制、进制转换和数据运算</title>
      <link href="/2021/02/04/ji-suan-ji-ke-xue-ji-chu/jin-zhi-jin-zhi-zhuan-huan-he-shu-ju-yun-suan/"/>
      <url>/2021/02/04/ji-suan-ji-ke-xue-ji-chu/jin-zhi-jin-zhi-zhuan-huan-he-shu-ju-yun-suan/</url>
      
        <content type="html"><![CDATA[<h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><h2 id="进制规则"><a href="#进制规则" class="headerlink" title="进制规则"></a>进制规则</h2><p>我们可以用这样的方式来表示一个十进制数：将每个阿拉伯数字乘以一个以该数字所处位置为指数，以$10$为底数的幂之和的形式。例如$123$可表示为$1\times{10}^{2}+2\times{10}^{1}+3\times{10}^{0}$ 这样的形式。</p><p>与之相似的，对二进制数来说，也可表示成每个二进制数码乘以一个以该数字所处位置为指数，以$2$ 为底数的幂之和的形式。  </p><p>一般说来，任何一个正整数$R$都可以被选来作为一个数制系统的基数。至于负整数$-R$，算法题中可能会人为定义这样的数制系统。</p><p>例如当$R=7$时，所需用到的数码是$0,1,2,3,4,5,6$。如果作为基数的数绝对值超过$10$，则为了表示这些数码，通常使用英文字母来表示那些大于$9$的数码。例如对$16$进制数来说，用$A$表示$10$，用$B$表示$11$，用$C$表示$12$，以此类推。</p><h2 id="二的幂次"><a href="#二的幂次" class="headerlink" title="二的幂次"></a>二的幂次</h2><p>下面列出$2$的常见幂次：</p><ul><li>${2}^{0}=1$</li><li>${2}^{1}=2$</li><li>${2}^{2}=4$</li><li>${2}^{3}=8$</li><li>${2}^{4}=16$</li><li>${2}^{5}=32$</li><li>${2}^{6}=64$</li><li>${2}^{7}=128$</li><li>${2}^{8}=256$</li><li>${2}^{9}=512$</li><li>${2}^{10}=1024$</li><li>${2}^{11}=2048$</li><li>${2}^{12}=4096$</li><li>${2}^{13}=8192$</li><li>${2}^{14}=16384$</li><li>${2}^{15}=32768$</li><li>${2}^{16}=65536$</li><li>$……$</li><li>${2}^{31}=2147483648$</li><li>${2}^{32}=4294967296$</li><li>$……$</li><li>${2}^{63}=9223372036854775808$</li><li>${2}^{64}=18446744073709551616$</li><li>$……$</li></ul><h2 id="有符号数、无符号数"><a href="#有符号数、无符号数" class="headerlink" title="有符号数、无符号数"></a>有符号数、无符号数</h2><p>有符号数是针对二进制来讲的，其最高位作为符号位，$0$代表$+$，$1$代表$-$，其余数位用作数值位，代表数值。</p><p>计算机中的有符号数用二进制表示，其符号也只用$0$或$1$表示。一般用最高有效位(MSB)来表示数的符号，正数用0表示，负数用1表示。</p><p>无符号数是相对于有符号数而言的，其整个机器字长的全部二进制位均表示数值位，相当于数的绝对值。</p><p>实际的数值总位数只能是$2$的整数幂次，一般是$8$、$16$、$32$、$64$，其对应的有符号数数值范围分别是$-({2}^{7}-1)\sim({2}^{7}-1)$、$-({2}^{15}-1)\sim({2}^{15}-1)$、$-({2}^{31}-1)\sim({2}^{31}-1)$、$-({2}^{63}-1)\sim({2}^{63}-1)$，无符号数数值范围分别是$-({2}^{8}-1)\sim({2}^{8}-1)$、$-({2}^{16}-1)\sim({2}^{16}-1)$、$-({2}^{32}-1)\sim({2}^{32}-1)$、$-({2}^{64}-1)\sim({2}^{64}-1)$。</p><h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><p>原码是一种计算机中对数字的二进制定点表示方法。原码表示法的数值最高一位是符号位，若数值为正数则该位为$0$，若数值为负数则该位为$1$，数值$0$有$+0$和$-0$两种表示；其余位表示数值的大小。</p><p>反码通常是用来由原码求补码或者由补码求原码的过渡码。原码为正数时，反码跟原码相同；原码为负数时，反码就是原码符号位保留后，其他位按位取反。<br>反码是数值存储的一种，多应用于系统环境设置，如Linux平台的目录和文件的默认权限的设置umask，就是使用反码原理。</p><p>正整数的补码是其二进制表示，与原码相同；负整数的补码是其原码除符号位外的所有位取反后加1的结果。补码涉及“怪异数”问题，详见下节介绍。</p><p>补码是计算机把减法运算转化为加法运算的关键编码。在计算机系统中，数值一律用补码来表示和存储，有如下两个原因：</p><ul><li>可以将符号位和数值域统一处理</li><li>加法和减法也可以统一处理（详见下文）。</li></ul><p>移码通常用于表示浮点数的阶码。移码的表示形式与补码相似，只是其符号位用$1$表示正数，用$0$表示负数，数值部分与补码相同。</p><h2 id="二进制“怪异数”"><a href="#二进制“怪异数”" class="headerlink" title="二进制“怪异数”"></a>二进制“怪异数”</h2><p>根据上文所述，无符号K位二进制取值范围：$[0, 2^K-1]$，有符号的二进制补码取值范围：$[-2^{K-1}, 2^{K-1}-1]$。</p><p>为什么不是$[-2^{K-1}+1, 2^{K-1}-1]$呢？为什么能取到$-2^{K-1}$呢？<br>其实这个$-2^{K-1}$被称为“怪异数”，也确实很诡异。</p><p>其实如果精通原理，也不难理解：<br>以$4$位二进制数为例，取值范围$[-8,7]$<br>$-8$怎么表示？<br>$-8_{10}=1000_{2}$</p><p>补码$1000-1=0111$得到补码，按位取反得到$1000$，还是这个数，所以用它表示$-8$。</p><p>怪异数的存在其实还化解了$±0$的问题。<br>因为按理说，$1000$表示$-0$，$0000$表示$+0$，但这就很离谱，所以让$1000$表示$-8$是合理的。</p><h2 id="比特"><a href="#比特" class="headerlink" title="比特"></a>比特</h2><p>计算机的组织在很大程度上取决于它如何表示数字、字符和控制信息。</p><p>数字计算机中最基本的信息单位称为<strong>比特</strong>(bit)，是二进制数字的缩写。具体而言，比特无非是计算机电路中“开”或“关”(或者“高”或“低”)的状态。1964年，IBM System/360大型计算机的设计者制定了使用8位组作为可寻址计算机存储基本单元的约定。他们称这个8位的集合为一个<strong>字节</strong>。计算机字由两个或多个相邻字节组成，这些字节有时被寻址并且几乎总是被共同操作。<strong>字</strong>大小表示特定体系结构最有效处理的数据大小。字可以是16位、32位、64位或在计算机组织上下文中有意义的任何其他大小，甚至不是8的倍数也可以。一个8位字节可以分为两个4位的一半，称为<strong>半字节</strong>。因为一个字节的每一位在位置编号系统中都有一个值，所以包含最小值二进制数字的半字节称为<strong>低位半字节</strong>，另一半称为<strong>高位半字节</strong>。</p><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><h2 id="整数进制转换"><a href="#整数进制转换" class="headerlink" title="整数进制转换"></a>整数进制转换</h2><h3 id="十进制数转X进制数"><a href="#十进制数转X进制数" class="headerlink" title="十进制数转X进制数"></a>十进制数转X进制数</h3><p>以二进制数为例：<br>$$22_{10}=1\times2^4+1\times2^2+1\times2^1=10110_{2}$$</p><p>以三进制为例：<br>$$32_{10}=1\times3^3+1\times3^1+2\times3^0=1012_{3}$$</p><p>一个比较直观有效的方式是列出从$X^0$到$X^m$的所有十进制数据，从小于当前的最大值开始取，特别注意的是最低位对应的是$X^0$而不是$X^1$。</p><p>八进制和十六进制既可以单独算也可以先算二进制再转换。</p><h3 id="X进制数转十进制数"><a href="#X进制数转十进制数" class="headerlink" title="X进制数转十进制数"></a>X进制数转十进制数</h3><p>以二进制数为例：<br>$$10111011_{2}=1\times2^7+1\times2^5+1\times2^4+1\times2^3+1\times2^1+1\times2^0=187_{10}$$</p><p>以十六进制数为例：<br>$$54D_{16}=5\times16^2+4\times16^1+13\times16^0=1357_{10}$$</p><p>求解的关键在于数清楚数位，$X$进制第$m$位对应$X^{m-1}$，将各个数位加权累加起来，就是十进制。</p><p>例如<a href="https://www.luogu.com.cn/problem/P2084">洛谷 P2084 进制转换</a>：</p><blockquote><p>请你编程实现，将一个$M$进制的数$N$转换成十进制表示的式子。</p></blockquote><p>实现代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> radix <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>radix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"^"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="X进制转Y进制"><a href="#X进制转Y进制" class="headerlink" title="X进制转Y进制"></a>X进制转Y进制</h3><p>一个比较笨的方法就是以十进制为桥梁，$X$进制→十进制→$Y$进制。</p><p>当然，复杂的进制转化一般只有算法题才会涉及。例如<a href="https://www.luogu.com.cn/problem/P1143">洛谷 P1143 进制转换</a>：</p><blockquote><p>请你编一程序实现两种不同进制之间的数据转换。<br>输入数据共三行，第一行是一个正整数，表示需要转换的数的进制$n(2≤n≤16)$，第二行是一个n进制数，若$n&gt;10$则用大写字母$A-F$表示数码$10-15$，并且该$n$进制数对应的十进制的值不超过$1000000000$，第三行也是一个正整数，表示转换之后的数的进制$m(2≤m≤16)$。</p></blockquote><p>实现代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> origin_radix <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> now_radix <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> origin_radix<span class="token punctuation">)</span><span class="token punctuation">,</span> now_radix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="负进制"><a href="#负进制" class="headerlink" title="负进制"></a>负进制</h3><p>常用的一般只有二进制、十进制、十六进制。负进制一般都是人为定义的。例如<a href="https://www.luogu.com.cn/problem/P1017">洛谷 P1017 [NOIP2000 提高组] 进制转换</a>：</p><blockquote><p>我们可以用这样的方式来表示一个十进制数：将每个阿拉伯数字乘以一个以该数字所处位置为指数，以$10$为底数的幂之和的形式。例如$123$可表示为$1\times{10}^{2}+2\times{10}^{1}+3\times{10}^{0}$ 这样的形式。<br>与之相似的，对二进制数来说，也可表示成每个二进制数码乘以一个以该数字所处位置为指数，以$2$ 为底数的幂之和的形式。<br>一般说来，任何一个正整数$R$或一个负整数$-R$都可以被选来作为一个数制系统的基数。如果是以$R$或$-R$为基数，则需要用到的数码为$0,1,….R-1$。<br>例如当$R=7$时，所需用到的数码是$0,1,2,3,4,5,6$，这与其是$R$或$-R$无关。如果作为基数的数绝对值超过$10$，则为了表示这些数码，通常使用英文字母来表示那些大于$9$的数码。例如对$16$进制数来说，用$A$表示$10$，用$B$表示$11$，用$C$表示$12$，以此类推。<br>在负进制数中是用$-R$作为基数，例如$(-15)<em>{2}$相当于$(110001)</em>{-2}$，并且它可以被表示为 $2$ 的幂级数的和数：$110001=1\times (-2)^5+1\times (-2)^4+0\times (-2)^3+0\times (-2)^2+0\times (-2)^1 +1\times (-2)^0$</p></blockquote><p>实现代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> radix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> remainder <span class="token operator">=</span> num <span class="token operator">%</span> radix<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainder <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            remainder <span class="token operator">-=</span> radix<span class="token punctuation">;</span>            num <span class="token operator">+=</span> radix<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainder <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            remainder <span class="token operator">+=</span> <span class="token char">'A'</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            remainder <span class="token operator">+=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">toString</span><span class="token punctuation">(</span>num<span class="token operator">/</span>radix<span class="token punctuation">,</span> radix<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>remainder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> origin_num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> radix <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>origin_num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">toString</span><span class="token punctuation">(</span>origin_num<span class="token punctuation">,</span> radix<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"(base"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>radix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小数进制转换"><a href="#小数进制转换" class="headerlink" title="小数进制转换"></a>小数进制转换</h2><p>以二进制为例，先说二进制小数转十进制小数，再说十进制小数转二进制小数。</p><p>关于二进制转十进制，定点小数可以用负指数理解，如$2^{-2}=0.25$，加起来就行。</p><p>例如：<br>$$0.0101_{2}=1\times2^{-2}+1\times2^{-4}=0.3125_{10}$$</p><p>关于十进制转二进制，小数部分可以×2再取整。</p><p>例如：<br>$$0.8125×2=1.625\0.625×2=1.25\0.25×2=0.5\0.5×2=1$$</p><p>即<br>$$0.8125_{10}=0.1101_{2}$$</p><h1 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h1><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><p><strong>逻辑运算</strong>是指那些应用于模式中的一个二进制位，或在两个模式中相应的两个二进制位的相同基本运算。</p><h3 id="位层次上的逻辑运算"><a href="#位层次上的逻辑运算" class="headerlink" title="位层次上的逻辑运算"></a>位层次上的逻辑运算</h3><ul><li>非运算</li><li>与运算</li><li>或运算</li><li>异或运算</li></ul><h3 id="模式层次上的逻辑运算"><a href="#模式层次上的逻辑运算" class="headerlink" title="模式层次上的逻辑运算"></a>模式层次上的逻辑运算</h3><p>上述四个运算可以被应用到$n$位模式。</p><ul><li>置位操作：对应位或$1$，其余位或$0$。</li><li>复位操作：对应位与$0$，其余位与$1$。</li><li>反转操作：对应位异或$1$，其余位异或$0$。</li></ul><h2 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h2><p>移动模式中的位，改变位的位置。</p><h3 id="逻辑移位运算"><a href="#逻辑移位运算" class="headerlink" title="逻辑移位运算"></a>逻辑移位运算</h3><p>应用于无符号整数。</p><ul><li>逻辑右移：最右位丢弃，最左位填$0$。</li><li>逻辑左移：最左位丢弃，最右位填$0$。</li><li>循环右移：最右位被移动，成为最左位。</li><li>循环左移：最左位被移动，成为最右位。</li></ul><h3 id="算术移位运算"><a href="#算术移位运算" class="headerlink" title="算术移位运算"></a>算术移位运算</h3><p>应用于以补码表示的带符号整数。</p><ul><li>算术右移：保留符号位，并且复制符号位，放入相邻的右边的位中。</li><li>算术左移：丢弃符号位，接受右边的位为符号位，与逻辑左移相同；如果新的符号位与原先相同，运算成功；否则，发生上溢或下溢。</li></ul><h3 id="逻辑移位与算术移位的区别"><a href="#逻辑移位与算术移位的区别" class="headerlink" title="逻辑移位与算术移位的区别"></a>逻辑移位与算术移位的区别</h3><p>二者的左移是相同的，不同体现在算术右移与逻辑右移。</p><ul><li>算术右移：保留并复制符号位。</li><li>逻辑右移：最左位填$0$。</li></ul><h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><p>适用于整数和浮点数的加、减、乘、除。</p><p>请注意：这里不是<code>算数运算</code>，而是算术运算。</p><p>对于二进制补码整数的加法进位，最左边一列的进位被舍去，发生溢出。想要避免溢出，获得准确解，就应该扩增位数或使用双符号位表示法。</p><p>不同指数的浮点数的加法调整，应该比较阶码，如果不同，则将较小的数的尾数移位，使阶码对齐。</p><p>算法题中可能涉及非常见进制的算术运算，例如<a href="https://www.luogu.com.cn/problem/P1604">洛谷 P1604 B进制星球</a>：</p><blockquote><p>话说有一天，小$Z$乘坐宇宙飞船，飞到一个美丽的星球。因为历史的原因，科技在这个美丽的星球上并不很发达，星球上人们普遍采用$B$（$2≤B≤36$）进制计数。星球上的人们用美味的食物招待了小$Z$，作为回报，小$Z$希望送一个能够完成$B$进制加法的计算器给他们。 现在小$Z$希望你可以帮助他，编写实现$B$进制加法的程序。</p></blockquote><p>实现代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span>radix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span>radix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>radix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加法算术运算溢出问题"><a href="#加法算术运算溢出问题" class="headerlink" title="加法算术运算溢出问题"></a>加法算术运算溢出问题</h3><p>Java语句<code>System.out.println(Integer.MAX_VALUE+1);</code>获得的输出是<code>-2147483648</code>，显然是遇到了溢出问题。</p><p>下面用二进制的基础知识解析这一过程。</p><p>首先明确<code>Integer.MAX_VALUE</code>的值是$2^{31}-1$，也就是$+2147483647$。</p><table><thead><tr><th>0</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th></tr></thead></table><p>该数值是正数，因此原码、反码、补码相同。</p><p>其反码是：</p><table><thead><tr><th>0</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th></tr></thead></table><p>其补码是：</p><table><thead><tr><th>0</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th><th>1</th></tr></thead></table><p>使其补码与$1$相加得到以下补码：</p><table><thead><tr><th>1</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th></tr></thead></table><p>显然，这是上文提到过的“怪异数”，其真实值为$-2^{31}=-2147483648$。</p><h3 id="二进制加减法不用原码的原因"><a href="#二进制加减法不用原码的原因" class="headerlink" title="二进制加减法不用原码的原因"></a>二进制加减法不用原码的原因</h3><p>原因一：不易确定加法还是减法。</p><p><img src="https://img-blog.csdnimg.cn/20210205000136104.png" alt="在这里插入图片描述"></p><p>原因二：最终结果的符号不易确定。</p><p><img src="https://img-blog.csdnimg.cn/20210205000153767.png" alt="在这里插入图片描述"></p><h3 id="加法器的构建"><a href="#加法器的构建" class="headerlink" title="加法器的构建"></a>加法器的构建</h3><ul><li><a href="https://blankspace.blog.csdn.net/article/details/102710189">Logisim构建四位行波进位加法/减法器</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/102709660">Logisim构建四位行波进位加法器</a></li><li><a href="https://blankspace.blog.csdn.net/article/details/102709061">Logisim构建全加器</a></li></ul><h3 id="计算机不需要整数减法器的原因"><a href="#计算机不需要整数减法器的原因" class="headerlink" title="计算机不需要整数减法器的原因"></a>计算机不需要整数减法器的原因</h3><p>如上探讨，我们明确了二进制加减法不用原码的原因，也清楚了二进制原码运算对于加减法是比较不好直接确定的，解决方法是什么呢？</p><p>其实大家所熟知的补码正是为了<strong>消灭减法</strong>产生的。<br>理由是：正数的补码正是自身，而负数的补码是一个减法的差，所以求一个数的补码正是一次减法过程。</p><p>基于补码的机制，减法可以转化为加法，计算机只需拥有加法器，不许要减法器。</p><h3 id="逻辑运算和算术运算的区别"><a href="#逻辑运算和算术运算的区别" class="headerlink" title="逻辑运算和算术运算的区别"></a>逻辑运算和算术运算的区别</h3><ul><li>逻辑运算用于二进制位和模式，类型包括与、或、非、异或等。</li><li>算术运算用于整数和浮点数，类型包括加、减、乘、除等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机科学基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unicode与UTF-8</title>
      <link href="/2020/02/17/ji-suan-ji-ke-xue-ji-chu/unicode-yu-utf-8/"/>
      <url>/2020/02/17/ji-suan-ji-ke-xue-ji-chu/unicode-yu-utf-8/</url>
      
        <content type="html"><![CDATA[<h1 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h1><p>Unicode 联盟开发了 Unicode 标准，并与领先的标准开发组织（如 ISO、W3C 和 ECMA）开展了合作。。他们的目标是用标准的 Unicode 转换格式（UTF）替换现有的字符集。</p><p>由于 ISO-8859 中的字符集大小有限，在多语言环境中不兼容，因此 Unicode 联盟制定了 Unicode 标准。Unicode 标准涵盖了（几乎）世界上所有的字符、标点和符号。</p><p>Unicode 支持独立于平台和语言的文本处理、存储和传输。</p><p>Unicode 标准已经成功实现，并且以 HTML、XML、Java、JavaScript、电子邮件、ASP、PHP 等实现。在许多操作系统和所有现代浏览器中也支持 Unicode 标准。</p><h1 id="Unicode字符集"><a href="#Unicode字符集" class="headerlink" title="Unicode字符集"></a>Unicode字符集</h1><p>Unicode 可以通过不同的字符集来实现。最常用的编码是 UTF-8 和 UTF-16：</p><table><thead><tr><th>字符集</th><th>描述</th></tr></thead><tbody><tr><td>UTF-8</td><td>UTF8 中的字符长度可以是 1 到 4 个字节。 UTF-8 可以代表 Unicode 标准中的任何字符。 UTF-8 向后兼容ASCII。</td></tr><tr><td>UTF-16</td><td>16 位 Unicode 转换格式是 Unicode 的可变长度字符编码，能够编码整个 Unicode 编码。 UTF-16 用于主要的操作系统和环境，如 Microsoft Windows、Java 和 .NET。</td></tr></tbody></table><p>提示：Unicode 的前 128 个字符（与 ASCII 一一对应）使用与 ASCII 相同的二进制值的单个八位字节进行编码，使得有效的 ASCII 文本使用有效的 UTF-8 编码 Unicode。</p><p>如上所述，在存储和网络传输中，通常使用更为节省空间的变长编码方式 UTF-8，UTF-8 代表 8 位一组表示 Unicode 字符的格式，使用 1 - 4 个字节来表示字符。</p><p>其实还有UTF-32，我们让一个字符使用四个字节存储，也就是 32 位，这样就能涵盖现有 Unicode 包含的所有字符。但UTF-32浪费空间，比如使用 UTF-32 和 ASCII 分别对一个只有西文字母的文档编码，前者需要花费的空间是后者的四倍（ASCII 每个字符只需要一个字节存储，而UTF-32是四个字节）。</p><h1 id="Unicode和UTF-8的区别"><a href="#Unicode和UTF-8的区别" class="headerlink" title="Unicode和UTF-8的区别"></a>Unicode和UTF-8的区别</h1><p>Unicode 是一个字符集。 UTF-8 属于编码。<br>Unicode 是具有唯一十进制数字（代码点）的字符列表。 A = 65，B = 66，C = 67，….<br>这个十进制数字表示字符串“hello”：104 101 108 108 111<br>编码指的是如何将这些数字转换成存储在计算机中的二进制数字：<br>UTF-8 编码将像这样存储“hello”（二进制）：01101000 01100101 01101100 01101100 01101111<br>编码将数字转换为二进制。字符集将字符转换为数字。</p><h1 id="UTF-8的编码规则"><a href="#UTF-8的编码规则" class="headerlink" title="UTF-8的编码规则"></a>UTF-8的编码规则</h1><p>UTF-8 的编码规则如下（U+ 后面的数字代表 Unicode 字符代码）：</p><p>U+&amp;nbsp;&amp;nbsp;0000 ~ U+&amp;nbsp;&amp;nbsp;007F: <code>0XXXXXXX</code><br>U+&amp;nbsp;&amp;nbsp;0080 ~ U+&amp;nbsp;&amp;nbsp;07FF: <code>110XXXXX 10XXXXXX</code><br>U+&amp;nbsp;&amp;nbsp;0800 ~ U+&amp;nbsp;&amp;nbsp;FFFF: <code>1110XXXX 10XXXXXX 10XXXXXX</code><br>U+10000 ~ U+1FFFF: <code>11110XXX 10XXXXXX 10XXXXXX 10XXXXXX</code></p><p>可以看到，UTF-8 通过开头的标志位位数实现了变长。对于单字节字符，只占用一个字节，实现了向下兼容 ASCII，并且能和 UTF-32 一样，包含 Unicode 中的所有字符，又能有效减少存储传输过程中占用的空间。</p><h1 id="HTML中的Unicode编码"><a href="#HTML中的Unicode编码" class="headerlink" title="HTML中的Unicode编码"></a>HTML中的Unicode编码</h1><p>HTML4只支持UTF-8，而HTML5支持UTF-8和UTF-16。</p><table><thead><tr><th>字符码</th><th>十进制</th><th>十六进制</th></tr></thead><tbody><tr><td>C0 控制和基本拉丁语</td><td>0-127</td><td>0000-007F</td></tr><tr><td>C1 控制和 Latin-1</td><td>补充</td><td>128-255 0080-00FF</td></tr><tr><td>拉丁文扩展-A</td><td>256-383</td><td>0100-017F</td></tr><tr><td>拉丁文扩展-B</td><td>384-591</td><td>0180-024F</td></tr><tr><td>间距修饰符</td><td>688-767</td><td>02B0-02FF</td></tr><tr><td>变音符号</td><td>768-879</td><td>0300-036F</td></tr><tr><td>希腊和科普特</td><td>880-1023</td><td>0370-03FF</td></tr><tr><td>西里尔文基本</td><td>1024-1279</td><td>0400-04FF</td></tr><tr><td>西里尔文补充</td><td>1280-1327</td><td>0500-052F</td></tr><tr><td>一般标点符号</td><td>8192-8303</td><td>2000-206F</td></tr><tr><td>货币符号</td><td>8352-8399</td><td>20A0-20CF</td></tr><tr><td>类字母符号</td><td>8448-8527</td><td>2100-214F</td></tr><tr><td>箭头</td><td>8592-8703</td><td>2190-21FF</td></tr><tr><td>数学运算符</td><td>8704-8959</td><td>2200-22FF</td></tr><tr><td>框绘制</td><td>9472-9599</td><td>2500-257F</td></tr><tr><td>块元素</td><td>9600-9631</td><td>2580-259F</td></tr><tr><td>几何形状</td><td>9632-9727</td><td>25A0-25FF</td></tr><tr><td>杂项符号</td><td>9728-9983</td><td>2600-26FF</td></tr><tr><td>装饰符号</td><td>9984-10175</td><td>2700-27BF</td></tr></tbody></table><h1 id="Unicode编码与乱码"><a href="#Unicode编码与乱码" class="headerlink" title="Unicode编码与乱码"></a>Unicode编码与乱码</h1><h2 id="Servlet乱码"><a href="#Servlet乱码" class="headerlink" title="Servlet乱码"></a>Servlet乱码</h2><p>在进行请求参数传递时，经常会遇到请求数据为中文时的乱码问题，当Form表单的文本域中输入中文时会产生乱码问题，出现乱码的原因与客户端的请求编码方式（GET请求或POST请求）以及服务器的处理编码方式有关。</p><h3 id="POST请求乱码"><a href="#POST请求乱码" class="headerlink" title="POST请求乱码"></a>POST请求乱码</h3><p>浏览器会按当前显示页面所采用的字符集对请求的中文数据进行编码，而后再以报文体的形式传送给服务器，Servlet在调用getParameter()方法获取参数时，会以HttpServletRequest对象的getCharacterEncoding()方法返回的字符集对其进行解码，而该方法的返回值在未经过setCharacterEncoding(charset)方法设置编码的情况下为null，这时getParameter()方法将以服务器默认的“ISO-8859-1”字符集对参数进行解码，而“ISO-8859-1”字符集并不包含中文，于是造成中文参数的乱码问题。</p><p>解决办法：<br>在调用getParameter()方法前先调用setCharacterEncoding(charset)方法设定与页面请求编码相同的解码字符集。</p><h3 id="GET请求乱码"><a href="#GET请求乱码" class="headerlink" title="GET请求乱码"></a>GET请求乱码</h3><p>GET请求参数以“?”或“&amp;”为连接字符附加在URL地址后，根据网络标准RFC1738规定，只有字母和数字以及一些特殊符号和某些保留字才可以不经过编码直接用于URL，因此在请求参数为中文时必须先由浏览器进行编码后才能发送给服务器，服务器端对GET请求参数依照服务器本身默认的字符集进行解码。</p><p>在服务器端，由于GET请求参数是作为请求行发送给服务器的，因此Servlet在通过getParameter()获取请求参数时，并不能使用setCharacterEncoding(charset)方法指定的字符集进行解码，而是依照服务器本身默认的字符集进行解码。</p><p>Tomcat服务器各版本中默认的URIEncoding字符集并不完全相同，例如，Tomcat6和Tomcat7都默认为“ISO-8859-1”，这类版本中，对于GET请求的中文参数必须经处理后才会避免乱码问题，因此在实际开发中尽量避免使用GET请求来传递中文参数。</p><h2 id="Matplotlib乱码"><a href="#Matplotlib乱码" class="headerlink" title="Matplotlib乱码"></a>Matplotlib乱码</h2><p>原版代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mplmu <span class="token operator">=</span> <span class="token number">60.0</span>sigma <span class="token operator">=</span> <span class="token number">2.0</span>x <span class="token operator">=</span> mu <span class="token operator">+</span> sigma<span class="token operator">*</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>bins <span class="token operator">=</span> <span class="token number">50</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>n<span class="token punctuation">,</span> bins<span class="token punctuation">,</span> patches <span class="token operator">=</span> ax<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>x<span class="token punctuation">,</span> bins<span class="token punctuation">,</span> density<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">"bar"</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">"#99FF33"</span><span class="token punctuation">,</span> edgecolor<span class="token operator">=</span><span class="token string">"#00FF99"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span>sigma<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token operator">*</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span>bins<span class="token operator">-</span>mu<span class="token punctuation">)</span><span class="token operator">/</span>sigma<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>bins<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"#7744FF"</span><span class="token punctuation">,</span> ls<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>ls<span class="token operator">=</span><span class="token string">":"</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"gray"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token string">r"$y=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"#FF5511"</span><span class="token punctuation">,</span> <span class="token string">"fontsize"</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"体重"</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"概率密度"</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">r"体重的直方图：$\mu=60.0$, $\sigma=2.0$"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就会出现异常情况，绘图如下：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/1.png" alt="在这里插入图片描述"></p><p>修复方法：加上utf-8题头的注释。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随后，加入如下两行代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.sans-serif"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"KaiTi"</span><span class="token punctuation">]</span>mpl<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"axes.unicode_minus"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修复结果：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/2.png" alt="在这里插入图片描述"></p><h2 id="CLion乱码"><a href="#CLion乱码" class="headerlink" title="CLion乱码"></a>CLion乱码</h2><p>乱码情况：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/3.png" alt="在这里插入图片描述"></p><h3 id="修改编辑器编码类型"><a href="#修改编辑器编码类型" class="headerlink" title="修改编辑器编码类型"></a>修改编辑器编码类型</h3><p>打开 File → Settings…：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/4.png" alt="在这里插入图片描述"></p><p>选择 Editor，再选中 File Encodings：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/5.png" alt="在这里插入图片描述"></p><p>调为UTF-8，完成设置，然后点OK：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/6.png" alt="在这里插入图片描述"></p><p>底部还有UTF-8：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/7.png" alt="在这里插入图片描述"></p><p>改成GBK：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/8.png" alt="在这里插入图片描述"></p><p>还有个弹窗，点Convert即可完成设置。</p><p>重新运行：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/9.png" alt="在这里插入图片描述"></p><p>该方法适用于其他JetBrains公司的IDE。</p><h3 id="修改Registry配置"><a href="#修改Registry配置" class="headerlink" title="修改Registry配置"></a>修改Registry配置</h3><p>文件是UTF-8格式，对于CLion命令行输出中文乱码的问题，解决方法是输入<code>Ctrl+Shift+Alt+/</code>：</p><p><img src="/../../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%9F%BA%E7%A1%80/Unicode%E4%B8%8EUTF-8/10.png" alt="在这里插入图片描述"></p><p>修改后即可在命令行看到正确不乱码的输出！</p>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码格式 </tag>
            
            <tag> Unicode </tag>
            
            <tag> UTF-8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASCII码表</title>
      <link href="/2019/10/20/ji-suan-ji-ke-xue-ji-chu/ascii-ma-biao/"/>
      <url>/2019/10/20/ji-suan-ji-ke-xue-ji-chu/ascii-ma-biao/</url>
      
        <content type="html"><![CDATA[<p>没有必要背诵ASCII码，但掌握ASCII的各种知识也是重要的，本文为你介绍这些知识。</p><h1 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h1><table><thead><tr><th align="center">Bin(二进制)</th><th align="center">Oct(八进制)</th><th align="center">Dec(十进制)</th><th align="center">Hex(十六进制)</th><th align="center">缩写/字符</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">00000000</td><td align="center">000</td><td align="center">0</td><td align="center">0x00</td><td align="center">NUL(null)</td><td align="center">空字符</td></tr><tr><td align="center">00000001</td><td align="center">001</td><td align="center">1</td><td align="center">0x01</td><td align="center">SOH(start of headling)</td><td align="center">标题开始</td></tr><tr><td align="center">00000010</td><td align="center">002</td><td align="center">2</td><td align="center">0x02</td><td align="center">STX (start of text)</td><td align="center">正文开始</td></tr><tr><td align="center">00000011</td><td align="center">003</td><td align="center">3</td><td align="center">0x03</td><td align="center">ETX (end of text)</td><td align="center">正文结束</td></tr><tr><td align="center">00000100</td><td align="center">004</td><td align="center">4</td><td align="center">0x04</td><td align="center">EOT (end of transmission)</td><td align="center">传输结束</td></tr><tr><td align="center">00000101</td><td align="center">005</td><td align="center">5</td><td align="center">0x05</td><td align="center">ENQ (enquiry)</td><td align="center">请求</td></tr><tr><td align="center">00000110</td><td align="center">006</td><td align="center">6</td><td align="center">0x06</td><td align="center">ACK (acknowledge)</td><td align="center">收到通知</td></tr><tr><td align="center">00000111</td><td align="center">007</td><td align="center">7</td><td align="center">0x07</td><td align="center">BEL (bell)</td><td align="center">响铃</td></tr><tr><td align="center">00001000</td><td align="center">010</td><td align="center">8</td><td align="center">0x08</td><td align="center">BS (backspace)</td><td align="center">退格</td></tr><tr><td align="center">00001001</td><td align="center">011</td><td align="center">9</td><td align="center">0x09</td><td align="center">HT (horizontal tab)</td><td align="center">水平制表符</td></tr><tr><td align="center">00001010</td><td align="center">012</td><td align="center">10</td><td align="center">0x0A</td><td align="center">LF (NL line feed, new line)</td><td align="center">换行键</td></tr><tr><td align="center">00001011</td><td align="center">013</td><td align="center">11</td><td align="center">0x0B</td><td align="center">VT (vertical tab)</td><td align="center">垂直制表符</td></tr><tr><td align="center">00001100</td><td align="center">014</td><td align="center">12</td><td align="center">0x0C</td><td align="center">FF (NP form feed, new page)</td><td align="center">换页键</td></tr><tr><td align="center">00001101</td><td align="center">015</td><td align="center">13</td><td align="center">0x0D</td><td align="center">CR (carriage return)</td><td align="center">回车键</td></tr><tr><td align="center">00001110</td><td align="center">016</td><td align="center">14</td><td align="center">0x0E</td><td align="center">SO (shift out)</td><td align="center">不用切换</td></tr><tr><td align="center">00001111</td><td align="center">017</td><td align="center">15</td><td align="center">0x0F</td><td align="center">SI (shift in)</td><td align="center">启用切换</td></tr><tr><td align="center">00010000</td><td align="center">020</td><td align="center">16</td><td align="center">0x10</td><td align="center">DLE (data link escape)</td><td align="center">数据链路转义</td></tr><tr><td align="center">00010001</td><td align="center">021</td><td align="center">17</td><td align="center">0x11</td><td align="center">DC1 (device control 1)</td><td align="center">设备控制1</td></tr><tr><td align="center">00010010</td><td align="center">022</td><td align="center">18</td><td align="center">0x12</td><td align="center">DC2 (device control 2)</td><td align="center">设备控制2</td></tr><tr><td align="center">00010011</td><td align="center">023</td><td align="center">19</td><td align="center">0x13</td><td align="center">DC3 (device control 3)</td><td align="center">设备控制3</td></tr><tr><td align="center">00010100</td><td align="center">024</td><td align="center">20</td><td align="center">0x14</td><td align="center">DC4 (device control 4)</td><td align="center">设备控制4</td></tr><tr><td align="center">00010101</td><td align="center">025</td><td align="center">21</td><td align="center">0x15</td><td align="center">NAK (negative acknowledge)</td><td align="center">拒绝接收</td></tr><tr><td align="center">00010110</td><td align="center">026</td><td align="center">22</td><td align="center">0x16</td><td align="center">SYN (synchronous idle)</td><td align="center">同步空闲</td></tr><tr><td align="center">00010111</td><td align="center">027</td><td align="center">23</td><td align="center">0x17</td><td align="center">ETB (end of trans. block)</td><td align="center">传输块结束</td></tr><tr><td align="center">00011000</td><td align="center">030</td><td align="center">24</td><td align="center">0x18</td><td align="center">CAN (cancel)</td><td align="center">取消</td></tr><tr><td align="center">00011001</td><td align="center">031</td><td align="center">25</td><td align="center">0x19</td><td align="center">EM (end of medium)</td><td align="center">介质中断</td></tr><tr><td align="center">00011010</td><td align="center">032</td><td align="center">26</td><td align="center">0x1A</td><td align="center">SUB (substitute)</td><td align="center">替补</td></tr><tr><td align="center">00011011</td><td align="center">033</td><td align="center">27</td><td align="center">0x1B</td><td align="center">ESC (escape)</td><td align="center">溢出</td></tr><tr><td align="center">00011100</td><td align="center">034</td><td align="center">28</td><td align="center">0x1C</td><td align="center">FS (file separator)</td><td align="center">文件分割符</td></tr><tr><td align="center">00011101</td><td align="center">035</td><td align="center">29</td><td align="center">0x1D</td><td align="center">GS (group separator)</td><td align="center">分组符</td></tr><tr><td align="center">00011110</td><td align="center">036</td><td align="center">30</td><td align="center">0x1E</td><td align="center">RS (record separator)</td><td align="center">记录分离符</td></tr><tr><td align="center">00011111</td><td align="center">037</td><td align="center">31</td><td align="center">0x1F</td><td align="center">US (unit separator)</td><td align="center">单元分隔符</td></tr><tr><td align="center">00100000</td><td align="center">040</td><td align="center">32</td><td align="center">0x20</td><td align="center">(space)</td><td align="center">空格</td></tr><tr><td align="center">00100001</td><td align="center">041</td><td align="center">33</td><td align="center">0x21</td><td align="center">!</td><td align="center"></td></tr><tr><td align="center">00100010</td><td align="center">042</td><td align="center">34</td><td align="center">0x22</td><td align="center">“</td><td align="center"></td></tr><tr><td align="center">00100011</td><td align="center">043</td><td align="center">35</td><td align="center">0x23</td><td align="center">#</td><td align="center"></td></tr><tr><td align="center">00100100</td><td align="center">044</td><td align="center">36</td><td align="center">0x24</td><td align="center">$</td><td align="center"></td></tr><tr><td align="center">00100101</td><td align="center">045</td><td align="center">37</td><td align="center">0x25</td><td align="center">%</td><td align="center"></td></tr><tr><td align="center">00100110</td><td align="center">046</td><td align="center">38</td><td align="center">0x26</td><td align="center">&amp;</td><td align="center"></td></tr><tr><td align="center">00100111</td><td align="center">047</td><td align="center">39</td><td align="center">0x27</td><td align="center">‘</td><td align="center"></td></tr><tr><td align="center">00101000</td><td align="center">050</td><td align="center">40</td><td align="center">0x28</td><td align="center">(</td><td align="center"></td></tr><tr><td align="center">00101001</td><td align="center">051</td><td align="center">41</td><td align="center">0x29</td><td align="center">)</td><td align="center"></td></tr><tr><td align="center">00101010</td><td align="center">052</td><td align="center">42</td><td align="center">0x2A</td><td align="center">*</td><td align="center"></td></tr><tr><td align="center">00101011</td><td align="center">053</td><td align="center">43</td><td align="center">0x2B</td><td align="center">+</td><td align="center"></td></tr><tr><td align="center">00101100</td><td align="center">054</td><td align="center">44</td><td align="center">0x2C</td><td align="center">,</td><td align="center"></td></tr><tr><td align="center">00101101</td><td align="center">055</td><td align="center">45</td><td align="center">0x2D</td><td align="center">-</td><td align="center"></td></tr><tr><td align="center">00101110</td><td align="center">056</td><td align="center">46</td><td align="center">0x2E</td><td align="center">.</td><td align="center"></td></tr><tr><td align="center">00101111</td><td align="center">057</td><td align="center">47</td><td align="center">0x2F</td><td align="center">/</td><td align="center"></td></tr><tr><td align="center">00110000</td><td align="center">060</td><td align="center">48</td><td align="center">0x30</td><td align="center">0</td><td align="center"></td></tr><tr><td align="center">00110001</td><td align="center">061</td><td align="center">49</td><td align="center">0x31</td><td align="center">1</td><td align="center"></td></tr><tr><td align="center">00110010</td><td align="center">062</td><td align="center">50</td><td align="center">0x32</td><td align="center">2</td><td align="center"></td></tr><tr><td align="center">00110011</td><td align="center">063</td><td align="center">51</td><td align="center">0x33</td><td align="center">3</td><td align="center"></td></tr><tr><td align="center">00110100</td><td align="center">064</td><td align="center">52</td><td align="center">0x34</td><td align="center">4</td><td align="center"></td></tr><tr><td align="center">00110101</td><td align="center">065</td><td align="center">53</td><td align="center">0x35</td><td align="center">5</td><td align="center"></td></tr><tr><td align="center">00110110</td><td align="center">066</td><td align="center">54</td><td align="center">0x36</td><td align="center">6</td><td align="center"></td></tr><tr><td align="center">00110111</td><td align="center">067</td><td align="center">55</td><td align="center">0x37</td><td align="center">7</td><td align="center"></td></tr><tr><td align="center">00111000</td><td align="center">070</td><td align="center">56</td><td align="center">0x38</td><td align="center">8</td><td align="center"></td></tr><tr><td align="center">00111001</td><td align="center">071</td><td align="center">57</td><td align="center">0x39</td><td align="center">9</td><td align="center"></td></tr><tr><td align="center">00111010</td><td align="center">072</td><td align="center">58</td><td align="center">0x3A</td><td align="center">:</td><td align="center"></td></tr><tr><td align="center">00111011</td><td align="center">073</td><td align="center">59</td><td align="center">0x3B</td><td align="center">;</td><td align="center"></td></tr><tr><td align="center">00111100</td><td align="center">074</td><td align="center">60</td><td align="center">0x3C</td><td align="center">&lt;</td><td align="center"></td></tr><tr><td align="center">00111101</td><td align="center">075</td><td align="center">61</td><td align="center">0x3D</td><td align="center">=</td><td align="center"></td></tr><tr><td align="center">00111110</td><td align="center">076</td><td align="center">62</td><td align="center">0x3E</td><td align="center">&gt;</td><td align="center"></td></tr><tr><td align="center">00111111</td><td align="center">077</td><td align="center">63</td><td align="center">0x3F</td><td align="center">?</td><td align="center"></td></tr><tr><td align="center">01000000</td><td align="center">100</td><td align="center">64</td><td align="center">0x40</td><td align="center">@</td><td align="center"></td></tr><tr><td align="center">01000001</td><td align="center">101</td><td align="center">65</td><td align="center">0x41</td><td align="center">A</td><td align="center"></td></tr><tr><td align="center">01000010</td><td align="center">102</td><td align="center">66</td><td align="center">0x42</td><td align="center">B</td><td align="center"></td></tr><tr><td align="center">01000011</td><td align="center">103</td><td align="center">67</td><td align="center">0x43</td><td align="center">C</td><td align="center"></td></tr><tr><td align="center">01000100</td><td align="center">104</td><td align="center">68</td><td align="center">0x44</td><td align="center">D</td><td align="center"></td></tr><tr><td align="center">01000101</td><td align="center">105</td><td align="center">69</td><td align="center">0x45</td><td align="center">E</td><td align="center"></td></tr><tr><td align="center">01000110</td><td align="center">106</td><td align="center">70</td><td align="center">0x46</td><td align="center">F</td><td align="center"></td></tr><tr><td align="center">01000111</td><td align="center">107</td><td align="center">71</td><td align="center">0x47</td><td align="center">G</td><td align="center"></td></tr><tr><td align="center">01001000</td><td align="center">110</td><td align="center">72</td><td align="center">0x48</td><td align="center">H</td><td align="center"></td></tr><tr><td align="center">01001001</td><td align="center">111</td><td align="center">73</td><td align="center">0x49</td><td align="center">I</td><td align="center"></td></tr><tr><td align="center">01001010</td><td align="center">112</td><td align="center">74</td><td align="center">0x4A</td><td align="center">J</td><td align="center"></td></tr><tr><td align="center">01001011</td><td align="center">113</td><td align="center">75</td><td align="center">0x4B</td><td align="center">K</td><td align="center"></td></tr><tr><td align="center">01001100</td><td align="center">114</td><td align="center">76</td><td align="center">0x4C</td><td align="center">L</td><td align="center"></td></tr><tr><td align="center">01001101</td><td align="center">115</td><td align="center">77</td><td align="center">0x4D</td><td align="center">M</td><td align="center"></td></tr><tr><td align="center">01001110</td><td align="center">116</td><td align="center">78</td><td align="center">0x4E</td><td align="center">N</td><td align="center"></td></tr><tr><td align="center">01001111</td><td align="center">117</td><td align="center">79</td><td align="center">0x4F</td><td align="center">O</td><td align="center"></td></tr><tr><td align="center">01010000</td><td align="center">120</td><td align="center">80</td><td align="center">0x50</td><td align="center">P</td><td align="center"></td></tr><tr><td align="center">01010001</td><td align="center">121</td><td align="center">81</td><td align="center">0x51</td><td align="center">Q</td><td align="center"></td></tr><tr><td align="center">01010010</td><td align="center">122</td><td align="center">82</td><td align="center">0x52</td><td align="center">R</td><td align="center"></td></tr><tr><td align="center">01010011</td><td align="center">123</td><td align="center">83</td><td align="center">0x53</td><td align="center">S</td><td align="center"></td></tr><tr><td align="center">01010100</td><td align="center">124</td><td align="center">84</td><td align="center">0x54</td><td align="center">T</td><td align="center"></td></tr><tr><td align="center">01010101</td><td align="center">125</td><td align="center">85</td><td align="center">0x55</td><td align="center">U</td><td align="center"></td></tr><tr><td align="center">01010110</td><td align="center">126</td><td align="center">86</td><td align="center">0x56</td><td align="center">V</td><td align="center"></td></tr><tr><td align="center">01010111</td><td align="center">127</td><td align="center">87</td><td align="center">0x57</td><td align="center">W</td><td align="center"></td></tr><tr><td align="center">01011000</td><td align="center">130</td><td align="center">88</td><td align="center">0x58</td><td align="center">X</td><td align="center"></td></tr><tr><td align="center">01011001</td><td align="center">131</td><td align="center">89</td><td align="center">0x59</td><td align="center">Y</td><td align="center"></td></tr><tr><td align="center">01011010</td><td align="center">132</td><td align="center">90</td><td align="center">0x5A</td><td align="center">Z</td><td align="center"></td></tr><tr><td align="center">01011011</td><td align="center">133</td><td align="center">91</td><td align="center">0x5B</td><td align="center">[</td><td align="center"></td></tr><tr><td align="center">01011100</td><td align="center">134</td><td align="center">92</td><td align="center">0x5C</td><td align="center">\</td><td align="center"></td></tr><tr><td align="center">01011101</td><td align="center">135</td><td align="center">93</td><td align="center">0x5D</td><td align="center">]</td><td align="center"></td></tr><tr><td align="center">01011110</td><td align="center">136</td><td align="center">94</td><td align="center">0x5E</td><td align="center">^</td><td align="center"></td></tr><tr><td align="center">01011111</td><td align="center">137</td><td align="center">95</td><td align="center">0x5F</td><td align="center">_</td><td align="center"></td></tr><tr><td align="center">01100000</td><td align="center">140</td><td align="center">96</td><td align="center">0x60</td><td align="center">`</td><td align="center"></td></tr><tr><td align="center">01100001</td><td align="center">141</td><td align="center">97</td><td align="center">0x61</td><td align="center">a</td><td align="center"></td></tr><tr><td align="center">01100010</td><td align="center">142</td><td align="center">98</td><td align="center">0x62</td><td align="center">b</td><td align="center"></td></tr><tr><td align="center">01100011</td><td align="center">143</td><td align="center">99</td><td align="center">0x63</td><td align="center">c</td><td align="center"></td></tr><tr><td align="center">01100100</td><td align="center">144</td><td align="center">100</td><td align="center">0x64</td><td align="center">d</td><td align="center"></td></tr><tr><td align="center">01100101</td><td align="center">145</td><td align="center">101</td><td align="center">0x65</td><td align="center">e</td><td align="center"></td></tr><tr><td align="center">01100110</td><td align="center">146</td><td align="center">102</td><td align="center">0x66</td><td align="center">f</td><td align="center"></td></tr><tr><td align="center">01100111</td><td align="center">147</td><td align="center">103</td><td align="center">0x67</td><td align="center">g</td><td align="center"></td></tr><tr><td align="center">01101000</td><td align="center">150</td><td align="center">104</td><td align="center">0x68</td><td align="center">h</td><td align="center"></td></tr><tr><td align="center">1101001</td><td align="center">151</td><td align="center">105</td><td align="center">0x69</td><td align="center">i</td><td align="center"></td></tr><tr><td align="center">01101010</td><td align="center">152</td><td align="center">106</td><td align="center">0x6A</td><td align="center">j</td><td align="center"></td></tr><tr><td align="center">01101011</td><td align="center">153</td><td align="center">107</td><td align="center">0x6B</td><td align="center">k</td><td align="center"></td></tr><tr><td align="center">01101100</td><td align="center">154</td><td align="center">108</td><td align="center">0x6C</td><td align="center">l</td><td align="center"></td></tr><tr><td align="center">01101101</td><td align="center">155</td><td align="center">109</td><td align="center">0x6D</td><td align="center">m</td><td align="center"></td></tr><tr><td align="center">01101110</td><td align="center">156</td><td align="center">110</td><td align="center">0x6E</td><td align="center">n</td><td align="center"></td></tr><tr><td align="center">01101111</td><td align="center">157</td><td align="center">111</td><td align="center">0x6F</td><td align="center">o</td><td align="center"></td></tr><tr><td align="center">01110000</td><td align="center">160</td><td align="center">112</td><td align="center">0x70</td><td align="center">p</td><td align="center"></td></tr><tr><td align="center">01110001</td><td align="center">161</td><td align="center">113</td><td align="center">0x71</td><td align="center">q</td><td align="center"></td></tr><tr><td align="center">01110010</td><td align="center">162</td><td align="center">114</td><td align="center">0x72</td><td align="center">r</td><td align="center"></td></tr><tr><td align="center">01110011</td><td align="center">163</td><td align="center">115</td><td align="center">0x73</td><td align="center">s</td><td align="center"></td></tr><tr><td align="center">01110100</td><td align="center">164</td><td align="center">116</td><td align="center">0x74</td><td align="center">t</td><td align="center"></td></tr><tr><td align="center">01110101</td><td align="center">165</td><td align="center">117</td><td align="center">0x75</td><td align="center">u</td><td align="center"></td></tr><tr><td align="center">01110110</td><td align="center">166</td><td align="center">118</td><td align="center">0x76</td><td align="center">v</td><td align="center"></td></tr><tr><td align="center">01110111</td><td align="center">167</td><td align="center">119</td><td align="center">0x77</td><td align="center">w</td><td align="center"></td></tr><tr><td align="center">01111000</td><td align="center">170</td><td align="center">120</td><td align="center">0x78</td><td align="center">x</td><td align="center"></td></tr><tr><td align="center">01111001</td><td align="center">171</td><td align="center">121</td><td align="center">0x79</td><td align="center">y</td><td align="center"></td></tr><tr><td align="center">01111010</td><td align="center">172</td><td align="center">122</td><td align="center">0x7A</td><td align="center">z</td><td align="center"></td></tr><tr><td align="center">01111011</td><td align="center">173</td><td align="center">123</td><td align="center">0x7B</td><td align="center">{</td><td align="center"></td></tr><tr><td align="center">01111100</td><td align="center">174</td><td align="center">124</td><td align="center">0x7C</td><td align="center">|</td><td align="center"></td></tr><tr><td align="center">01111101</td><td align="center">175</td><td align="center">125</td><td align="center">0x7D</td><td align="center">}</td><td align="center"></td></tr><tr><td align="center">01111110</td><td align="center">176</td><td align="center">126</td><td align="center">0x7E</td><td align="center">~</td><td align="center"></td></tr><tr><td align="center">01111111</td><td align="center">177</td><td align="center">127</td><td align="center">0x7F</td><td align="center">DEL (delete)</td><td align="center">删除</td></tr></tbody></table><h1 id="常见ASCII码的大小规则"><a href="#常见ASCII码的大小规则" class="headerlink" title="常见ASCII码的大小规则"></a>常见ASCII码的大小规则</h1><p><strong>基本规则：[0 ~ 9] &lt; [A ~ Z] &lt; [a ~ z]</strong></p><ul><li>数字比字母要小。如 “7”&lt;“F”</li><li>数字0比数字9要小，并按0到9顺序递增。如’0’ &lt; ‘9’ </li><li>字母A比字母Z要小，并按A到Z顺序递增。如’A’ &lt; ‘Z’ </li><li>同个字母的大写字母比小写字母要小32。如’A’ &lt; ‘a’</li></ul><h1 id="应该记住的几个ASCII码值"><a href="#应该记住的几个ASCII码值" class="headerlink" title="应该记住的几个ASCII码值"></a>应该记住的几个ASCII码值</h1><ul><li><strong>‘A’：65</strong></li><li><strong>‘a’：97</strong></li><li><strong>‘0’：48</strong></li></ul><h1 id="应该记住的几个ASCII码范围"><a href="#应该记住的几个ASCII码范围" class="headerlink" title="应该记住的几个ASCII码范围"></a>应该记住的几个ASCII码范围</h1><ul><li>0～31及127(共33个)是控制字符或通信专用字符（均为不可显示字符）</li><li>32～126(共95个)是字符(32是空格）（均为可显示字符）<ul><li>48～57为0到9十个阿拉伯数字</li><li>65～90为26个大写英文字母</li><li>97～122号为26个小写英文字母</li><li>其余为一些标点符号、运算符号等</li></ul></li></ul><h1 id="编程记不住ASCII码值怎么办"><a href="#编程记不住ASCII码值怎么办" class="headerlink" title="编程记不住ASCII码值怎么办"></a>编程记不住ASCII码值怎么办</h1><p>通过一个简单案例来说明这个问题，案例是<a href="https://blog.csdn.net/weixin_43896318/article/details/104059930">洛谷P1914题</a>：</p><blockquote><p>蒟蒻虽然忘记密码，但他还记得密码是由一个字符串组成。密码是由原文字符串（由不超过 50 个小写字母组成）中每个字母向后移动 nn 位形成的。z 的下一个字母是 a，如此循环。他现在找到了移动前的原文字符串及 nn，请你求出密码。</p></blockquote><p>Java实现代码是这样的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> password_array <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> password_array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            password_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>password_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>password_array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你明白了吗？</p><h1 id="键盘按键对应的keyCode"><a href="#键盘按键对应的keyCode" class="headerlink" title="键盘按键对应的keyCode"></a>键盘按键对应的keyCode</h1><p>键盘按键也有其对应的ASCII码，而在前端编程中，这些keyCode也是需要了解的知识。</p><h2 id="数字键"><a href="#数字键" class="headerlink" title="数字键"></a>数字键</h2><table><thead><tr><th align="center">KeyCode</th><th align="center">按键</th></tr></thead><tbody><tr><td align="center">48</td><td align="center">0</td></tr><tr><td align="center">49</td><td align="center">1</td></tr><tr><td align="center">50</td><td align="center">2</td></tr><tr><td align="center">51</td><td align="center">3</td></tr><tr><td align="center">52</td><td align="center">4</td></tr><tr><td align="center">53</td><td align="center">5</td></tr><tr><td align="center">54</td><td align="center">6</td></tr><tr><td align="center">55</td><td align="center">7</td></tr><tr><td align="center">56</td><td align="center">8</td></tr><tr><td align="center">57</td><td align="center">9</td></tr></tbody></table><h2 id="字母键"><a href="#字母键" class="headerlink" title="字母键"></a>字母键</h2><table><thead><tr><th align="center">KeyCode</th><th align="center">按键</th></tr></thead><tbody><tr><td align="center">65</td><td align="center">A</td></tr><tr><td align="center">66</td><td align="center">B</td></tr><tr><td align="center">67</td><td align="center">C</td></tr><tr><td align="center">68</td><td align="center">D</td></tr><tr><td align="center">69</td><td align="center">E</td></tr><tr><td align="center">70</td><td align="center">F</td></tr><tr><td align="center">71</td><td align="center">G</td></tr><tr><td align="center">72</td><td align="center">H</td></tr><tr><td align="center">73</td><td align="center">I</td></tr><tr><td align="center">74</td><td align="center">J</td></tr><tr><td align="center">75</td><td align="center">K</td></tr><tr><td align="center">76</td><td align="center">L</td></tr><tr><td align="center">77</td><td align="center">M</td></tr><tr><td align="center">78</td><td align="center">N</td></tr><tr><td align="center">79</td><td align="center">O</td></tr><tr><td align="center">80</td><td align="center">P</td></tr><tr><td align="center">81</td><td align="center">Q</td></tr><tr><td align="center">82</td><td align="center">R</td></tr><tr><td align="center">83</td><td align="center">S</td></tr><tr><td align="center">84</td><td align="center">T</td></tr><tr><td align="center">85</td><td align="center">U</td></tr><tr><td align="center">86</td><td align="center">V</td></tr><tr><td align="center">87</td><td align="center">W</td></tr><tr><td align="center">88</td><td align="center">X</td></tr><tr><td align="center">89</td><td align="center">Y</td></tr><tr><td align="center">90</td><td align="center">Z</td></tr></tbody></table><h2 id="小键盘按键"><a href="#小键盘按键" class="headerlink" title="小键盘按键"></a>小键盘按键</h2><table><thead><tr><th align="center">KeyCode</th><th align="center">按键</th></tr></thead><tbody><tr><td align="center">96</td><td align="center">0</td></tr><tr><td align="center">97</td><td align="center">1</td></tr><tr><td align="center">98</td><td align="center">2</td></tr><tr><td align="center">99</td><td align="center">3</td></tr><tr><td align="center">100</td><td align="center">4</td></tr><tr><td align="center">101</td><td align="center">5</td></tr><tr><td align="center">102</td><td align="center">6</td></tr><tr><td align="center">103</td><td align="center">7</td></tr><tr><td align="center">104</td><td align="center">8</td></tr><tr><td align="center">105</td><td align="center">9</td></tr><tr><td align="center">106</td><td align="center">*</td></tr><tr><td align="center">107</td><td align="center">+</td></tr><tr><td align="center">108</td><td align="center">Enter</td></tr><tr><td align="center">109</td><td align="center">-</td></tr><tr><td align="center">110</td><td align="center">.</td></tr><tr><td align="center">111</td><td align="center">/</td></tr></tbody></table><h2 id="功能键"><a href="#功能键" class="headerlink" title="功能键"></a>功能键</h2><table><thead><tr><th align="center">KeyCode</th><th align="center">按键</th></tr></thead><tbody><tr><td align="center">112</td><td align="center">F1</td></tr><tr><td align="center">113</td><td align="center">F2</td></tr><tr><td align="center">114</td><td align="center">F3</td></tr><tr><td align="center">115</td><td align="center">F4</td></tr><tr><td align="center">116</td><td align="center">F5</td></tr><tr><td align="center">117</td><td align="center">F6</td></tr><tr><td align="center">118</td><td align="center">F7</td></tr><tr><td align="center">119</td><td align="center">F8</td></tr><tr><td align="center">120</td><td align="center">F9</td></tr><tr><td align="center">121</td><td align="center">F10</td></tr><tr><td align="center">122</td><td align="center">F11</td></tr><tr><td align="center">123</td><td align="center">F12</td></tr></tbody></table><h2 id="控制键"><a href="#控制键" class="headerlink" title="控制键"></a>控制键</h2><table><thead><tr><th align="center">KeyCode</th><th align="center">按键</th></tr></thead><tbody><tr><td align="center">8</td><td align="center">BackSpace</td></tr><tr><td align="center">9</td><td align="center">Tab</td></tr><tr><td align="center">12</td><td align="center">Clear</td></tr><tr><td align="center">13</td><td align="center">Enter</td></tr><tr><td align="center">16</td><td align="center">Shift</td></tr><tr><td align="center">17</td><td align="center">Control</td></tr><tr><td align="center">18</td><td align="center">Alt</td></tr><tr><td align="center">20</td><td align="center">Cape Lock</td></tr><tr><td align="center">27</td><td align="center">Esc</td></tr><tr><td align="center">32</td><td align="center">Spacebar</td></tr><tr><td align="center">33</td><td align="center">Page Up</td></tr><tr><td align="center">34</td><td align="center">Page Down</td></tr><tr><td align="center">35</td><td align="center">End</td></tr><tr><td align="center">36</td><td align="center">Home</td></tr><tr><td align="center">37</td><td align="center">Left Arrow</td></tr><tr><td align="center">38</td><td align="center">Up Arrow</td></tr><tr><td align="center">39</td><td align="center">Right Arrow</td></tr><tr><td align="center">40</td><td align="center">Dw Arrow</td></tr><tr><td align="center">45</td><td align="center">Insert</td></tr><tr><td align="center">46</td><td align="center">Num Lock</td></tr><tr><td align="center">144</td><td align="center">Num Lock</td></tr><tr><td align="center">186</td><td align="center">;:</td></tr><tr><td align="center">187</td><td align="center">=+</td></tr><tr><td align="center">188</td><td align="center">,&lt;</td></tr><tr><td align="center">189</td><td align="center">-_</td></tr><tr><td align="center">190</td><td align="center">.&gt;</td></tr><tr><td align="center">191</td><td align="center">/?</td></tr><tr><td align="center">192</td><td align="center">`~</td></tr><tr><td align="center">219</td><td align="center">[{</td></tr><tr><td align="center">220</td><td align="center">|</td></tr><tr><td align="center">221</td><td align="center">]}</td></tr><tr><td align="center">222</td><td align="center">‘“</td></tr></tbody></table><p>多媒体键：</p><table><thead><tr><th align="center">KeyCode</th><th align="center">按键</th></tr></thead><tbody><tr><td align="center">170</td><td align="center">搜索</td></tr><tr><td align="center">171</td><td align="center">收藏</td></tr><tr><td align="center">172</td><td align="center">浏览器</td></tr><tr><td align="center">173</td><td align="center">静音</td></tr><tr><td align="center">174</td><td align="center">音量减</td></tr><tr><td align="center">115</td><td align="center">音量加</td></tr><tr><td align="center">179</td><td align="center">停止</td></tr><tr><td align="center">180</td><td align="center">邮件</td></tr></tbody></table><h1 id="java-util-regex-ASCII"><a href="#java-util-regex-ASCII" class="headerlink" title="java.util.regex.ASCII"></a>java.util.regex.ASCII</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex</span><span class="token punctuation">;</span><span class="token comment">/** * Utility class that implements the standard C ctype functionality. * * @author Hong Zhang */</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ASCII</span> <span class="token punctuation">{</span><span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个不能被继承的、仅有包访问权限的类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UPPER   <span class="token operator">=</span> <span class="token number">0x00000100</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LOWER   <span class="token operator">=</span> <span class="token number">0x00000200</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DIGIT   <span class="token operator">=</span> <span class="token number">0x00000400</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SPACE   <span class="token operator">=</span> <span class="token number">0x00000800</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PUNCT   <span class="token operator">=</span> <span class="token number">0x00001000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CNTRL   <span class="token operator">=</span> <span class="token number">0x00002000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BLANK   <span class="token operator">=</span> <span class="token number">0x00004000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> HEX     <span class="token operator">=</span> <span class="token number">0x00008000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNDER   <span class="token operator">=</span> <span class="token number">0x00010000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ASCII   <span class="token operator">=</span> <span class="token number">0x0000FF00</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ALPHA   <span class="token operator">=</span> <span class="token punctuation">(</span>UPPER<span class="token operator">|</span>LOWER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ALNUM   <span class="token operator">=</span> <span class="token punctuation">(</span>UPPER<span class="token operator">|</span>LOWER<span class="token operator">|</span>DIGIT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> GRAPH   <span class="token operator">=</span> <span class="token punctuation">(</span>PUNCT<span class="token operator">|</span>UPPER<span class="token operator">|</span>LOWER<span class="token operator">|</span>DIGIT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WORD    <span class="token operator">=</span> <span class="token punctuation">(</span>UPPER<span class="token operator">|</span>LOWER<span class="token operator">|</span>UNDER<span class="token operator">|</span>DIGIT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> XDIGIT  <span class="token operator">=</span> <span class="token punctuation">(</span>HEX<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ctype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 00 (NUL) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 01 (SOH) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 02 (STX) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 03 (ETX) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 04 (EOT) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 05 (ENQ) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 06 (ACK) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 07 (BEL) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 08 (BS)  */</span>    SPACE<span class="token operator">+</span>CNTRL<span class="token operator">+</span>BLANK<span class="token punctuation">,</span>      <span class="token comment">/* 09 (HT)  */</span>    SPACE<span class="token operator">+</span>CNTRL<span class="token punctuation">,</span>            <span class="token comment">/* 0A (LF)  */</span>    SPACE<span class="token operator">+</span>CNTRL<span class="token punctuation">,</span>            <span class="token comment">/* 0B (VT)  */</span>    SPACE<span class="token operator">+</span>CNTRL<span class="token punctuation">,</span>            <span class="token comment">/* 0C (FF)  */</span>    SPACE<span class="token operator">+</span>CNTRL<span class="token punctuation">,</span>            <span class="token comment">/* 0D (CR)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 0E (SI)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 0F (SO)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 10 (DLE) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 11 (DC1) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 12 (DC2) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 13 (DC3) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 14 (DC4) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 15 (NAK) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 16 (SYN) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 17 (ETB) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 18 (CAN) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 19 (EM)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 1A (SUB) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 1B (ESC) */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 1C (FS)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 1D (GS)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 1E (RS)  */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 1F (US)  */</span>    SPACE<span class="token operator">+</span>BLANK<span class="token punctuation">,</span>            <span class="token comment">/* 20 SPACE */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 21 !     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 22 "     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 23 #     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 24 $     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 25 %     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 26 &amp;     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 27 '     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 28 (     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 29 )     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 2A *     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 2B +     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 2C ,     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 2D -     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 2E .     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 2F /     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span>            <span class="token comment">/* 30 0     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>            <span class="token comment">/* 31 1     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>            <span class="token comment">/* 32 2     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>            <span class="token comment">/* 33 3     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span>            <span class="token comment">/* 34 4     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span>            <span class="token comment">/* 35 5     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">,</span>            <span class="token comment">/* 36 6     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span>            <span class="token comment">/* 37 7     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>            <span class="token comment">/* 38 8     */</span>    DIGIT<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">,</span>            <span class="token comment">/* 39 9     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 3A :     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 3B ;     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 3C &lt;     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 3D =     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 3E &gt;     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 3F ?     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 40 @     */</span>    UPPER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span>           <span class="token comment">/* 41 A     */</span>    UPPER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">,</span>           <span class="token comment">/* 42 B     */</span>    UPPER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">,</span>           <span class="token comment">/* 43 C     */</span>    UPPER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">,</span>           <span class="token comment">/* 44 D     */</span>    UPPER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">14</span><span class="token punctuation">,</span>           <span class="token comment">/* 45 E     */</span>    UPPER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">,</span>           <span class="token comment">/* 46 F     */</span>    UPPER<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span>               <span class="token comment">/* 47 G     */</span>    UPPER<span class="token operator">+</span><span class="token number">17</span><span class="token punctuation">,</span>               <span class="token comment">/* 48 H     */</span>    UPPER<span class="token operator">+</span><span class="token number">18</span><span class="token punctuation">,</span>               <span class="token comment">/* 49 I     */</span>    UPPER<span class="token operator">+</span><span class="token number">19</span><span class="token punctuation">,</span>               <span class="token comment">/* 4A J     */</span>    UPPER<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">,</span>               <span class="token comment">/* 4B K     */</span>    UPPER<span class="token operator">+</span><span class="token number">21</span><span class="token punctuation">,</span>               <span class="token comment">/* 4C L     */</span>    UPPER<span class="token operator">+</span><span class="token number">22</span><span class="token punctuation">,</span>               <span class="token comment">/* 4D M     */</span>    UPPER<span class="token operator">+</span><span class="token number">23</span><span class="token punctuation">,</span>               <span class="token comment">/* 4E N     */</span>    UPPER<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">,</span>               <span class="token comment">/* 4F O     */</span>    UPPER<span class="token operator">+</span><span class="token number">25</span><span class="token punctuation">,</span>               <span class="token comment">/* 50 P     */</span>    UPPER<span class="token operator">+</span><span class="token number">26</span><span class="token punctuation">,</span>               <span class="token comment">/* 51 Q     */</span>    UPPER<span class="token operator">+</span><span class="token number">27</span><span class="token punctuation">,</span>               <span class="token comment">/* 52 R     */</span>    UPPER<span class="token operator">+</span><span class="token number">28</span><span class="token punctuation">,</span>               <span class="token comment">/* 53 S     */</span>    UPPER<span class="token operator">+</span><span class="token number">29</span><span class="token punctuation">,</span>               <span class="token comment">/* 54 T     */</span>    UPPER<span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">,</span>               <span class="token comment">/* 55 U     */</span>    UPPER<span class="token operator">+</span><span class="token number">31</span><span class="token punctuation">,</span>               <span class="token comment">/* 56 V     */</span>    UPPER<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">,</span>               <span class="token comment">/* 57 W     */</span>    UPPER<span class="token operator">+</span><span class="token number">33</span><span class="token punctuation">,</span>               <span class="token comment">/* 58 X     */</span>    UPPER<span class="token operator">+</span><span class="token number">34</span><span class="token punctuation">,</span>               <span class="token comment">/* 59 Y     */</span>    UPPER<span class="token operator">+</span><span class="token number">35</span><span class="token punctuation">,</span>               <span class="token comment">/* 5A Z     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 5B [     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 5C \     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 5D ]     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 5E ^     */</span>    PUNCT<span class="token operator">|</span>UNDER<span class="token punctuation">,</span>            <span class="token comment">/* 5F _     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 60 `     */</span>    LOWER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span>           <span class="token comment">/* 61 a     */</span>    LOWER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">,</span>           <span class="token comment">/* 62 b     */</span>    LOWER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">,</span>           <span class="token comment">/* 63 c     */</span>    LOWER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">,</span>           <span class="token comment">/* 64 d     */</span>    LOWER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">14</span><span class="token punctuation">,</span>           <span class="token comment">/* 65 e     */</span>    LOWER<span class="token operator">+</span>HEX<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">,</span>           <span class="token comment">/* 66 f     */</span>    LOWER<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span>               <span class="token comment">/* 67 g     */</span>    LOWER<span class="token operator">+</span><span class="token number">17</span><span class="token punctuation">,</span>               <span class="token comment">/* 68 h     */</span>    LOWER<span class="token operator">+</span><span class="token number">18</span><span class="token punctuation">,</span>               <span class="token comment">/* 69 i     */</span>    LOWER<span class="token operator">+</span><span class="token number">19</span><span class="token punctuation">,</span>               <span class="token comment">/* 6A j     */</span>    LOWER<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">,</span>               <span class="token comment">/* 6B k     */</span>    LOWER<span class="token operator">+</span><span class="token number">21</span><span class="token punctuation">,</span>               <span class="token comment">/* 6C l     */</span>    LOWER<span class="token operator">+</span><span class="token number">22</span><span class="token punctuation">,</span>               <span class="token comment">/* 6D m     */</span>    LOWER<span class="token operator">+</span><span class="token number">23</span><span class="token punctuation">,</span>               <span class="token comment">/* 6E n     */</span>    LOWER<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">,</span>               <span class="token comment">/* 6F o     */</span>    LOWER<span class="token operator">+</span><span class="token number">25</span><span class="token punctuation">,</span>               <span class="token comment">/* 70 p     */</span>    LOWER<span class="token operator">+</span><span class="token number">26</span><span class="token punctuation">,</span>               <span class="token comment">/* 71 q     */</span>    LOWER<span class="token operator">+</span><span class="token number">27</span><span class="token punctuation">,</span>               <span class="token comment">/* 72 r     */</span>    LOWER<span class="token operator">+</span><span class="token number">28</span><span class="token punctuation">,</span>               <span class="token comment">/* 73 s     */</span>    LOWER<span class="token operator">+</span><span class="token number">29</span><span class="token punctuation">,</span>               <span class="token comment">/* 74 t     */</span>    LOWER<span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">,</span>               <span class="token comment">/* 75 u     */</span>    LOWER<span class="token operator">+</span><span class="token number">31</span><span class="token punctuation">,</span>               <span class="token comment">/* 76 v     */</span>    LOWER<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">,</span>               <span class="token comment">/* 77 w     */</span>    LOWER<span class="token operator">+</span><span class="token number">33</span><span class="token punctuation">,</span>               <span class="token comment">/* 78 x     */</span>    LOWER<span class="token operator">+</span><span class="token number">34</span><span class="token punctuation">,</span>               <span class="token comment">/* 79 y     */</span>    LOWER<span class="token operator">+</span><span class="token number">35</span><span class="token punctuation">,</span>               <span class="token comment">/* 7A z     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 7B {     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 7C |     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 7D }     */</span>    PUNCT<span class="token punctuation">,</span>                  <span class="token comment">/* 7E ~     */</span>    CNTRL<span class="token punctuation">,</span>                  <span class="token comment">/* 7F (DEL) */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>index</th><th>value</th></tr></thead><tbody><tr><td>0 (00)</td><td>0x00002000</td></tr><tr><td>1 (01)</td><td>0x00002000</td></tr><tr><td>2 (02)</td><td>0x00002000</td></tr><tr><td>3 (03)</td><td>0x00002000</td></tr><tr><td>4 (04)</td><td>0x00002000</td></tr><tr><td>5 (05)</td><td>0x00002000</td></tr><tr><td>6 (06)</td><td>0x00002000</td></tr><tr><td>7 (07)</td><td>0x00002000</td></tr><tr><td>8 (08)</td><td>0x00002000</td></tr><tr><td>9 (09)</td><td>0x00006800</td></tr><tr><td>10 (0A)</td><td>0x00002800</td></tr><tr><td>11 (0B)</td><td>0x00002800</td></tr><tr><td>12 (0C)</td><td>0x00002800</td></tr><tr><td>13 (0D)</td><td>0x00002800</td></tr><tr><td>14 (0E)</td><td>0x00002000</td></tr><tr><td>15 (0F)</td><td>0x00002000</td></tr><tr><td>16 (10)</td><td>0x00002000</td></tr><tr><td>17 (11)</td><td>0x00002000</td></tr><tr><td>18 (12)</td><td>0x00002000</td></tr><tr><td>19 (13)</td><td>0x00002000</td></tr><tr><td>20 (14)</td><td>0x00002000</td></tr><tr><td>21 (15)</td><td>0x00002000</td></tr><tr><td>22 (16)</td><td>0x00002000</td></tr><tr><td>23 (17)</td><td>0x00002000</td></tr><tr><td>24 (18)</td><td>0x00002000</td></tr><tr><td>25 (19)</td><td>0x00002000</td></tr><tr><td>26 (1A)</td><td>0x00002000</td></tr><tr><td>27 (1B)</td><td>0x00002000</td></tr><tr><td>28 (1C)</td><td>0x00002000</td></tr><tr><td>29 (1D)</td><td>0x00002000</td></tr><tr><td>30 (1E)</td><td>0x00002000</td></tr><tr><td>31 (1F)</td><td>0x00002000</td></tr><tr><td>32 (20)</td><td>0x00004800</td></tr><tr><td>33 (21)</td><td>0x00001000</td></tr><tr><td>34 (22)</td><td>0x00001000</td></tr><tr><td>35 (23)</td><td>0x00001000</td></tr><tr><td>36 (24)</td><td>0x00001000</td></tr><tr><td>37 (25)</td><td>0x00001000</td></tr><tr><td>38 (26)</td><td>0x00001000</td></tr><tr><td>39 (27)</td><td>0x00001000</td></tr><tr><td>40 (28)</td><td>0x00001000</td></tr><tr><td>41 (29)</td><td>0x00001000</td></tr><tr><td>42 (2A)</td><td>0x00001000</td></tr><tr><td>43 (2B)</td><td>0x00001000</td></tr><tr><td>44 (2C)</td><td>0x00001000</td></tr><tr><td>45 (2D)</td><td>0x00001000</td></tr><tr><td>46 (2E)</td><td>0x00001000</td></tr><tr><td>47 (2F)</td><td>0x00001000</td></tr><tr><td>48 (30)</td><td>0x00008400</td></tr><tr><td>49 (31)</td><td>0x00008401</td></tr><tr><td>50 (32)</td><td>0x00008402</td></tr><tr><td>51 (33)</td><td>0x00008403</td></tr><tr><td>52 (34)</td><td>0x00008404</td></tr><tr><td>53 (35)</td><td>0x00008405</td></tr><tr><td>54 (36)</td><td>0x00008406</td></tr><tr><td>55 (37)</td><td>0x00008407</td></tr><tr><td>56 (38)</td><td>0x00008408</td></tr><tr><td>57 (39)</td><td>0x00008409</td></tr><tr><td>58 (3A)</td><td>0x00001000</td></tr><tr><td>59 (3B)</td><td>0x00001000</td></tr><tr><td>60 (3C)</td><td>0x00001000</td></tr><tr><td>61 (3D)</td><td>0x00001000</td></tr><tr><td>62 (3E)</td><td>0x00001000</td></tr><tr><td>63 (3F)</td><td>0x00001000</td></tr><tr><td>64 (40)</td><td>0x00001000</td></tr><tr><td>65 (41)</td><td>0x0000810A</td></tr><tr><td>66 (42)</td><td>0x0000810B</td></tr><tr><td>67 (43)</td><td>0x0000810C</td></tr><tr><td>68 (44)</td><td>0x0000810D</td></tr><tr><td>69 (45)</td><td>0x0000810E</td></tr><tr><td>70 (46)</td><td>0x0000810F</td></tr><tr><td>71 (47)</td><td>0x00000110</td></tr><tr><td>72 (48)</td><td>0x00000111</td></tr><tr><td>73 (49)</td><td>0x00000112</td></tr><tr><td>74 (4A)</td><td>0x00000113</td></tr><tr><td>75 (4B)</td><td>0x00000114</td></tr><tr><td>76 (4C)</td><td>0x00000115</td></tr><tr><td>77 (4D)</td><td>0x00000116</td></tr><tr><td>78 (4E)</td><td>0x00000117</td></tr><tr><td>79 (4F)</td><td>0x00000118</td></tr><tr><td>80 (50)</td><td>0x00000119</td></tr><tr><td>81 (51)</td><td>0x0000011A</td></tr><tr><td>82 (52)</td><td>0x0000011B</td></tr><tr><td>83 (53)</td><td>0x0000011C</td></tr><tr><td>84 (54)</td><td>0x0000011D</td></tr><tr><td>85 (55)</td><td>0x0000011E</td></tr><tr><td>86 (56)</td><td>0x0000011F</td></tr><tr><td>87 (57)</td><td>0x00000120</td></tr><tr><td>88 (58)</td><td>0x00000121</td></tr><tr><td>89 (59)</td><td>0x00000122</td></tr><tr><td>90 (5A)</td><td>0x00000123</td></tr><tr><td>91 (5B)</td><td>0x00001000</td></tr><tr><td>92 (5C)</td><td>0x00001000</td></tr><tr><td>93 (5D)</td><td>0x00001000</td></tr><tr><td>94 (5E)</td><td>0x00001000</td></tr><tr><td>95 (5F)</td><td>0x00001100</td></tr><tr><td>96 (60)</td><td>0x00001000</td></tr><tr><td>97 (61)</td><td>0x0000820A</td></tr><tr><td>98 (62)</td><td>0x0000820B</td></tr><tr><td>99 (63)</td><td>0x0000820C</td></tr><tr><td>100 (64)</td><td>0x0000820D</td></tr><tr><td>101 (65)</td><td>0x0000820E</td></tr><tr><td>102 (66)</td><td>0x0000820F</td></tr><tr><td>103 (67)</td><td>0x00000210</td></tr><tr><td>104 (68)</td><td>0x00000211</td></tr><tr><td>105 (69)</td><td>0x00000212</td></tr><tr><td>106 (6A)</td><td>0x00000213</td></tr><tr><td>107 (6B)</td><td>0x00000214</td></tr><tr><td>108 (6C)</td><td>0x00000215</td></tr><tr><td>109 (6D)</td><td>0x00000216</td></tr><tr><td>110 (6E)</td><td>0x00000217</td></tr><tr><td>111 (6F)</td><td>0x00000218</td></tr><tr><td>112 (70)</td><td>0x00000219</td></tr><tr><td>113 (71)</td><td>0x0000021A</td></tr><tr><td>114 (72)</td><td>0x0000021B</td></tr><tr><td>115 (73)</td><td>0x0000021C</td></tr><tr><td>116 (74)</td><td>0x0000021D</td></tr><tr><td>117 (75)</td><td>0x0000021E</td></tr><tr><td>118 (76)</td><td>0x0000021F</td></tr><tr><td>119 (77)</td><td>0x00000220</td></tr><tr><td>120 (78)</td><td>0x00000221</td></tr><tr><td>121 (79)</td><td>0x00000222</td></tr><tr><td>122 (7A)</td><td>0x00000223</td></tr><tr><td>123 (7B)</td><td>0x00001000</td></tr><tr><td>124 (7C)</td><td>0x00001000</td></tr><tr><td>125 (7D)</td><td>0x00001000</td></tr><tr><td>126 (7E)</td><td>0x00001000</td></tr><tr><td>127 (7F)</td><td>0x00002000</td></tr></tbody></table><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><ol><li>最高位的说明：ASCII码128个，用<strong>7位</strong>二进制数可表示，第8位（最高位）是<strong>奇偶校验位</strong>，用于纠错。</li><li>Windows系统上能运行的Python程序，传到Linux系统上就无法运行，<code>python main.py</code>报错：<font color="red">SyntaxError: Non-ASCII character ‘\xe8’ in file main.py on line 7, but no encoding declared; see <a href="http://python.org/dev/peps/pep-0263/">http://python.org/dev/peps/pep-0263/</a> for details</font>。解决方法是：在文件头添加一行：<code># -*- coding: utf-8 -*-</code>，即可正常运行。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机科学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASCII </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
